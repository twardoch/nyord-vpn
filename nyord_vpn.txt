This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: _private, .specstory, .venv
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.cursor/
  rules/
    filetree.mdc
    nyord-vpn.mdc
.github/
  workflows/
    push.yml
    release.yml
src/
  nyord_vpn/
    api/
      api.py
      v1_countries.json
      v1_countries.py
      v1_groups.json
      v1_groups.py
      v1_recommendations.json
      v1_recommendations.py
      v1_technologies.json
      v1_technologies.py
      v2_servers.json
      v2_servers.py
    core/
      __init__.py
      api.py
      base.py
      client.py
    data/
      .specstory/
        history/
          .what-is-this.md
      countries.json
      country_ids.json
    network/
      __init__.py
      country.py
      server.py
      vpn_commands.py
      vpn.py
    scripts/
      __init__.py
      update_countries.py
    storage/
      models.py
      state.py
    utils/
      __init__.py
      connection.py
      templates.py
      utils.py
    __init__.py
    __main__.py
    exceptions.py
tests/
  integration/
    __init__.py
    test_config_loading.py
    test_connection.py
    test_errors.py
    test_validation_integration.py
  __init__.py
  conftest.py
  test_client.py
  test_legacy_api.py
  test_package.py
  test_server_manager.py
.gitignore
.pre-commit-config.yaml
cleanup.py
LICENSE
package.toml
pyproject.toml
README.md
TODO.md
uv.lock

================================================================
Files
================================================================

================
File: .cursor/rules/filetree.mdc
================
---
description: File tree of the project
globs: 
---
[ 896]  .
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [7.2K]  filetree.mdc
│       └── [4.0K]  nyord-vpn.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 532]  .pre-commit-config.yaml
├── [ 160]  .specstory
│   ├── [1.6K]  history
│   │   ├── [2.0K]  .what-is-this.md
│   │   ├── [452K]  2025-02-22_19-00-comparison-of-njord-and-nyord-vpn-implementations.md
│   │   ├── [ 913]  2025-02-22_19-00-fixing-logging-format-error-in-python.md
│   │   ├── [167K]  2025-02-22_20-24-managing-todos-and-development-tasks.md
│   │   ├── [8.3K]  2025-02-22_21-08-final-decision-and-todo-update.md
│   │   ├── [203K]  2025-02-22_21-21-git-management-and-todo-updates.md
│   │   ├── [ 39K]  2025-02-22_21-59-git-management-and-todo-updates.md
│   │   ├── [363K]  2025-02-22_22-27-git-management-and-todo-updates.md
│   │   ├── [ 52K]  2025-02-22_23-26-nordvpn-client-implementation-discussion.md
│   │   ├── [137K]  2025-02-22_23-35-task-management-and-project-update.md
│   │   ├── [ 58K]  2025-02-22_23-55-updating-todo-md-and-project-management.md
│   │   ├── [ 61K]  2025-02-23_00-02-task-management-and-collaboration-strategy.md
│   │   ├── [165K]  2025-02-23_00-09-updating-todo-md-and-task-prioritization.md
│   │   ├── [217K]  2025-02-23_01-01-codebase-analysis-and-optimization-discussion.md
│   │   ├── [101K]  2025-02-23_01-43-importerror-in-nyord-vpn-module.md
│   │   ├── [ 53K]  2025-02-23_01-55-understanding-vpn-cli-commands-and-issues.md
│   │   ├── [216K]  2025-02-23_02-15-python-virtual-environment-setup-and-testing.md
│   │   ├── [ 26K]  2025-02-23_02-34-vpn-connection-troubleshooting-with-python.md
│   │   ├── [189K]  2025-02-23_04-09-executing-python-vpn-connection-command.md
│   │   ├── [156K]  2025-02-23_04-56-vpn-connection-troubleshooting.md
│   │   ├── [ 44K]  2025-02-23_05-42-vpn-connection-status-troubleshooting.md
│   │   ├── [2.9K]  2025-02-23_05-54-comparing-vpn-management-tools-openpyn-vs-nyord.md
│   │   ├── [ 16K]  2025-02-23_06-04-untitled.md
│   │   ├── [ 16K]  2025-02-23_06-09-improving-nyord-vpn-server-selection-and-setup.md
│   │   ├── [ 76K]  2025-02-23_06-46-implementing-todo-items-in-project.md
│   │   ├── [156K]  2025-02-23_06-52-code-optimization-and-refactoring-discussion.md
│   │   ├── [227K]  2025-02-23_07-19-vpn-connection-troubleshooting-log.md
│   │   ├── [673K]  2025-02-23_07-30-vpn-connection-issues-and-server-selection-errors.md
│   │   ├── [432K]  2025-02-23_07-55-vpn-client-initialization-and-connection-logs.md
│   │   ├── [359K]  2025-02-23_08-03-nordvpn-client-initialization-logs.md
│   │   ├── [410K]  2025-02-23_08-18-vpn-client-frustrations-and-logs.md
│   │   ├── [6.0K]  2025-02-23_23-48-hierarchical-representation-of-codebase-structure.md
│   │   ├── [7.9K]  2025-02-23_23-48-nordvpn-client-codebase-organization.md
│   │   ├── [ 93K]  2025-02-24_00-09-code-analysis-and-docstring-enhancement.md
│   │   ├── [2.8K]  2025-02-24_01-16-vpn-configuration-file-retrieval-and-security.md
│   │   ├── [ 70K]  2025-02-24_01-29-improving-nyord-vpn-configuration-method.md
│   │   ├── [ 42K]  2025-02-24_01-47-openvpn-configuration-and-debugging.md
│   │   ├── [ 95K]  2025-02-24_02-10-vpn-connection-error-troubleshooting.md
│   │   ├── [ 58K]  2025-02-24_02-47-vpn-connection-troubleshooting-openvpn-auth-failure.md
│   │   ├── [ 12K]  2025-02-24_03-15-questioning-openvpn-command-location-in-code.md
│   │   ├── [ 20K]  2025-02-24_03-31-untitled.md
│   │   ├── [184K]  2025-02-24_03-36-zip-extraction-to-cache-directory.md
│   │   ├── [224K]  2025-02-24_04-13-vpn-connection-management-and-ip-tracking-issues.md
│   │   ├── [1.8M]  2025-02-24_04-43-vpn-connection-debugging-and-ip-verification.md
│   │   ├── [168K]  2025-02-24_05-02-optimizing-vpn-config-extraction-process.md
│   │   ├── [579K]  2025-02-24_05-33-vpn-connection-troubleshooting-and-debugging.md
│   │   ├── [287K]  2025-02-24_06-17-vpn-connection-management-with-nyord-vpn.md
│   │   ├── [210K]  2025-02-24_06-58-vpn-connection-troubleshooting.md
│   │   ├── [105K]  2025-02-24_07-15-vpn-connection-troubleshooting-and-improvements.md
│   │   └── [6.2K]  2025-02-24_07-20-fixing-import-error-in-vpn-module.md
│   └── [5.8M]  history.txt
├── [1.0K]  LICENSE
├── [5.5K]  README.md
├── [ 11K]  TODO.md
├── [ 12K]  cleanup.py
├── [  96]  dist
│   └── [   1]  .gitkeep
├── [310K]  nyord_vpn.txt
├── [ 426]  package.toml
├── [6.9K]  pyproject.toml
├── [ 192]  src
│   ├── [   0]  __init__.py
│   └── [ 416]  nyord_vpn
│       ├── [2.3K]  __init__.py
│       ├── [2.5K]  __main__.py
│       ├── [ 256]  core
│       │   ├── [ 178]  __init__.py
│       │   ├── [9.1K]  api.py
│       │   ├── [6.4K]  base.py
│       │   └── [ 13K]  client.py
│       ├── [ 128]  data
│       │   ├── [ 93K]  countries.json
│       │   └── [ 963]  country_ids.json
│       ├── [7.2K]  exceptions.py
│       ├── [ 288]  network
│       │   ├── [ 204]  __init__.py
│       │   ├── [1.0K]  country.py
│       │   ├── [ 38K]  server.py
│       │   ├── [ 42K]  vpn.py
│       │   └── [4.7K]  vpn_commands.py
│       ├── [ 192]  scripts
│       │   ├── [  37]  __init__.py
│       │   └── [3.0K]  update_countries.py
│       ├── [ 224]  storage
│       │   ├── [   0]  __init__.py
│       │   ├── [8.8K]  models.py
│       │   └── [4.0K]  state.py
│       └── [ 288]  utils
│           ├── [ 194]  __init__.py
│           ├── [3.8K]  connection.py
│           ├── [  64]  data
│           ├── [ 12K]  templates.py
│           └── [9.4K]  utils.py
├── [ 320]  tests
│   ├── [  40]  __init__.py
│   ├── [2.6K]  conftest.py
│   ├── [ 288]  integration
│   │   ├── [  39]  __init__.py
│   │   ├── [ 12K]  test_config_loading.py
│   │   ├── [2.9K]  test_connection.py
│   │   ├── [9.3K]  test_errors.py
│   │   └── [1.4K]  test_validation_integration.py
│   ├── [2.0K]  test_client.py
│   ├── [3.5K]  test_legacy_api.py
│   └── [ 159]  test_package.py
└── [264K]  uv.lock

19 directories, 100 files

================
File: .cursor/rules/nyord-vpn.mdc
================
---
description: nyord-vpn
globs: *.py
---
# nyord-vpn

A modern Python client for NordVPN with automatic API fallback support, providing both a CLI interface and a Python library.

```bash
# Install system requirements first
brew install openvpn  # macOS
sudo apt install openvpn  # Ubuntu/Debian
sudo dnf install openvpn  # Fedora/RHEL

# Then install and use the package
pip install nyord-vpn
export NORD_USER="username" NORD_PASSWORD="password"
nyord-vpn connect de  # Connect to a German VPN
nyord-vpn status  # Check status
nyord-vpn disconnect  # Disconnect
```

## DEVELOPMENT

After each set of changes, update @TODO.md with what you've done (`- [x] `). Upgrade priorities for NEXT TODO (`- [!]`), re-think the normal TODO (`- [ ] `)

Periodically do:

```
uv venv; source .venv/bin/activate; uv pip install -e .[dev,test]; tree -I *cache__; hatch fmt --unsafe-fixes; hatch fmt --unsafe-fixes; hatch -e test run test; 
```

and react to the results. Use `uv pip...` instead of `pip...` if needed. 

## Working modality

You'll lead two experts: "Ideot" for creative, unorthodox ideas and "Critin" to critique flawed thinking and moderate for balanced discussions. The three of you shall illuminate knowledge with concise, beautiful responses, process methodically for clear answers, collaborate step-by-step, sharing thoughts and adapting. If errors are found, step back and focus on accuracy and progress.

Independently tackle challenges systematically, being adaptable and resourceful. Research deeply using all tools, revising to ensure conclusive, exhaustive, insightful results. When you’re finished, print "Wait, but" to go back, think & reflect, revise & improvement what you’ve done (but don’t invent functionality freely). Repeat this. Focus on minimal viable next versions of the code. Ship often and early. 

## General coding principles

Verify info. No assumptions. No apologies. No major invented changes. No unneeded confirmations or checks. Keep existing code and structures unless they need to change. No unnecessary updates or current implementation discussion. Avoid magic numbers, handle edge cases, use assertions to validate assumptions and catch potential errors early.

Every code can fail. Write code that fails gracefully and is UX friendly: uses retries (within reason), does not make stupid assumptions, tests successes, uses fallbacks and backoffs, and then, if the code needs to message the user, be clear and suggest to the user the next steps. Don't prompt the user to do something that the computer can obviously do. The code should ask the user only if there is a real decision to be made. And you should ask me only if a real decision is needed.  

## Keep track of paths

In every source file you create or edit, always maintain the up-to-date `this_file` record that shows the path of the current file relative to the root of the project. Place the `this_file` record near the top of the file, as a comment after the shebangs, or in the YAML Markdown frontmatter. Use these records for orientation. 

## Follow this style for Python

Follow PEP 8. Write clear names. Keep it simple (PEP 20). Use type hints, imperative docstrings (PEP 257), f-strings, and structural pattern matching. Extract repeated logic. Handle errors. Keep functions small. Prefer flat structures. Use pathlib, pydantic as needed. Write maintainable code. 

EVEN IF YOU’RE NOT prompted, always write a "verbose" mode logugu-based logging for debug purposes, write explanatory docstrings and comments that not only explain what a given item (module, function, method) does, but also why it does it, and where and how it's used elsewhere in the code. 

ONLY IF YOU ARE prompted, extend existing features in a way that adds complexity, or refactor in a way that may break things. Remember: minimal viable next version is always our goal. IF NOT PROMPTED, do NOT make such changes. 

For CLI Python scripts, use fire & rich, and start the script with 

```
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["PKG1", "PKG2"]
# ///
# this_file: PATH_TO_CURRENT_FILE
```

================
File: .github/workflows/push.yml
================
name: Build & Test

on:
  push:
    branches: [main]
    tags-ignore: ["v*"]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run Ruff lint
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "check --output-format=github"

      - name: Run Ruff Format
        uses: astral-sh/ruff-action@v3
        with:
          version: "latest"
          args: "format --check --respect-gitignore"

  test:
    name: Run Tests
    needs: quality
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        os: [ubuntu-latest]
      fail-fast: true
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: ${{ matrix.python-version }}
          enable-cache: true
          cache-suffix: ${{ matrix.os }}-${{ matrix.python-version }}

      - name: Install test dependencies
        run: |
          uv pip install --system --upgrade pip
          uv pip install --system ".[test]"

      - name: Run tests with Pytest
        run: uv run pytest -n auto --maxfail=1 --disable-warnings --cov-report=xml --cov-config=pyproject.toml --cov=src/nyord_vpn --cov=tests tests/

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}-${{ matrix.os }}
          path: coverage.xml

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Upload distribution artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: dist/
          retention-days: 5

================
File: .github/workflows/release.yml
================
name: Release

on:
  push:
    tags: ["v*"]

permissions:
  contents: write
  id-token: write

jobs:
  release:
    name: Release to PyPI
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/nyord-vpn
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install UV
        uses: astral-sh/setup-uv@v5
        with:
          version: "latest"
          python-version: "3.12"
          enable-cache: true

      - name: Install build tools
        run: uv pip install build hatchling hatch-vcs

      - name: Build distributions
        run: uv run python -m build --outdir dist

      - name: Verify distribution files
        run: |
          ls -la dist/
          test -n "$(find dist -name '*.whl')" || (echo "Wheel file missing" && exit 1)
          test -n "$(find dist -name '*.tar.gz')" || (echo "Source distribution missing" && exit 1)

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

================
File: src/nyord_vpn/api/api.py
================
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["pydantic", "requests", "loguru"]
# ///
# this_file: src/nyord_vpn/api/api.py

"""NordVPN API client.

This module provides a unified interface to all NordVPN API endpoints.
It aggregates functionality from both v1 and v2 API versions.
"""

from typing import cast
from loguru import logger

import v1_recommendations
import v1_technologies
import v1_groups
import v1_countries
import v2_servers

# Type aliases for clarity
ServerTuple = tuple[
    list[v2_servers.Server],
    list[v2_servers.Group],
    list[v2_servers.Service],
    list[v2_servers.Location],
    list[v2_servers.Technology]
]

class NordVPNAPI:
    """Unified NordVPN API client.

    This class provides a single interface to access all NordVPN API endpoints,
    both v1 and v2. It handles initialization of individual clients and provides
    convenience methods for common operations.
    """

    def __init__(self, timeout: int = 10) -> None:
        """Initialize the API client.

        Args:
            timeout: Request timeout in seconds for all API calls.

        """
        self.timeout = timeout

        # Initialize individual clients
        self.recommendations = v1_recommendations.NordVPNRecommendationsV1(timeout=timeout)
        self.technologies = v1_technologies.NordVPNTechnologiesV1(timeout=timeout)
        self.groups = v1_groups.NordVPNGroupsV1(timeout=timeout)
        self.countries = v1_countries.NordVPNCountriesV1(timeout=timeout)
        self.servers = v2_servers.NordVPNServersV2(timeout=timeout)

        # Cache for API responses
        self._recommended_servers: list[v1_recommendations.RecommendedServer] | None = None
        self._technologies: list[v1_technologies.Technology] | None = None
        self._groups: list[v1_groups.Group] | None = None
        self._countries: list[v1_countries.Country] | None = None
        self._servers: ServerTuple | None = None

    def get_recommended_servers(self, refresh: bool = False) -> list[v1_recommendations.RecommendedServer]:
        """Get recommended servers.

        Args:
            refresh: Whether to force refresh the cache.

        Returns:
            List of recommended servers.

        """
        if self._recommended_servers is None or refresh:
            self._recommended_servers = self.recommendations.fetch_recommendations()
        return self._recommended_servers

    def get_technologies(self, refresh: bool = False) -> list[v1_technologies.Technology]:
        """Get available VPN technologies.

        Args:
            refresh: Whether to force refresh the cache.

        Returns:
            List of VPN technologies.

        """
        if self._technologies is None or refresh:
            self._technologies = self.technologies.fetch_technologies()
        return self._technologies

    def get_groups(self, refresh: bool = False) -> list[v1_groups.Group]:
        """Get server groups.

        Args:
            refresh: Whether to force refresh the cache.

        Returns:
            List of server groups.

        """
        if self._groups is None or refresh:
            self._groups = self.groups.fetch_groups()
        return self._groups

    def get_countries(self, refresh: bool = False) -> list[v1_countries.Country]:
        """Get countries with server information.

        Args:
            refresh: Whether to force refresh the cache.

        Returns:
            List of countries.

        """
        if self._countries is None or refresh:
            self._countries = self.countries.fetch_countries()
        return self._countries

    def get_servers(self, refresh: bool = False) -> ServerTuple:
        """Get detailed server information.

        Args:
            refresh: Whether to force refresh the cache.

        Returns:
            Tuple of (servers, groups, services, locations, technologies).

        """
        if self._servers is None or refresh:
            result = self.servers.fetch_all()
            self._servers = cast(ServerTuple, result)
        return self._servers

    def find_best_server(self, country_code: str | None = None, group_identifier: str | None = None) -> v1_recommendations.RecommendedServer:
        """Find the best server based on load and optional filters.

        Args:
            country_code: Optional two-letter country code to filter by.
            group_identifier: Optional group identifier to filter by.

        Returns:
            The recommended server with the lowest load matching the criteria.

        Raises:
            ValueError: If no servers match the criteria.

        """
        servers = self.get_recommended_servers()

        if country_code:
            servers = [
                server for server in servers
                if server.locations and server.locations[0].country.code.upper() == country_code.upper()
            ]

        if group_identifier:
            servers = [
                server for server in servers
                if any(group.identifier == group_identifier for group in server.groups)
            ]

        if not servers:
            raise ValueError(
                f"No servers found matching criteria: "
                f"country_code={country_code}, group_identifier={group_identifier}"
            )

        return min(servers, key=lambda s: s.load)

    def get_server_stats(self) -> dict:
        """Get statistics about server availability.

        Returns:
            Dictionary containing various statistics about servers.

        """
        countries = self.get_countries()
        servers = self.get_servers()[0]
        groups = self.get_groups()

        return {
            "total_countries": len(countries),
            "total_servers": len(servers),
            "total_groups": len(groups),
            "servers_by_country": {
                country.code: country.server_count
                for country in sorted(countries, key=lambda x: x.server_count, reverse=True)
            },
            "servers_by_group": {
                group.identifier: len([
                    server for server in servers
                    if any(g.identifier == group.identifier for g in server.groups)
                ])
                for group in groups
            }
        }


if __name__ == "__main__":
    # Example usage
    api = NordVPNAPI()
    try:
        # Get server statistics
        stats = api.get_server_stats()
        logger.info("\nNordVPN Server Statistics:")
        logger.info(f"Total Countries: {stats['total_countries']}")
        logger.info(f"Total Servers: {stats['total_servers']}")
        logger.info(f"Total Groups: {stats['total_groups']}")

        logger.info("\nTop 5 Countries by Server Count:")
        for code, count in list(stats["servers_by_country"].items())[:5]:
            logger.info(f"{code}: {count} servers")

        logger.info("\nServers by Group:")
        for group, count in stats["servers_by_group"].items():
            logger.info(f"{group}: {count} servers")

        # Find best server example
        try:
            best_us_p2p = api.find_best_server(country_code="US", group_identifier="legacy_p2p")
            logger.info("\nBest US P2P Server:")
            logger.info(f"Name: {best_us_p2p.name}")
            logger.info(f"Hostname: {best_us_p2p.hostname}")
            logger.info(f"Load: {best_us_p2p.load}%")
        except ValueError as e:
            logger.error(e)

    except Exception as e:
        logger.error(f"Error accessing NordVPN API: {e}")

================
File: src/nyord_vpn/api/v1_countries.json
================
//https://api.nordvpn.com/v1/servers/countries
[{"id":2,"name":"Albania","code":"AL","serverCount":20,"cities":[{"id":308615,"name":"Tirana","latitude":41.3275,"longitude":19.8188889,"dns_name":"tirana","hub_score":0,"serverCount":20}]},{"id":3,"name":"Algeria","code":"DZ","serverCount":4,"cities":[{"id":2438216,"name":"Algiers","latitude":36.7630556,"longitude":3.0505556,"dns_name":"algiers","hub_score":0,"serverCount":4}]},{"id":5,"name":"Andorra","code":"AD","serverCount":4,"cities":[{"id":20,"name":"Andorra la Vella","latitude":42.5,"longitude":1.5166667,"dns_name":"andorra-la-vella","hub_score":0,"serverCount":4}]},{"id":6,"name":"Angola","code":"AO","serverCount":2,"cities":[{"id":351407,"name":"Luanda","latitude":-8.836804,"longitude":13.233174,"dns_name":"luanda","hub_score":0,"serverCount":2}]},{"id":10,"name":"Argentina","code":"AR","serverCount":14,"cities":[{"id":384866,"name":"Buenos Aires","latitude":-34.5875,"longitude":-58.6725,"dns_name":"buenos-aires","hub_score":0,"serverCount":14}]},{"id":11,"name":"Armenia","code":"AM","serverCount":2,"cities":[{"id":322385,"name":"Yerevan","latitude":40.1811111,"longitude":44.5136111,"dns_name":"yerevan","hub_score":0,"serverCount":2}]},{"id":13,"name":"Australia","code":"AU","serverCount":219,"cities":[{"id":452717,"name":"Adelaide","latitude":-34.928661,"longitude":138.598633,"dns_name":"adelaide","hub_score":0,"serverCount":18},{"id":456494,"name":"Brisbane","latitude":-27.47101,"longitude":153.024292,"dns_name":"brisbane","hub_score":0,"serverCount":34},{"id":470813,"name":"Melbourne","latitude":-37.813938,"longitude":144.963425,"dns_name":"melbourne","hub_score":0,"serverCount":56},{"id":475799,"name":"Perth","latitude":-31.95224,"longitude":115.861397,"dns_name":"perth","hub_score":0,"serverCount":34},{"id":479570,"name":"Sydney","latitude":-33.861481,"longitude":151.205475,"dns_name":"sydney","hub_score":0,"serverCount":77}]},{"id":14,"name":"Austria","code":"AT","serverCount":69,"cities":[{"id":448799,"name":"Vienna","latitude":48.2,"longitude":16.366667,"dns_name":"vienna","hub_score":0,"serverCount":69}]},{"id":15,"name":"Azerbaijan","code":"AZ","serverCount":2,"cities":[{"id":490037,"name":"Baku","latitude":40.395278,"longitude":49.882222,"dns_name":"baku","hub_score":0,"serverCount":2}]},{"id":16,"name":"Bahamas","code":"BS","serverCount":5,"cities":[{"id":988382,"name":"Nassau","latitude":25.078056,"longitude":-77.338611,"dns_name":"nassau","hub_score":0,"serverCount":5}]},{"id":17,"name":"Bahrain","code":"BH","serverCount":2,"cities":[{"id":789398,"name":"Manama","latitude":26.2361111,"longitude":50.5830556,"dns_name":"manama","hub_score":0,"serverCount":2}]},{"id":18,"name":"Bangladesh","code":"BD","serverCount":2,"cities":[{"id":594935,"name":"Dhaka","latitude":23.7230556,"longitude":90.4086111,"dns_name":"dhaka","hub_score":0,"serverCount":2}]},{"id":21,"name":"Belgium","code":"BE","serverCount":73,"cities":[{"id":654293,"name":"Brussels","latitude":50.833333,"longitude":4.333333,"dns_name":"brussels","hub_score":0,"serverCount":73}]},{"id":22,"name":"Belize","code":"BZ","serverCount":2,"cities":[{"id":1037459,"name":"Belmopan","latitude":17.25,"longitude":-88.7666667,"dns_name":"belmopan","hub_score":0,"serverCount":2}]},{"id":24,"name":"Bermuda","code":"BM","serverCount":3,"cities":[{"id":809078,"name":"Hamilton","latitude":32.2941667,"longitude":-64.7838889,"dns_name":"hamilton","hub_score":0,"serverCount":3}]},{"id":25,"name":"Bhutan","code":"BT","serverCount":2,"cities":[{"id":989699,"name":"Thimphu","latitude":27.472222,"longitude":89.636111,"dns_name":"thimphu","hub_score":0,"serverCount":2}]},{"id":26,"name":"Bolivia","code":"BO","serverCount":2,"cities":[{"id":838514,"name":"La Paz","latitude":-16.5,"longitude":-68.15,"dns_name":"la-paz","hub_score":0,"serverCount":2}]},{"id":27,"name":"Bosnia and Herzegovina","code":"BA","serverCount":5,"cities":[{"id":548462,"name":"Novi Travnik","latitude":44.1711111,"longitude":17.6575,"dns_name":"novi-travnik","hub_score":0,"serverCount":5}]},{"id":30,"name":"Brazil","code":"BR","serverCount":38,"cities":[{"id":890249,"name":"Sao Paulo","latitude":-23.533333,"longitude":-46.616667,"dns_name":"sao-paulo","hub_score":0,"serverCount":38}]},{"id":32,"name":"Brunei Darussalam","code":"BN","serverCount":2,"cities":[{"id":809132,"name":"Bandar Seri Begawan","latitude":4.8833333,"longitude":114.9333333,"dns_name":"bandar-seri-begawan","hub_score":0,"serverCount":2}]},{"id":33,"name":"Bulgaria","code":"BG","serverCount":30,"cities":[{"id":777368,"name":"Sofia","latitude":42.6833333,"longitude":23.3166667,"dns_name":"sofia","hub_score":0,"serverCount":30}]},{"id":36,"name":"Cambodia","code":"KH","serverCount":2,"cities":[{"id":4658987,"name":"Phnom Penh","latitude":11.55,"longitude":104.9166667,"dns_name":"phnom-penh","hub_score":0,"serverCount":2}]},{"id":38,"name":"Canada","code":"CA","serverCount":343,"cities":[{"id":1048463,"name":"Montreal","latitude":45.5,"longitude":-73.583333,"dns_name":"montreal","hub_score":0,"serverCount":88},{"id":1054250,"name":"Toronto","latitude":43.666667,"longitude":-79.416667,"dns_name":"toronto","hub_score":0,"serverCount":179},{"id":1054610,"name":"Vancouver","latitude":49.25,"longitude":-123.133333,"dns_name":"vancouver","hub_score":0,"serverCount":76}]},{"id":40,"name":"Cayman Islands","code":"KY","serverCount":2,"cities":[{"id":4922303,"name":"George Town","latitude":19.3,"longitude":-81.3833333,"dns_name":"george-town","hub_score":0,"serverCount":2}]},{"id":43,"name":"Chile","code":"CL","serverCount":7,"cities":[{"id":1227092,"name":"Santiago","latitude":-33.45,"longitude":-70.666667,"dns_name":"santiago","hub_score":0,"serverCount":7}]},{"id":47,"name":"Colombia","code":"CO","serverCount":10,"cities":[{"id":1980695,"name":"Bogota","latitude":4.649178,"longitude":-74.062827,"dns_name":"bogota","hub_score":0,"serverCount":10}]},{"id":52,"name":"Costa Rica","code":"CR","serverCount":6,"cities":[{"id":2062994,"name":"San Jose","latitude":9.893385,"longitude":-84.105407,"dns_name":"san-jose","hub_score":0,"serverCount":6}]},{"id":54,"name":"Croatia","code":"HR","serverCount":16,"cities":[{"id":3308120,"name":"Zagreb","latitude":45.8,"longitude":16,"dns_name":"zagreb","hub_score":0,"serverCount":16}]},{"id":56,"name":"Cyprus","code":"CY","serverCount":13,"cities":[{"id":2099627,"name":"Nicosia","latitude":35.1666667,"longitude":33.3666667,"dns_name":"nicosia","hub_score":0,"serverCount":13}]},{"id":57,"name":"Czech Republic","code":"CZ","serverCount":42,"cities":[{"id":2144945,"name":"Prague","latitude":50.083333,"longitude":14.466667,"dns_name":"prague","hub_score":0,"serverCount":42}]},{"id":58,"name":"Denmark","code":"DK","serverCount":70,"cities":[{"id":2382515,"name":"Copenhagen","latitude":55.666667,"longitude":12.583333,"dns_name":"copenhagen","hub_score":0,"serverCount":70}]},{"id":61,"name":"Dominican Republic","code":"DO","serverCount":2,"cities":[{"id":2434841,"name":"Santo Domingo","latitude":18.4666667,"longitude":-69.9,"dns_name":"santo-domingo","hub_score":0,"serverCount":2}]},{"id":63,"name":"Ecuador","code":"EC","serverCount":2,"cities":[{"id":2485688,"name":"Quito","latitude":-0.2166667,"longitude":-78.5,"dns_name":"quito","hub_score":0,"serverCount":2}]},{"id":64,"name":"Egypt","code":"EG","serverCount":2,"cities":[{"id":2528003,"name":"Cairo","latitude":30.05,"longitude":31.25,"dns_name":"cairo","hub_score":0,"serverCount":2}]},{"id":65,"name":"El Salvador","code":"SV","serverCount":2,"cities":[{"id":7990847,"name":"San Salvador","latitude":13.7086111,"longitude":-89.2030556,"dns_name":"san-salvador","hub_score":0,"serverCount":2}]},{"id":68,"name":"Estonia","code":"EE","serverCount":10,"cities":[{"id":2514182,"name":"Tallinn","latitude":59.4338889,"longitude":24.7280556,"dns_name":"tallinn","hub_score":0,"serverCount":10}]},{"id":73,"name":"Finland","code":"FI","serverCount":21,"cities":[{"id":2704343,"name":"Helsinki","latitude":60.175556,"longitude":24.934167,"dns_name":"helsinki","hub_score":0,"serverCount":21}]},{"id":74,"name":"France","code":"FR","serverCount":344,"cities":[{"id":2867102,"name":"Marseille","latitude":43.285413,"longitude":5.37606,"dns_name":"marseille","hub_score":0,"serverCount":108},{"id":2886284,"name":"Paris","latitude":48.866667,"longitude":2.333333,"dns_name":"paris","hub_score":0,"serverCount":236}]},{"id":80,"name":"Georgia","code":"GE","serverCount":10,"cities":[{"id":3032063,"name":"Tbilisi","latitude":41.725,"longitude":44.7908333,"dns_name":"tbilisi","hub_score":-5,"serverCount":10}]},{"id":81,"name":"Germany","code":"DE","serverCount":368,"cities":[{"id":2181458,"name":"Berlin","latitude":52.516667,"longitude":13.4,"dns_name":"berlin","hub_score":0,"serverCount":32},{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0,"serverCount":301},{"id":2234906,"name":"Hamburg","latitude":53.55,"longitude":10,"dns_name":"hamburg","hub_score":0,"serverCount":35}]},{"id":82,"name":"Ghana","code":"GH","serverCount":2,"cities":[{"id":3040355,"name":"Accra","latitude":5.55,"longitude":-0.2166667,"dns_name":"accra","hub_score":0,"serverCount":2}]},{"id":84,"name":"Greece","code":"GR","serverCount":23,"cities":[{"id":3131903,"name":"Athens","latitude":37.9833333,"longitude":23.7333333,"dns_name":"athens","hub_score":0,"serverCount":23}]},{"id":85,"name":"Greenland","code":"GL","serverCount":2,"cities":[{"id":3085001,"name":"Nuuk","latitude":64.1833333,"longitude":-51.75,"dns_name":"nuuk","hub_score":0,"serverCount":2}]},{"id":88,"name":"Guam","code":"GU","serverCount":2,"cities":[{"id":8808314,"name":"Hagatna","latitude":13.4741667,"longitude":144.7477778,"dns_name":"hagatna","hub_score":0,"serverCount":2}]},{"id":89,"name":"Guatemala","code":"GT","serverCount":2,"cities":[{"id":3202463,"name":"Guatemala City","latitude":14.621111,"longitude":-90.526944,"dns_name":"guatemala-city","hub_score":0,"serverCount":2}]},{"id":96,"name":"Honduras","code":"HN","serverCount":2,"cities":[{"id":3270551,"name":"Tegucigalpa","latitude":14.1,"longitude":-87.2166667,"dns_name":"tegucigalpa","hub_score":0,"serverCount":2}]},{"id":97,"name":"Hong Kong","code":"HK","serverCount":72,"cities":[{"id":3232931,"name":"Hong Kong","latitude":22.2833333,"longitude":114.15,"dns_name":"hong-kong","hub_score":0,"serverCount":72}]},{"id":98,"name":"Hungary","code":"HU","serverCount":26,"cities":[{"id":3348344,"name":"Budapest","latitude":47.5,"longitude":19.083333,"dns_name":"budapest","hub_score":0,"serverCount":26}]},{"id":99,"name":"Iceland","code":"IS","serverCount":10,"cities":[{"id":4509791,"name":"Reykjavik","latitude":64.15,"longitude":-21.95,"dns_name":"reykjavik","hub_score":0,"serverCount":10}]},{"id":100,"name":"India","code":"IN","serverCount":27,"cities":[{"id":4041548,"name":"Mumbai","latitude":18.975,"longitude":72.825833,"dns_name":"mumbai","hub_score":0,"serverCount":27}]},{"id":101,"name":"Indonesia","code":"ID","serverCount":10,"cities":[{"id":3560288,"name":"Jakarta","latitude":-6.174444,"longitude":106.829444,"dns_name":"jakarta","hub_score":0,"serverCount":10}]},{"id":104,"name":"Ireland","code":"IE","serverCount":69,"cities":[{"id":3939200,"name":"Dublin","latitude":53.3330556,"longitude":-6.2488889,"dns_name":"dublin","hub_score":0,"serverCount":69}]},{"id":243,"name":"Isle of Man","code":"IM","serverCount":2,"cities":[{"id":3965405,"name":"Douglas","latitude":54.15,"longitude":-4.483333,"dns_name":"douglas","hub_score":0,"serverCount":2}]},{"id":105,"name":"Israel","code":"IL","serverCount":20,"cities":[{"id":3964220,"name":"Tel Aviv","latitude":32.066667,"longitude":34.766667,"dns_name":"tel-aviv","hub_score":0,"serverCount":20}]},{"id":106,"name":"Italy","code":"IT","serverCount":157,"cities":[{"id":4542737,"name":"Milan","latitude":45.466667,"longitude":9.2,"dns_name":"milan","hub_score":0,"serverCount":108},{"id":4548074,"name":"Palermo","latitude":38.116667,"longitude":13.366667,"dns_name":"palermo","hub_score":0,"serverCount":12},{"id":4555808,"name":"Rome","latitude":41.8902,"longitude":12.4922,"dns_name":"rome","hub_score":0,"serverCount":37}]},{"id":107,"name":"Jamaica","code":"JM","serverCount":2,"cities":[{"id":4576328,"name":"Kingston","latitude":18,"longitude":-76.8,"dns_name":"kingston","hub_score":0,"serverCount":2}]},{"id":108,"name":"Japan","code":"JP","serverCount":259,"cities":[{"id":4621847,"name":"Osaka","latitude":34.6937,"longitude":135.5023,"dns_name":"osaka","hub_score":0,"serverCount":36},{"id":4633349,"name":"Tokyo","latitude":35.685,"longitude":139.751389,"dns_name":"tokyo","hub_score":0,"serverCount":223}]},{"id":244,"name":"Jersey","code":"JE","serverCount":2,"cities":[{"id":4572281,"name":"Saint Helier","latitude":49.183333,"longitude":-2.1,"dns_name":"saint-helier","hub_score":0,"serverCount":2}]},{"id":109,"name":"Jordan","code":"JO","serverCount":2,"cities":[{"id":4581203,"name":"Amman","latitude":31.95,"longitude":35.933333,"dns_name":"amman","hub_score":0,"serverCount":2}]},{"id":110,"name":"Kazakhstan","code":"KZ","serverCount":2,"cities":[{"id":4925732,"name":"Astana","latitude":51.181111,"longitude":71.427778,"dns_name":"astana","hub_score":0,"serverCount":2}]},{"id":111,"name":"Kenya","code":"KE","serverCount":2,"cities":[{"id":4646603,"name":"Nairobi","latitude":-1.2833333,"longitude":36.8166667,"dns_name":"nairobi","hub_score":0,"serverCount":2}]},{"id":116,"name":"Kuwait","code":"KW","serverCount":2,"cities":[{"id":9521894,"name":"Kuwait City","latitude":29.3759,"longitude":47.9774,"dns_name":"kuwait-city","hub_score":0,"serverCount":2}]},{"id":118,"name":"Lao People's Democratic Republic","code":"LA","serverCount":2,"cities":[{"id":5015876,"name":"Vientiane","latitude":17.966667,"longitude":102.6,"dns_name":"vientiane","hub_score":0,"serverCount":2}]},{"id":119,"name":"Latvia","code":"LV","serverCount":10,"cities":[{"id":5192828,"name":"Riga","latitude":56.95,"longitude":24.1,"dns_name":"riga","hub_score":0,"serverCount":10}]},{"id":120,"name":"Lebanon","code":"LB","serverCount":2,"cities":[{"id":5022080,"name":"Beirut","latitude":33.8719444,"longitude":35.5097222,"dns_name":"beirut","hub_score":0,"serverCount":2}]},{"id":124,"name":"Liechtenstein","code":"LI","serverCount":2,"cities":[{"id":5037212,"name":"Vaduz","latitude":47.1333333,"longitude":9.5166667,"dns_name":"vaduz","hub_score":0,"serverCount":2}]},{"id":125,"name":"Lithuania","code":"LT","serverCount":12,"cities":[{"id":5166932,"name":"Vilnius","latitude":54.6833333,"longitude":25.3166667,"dns_name":"vilnius","hub_score":0,"serverCount":12}]},{"id":126,"name":"Luxembourg","code":"LU","serverCount":12,"cities":[{"id":9521876,"name":"Luxembourg","latitude":49.6117,"longitude":6.13,"dns_name":"luxembourg","hub_score":0,"serverCount":12}]},{"id":131,"name":"Malaysia","code":"MY","serverCount":10,"cities":[{"id":5820143,"name":"Kuala Lumpur","latitude":3.166667,"longitude":101.7,"dns_name":"kuala-lumpur","hub_score":0,"serverCount":10}]},{"id":134,"name":"Malta","code":"MT","serverCount":2,"cities":[{"id":5554481,"name":"Valletta","latitude":35.899722,"longitude":14.514722,"dns_name":"valletta","hub_score":0,"serverCount":2}]},{"id":140,"name":"Mexico","code":"MX","serverCount":56,"cities":[{"id":5677037,"name":"Mexico","latitude":19.434167,"longitude":-99.138611,"dns_name":"mexico","hub_score":0,"serverCount":56}]},{"id":142,"name":"Moldova","code":"MD","serverCount":3,"cities":[{"id":5295179,"name":"Chisinau","latitude":47.005556,"longitude":28.8575,"dns_name":"chisinau","hub_score":0,"serverCount":3}]},{"id":143,"name":"Monaco","code":"MC","serverCount":2,"cities":[{"id":5292332,"name":"Monte Carlo","latitude":43.739722,"longitude":7.427222,"dns_name":"monte-carlo","hub_score":0,"serverCount":2}]},{"id":144,"name":"Mongolia","code":"MN","serverCount":2,"cities":[{"id":5543669,"name":"Ulaanbaatar","latitude":47.9166667,"longitude":106.9166667,"dns_name":"ulaanbaatar","hub_score":0,"serverCount":2}]},{"id":146,"name":"Montenegro","code":"ME","serverCount":2,"cities":[{"id":5318561,"name":"Podgorica","latitude":42.441111,"longitude":19.263611,"dns_name":"podgorica","hub_score":0,"serverCount":2}]},{"id":147,"name":"Morocco","code":"MA","serverCount":2,"cities":[{"id":5271254,"name":"Rabat","latitude":34.013784,"longitude":-6.844268,"dns_name":"rabat","hub_score":0,"serverCount":2}]},{"id":148,"name":"Mozambique","code":"MZ","serverCount":2,"cities":[{"id":5870336,"name":"Maputo","latitude":-25.9652778,"longitude":32.5891667,"dns_name":"maputo","hub_score":0,"serverCount":2}]},{"id":149,"name":"Myanmar","code":"MM","serverCount":2,"cities":[{"id":9521893,"name":"Naypyidaw","latitude":19.7475,"longitude":96.115,"dns_name":"naypyidaw","hub_score":0,"serverCount":2}]},{"id":152,"name":"Nepal","code":"NP","serverCount":2,"cities":[{"id":6142175,"name":"Kathmandu","latitude":27.7166667,"longitude":85.3166667,"dns_name":"kathmandu","hub_score":0,"serverCount":2}]},{"id":153,"name":"Netherlands","code":"NL","serverCount":256,"cities":[{"id":6076868,"name":"Amsterdam","latitude":52.35,"longitude":4.916667,"dns_name":"amsterdam","hub_score":0,"serverCount":256}]},{"id":156,"name":"New Zealand","code":"NZ","serverCount":25,"cities":[{"id":6144239,"name":"Auckland","latitude":-36.866667,"longitude":174.766667,"dns_name":"auckland","hub_score":0,"serverCount":25}]},{"id":159,"name":"Nigeria","code":"NG","serverCount":4,"cities":[{"id":6010328,"name":"Lagos","latitude":6.453056,"longitude":3.395833,"dns_name":"lagos","hub_score":0,"serverCount":4}]},{"id":128,"name":"North Macedonia","code":"MK","serverCount":2,"cities":[{"id":5386019,"name":"Skopje","latitude":42,"longitude":21.4333333,"dns_name":"skopje","hub_score":0,"serverCount":2}]},{"id":163,"name":"Norway","code":"NO","serverCount":86,"cities":[{"id":6127364,"name":"Oslo","latitude":59.916667,"longitude":10.75,"dns_name":"oslo","hub_score":0,"serverCount":86}]},{"id":165,"name":"Pakistan","code":"PK","serverCount":2,"cities":[{"id":6600485,"name":"Karachi","latitude":24.9056,"longitude":67.0822,"dns_name":"karachi","hub_score":0,"serverCount":2}]},{"id":168,"name":"Panama","code":"PA","serverCount":3,"cities":[{"id":6176273,"name":"Panama City","latitude":8.9666667,"longitude":-79.5333333,"dns_name":"panama-city","hub_score":0,"serverCount":3}]},{"id":169,"name":"Papua New Guinea","code":"PG","serverCount":2,"cities":[{"id":6292406,"name":"Port Moresby","latitude":-9.4647222,"longitude":147.1925,"dns_name":"port-moresby","hub_score":0,"serverCount":2}]},{"id":170,"name":"Paraguay","code":"PY","serverCount":2,"cities":[{"id":9521890,"name":"Asuncion","latitude":-25.3,"longitude":-57.633333,"dns_name":"asuncion","hub_score":0,"serverCount":2}]},{"id":171,"name":"Peru","code":"PE","serverCount":2,"cities":[{"id":6222584,"name":"Lima","latitude":-12.05,"longitude":-77.05,"dns_name":"lima","hub_score":0,"serverCount":2}]},{"id":172,"name":"Philippines","code":"PH","serverCount":6,"cities":[{"id":6391379,"name":"Manila","latitude":14.6042,"longitude":120.9822,"dns_name":"manila","hub_score":0,"serverCount":6}]},{"id":174,"name":"Poland","code":"PL","serverCount":75,"cities":[{"id":6863429,"name":"Warsaw","latitude":52.25,"longitude":21,"dns_name":"warsaw","hub_score":0,"serverCount":75}]},{"id":175,"name":"Portugal","code":"PT","serverCount":52,"cities":[{"id":6906665,"name":"Lisbon","latitude":38.716667,"longitude":-9.133333,"dns_name":"lisbon","hub_score":0,"serverCount":52}]},{"id":176,"name":"Puerto Rico","code":"PR","serverCount":2,"cities":[{"id":9521884,"name":"San Juan","latitude":18.406389,"longitude":-66.063889,"dns_name":"san-juan","hub_score":0,"serverCount":2}]},{"id":179,"name":"Romania","code":"RO","serverCount":25,"cities":[{"id":6953096,"name":"Bucharest","latitude":44.433333,"longitude":26.1,"dns_name":"bucharest","hub_score":0,"serverCount":25}]},{"id":191,"name":"Senegal","code":"SN","serverCount":2,"cities":[{"id":7924958,"name":"Dakar","latitude":14.6708333,"longitude":-17.4380556,"dns_name":"dakar","hub_score":0,"serverCount":2}]},{"id":192,"name":"Serbia","code":"RS","serverCount":20,"cities":[{"id":7030907,"name":"Belgrade","latitude":44.818611,"longitude":20.468056,"dns_name":"belgrad","hub_score":0,"serverCount":20}]},{"id":195,"name":"Singapore","code":"SG","serverCount":83,"cities":[{"id":7867982,"name":"Singapore","latitude":1.2930556,"longitude":103.8558333,"dns_name":"singapore","hub_score":0,"serverCount":83}]},{"id":196,"name":"Slovakia","code":"SK","serverCount":15,"cities":[{"id":7884305,"name":"Bratislava","latitude":48.15,"longitude":17.1166667,"dns_name":"bratislava","hub_score":0,"serverCount":15}]},{"id":197,"name":"Slovenia","code":"SI","serverCount":6,"cities":[{"id":7874306,"name":"Ljubljana","latitude":46.0552778,"longitude":14.5144444,"dns_name":"ljubljana","hub_score":0,"serverCount":6}]},{"id":200,"name":"South Africa","code":"ZA","serverCount":25,"cities":[{"id":9383693,"name":"Johannesburg","latitude":-26.205171,"longitude":28.049815,"dns_name":"johannesburg","hub_score":0,"serverCount":25}]},{"id":114,"name":"South Korea","code":"KR","serverCount":37,"cities":[{"id":4879586,"name":"Seoul","latitude":37.5985,"longitude":126.9783,"dns_name":"seoul","hub_score":0,"serverCount":37}]},{"id":202,"name":"Spain","code":"ES","serverCount":100,"cities":[{"id":2572757,"name":"Barcelona","latitude":41.398371,"longitude":2.1741,"dns_name":"barcelona","hub_score":0,"serverCount":24},{"id":2619989,"name":"Madrid","latitude":40.408566,"longitude":-3.69222,"dns_name":"madrid","hub_score":0,"serverCount":76}]},{"id":203,"name":"Sri Lanka","code":"LK","serverCount":2,"cities":[{"id":5043197,"name":"Colombo","latitude":6.9319444,"longitude":79.8477778,"dns_name":"colombo","hub_score":0,"serverCount":2}]},{"id":208,"name":"Sweden","code":"SE","serverCount":162,"cities":[{"id":7852919,"name":"Stockholm","latitude":59.333333,"longitude":18.05,"dns_name":"stockholm","hub_score":0,"serverCount":162}]},{"id":209,"name":"Switzerland","code":"CH","serverCount":135,"cities":[{"id":1171814,"name":"Zurich","latitude":47.366667,"longitude":8.55,"dns_name":"zurich","hub_score":0,"serverCount":135}]},{"id":211,"name":"Taiwan","code":"TW","serverCount":30,"cities":[{"id":8544365,"name":"Taipei","latitude":25.0391667,"longitude":121.525,"dns_name":"taipei","hub_score":0,"serverCount":30}]},{"id":214,"name":"Thailand","code":"TH","serverCount":12,"cities":[{"id":8121638,"name":"Bangkok","latitude":13.753979,"longitude":100.501444,"dns_name":"bangkok","hub_score":0,"serverCount":12}]},{"id":218,"name":"Trinidad and Tobago","code":"TT","serverCount":2,"cities":[{"id":9521887,"name":"Port of Spain","latitude":10.666667,"longitude":-61.516667,"dns_name":"port-of-spain","hub_score":0,"serverCount":2}]},{"id":219,"name":"Tunisia","code":"TN","serverCount":2,"cities":[{"id":8295401,"name":"Tunis","latitude":36.806112,"longitude":10.171078,"dns_name":"tunis","hub_score":0,"serverCount":2}]},{"id":220,"name":"Turkey","code":"TR","serverCount":16,"cities":[{"id":8401790,"name":"Istanbul","latitude":41.018611,"longitude":28.964722,"dns_name":"istanbul","hub_score":0,"serverCount":16}]},{"id":225,"name":"Ukraine","code":"UA","serverCount":14,"cities":[{"id":8626766,"name":"Kyiv","latitude":50.433333,"longitude":30.516667,"dns_name":"kyiv","hub_score":0,"serverCount":14}]},{"id":226,"name":"United Arab Emirates","code":"AE","serverCount":15,"cities":[{"id":728,"name":"Dubai","latitude":25.258172,"longitude":55.304717,"dns_name":"dubai","hub_score":0,"serverCount":15}]},{"id":227,"name":"United Kingdom","code":"GB","serverCount":984,"cities":[{"id":2975852,"name":"Edinburgh","latitude":55.95,"longitude":-3.2,"dns_name":"edinburgh","hub_score":0,"serverCount":36},{"id":2978888,"name":"Glasgow","latitude":55.833333,"longitude":-4.25,"dns_name":"glasgow","hub_score":0,"serverCount":36},{"id":2989907,"name":"London","latitude":51.514125,"longitude":-0.093689,"dns_name":"london","hub_score":0,"serverCount":785},{"id":2991110,"name":"Manchester","latitude":53.5,"longitude":-2.216667,"dns_name":"manchester","hub_score":0,"serverCount":127}]},{"id":228,"name":"United States","code":"US","serverCount":2542,"cities":[{"id":8792429,"name":"Atlanta","latitude":33.7488889,"longitude":-84.3880556,"dns_name":"atlanta","hub_score":0,"serverCount":156},{"id":8895305,"name":"Boston","latitude":42.3583333,"longitude":-71.0602778,"dns_name":"boston","hub_score":0,"serverCount":40},{"id":8963153,"name":"Buffalo","latitude":42.8863889,"longitude":-78.8786111,"dns_name":"buffalo","hub_score":0,"serverCount":99},{"id":8980922,"name":"Charlotte","latitude":35.2269444,"longitude":-80.8433333,"dns_name":"charlotte","hub_score":0,"serverCount":38},{"id":8815352,"name":"Chicago","latitude":41.85,"longitude":-87.65,"dns_name":"chicago","hub_score":0,"serverCount":263},{"id":9080300,"name":"Dallas","latitude":32.7833333,"longitude":-96.8,"dns_name":"dallas","hub_score":0,"serverCount":243},{"id":8770934,"name":"Denver","latitude":39.7391667,"longitude":-104.9841667,"dns_name":"denver","hub_score":0,"serverCount":95},{"id":8903312,"name":"Detroit","latitude":42.3313889,"longitude":-83.0458333,"dns_name":"detroit","hub_score":0,"serverCount":10},{"id":9083687,"name":"Houston","latitude":29.7630556,"longitude":-95.3630556,"dns_name":"houston","hub_score":0,"serverCount":20},{"id":8930717,"name":"Kansas City","latitude":39.0997222,"longitude":-94.5783333,"dns_name":"kansas-city","hub_score":0,"serverCount":35},{"id":8761958,"name":"Los Angeles","latitude":34.0522222,"longitude":-118.2427778,"dns_name":"los-angeles","hub_score":0,"serverCount":281},{"id":9113744,"name":"Manassas","latitude":38.7508333,"longitude":-77.4755556,"dns_name":"manassas","hub_score":0,"serverCount":128},{"id":9086162,"name":"McAllen","latitude":26.2030556,"longitude":-98.2297222,"dns_name":"mcallen","hub_score":0,"serverCount":20},{"id":8787782,"name":"Miami","latitude":25.7738889,"longitude":-80.1938889,"dns_name":"miami","hub_score":0,"serverCount":183},{"id":8971718,"name":"New York","latitude":40.7141667,"longitude":-74.0063889,"dns_name":"new-york","hub_score":0,"serverCount":529},{"id":8741960,"name":"Phoenix","latitude":33.4483333,"longitude":-112.0733333,"dns_name":"phoenix","hub_score":0,"serverCount":47},{"id":8934551,"name":"Saint Louis","latitude":38.6272222,"longitude":-90.1977778,"dns_name":"saint-louis","hub_score":0,"serverCount":36},{"id":9097865,"name":"Salt Lake City","latitude":40.7608333,"longitude":-111.8902778,"dns_name":"salt-lake-city","hub_score":0,"serverCount":29},{"id":8766359,"name":"San Francisco","latitude":37.7698135,"longitude":-122.4660005,"dns_name":"san-francisco","hub_score":0,"serverCount":107},{"id":9128402,"name":"Seattle","latitude":47.6063889,"longitude":-122.3308333,"dns_name":"seattle","hub_score":0,"serverCount":183}]},{"id":230,"name":"Uruguay","code":"UY","serverCount":2,"cities":[{"id":9150812,"name":"Montevideo","latitude":-34.8580556,"longitude":-56.1708333,"dns_name":"montevideo","hub_score":0,"serverCount":2}]},{"id":231,"name":"Uzbekistan","code":"UZ","serverCount":2,"cities":[{"id":9166826,"name":"Tashkent","latitude":41.3166667,"longitude":69.25,"dns_name":"tashkent","hub_score":0,"serverCount":2}]},{"id":233,"name":"Venezuela","code":"VE","serverCount":2,"cities":[{"id":9176843,"name":"Caracas","latitude":10.5,"longitude":-66.9166667,"dns_name":"caracas","hub_score":0,"serverCount":2}]},{"id":234,"name":"Vietnam","code":"VN","serverCount":6,"cities":[{"id":9270302,"name":"Hanoi","latitude":21.033333,"longitude":105.85,"dns_name":"hanoi","hub_score":0,"serverCount":2},{"id":9271799,"name":"Ho Chi Minh City","latitude":10.75,"longitude":106.666667,"dns_name":"ho-chi-minh-city","hub_score":0,"serverCount":4}]}]

================
File: src/nyord_vpn/api/v1_countries.py
================
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["pydantic", "requests", "loguru"]
# ///
# this_file: src/nyord_vpn/api/v1-countries.py

"""NordVPN API v1 countries client.

This module provides a clean interface to the NordVPN v1 countries API endpoint.
The v1 countries API provides information about server locations and availability by country.
"""

from loguru import logger
import requests
from pydantic import BaseModel

# Constants
NORDVPN_API_BASE = "https://api.nordvpn.com"
COUNTRIES_V1_ENDPOINT = f"{NORDVPN_API_BASE}/v1/servers/countries"
DEFAULT_TIMEOUT = 10  # seconds

class City(BaseModel):
    """City information."""

    id: int
    name: str
    latitude: float
    longitude: float
    dns_name: str
    hub_score: int
    server_count: int

class Country(BaseModel):
    """Country information from the v1 API."""

    id: int
    name: str
    code: str
    server_count: int
    cities: list[City]

class NordVPNCountriesV1:
    """Client for the NordVPN v1 countries API.

    This class provides methods to fetch and work with country and server location
    information from the NordVPN v1 API.
    """

    def __init__(self, timeout: int = DEFAULT_TIMEOUT) -> None:
        """Initialize the API client.

        Args:
            timeout: Request timeout in seconds.

        """
        self.timeout = timeout

    def fetch_countries(self) -> list[Country]:
        """Fetch available countries and their server information from the v1 API.

        Returns:
            List of countries with server information.

        Raises:
            requests.exceptions.RequestException: If the API request fails.

        """
        try:
            response = requests.get(COUNTRIES_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()

            return [Country.model_validate(country) for country in data]

        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN countries: {e}")
            raise

def get_country_by_code(countries: list[Country], country_code: str) -> Country:
    """Find a country by its code.

    Args:
        countries: List of countries to search.
        country_code: Two-letter country code (e.g., 'US', 'DE').

    Returns:
        The matching country.

    Raises:
        ValueError: If no country matches the code.

    """
    for country in countries:
        if country.code.upper() == country_code.upper():
            return country
    raise ValueError(f"No country found with code: {country_code}")

def get_countries_by_min_servers(countries: list[Country], min_servers: int) -> list[Country]:
    """Filter countries by minimum number of servers.

    Args:
        countries: List of countries to filter.
        min_servers: Minimum number of servers required.

    Returns:
        List of countries with at least the specified number of servers.

    """
    return [
        country for country in countries
        if country.server_count >= min_servers
    ]

def get_city_by_name(country: Country, city_name: str) -> City:
    """Find a city by name within a country.

    Args:
        country: Country to search in.
        city_name: Name of the city.

    Returns:
        The matching city.

    Raises:
        ValueError: If no city matches the name.

    """
    for city in country.cities:
        if city.name.lower() == city_name.lower():
            return city
    raise ValueError(f"No city found with name '{city_name}' in {country.name}")

if __name__ == "__main__":
    # Example usage
    client = NordVPNCountriesV1()
    try:
        countries = client.fetch_countries()

        # Print summary of server availability by country
        logger.info("Server availability by country:")
        for country in sorted(countries, key=lambda x: x.server_count, reverse=True)[:10]:
            logger.info(f"{country.name} ({country.code}): {country.server_count} servers")
            for city in country.cities:
                logger.info(f"  - {city.name}: {city.server_count} servers")

        # Example: Find countries with many servers
        large_countries = get_countries_by_min_servers(countries, 100)
        logger.info(f"\nCountries with 100+ servers: {len(large_countries)}")
        for country in large_countries:
            logger.info(f"- {country.name}: {country.server_count} servers")

        # Example: Get specific country and city details
        try:
            us = get_country_by_code(countries, "US")
            nyc = get_city_by_name(us, "New York")
            logger.info("\nNew York server details:")
            logger.info(f"Total servers: {nyc.server_count}")
            logger.info(f"Location: {nyc.latitude}, {nyc.longitude}")
            logger.info(f"DNS name: {nyc.dns_name}")
        except ValueError as e:
            logger.error(e)

    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to fetch countries: {e}")

================
File: src/nyord_vpn/api/v1_groups.json
================
//https://api.nordvpn.com/v1/servers/groups
[{"id":1,"created_at":"2017-06-13 13:41:00","updated_at":"2017-06-13 13:41:00","title":"Double VPN","identifier":"legacy_double_vpn","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":3,"created_at":"2017-06-13 13:41:22","updated_at":"2017-11-06 10:16:14","title":"Onion Over VPN","identifier":"legacy_onion_over_vpn","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":5,"created_at":"2017-06-13 13:41:42","updated_at":"2017-06-13 13:41:42","title":"Ultra fast TV","identifier":"legacy_ultra_fast_tv","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":7,"created_at":"2017-06-13 13:42:08","updated_at":"2017-06-13 13:42:08","title":"Anti DDoS","identifier":"legacy_anti_ddos","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":9,"created_at":"2017-06-13 13:42:36","updated_at":"2018-08-22 12:54:48","title":"Dedicated IP","identifier":"legacy_dedicated_ip","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":13,"created_at":"2017-06-13 13:43:20","updated_at":"2017-06-13 13:43:20","title":"Netflix USA","identifier":"legacy_netflix_usa","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":17,"created_at":"2017-06-13 13:44:10","updated_at":"2017-06-13 13:44:10","title":"Obfuscated Servers","identifier":"legacy_obfuscated_servers","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}},{"id":21,"created_at":"2017-10-27 14:23:03","updated_at":"2017-10-30 08:09:48","title":"The Americas","identifier":"the_americas","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}},{"id":23,"created_at":"2017-10-27 14:23:51","updated_at":"2017-10-30 08:09:57","title":"Asia Pacific","identifier":"asia_pacific","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}},{"id":25,"created_at":"2017-10-27 14:40:12","updated_at":"2017-10-30 08:10:20","title":"Africa, the Middle East and India","identifier":"africa_the_middle_east_and_india","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}},{"id":233,"created_at":"2020-08-06 08:40:18","updated_at":"2020-08-06 08:40:18","title":"Anycast DNS","identifier":"anycast-dns","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":236,"created_at":"2020-08-18 07:22:50","updated_at":"2020-08-18 07:22:50","title":"Geo DNS","identifier":"geo_dns","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":239,"created_at":"2020-08-26 08:21:18","updated_at":"2020-08-26 08:21:18","title":"Grafana","identifier":"grafana","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":242,"created_at":"2020-08-26 08:22:54","updated_at":"2020-08-26 08:22:54","title":"Kapacitor","identifier":"kapacitor","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":245,"created_at":"2020-11-18 12:10:45","updated_at":"2020-11-18 12:10:45","title":"Socks5 Proxy","identifier":"legacy_socks5_proxy","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":248,"created_at":"2020-12-02 12:30:50","updated_at":"2020-12-02 12:30:50","title":"FastNetMon","identifier":"fastnetmon","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}}]

================
File: src/nyord_vpn/api/v1_groups.py
================
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["pydantic", "requests", "loguru"]
# ///
# this_file: src/nyord_vpn/api/v1-groups.py

"""NordVPN API v1 server groups client.

This module provides a clean interface to the NordVPN v1 server groups API endpoint.
The v1 groups API provides information about different server categories and types.
"""

from datetime import datetime
from loguru import logger
import requests
from pydantic import BaseModel

# Constants
NORDVPN_API_BASE = "https://api.nordvpn.com"
GROUPS_V1_ENDPOINT = f"{NORDVPN_API_BASE}/v1/servers/groups"
DEFAULT_TIMEOUT = 10  # seconds

class GroupType(BaseModel):
    """Group type information."""

    id: int
    created_at: datetime
    updated_at: datetime
    title: str
    identifier: str

class Group(BaseModel):
    """Server group information from the v1 API."""

    id: int
    created_at: datetime
    updated_at: datetime
    title: str
    identifier: str
    type: GroupType

class NordVPNGroupsV1:
    """Client for the NordVPN v1 server groups API.

    This class provides methods to fetch and work with server group information
    from the NordVPN v1 API.
    """

    def __init__(self, timeout: int = DEFAULT_TIMEOUT) -> None:
        """Initialize the API client.

        Args:
            timeout: Request timeout in seconds.

        """
        self.timeout = timeout

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.

        Returns:
            List of server groups.

        Raises:
            requests.exceptions.RequestException: If the API request fails.

        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()

            return [Group.model_validate(group) for group in data]

        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN server groups: {e}")
            raise

def get_groups_by_type(groups: list[Group], type_identifier: str) -> list[Group]:
    """Filter groups by type identifier.

    Args:
        groups: List of groups to filter.
        type_identifier: Type identifier (e.g., 'legacy_group_category', 'regions').

    Returns:
        List of groups matching the type.

    """
    return [
        group for group in groups
        if group.type.identifier == type_identifier
    ]

def get_group_by_identifier(groups: list[Group], identifier: str) -> Group:
    """Find a group by its identifier.

    Args:
        groups: List of groups to search.
        identifier: Group identifier (e.g., 'legacy_p2p', 'europe').

    Returns:
        The matching group.

    Raises:
        ValueError: If no group matches the identifier.

    """
    for group in groups:
        if group.identifier == identifier:
            return group
    raise ValueError(f"No group found with identifier: {identifier}")

if __name__ == "__main__":
    # Example usage
    client = NordVPNGroupsV1()
    try:
        groups = client.fetch_groups()

        # Print all available groups by type
        logger.info("Server groups by type:")
        for type_id in {group.type.identifier for group in groups}:
            type_groups = get_groups_by_type(groups, type_id)
            logger.info(f"\n{type_groups[0].type.title}:")
            for group in type_groups:
                logger.info(f"- {group.title} ({group.identifier})")

        # Example: Find specific group
        try:
            p2p_group = get_group_by_identifier(groups, "legacy_p2p")
            logger.info("\nP2P group details:")
            logger.info(f"Title: {p2p_group.title}")
            logger.info(f"Type: {p2p_group.type.title}")
            logger.info(f"Added: {p2p_group.created_at}")
        except ValueError as e:
            logger.error(e)

    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to fetch groups: {e}")

================
File: src/nyord_vpn/api/v1_recommendations.json
================
//https://api.nordvpn.com/v1/servers/recommendations
[{"id":959372,"created_at":"2020-04-28 08:39:44","updated_at":"2025-02-24 17:04:25","name":"Germany #793","station":"212.103.50.43","ipv6_station":"","hostname":"de793.nordvpn.com","load":11,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":959372,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":959372,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":959372,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":959372,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":959372,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":959372,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":959372,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":981809,"created_at":"2023-06-30 08:46:10","updated_at":"2023-06-30 08:46:10","server_id":959372,"ip_id":38246,"type":"entry","ip":{"id":38246,"ip":"212.103.50.43","version":4}}]},{"id":959015,"created_at":"2020-04-23 13:58:29","updated_at":"2025-02-24 17:04:28","name":"Germany #786","station":"5.180.62.126","ipv6_station":"","hostname":"de786.nordvpn.com","load":12,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":959015,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":959015,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":959015,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":959015,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":959015,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":959015,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":959015,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":979973,"created_at":"2023-06-30 07:46:28","updated_at":"2023-06-30 07:46:28","server_id":959015,"ip_id":118718,"type":"entry","ip":{"id":118718,"ip":"5.180.62.126","version":4}}]},{"id":966617,"created_at":"2020-07-01 06:32:33","updated_at":"2025-02-24 17:00:43","name":"Germany #910","station":"82.102.16.151","ipv6_station":"","hostname":"de910.nordvpn.com","load":12,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":966617,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":966617,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":966617,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":966617,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":966617,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":966617,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":966617,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":980909,"created_at":"2023-06-30 07:57:53","updated_at":"2023-06-30 07:57:53","server_id":966617,"ip_id":8443,"type":"entry","ip":{"id":8443,"ip":"82.102.16.151","version":4}}]},{"id":984639,"created_at":"2021-09-29 07:36:25","updated_at":"2025-02-24 17:05:22","name":"Germany #1052","station":"185.104.184.211","ipv6_station":"","hostname":"de1052.nordvpn.com","load":12,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":984639,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":984639,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":984639,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":984639,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":984639,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":984639,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":984639,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":984485,"created_at":"2023-06-30 10:04:12","updated_at":"2023-06-30 10:04:12","server_id":984639,"ip_id":12141,"type":"entry","ip":{"id":12141,"ip":"185.104.184.211","version":4}}]},{"id":959375,"created_at":"2020-04-28 08:40:03","updated_at":"2025-02-24 17:00:29","name":"Germany #794","station":"212.103.50.51","ipv6_station":"","hostname":"de794.nordvpn.com","load":12,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":959375,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":959375,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":959375,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":959375,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":959375,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":959375,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":959375,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":981842,"created_at":"2023-06-30 08:46:27","updated_at":"2023-06-30 08:46:27","server_id":959375,"ip_id":38261,"type":"entry","ip":{"id":38261,"ip":"212.103.50.51","version":4}}]},{"id":1003969,"created_at":"2024-08-01 06:22:37","updated_at":"2025-02-24 17:06:24","name":"Germany #1122","station":"5.253.115.112","ipv6_station":"","hostname":"de1122.nordvpn.com","load":12,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":1003969,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":1003969,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":1003969,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":1003969,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":1003969,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":1003969,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":1744590,"created_at":"2024-08-01 06:24:11","updated_at":"2024-08-01 06:24:11","server_id":1003969,"ip_id":9042374,"type":"entry","ip":{"id":9042374,"ip":"5.253.115.112","version":4}}]},{"id":1005008,"created_at":"2024-12-27 14:14:55","updated_at":"2025-02-24 17:06:37","name":"Germany #1167","station":"194.88.99.110","ipv6_station":"","hostname":"de1167.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":1005008,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":1005008,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":1005008,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":1005008,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":1005008,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":1005008,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":1005008,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":1882243,"created_at":"2024-12-30 08:32:56","updated_at":"2024-12-30 08:32:56","server_id":1005008,"ip_id":48357439,"type":"entry","ip":{"id":48357439,"ip":"194.88.99.110","version":4}}]},{"id":1005264,"created_at":"2025-02-06 15:51:43","updated_at":"2025-02-24 17:02:38","name":"Germany #1214","station":"45.150.175.34","ipv6_station":"","hostname":"de1214.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":1005264,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":1005264,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":1005264,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":1005264,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":1005264,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":1005264,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":1005264,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":1902541,"created_at":"2025-02-06 16:09:48","updated_at":"2025-02-06 16:09:48","server_id":1005264,"ip_id":48376900,"type":"entry","ip":{"id":48376900,"ip":"45.150.175.34","version":4}}]},{"id":1005256,"created_at":"2025-02-06 15:51:34","updated_at":"2025-02-24 17:06:39","name":"Germany #1206","station":"45.150.175.18","ipv6_station":"","hostname":"de1206.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":1005256,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":1005256,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":1005256,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":1005256,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":1005256,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":1005256,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":1005256,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":1902450,"created_at":"2025-02-06 16:02:02","updated_at":"2025-02-06 16:02:02","server_id":1005256,"ip_id":48376884,"type":"entry","ip":{"id":48376884,"ip":"45.150.175.18","version":4}}]},{"id":1005266,"created_at":"2025-02-06 15:51:48","updated_at":"2025-02-24 17:02:37","name":"Germany #1216","station":"45.150.175.38","ipv6_station":"","hostname":"de1216.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":1005266,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":1005266,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":1005266,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":1005266,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":1005266,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":1005266,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":1005266,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":1902563,"created_at":"2025-02-06 16:12:04","updated_at":"2025-02-06 16:12:04","server_id":1005266,"ip_id":48376904,"type":"entry","ip":{"id":48376904,"ip":"45.150.175.38","version":4}}]},{"id":967271,"created_at":"2020-07-07 11:56:29","updated_at":"2025-02-24 17:04:31","name":"Germany #920","station":"77.243.181.195","ipv6_station":"","hostname":"de920.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":967271,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":967271,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":967271,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":967271,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":967271,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":967271,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":967271,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":977996,"created_at":"2023-06-30 07:33:05","updated_at":"2023-06-30 07:33:05","server_id":967271,"ip_id":28571,"type":"entry","ip":{"id":28571,"ip":"77.243.181.195","version":4}}]},{"id":967256,"created_at":"2020-07-07 11:56:24","updated_at":"2025-02-24 17:04:29","name":"Germany #915","station":"89.249.65.75","ipv6_station":"","hostname":"de915.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":967256,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":967256,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":967256,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":967256,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":967256,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":967256,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":967256,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":977798,"created_at":"2023-06-30 07:30:27","updated_at":"2023-06-30 07:30:27","server_id":967256,"ip_id":28532,"type":"entry","ip":{"id":28532,"ip":"89.249.65.75","version":4}}]},{"id":989597,"created_at":"2022-05-04 10:48:06","updated_at":"2025-02-24 17:05:38","name":"Germany #1107","station":"5.253.115.74","ipv6_station":"","hostname":"de1107.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":989597,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":989597,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":989597,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":989597,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":989597,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":989597,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":989597,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":982568,"created_at":"2023-06-30 08:53:24","updated_at":"2023-06-30 08:53:24","server_id":989597,"ip_id":8848556,"type":"entry","ip":{"id":8848556,"ip":"5.253.115.74","version":4}}]},{"id":969041,"created_at":"2020-07-27 12:46:45","updated_at":"2025-02-24 17:04:37","name":"Germany #951","station":"5.180.62.36","ipv6_station":"","hostname":"de951.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":969041,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":969041,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":969041,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":969041,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":969041,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":969041,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":969041,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":978623,"created_at":"2023-06-30 07:40:40","updated_at":"2023-06-30 07:40:40","server_id":969041,"ip_id":86892,"type":"entry","ip":{"id":86892,"ip":"5.180.62.36","version":4}}]},{"id":985143,"created_at":"2021-10-25 09:02:56","updated_at":"2025-02-24 17:05:23","name":"Germany #1055","station":"45.87.212.11","ipv6_station":"","hostname":"de1055.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":985143,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":985143,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":985143,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":985143,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":985143,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":985143,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":985143,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":984545,"created_at":"2023-06-30 10:04:31","updated_at":"2023-06-30 10:04:31","server_id":985143,"ip_id":280149,"type":"entry","ip":{"id":280149,"ip":"45.87.212.11","version":4}}]},{"id":970142,"created_at":"2020-08-03 11:38:36","updated_at":"2025-02-24 17:00:39","name":"Germany #968","station":"5.180.62.60","ipv6_station":"","hostname":"de968.nordvpn.com","load":13,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":970142,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":970142,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":970142,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":970142,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":970142,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":970142,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":970142,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":978983,"created_at":"2023-06-30 07:42:52","updated_at":"2023-06-30 07:42:52","server_id":970142,"ip_id":86940,"type":"entry","ip":{"id":86940,"ip":"5.180.62.60","version":4}}]},{"id":968297,"created_at":"2020-07-21 07:24:08","updated_at":"2025-02-24 17:04:36","name":"Germany #934","station":"5.180.62.3","ipv6_station":"","hostname":"de934.nordvpn.com","load":14,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":968297,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":968297,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":968297,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":968297,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":968297,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":968297,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":968297,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":978128,"created_at":"2023-06-30 07:39:02","updated_at":"2023-06-30 07:39:02","server_id":968297,"ip_id":86826,"type":"entry","ip":{"id":86826,"ip":"5.180.62.3","version":4}}]},{"id":984219,"created_at":"2021-09-17 15:01:27","updated_at":"2025-02-24 17:01:19","name":"Germany #1034","station":"91.214.64.82","ipv6_station":"","hostname":"de1034.nordvpn.com","load":14,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":984219,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":984219,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":984219,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":984219,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":984219,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":984219,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":984219,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":1730452,"created_at":"2024-07-16 07:31:19","updated_at":"2024-07-16 07:31:19","server_id":984219,"ip_id":33703907,"type":"entry","ip":{"id":33703907,"ip":"91.214.64.82","version":4}}]},{"id":969038,"created_at":"2020-07-27 12:46:45","updated_at":"2025-02-24 17:04:37","name":"Germany #950","station":"5.180.62.33","ipv6_station":"","hostname":"de950.nordvpn.com","load":14,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":969038,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":969038,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":969038,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":969038,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":969038,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":969038,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":969038,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":978578,"created_at":"2023-06-30 07:40:33","updated_at":"2023-06-30 07:40:33","server_id":969038,"ip_id":86886,"type":"entry","ip":{"id":86886,"ip":"5.180.62.33","version":4}}]},{"id":1004398,"created_at":"2024-10-28 12:43:33","updated_at":"2025-02-24 17:06:30","name":"Germany #1149","station":"212.23.215.10","ipv6_station":"","hostname":"de1149.nordvpn.com","load":14,"status":"online","locations":[{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":[],"pivot":{"technology_id":1,"server_id":1004398,"status":"online"}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":[],"pivot":{"technology_id":3,"server_id":1004398,"status":"online"}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":[],"pivot":{"technology_id":5,"server_id":1004398,"status":"online"}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":[],"pivot":{"technology_id":21,"server_id":1004398,"status":"online"}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":[],"pivot":{"technology_id":23,"server_id":1004398,"status":"online"}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"pivot":{"technology_id":35,"server_id":1004398,"status":"online"}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":[{"name":"port","value":"8443"}],"pivot":{"technology_id":51,"server_id":1004398,"status":"online"}}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"ips":[{"id":1862584,"created_at":"2024-10-28 13:00:13","updated_at":"2024-10-28 13:00:13","server_id":1004398,"ip_id":48097570,"type":"entry","ip":{"id":48097570,"ip":"212.23.215.10","version":4}}]}]

================
File: src/nyord_vpn/api/v1_recommendations.py
================
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["pydantic", "requests", "loguru"]
# ///
# this_file: src/nyord_vpn/api/v1-recommendations.py

"""NordVPN API v1 server recommendations client.

This module provides a clean interface to the NordVPN v1 server recommendations API endpoint.
The v1 recommendations API provides a list of recommended servers based on current load and status.
"""

from datetime import datetime
from loguru import logger
import requests
from pydantic import BaseModel

# Constants
NORDVPN_API_BASE = "https://api.nordvpn.com"
RECOMMENDATIONS_V1_ENDPOINT = f"{NORDVPN_API_BASE}/v1/servers/recommendations"
DEFAULT_TIMEOUT = 10  # seconds

class City(BaseModel):
    """City location information."""

    id: int
    name: str
    latitude: float
    longitude: float
    dns_name: str
    hub_score: int

class Country(BaseModel):
    """Country information."""

    id: int
    name: str
    code: str
    city: City

class Location(BaseModel):
    """Geographical location information."""

    id: int
    created_at: datetime
    updated_at: datetime
    latitude: float
    longitude: float
    country: Country

class Service(BaseModel):
    """Service provided by the server."""

    id: int
    name: str
    identifier: str
    created_at: datetime
    updated_at: datetime

class TechnologyMetadata(BaseModel):
    """Technology metadata."""

    name: str
    value: str

class TechnologyPivot(BaseModel):
    """Technology pivot information."""

    technology_id: int
    server_id: int
    status: str

class Technology(BaseModel):
    """VPN technology information."""

    id: int
    name: str
    identifier: str
    created_at: datetime
    updated_at: datetime
    metadata: list[TechnologyMetadata] | None = []
    pivot: TechnologyPivot

class GroupType(BaseModel):
    """Group type information."""

    id: int
    created_at: datetime
    updated_at: datetime
    title: str
    identifier: str

class Group(BaseModel):
    """Server group information."""

    id: int
    created_at: datetime
    updated_at: datetime
    title: str
    identifier: str
    type: GroupType

class SpecificationValue(BaseModel):
    """Specification value."""

    id: int
    value: str

class Specification(BaseModel):
    """Server specification."""

    id: int
    title: str
    identifier: str
    values: list[SpecificationValue]

class IP(BaseModel):
    """IP address information."""

    id: int
    ip: str
    version: int

class ServerIP(BaseModel):
    """Server IP configuration."""

    id: int
    created_at: datetime
    updated_at: datetime
    server_id: int
    ip_id: int
    type: str
    ip: IP

class RecommendedServer(BaseModel):
    """Recommended server information from the v1 API."""

    id: int
    created_at: datetime
    updated_at: datetime
    name: str
    station: str
    ipv6_station: str = ""
    hostname: str
    load: int
    status: str
    locations: list[Location]
    services: list[Service]
    technologies: list[Technology]
    groups: list[Group]
    specifications: list[Specification]
    ips: list[ServerIP]

class NordVPNRecommendationsV1:
    """Client for the NordVPN v1 server recommendations API.

    This class provides methods to fetch and work with recommended server information
    from the NordVPN v1 API.
    """

    def __init__(self, timeout: int = DEFAULT_TIMEOUT) -> None:
        """Initialize the API client.

        Args:
            timeout: Request timeout in seconds.

        """
        self.timeout = timeout

    def fetch_recommendations(self) -> list[RecommendedServer]:
        """Fetch recommended servers from the v1 API.

        Returns:
            List of recommended servers.

        Raises:
            requests.exceptions.RequestException: If the API request fails.

        """
        try:
            response = requests.get(RECOMMENDATIONS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()

            return [RecommendedServer.model_validate(server) for server in data]

        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN server recommendations: {e}")
            raise

def get_recommendations_by_country(servers: list[RecommendedServer], country_code: str) -> list[RecommendedServer]:
    """Filter recommended servers by country code.

    Args:
        servers: List of servers to filter.
        country_code: Two-letter country code (e.g., 'US', 'DE').

    Returns:
        List of recommended servers in the specified country.

    """
    return [
        server for server in servers
        if server.locations and server.locations[0].country.code.upper() == country_code.upper()
    ]

def get_recommendations_by_group(servers: list[RecommendedServer], group_identifier: str) -> list[RecommendedServer]:
    """Filter recommended servers by group identifier.

    Args:
        servers: List of servers to filter.
        group_identifier: Group identifier (e.g., 'legacy_p2p').

    Returns:
        List of recommended servers in the specified group.

    """
    return [
        server for server in servers
        if any(group.identifier == group_identifier for group in server.groups)
    ]

if __name__ == "__main__":
    # Example usage
    client = NordVPNRecommendationsV1()
    try:
        recommended_servers = client.fetch_recommendations()

        # Print some server information
        for server in recommended_servers[:5]:  # First 5 servers
            logger.info(f"Server: {server.name} ({server.hostname}) - Load: {server.load}%")
            if server.locations:
                loc = server.locations[0]
                logger.info(f"  Location: {loc.country.name}, {loc.country.city.name}")
            if server.groups:
                logger.info(f"  Groups: {', '.join(group.title for group in server.groups)}")
            if server.services:
                logger.info(f"  Services: {', '.join(service.name for service in server.services)}")
            logger.info("---")

        # Example: Find US servers
        us_servers = get_recommendations_by_country(recommended_servers, "US")
        logger.info(f"\nNumber of US recommended servers: {len(us_servers)}")

        # Example: Find P2P servers
        p2p_servers = get_recommendations_by_group(recommended_servers, "legacy_p2p")
        logger.info(f"\nNumber of recommended P2P servers: {len(p2p_servers)}")

    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to fetch server recommendations: {e}")

================
File: src/nyord_vpn/api/v1_technologies.json
================
//https://api.nordvpn.com/v1/technologies
[{"id":1,"name":"IKEv2\/IPSec","identifier":"ikev2","internal_identifier":"ikev2-ipsec","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16"},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","internal_identifier":"openvpn-udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37"},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","internal_identifier":"openvpn-tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14"},{"id":7,"name":"Socks 5","identifier":"socks","internal_identifier":"socks","created_at":"2017-05-09 19:28:57","updated_at":"2017-06-13 14:27:05"},{"id":9,"name":"HTTP Proxy","identifier":"proxy","internal_identifier":"proxy","created_at":"2017-05-09 19:29:09","updated_at":"2017-06-13 14:25:29"},{"id":11,"name":"PPTP","identifier":"pptp","internal_identifier":"pptp","created_at":"2017-05-09 19:29:16","updated_at":"2017-05-09 19:29:16"},{"id":13,"name":"L2TP\/IPSec","identifier":"l2tp","internal_identifier":"l2tp-ipsec","created_at":"2017-05-09 19:29:26","updated_at":"2017-09-05 14:19:42"},{"id":15,"name":"OpenVPN UDP Obfuscated","identifier":"openvpn_xor_udp","internal_identifier":"openvpn-xor-udp","created_at":"2017-05-26 14:04:04","updated_at":"2017-11-07 08:37:53"},{"id":17,"name":"OpenVPN TCP Obfuscated","identifier":"openvpn_xor_tcp","internal_identifier":"openvpn-xor-tcp","created_at":"2017-05-26 14:04:27","updated_at":"2017-11-07 08:38:16"},{"id":19,"name":"HTTP CyberSec Proxy","identifier":"proxy_cybersec","internal_identifier":"proxy-cybersec","created_at":"2017-08-22 12:44:49","updated_at":"2017-08-22 12:44:49"},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","internal_identifier":"proxy-ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14"},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","internal_identifier":"proxy-ssl-cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49"},{"id":26,"name":"IKEv2\/IPSec IPv6","identifier":"ikev2_v6","internal_identifier":"ikev2-ipsec-v6","created_at":"2018-09-18 13:35:16","updated_at":"2018-09-18 13:35:16"},{"id":29,"name":"OpenVPN UDP IPv6","identifier":"openvpn_udp_v6","internal_identifier":"openvpn-udp-v6","created_at":"2018-09-18 13:35:38","updated_at":"2018-09-18 13:35:38"},{"id":32,"name":"OpenVPN TCP IPv6","identifier":"openvpn_tcp_v6","internal_identifier":"openvpn-tcp-v6","created_at":"2018-09-18 13:36:02","updated_at":"2018-09-18 13:36:02"},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","internal_identifier":"wireguard-udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43"},{"id":38,"name":"OpenVPN UDP TLS Crypt","identifier":"openvpn_udp_tls_crypt","internal_identifier":"openvpn-udp-tls-crypt","created_at":"2019-03-21 14:52:42","updated_at":"2019-03-21 14:52:42"},{"id":41,"name":"OpenVPN TCP TLS Crypt","identifier":"openvpn_tcp_tls_crypt","internal_identifier":"openvpn-tcp-tls-crypt","created_at":"2019-03-21 14:53:05","updated_at":"2019-03-21 14:53:05"},{"id":42,"name":"OpenVPN UDP Dedicated","identifier":"openvpn_dedicated_udp","internal_identifier":"openvpn-dedicated-udp","created_at":"2019-09-19 14:49:18","updated_at":"2019-09-19 14:49:18"},{"id":45,"name":"OpenVPN TCP Dedicated","identifier":"openvpn_dedicated_tcp","internal_identifier":"openvpn-dedicated-tcp","created_at":"2019-09-19 14:49:54","updated_at":"2019-09-19 14:49:54"},{"id":48,"name":"Skylark","identifier":"skylark","internal_identifier":"skylark","created_at":"2019-10-28 13:29:37","updated_at":"2021-12-27 05:35:17"},{"id":50,"name":"Mesh Relay","identifier":"mesh_relay","internal_identifier":"mesh-relay","created_at":"2021-05-13 12:17:05","updated_at":"2021-05-13 12:17:05"},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","internal_identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17"},{"id":53,"name":"coretest","identifier":"coretest","internal_identifier":"coretest","created_at":"2025-01-13 11:29:02","updated_at":"2025-01-13 11:29:02"},{"id":55,"name":"coretest2","identifier":"coretest2","internal_identifier":"coretest2","created_at":"2025-01-13 11:29:21","updated_at":"2025-01-13 11:29:21"}]

================
File: src/nyord_vpn/api/v1_technologies.py
================
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["pydantic", "requests", "loguru"]
# ///
# this_file: src/nyord_vpn/api/v1-technologies.py

"""NordVPN API v1 technologies client.

This module provides a clean interface to the NordVPN v1 technologies API endpoint.
The v1 technologies API provides information about available VPN technologies and protocols.
"""

from datetime import datetime
from loguru import logger
import requests
from pydantic import BaseModel

# Constants
NORDVPN_API_BASE = "https://api.nordvpn.com"
TECHNOLOGIES_V1_ENDPOINT = f"{NORDVPN_API_BASE}/v1/technologies"
DEFAULT_TIMEOUT = 10  # seconds

class Technology(BaseModel):
    """VPN technology information from the v1 API."""

    id: int
    name: str
    identifier: str
    internal_identifier: str
    created_at: datetime
    updated_at: datetime

class NordVPNTechnologiesV1:
    """Client for the NordVPN v1 technologies API.

    This class provides methods to fetch and work with VPN technology information
    from the NordVPN v1 API.
    """

    def __init__(self, timeout: int = DEFAULT_TIMEOUT) -> None:
        """Initialize the API client.

        Args:
            timeout: Request timeout in seconds.

        """
        self.timeout = timeout

    def fetch_technologies(self) -> list[Technology]:
        """Fetch available VPN technologies from the v1 API.

        Returns:
            List of VPN technologies.

        Raises:
            requests.exceptions.RequestException: If the API request fails.

        """
        try:
            response = requests.get(TECHNOLOGIES_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()

            return [Technology.model_validate(tech) for tech in data]

        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN technologies: {e}")
            raise

def get_technology_by_identifier(technologies: list[Technology], identifier: str) -> Technology:
    """Find a technology by its identifier.

    Args:
        technologies: List of technologies to search.
        identifier: Technology identifier (e.g., 'wireguard_udp').

    Returns:
        The matching technology.

    Raises:
        ValueError: If no technology matches the identifier.

    """
    for tech in technologies:
        if tech.identifier == identifier:
            return tech
    raise ValueError(f"No technology found with identifier: {identifier}")

if __name__ == "__main__":
    # Example usage
    client = NordVPNTechnologiesV1()
    try:
        technologies = client.fetch_technologies()

        # Print all available technologies
        logger.info("Available VPN technologies:")
        for tech in technologies:
            logger.info(f"- {tech.name} ({tech.identifier})")
            logger.info(f"  Internal ID: {tech.internal_identifier}")
            logger.info(f"  Added: {tech.created_at}")
            logger.info("---")

        # Example: Find specific technology
        try:
            wireguard = get_technology_by_identifier(technologies, "wireguard_udp")
            logger.info("\nWireGuard details:")
            logger.info(f"Name: {wireguard.name}")
            logger.info(f"Internal identifier: {wireguard.internal_identifier}")
            logger.info(f"Added: {wireguard.created_at}")
        except ValueError as e:
            logger.error(e)

    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to fetch technologies: {e}")

================
File: src/nyord_vpn/api/v2_servers.json
================
//https://api.nordvpn.com/v2/servers
{"servers":[{"id":929966,"created_at":"2018-09-03 07:58:14","updated_at":"2025-02-24 07:12:34","name":"Poland #128","station":"194.99.105.99","ipv6_station":"","hostname":"pl128.nordvpn.com","status":"online","load":34,"ips":[{"id":1019456,"created_at":"2023-07-14 07:40:33","updated_at":"2023-07-14 07:40:33","server_id":929966,"ip_id":23702,"type":"entry","ip":{"id":23702,"ip":"194.99.105.99","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"kjAOzXQRVGpmQdqE2zPsITH8QHmFK83AAPktqWed9wM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[367]},{"id":930428,"created_at":"2018-09-07 14:03:13","updated_at":"2025-02-24 07:08:35","name":"Hungary #48","station":"185.189.114.28","ipv6_station":"","hostname":"hu48.nordvpn.com","status":"online","load":7,"ips":[{"id":1039253,"created_at":"2023-07-19 09:32:10","updated_at":"2023-07-19 09:32:10","server_id":930428,"ip_id":6811,"type":"entry","ip":{"id":6811,"ip":"185.189.114.28","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"3KWTCjpHlmXD3BroyAIFMN8ajr+ibShIl8OSUGgejXY="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[247]},{"id":930488,"created_at":"2018-09-10 08:02:01","updated_at":"2025-02-24 07:08:35","name":"United States #5063","station":"185.245.87.59","ipv6_station":"","hostname":"us5063.nordvpn.com","status":"online","load":35,"ips":[{"id":767396,"created_at":"2022-12-27 12:43:51","updated_at":"2022-12-27 12:43:51","server_id":930488,"ip_id":26105,"type":"entry","ip":{"id":26105,"ip":"185.245.87.59","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,21],"service_ids":[1,5],"location_ids":[51]},{"id":930695,"created_at":"2018-09-11 14:06:28","updated_at":"2025-02-24 07:16:34","name":"Austria #86","station":"185.216.34.100","ipv6_station":"","hostname":"at86.nordvpn.com","status":"online","load":6,"ips":[{"id":1011926,"created_at":"2023-07-12 10:41:56","updated_at":"2023-07-12 10:41:56","server_id":930695,"ip_id":9103,"type":"entry","ip":{"id":9103,"ip":"185.216.34.100","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"F6b2ac9H7hEvt03EonY1bS4FzNAabEmURDTB8wIIPXc="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[205]},{"id":930743,"created_at":"2018-09-11 14:23:53","updated_at":"2025-02-24 07:16:34","name":"Switzerland #217","station":"185.156.175.132","ipv6_station":"","hostname":"ch217.nordvpn.com","status":"online","load":20,"ips":[{"id":937649,"created_at":"2023-06-19 09:50:19","updated_at":"2023-06-19 09:50:19","server_id":930743,"ip_id":8469,"type":"entry","ip":{"id":8469,"ip":"185.156.175.132","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[107]},{"id":930755,"created_at":"2018-09-11 14:38:01","updated_at":"2025-02-24 07:08:35","name":"Denmark #152","station":"82.102.20.212","ipv6_station":"","hostname":"dk152.nordvpn.com","status":"online","load":6,"ips":[{"id":1010027,"created_at":"2023-07-12 08:58:16","updated_at":"2023-07-12 08:58:16","server_id":930755,"ip_id":9533,"type":"entry","ip":{"id":9533,"ip":"82.102.20.212","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"EHL1zeXjZEJlqtFA8qaRVuvl0zR4skbC/AjiG66CLCc="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[169]},{"id":931112,"created_at":"2018-09-18 11:04:44","updated_at":"2025-02-24 07:16:34","name":"Norway #151","station":"82.102.22.92","ipv6_station":"","hostname":"no151.nordvpn.com","status":"online","load":9,"ips":[{"id":928820,"created_at":"2023-06-14 11:53:03","updated_at":"2023-06-14 11:53:03","server_id":931112,"ip_id":8291,"type":"entry","ip":{"id":8291,"ip":"82.102.22.92","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":931337,"created_at":"2018-09-21 04:24:34","updated_at":"2025-02-24 07:16:34","name":"Switzerland #218","station":"84.39.112.20","ipv6_station":"","hostname":"ch218.nordvpn.com","status":"online","load":10,"ips":[{"id":937745,"created_at":"2023-06-19 10:43:17","updated_at":"2023-06-19 10:43:17","server_id":931337,"ip_id":8629,"type":"entry","ip":{"id":8629,"ip":"84.39.112.20","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[107]},{"id":931412,"created_at":"2018-09-26 09:02:05","updated_at":"2025-02-24 07:12:34","name":"United Kingdom #1784","station":"81.92.202.11","ipv6_station":"","hostname":"uk1784.nordvpn.com","status":"online","load":11,"ips":[{"id":1028921,"created_at":"2023-07-18 09:48:03","updated_at":"2023-07-18 09:48:03","server_id":931412,"ip_id":7625,"type":"entry","ip":{"id":7625,"ip":"81.92.202.11","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[45]},{"id":931418,"created_at":"2018-09-26 09:06:11","updated_at":"2025-02-24 07:16:34","name":"France #555","station":"82.102.18.252","ipv6_station":"","hostname":"fr555.nordvpn.com","status":"online","load":14,"ips":[{"id":964649,"created_at":"2023-06-27 12:19:33","updated_at":"2023-06-27 12:19:33","server_id":931418,"ip_id":8963,"type":"entry","ip":{"id":8963,"ip":"82.102.18.252","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":931430,"created_at":"2018-09-26 09:10:56","updated_at":"2025-02-24 07:16:34","name":"Switzerland #219","station":"185.9.18.84","ipv6_station":"","hostname":"ch219.nordvpn.com","status":"online","load":11,"ips":[{"id":937793,"created_at":"2023-06-19 10:43:40","updated_at":"2023-06-19 10:43:40","server_id":931430,"ip_id":8633,"type":"entry","ip":{"id":8633,"ip":"185.9.18.84","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[107]},{"id":931490,"created_at":"2018-09-26 09:38:23","updated_at":"2025-02-24 07:12:34","name":"United States #5064","station":"195.206.104.156","ipv6_station":"","hostname":"us5064.nordvpn.com","status":"online","load":24,"ips":[{"id":767441,"created_at":"2022-12-27 12:44:02","updated_at":"2022-12-27 12:44:02","server_id":931490,"ip_id":27317,"type":"entry","ip":{"id":27317,"ip":"195.206.104.156","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,21],"service_ids":[1,5],"location_ids":[51]},{"id":931931,"created_at":"2018-10-11 10:26:09","updated_at":"2025-02-24 07:16:34","name":"United Kingdom #765","station":"89.35.28.131","ipv6_station":"","hostname":"uk765.nordvpn.com","status":"online","load":20,"ips":[{"id":1855705,"created_at":"2024-09-27 09:00:56","updated_at":"2024-09-27 09:00:56","server_id":931931,"ip_id":26909,"type":"entry","ip":{"id":26909,"ip":"89.35.28.131","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":932777,"created_at":"2018-11-06 07:54:02","updated_at":"2025-02-24 07:16:34","name":"United Kingdom #812","station":"77.81.191.3","ipv6_station":"","hostname":"uk812.nordvpn.com","status":"online","load":13,"ips":[{"id":1855719,"created_at":"2024-09-27 09:01:39","updated_at":"2024-09-27 09:01:39","server_id":932777,"ip_id":13433,"type":"entry","ip":{"id":13433,"ip":"77.81.191.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":932783,"created_at":"2018-11-06 08:09:06","updated_at":"2025-02-24 07:16:34","name":"United Kingdom #813","station":"89.34.98.195","ipv6_station":"","hostname":"uk813.nordvpn.com","status":"online","load":12,"ips":[{"id":1855733,"created_at":"2024-09-27 09:02:09","updated_at":"2024-09-27 09:02:09","server_id":932783,"ip_id":7161,"type":"entry","ip":{"id":7161,"ip":"89.34.98.195","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":932804,"created_at":"2018-11-08 07:37:22","updated_at":"2025-02-24 07:16:34","name":"United Kingdom #814","station":"185.121.139.100","ipv6_station":"","hostname":"uk814.nordvpn.com","status":"online","load":15,"ips":[{"id":1855746,"created_at":"2024-09-27 09:03:38","updated_at":"2024-09-27 09:03:38","server_id":932804,"ip_id":7915,"type":"entry","ip":{"id":7915,"ip":"185.121.139.100","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":932972,"created_at":"2018-11-14 08:02:57","updated_at":"2025-02-24 07:12:34","name":"United Kingdom #871","station":"89.34.99.131","ipv6_station":"","hostname":"uk871.nordvpn.com","status":"online","load":13,"ips":[{"id":1855760,"created_at":"2024-09-27 09:04:02","updated_at":"2024-09-27 09:04:02","server_id":932972,"ip_id":10931,"type":"entry","ip":{"id":10931,"ip":"89.34.99.131","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":933098,"created_at":"2018-11-19 09:23:03","updated_at":"2025-02-24 07:04:34","name":"United Kingdom #873","station":"195.206.180.3","ipv6_station":"","hostname":"uk873.nordvpn.com","status":"online","load":11,"ips":[{"id":1855773,"created_at":"2024-09-27 09:04:51","updated_at":"2024-09-27 09:04:51","server_id":933098,"ip_id":14385,"type":"entry","ip":{"id":14385,"ip":"195.206.180.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":933104,"created_at":"2018-11-19 09:23:12","updated_at":"2025-02-24 07:16:34","name":"United Kingdom #875","station":"195.206.180.131","ipv6_station":"","hostname":"uk875.nordvpn.com","status":"online","load":23,"ips":[{"id":1855787,"created_at":"2024-09-27 09:05:21","updated_at":"2024-09-27 09:05:21","server_id":933104,"ip_id":16571,"type":"entry","ip":{"id":16571,"ip":"195.206.180.131","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":933110,"created_at":"2018-11-20 08:12:09","updated_at":"2025-02-24 06:56:35","name":"Germany #507","station":"185.130.184.115","ipv6_station":"","hostname":"de507.nordvpn.com","status":"online","load":0,"ips":[{"id":65147,"created_at":"2018-11-21 13:55:29","updated_at":"2018-11-21 13:55:29","server_id":933110,"ip_id":17666,"type":"entry","ip":{"id":17666,"ip":"185.130.184.115","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[133]},{"id":933113,"created_at":"2018-11-20 08:12:10","updated_at":"2025-02-24 00:16:44","name":"Germany #508","station":"185.130.184.116","ipv6_station":"","hostname":"de508.nordvpn.com","status":"online","load":0,"ips":[{"id":65345,"created_at":"2018-11-21 14:00:30","updated_at":"2018-11-21 14:00:30","server_id":933113,"ip_id":17669,"type":"entry","ip":{"id":17669,"ip":"185.130.184.116","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[133]},{"id":933116,"created_at":"2018-11-20 08:12:11","updated_at":"2025-02-24 07:16:35","name":"Germany #509","station":"185.130.184.117","ipv6_station":"","hostname":"de509.nordvpn.com","status":"online","load":3,"ips":[{"id":65543,"created_at":"2018-11-21 14:05:19","updated_at":"2018-11-21 14:05:19","server_id":933116,"ip_id":17672,"type":"entry","ip":{"id":17672,"ip":"185.130.184.117","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[133]},{"id":933119,"created_at":"2018-11-20 08:12:12","updated_at":"2025-02-24 06:52:33","name":"Germany #510","station":"185.130.184.118","ipv6_station":"","hostname":"de510.nordvpn.com","status":"online","load":0,"ips":[{"id":791747,"created_at":"2023-01-10 11:47:01","updated_at":"2023-01-10 11:47:01","server_id":933119,"ip_id":17675,"type":"entry","ip":{"id":17675,"ip":"185.130.184.118","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[133]},{"id":933302,"created_at":"2018-11-22 08:46:59","updated_at":"2025-02-24 07:04:35","name":"United Kingdom #877","station":"81.19.217.3","ipv6_station":"","hostname":"uk877.nordvpn.com","status":"online","load":11,"ips":[{"id":1855801,"created_at":"2024-09-27 09:06:13","updated_at":"2024-09-27 09:06:13","server_id":933302,"ip_id":24521,"type":"entry","ip":{"id":24521,"ip":"81.19.217.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":933308,"created_at":"2018-11-22 08:49:05","updated_at":"2025-02-24 04:40:34","name":"United States #2920","station":"96.9.246.179","ipv6_station":"","hostname":"us2920.nordvpn.com","status":"online","load":0,"ips":[{"id":395835,"created_at":"2021-09-27 05:55:48","updated_at":"2021-09-27 05:55:48","server_id":933308,"ip_id":24995,"type":"entry","ip":{"id":24995,"ip":"96.9.246.179","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":933311,"created_at":"2018-11-22 08:49:08","updated_at":"2025-02-24 04:53:29","name":"United States #2921","station":"96.9.246.180","ipv6_station":"","hostname":"us2921.nordvpn.com","status":"online","load":0,"ips":[{"id":109960,"created_at":"2019-04-26 08:39:37","updated_at":"2019-04-26 08:39:37","server_id":933311,"ip_id":24998,"type":"entry","ip":{"id":24998,"ip":"96.9.246.180","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":934646,"created_at":"2019-01-07 08:52:01","updated_at":"2025-02-24 07:16:34","name":"United Kingdom #879","station":"81.19.223.3","ipv6_station":"","hostname":"uk879.nordvpn.com","status":"online","load":10,"ips":[{"id":1855675,"created_at":"2024-09-27 08:58:15","updated_at":"2024-09-27 08:58:15","server_id":934646,"ip_id":35480,"type":"entry","ip":{"id":35480,"ip":"81.19.223.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":934691,"created_at":"2019-01-11 09:17:40","updated_at":"2025-02-24 07:16:35","name":"United States #2924","station":"96.9.247.187","ipv6_station":"","hostname":"us2924.nordvpn.com","status":"online","load":0,"ips":[{"id":108760,"created_at":"2019-04-26 07:22:17","updated_at":"2019-04-26 07:22:17","server_id":934691,"ip_id":35609,"type":"entry","ip":{"id":35609,"ip":"96.9.247.187","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":934694,"created_at":"2019-01-11 09:17:45","updated_at":"2025-02-24 00:16:45","name":"United States #2925","station":"96.9.247.188","ipv6_station":"","hostname":"us2925.nordvpn.com","status":"online","load":0,"ips":[{"id":573023,"created_at":"2022-06-02 12:26:29","updated_at":"2022-06-02 12:26:29","server_id":934694,"ip_id":35615,"type":"entry","ip":{"id":35615,"ip":"96.9.247.188","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":935000,"created_at":"2019-01-30 09:55:48","updated_at":"2025-02-24 07:12:35","name":"United Kingdom #884","station":"178.239.169.3","ipv6_station":"","hostname":"uk884.nordvpn.com","status":"online","load":11,"ips":[{"id":1855653,"created_at":"2024-09-27 08:55:30","updated_at":"2024-09-27 08:55:30","server_id":935000,"ip_id":36434,"type":"entry","ip":{"id":36434,"ip":"178.239.169.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":937379,"created_at":"2019-03-12 06:27:04","updated_at":"2025-02-24 00:16:45","name":"United States #2929","station":"107.173.59.99","ipv6_station":"","hostname":"us2929.nordvpn.com","status":"online","load":0,"ips":[{"id":105682,"created_at":"2019-04-25 14:21:38","updated_at":"2019-04-25 14:21:38","server_id":937379,"ip_id":42143,"type":"entry","ip":{"id":42143,"ip":"107.173.59.99","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":937382,"created_at":"2019-03-12 06:28:00","updated_at":"2025-02-24 06:12:45","name":"United States #2930","station":"172.93.147.130","ipv6_station":"","hostname":"us2930.nordvpn.com","status":"online","load":0,"ips":[{"id":105295,"created_at":"2019-04-25 14:11:08","updated_at":"2019-04-25 14:11:08","server_id":937382,"ip_id":42152,"type":"entry","ip":{"id":42152,"ip":"172.93.147.130","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":937877,"created_at":"2019-03-20 08:33:15","updated_at":"2025-02-24 07:16:35","name":"United Kingdom #886","station":"185.44.79.131","ipv6_station":"","hostname":"uk886.nordvpn.com","status":"online","load":14,"ips":[{"id":1855631,"created_at":"2024-09-27 08:52:23","updated_at":"2024-09-27 08:52:23","server_id":937877,"ip_id":43184,"type":"entry","ip":{"id":43184,"ip":"185.44.79.131","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,15,11],"service_ids":[1,5],"location_ids":[45]},{"id":938291,"created_at":"2019-03-28 02:48:46","updated_at":"2025-02-24 07:16:35","name":"Belgium #149","station":"77.243.191.250","ipv6_station":"","hostname":"be149.nordvpn.com","status":"online","load":16,"ips":[{"id":1007276,"created_at":"2023-07-11 10:41:43","updated_at":"2023-07-11 10:41:43","server_id":938291,"ip_id":6923,"type":"entry","ip":{"id":6923,"ip":"77.243.191.250","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"VSa6XYcD279ahd3IuEiUH6VpXn0+h+kWrD4OcN1ExUs="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[3990]},{"id":938537,"created_at":"2019-03-28 07:14:01","updated_at":"2025-02-24 07:12:35","name":"United Kingdom #1806","station":"193.9.113.134","ipv6_station":"","hostname":"uk1806.nordvpn.com","status":"online","load":14,"ips":[{"id":1028543,"created_at":"2023-07-18 09:23:03","updated_at":"2023-07-18 09:23:03","server_id":938537,"ip_id":26495,"type":"entry","ip":{"id":26495,"ip":"193.9.113.134","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[45]},{"id":940130,"created_at":"2019-04-16 06:50:09","updated_at":"2025-02-24 07:16:35","name":"United Kingdom #888","station":"185.16.205.3","ipv6_station":"","hostname":"uk888.nordvpn.com","status":"online","load":13,"ips":[{"id":1855608,"created_at":"2024-09-27 08:50:33","updated_at":"2024-09-27 08:50:33","server_id":940130,"ip_id":50201,"type":"entry","ip":{"id":50201,"ip":"185.16.205.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":940136,"created_at":"2019-04-16 06:51:14","updated_at":"2025-02-24 07:16:35","name":"United Kingdom #890","station":"185.16.205.131","ipv6_station":"","hostname":"uk890.nordvpn.com","status":"online","load":16,"ips":[{"id":1856382,"created_at":"2024-10-03 12:49:53","updated_at":"2024-10-03 12:49:53","server_id":940136,"ip_id":50207,"type":"entry","ip":{"id":50207,"ip":"185.16.205.131","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":945157,"created_at":"2019-06-13 04:49:56","updated_at":"2025-02-24 01:00:37","name":"United States #2939","station":"172.93.237.99","ipv6_station":"","hostname":"us2939.nordvpn.com","status":"online","load":0,"ips":[{"id":138778,"created_at":"2019-07-09 14:15:11","updated_at":"2019-07-09 14:15:11","server_id":945157,"ip_id":63127,"type":"entry","ip":{"id":63127,"ip":"172.93.237.99","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":945160,"created_at":"2019-06-13 04:49:57","updated_at":"2025-02-24 00:16:47","name":"United States #2940","station":"172.93.237.100","ipv6_station":"","hostname":"us2940.nordvpn.com","status":"online","load":0,"ips":[{"id":139372,"created_at":"2019-07-09 14:25:49","updated_at":"2019-07-09 14:25:49","server_id":945160,"ip_id":63130,"type":"entry","ip":{"id":63130,"ip":"172.93.237.100","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":945916,"created_at":"2019-06-25 11:49:45","updated_at":"2025-02-24 07:16:35","name":"Germany #655","station":"194.31.54.4","ipv6_station":"","hostname":"de655.nordvpn.com","status":"online","load":2,"ips":[{"id":1773885,"created_at":"2024-08-21 05:08:31","updated_at":"2024-08-21 05:08:31","server_id":945916,"ip_id":65179,"type":"entry","ip":{"id":65179,"ip":"194.31.54.4","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[133]},{"id":946435,"created_at":"2019-07-12 07:51:12","updated_at":"2025-02-24 07:16:35","name":"United Kingdom #892","station":"195.206.170.3","ipv6_station":"","hostname":"uk892.nordvpn.com","status":"online","load":15,"ips":[{"id":1855574,"created_at":"2024-09-27 08:48:09","updated_at":"2024-09-27 08:48:09","server_id":946435,"ip_id":68866,"type":"entry","ip":{"id":68866,"ip":"195.206.170.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":946441,"created_at":"2019-07-12 07:51:13","updated_at":"2025-02-24 07:16:35","name":"United Kingdom #894","station":"195.206.170.131","ipv6_station":"","hostname":"uk894.nordvpn.com","status":"online","load":16,"ips":[{"id":1856397,"created_at":"2024-10-03 12:49:58","updated_at":"2024-10-03 12:49:58","server_id":946441,"ip_id":68872,"type":"entry","ip":{"id":68872,"ip":"195.206.170.131","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":947116,"created_at":"2019-08-06 07:35:03","updated_at":"2025-02-24 07:16:35","name":"United Kingdom #896","station":"178.239.164.3","ipv6_station":"","hostname":"uk896.nordvpn.com","status":"online","load":14,"ips":[{"id":1855544,"created_at":"2024-09-27 08:46:21","updated_at":"2024-09-27 08:46:21","server_id":947116,"ip_id":72133,"type":"entry","ip":{"id":72133,"ip":"178.239.164.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,11,15],"service_ids":[1,5],"location_ids":[45]},{"id":947122,"created_at":"2019-08-06 07:35:04","updated_at":"2025-02-24 07:16:35","name":"United Kingdom #898","station":"178.239.164.131","ipv6_station":"","hostname":"uk898.nordvpn.com","status":"online","load":14,"ips":[{"id":1855524,"created_at":"2024-09-27 08:44:47","updated_at":"2024-09-27 08:44:47","server_id":947122,"ip_id":72139,"type":"entry","ip":{"id":72139,"ip":"178.239.164.131","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[19,15,11],"service_ids":[1,5],"location_ids":[45]},{"id":947235,"created_at":"2019-08-23 12:48:22","updated_at":"2025-02-24 07:16:35","name":"United States #2943","station":"89.187.175.97","ipv6_station":"","hostname":"us2943.nordvpn.com","status":"online","load":0,"ips":[{"id":1818610,"created_at":"2024-08-29 11:50:57","updated_at":"2024-08-29 11:50:57","server_id":947235,"ip_id":72639,"type":"entry","ip":{"id":72639,"ip":"89.187.175.97","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[79]},{"id":947238,"created_at":"2019-08-23 12:48:22","updated_at":"2025-02-24 06:40:35","name":"United States #2944","station":"89.187.175.98","ipv6_station":"","hostname":"us2944.nordvpn.com","status":"online","load":0,"ips":[{"id":1810823,"created_at":"2024-08-28 11:12:32","updated_at":"2024-08-28 11:12:32","server_id":947238,"ip_id":72645,"type":"entry","ip":{"id":72645,"ip":"89.187.175.98","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[79]},{"id":947280,"created_at":"2019-08-28 06:59:11","updated_at":"2025-02-24 07:16:35","name":"United States #2945","station":"89.187.185.86","ipv6_station":"","hostname":"us2945.nordvpn.com","status":"online","load":10,"ips":[{"id":1821697,"created_at":"2024-08-30 04:42:38","updated_at":"2024-08-30 04:42:38","server_id":947280,"ip_id":73533,"type":"entry","ip":{"id":73533,"ip":"89.187.185.86","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[51]},{"id":947283,"created_at":"2019-08-28 06:59:11","updated_at":"2025-02-24 07:16:35","name":"United States #2946","station":"89.187.185.97","ipv6_station":"","hostname":"us2946.nordvpn.com","status":"online","load":2,"ips":[{"id":1807685,"created_at":"2024-08-28 06:22:30","updated_at":"2024-08-28 06:22:30","server_id":947283,"ip_id":73536,"type":"entry","ip":{"id":73536,"ip":"89.187.185.97","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[51]},{"id":947592,"created_at":"2019-09-18 09:51:34","updated_at":"2025-02-24 00:16:49","name":"Netherlands #408","station":"185.229.58.3","ipv6_station":"","hostname":"nl408.nordvpn.com","status":"online","load":0,"ips":[{"id":1751714,"created_at":"2024-08-19 05:57:10","updated_at":"2024-08-19 05:57:10","server_id":947592,"ip_id":74514,"type":"entry","ip":{"id":74514,"ip":"185.229.58.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"5p4RkybdRU5uaDi90eu4KZPTFif0lKCg4Qp6t1c4F30="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[5]},{"id":947595,"created_at":"2019-09-18 09:51:34","updated_at":"2025-02-24 07:04:35","name":"Netherlands #409","station":"185.229.58.129","ipv6_station":"","hostname":"nl409.nordvpn.com","status":"online","load":1,"ips":[{"id":1768144,"created_at":"2024-08-20 07:16:03","updated_at":"2024-08-20 07:16:03","server_id":947595,"ip_id":74517,"type":"entry","ip":{"id":74517,"ip":"185.229.58.129","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"5p4RkybdRU5uaDi90eu4KZPTFif0lKCg4Qp6t1c4F30="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[5]},{"id":948099,"created_at":"2019-09-26 12:22:40","updated_at":"2025-02-24 00:20:39","name":"Germany #676","station":"37.120.223.116","ipv6_station":"","hostname":"de676.nordvpn.com","status":"online","load":0,"ips":[{"id":1791453,"created_at":"2024-08-26 11:14:49","updated_at":"2024-08-26 11:14:49","server_id":948099,"ip_id":75906,"type":"entry","ip":{"id":75906,"ip":"37.120.223.116","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[133]},{"id":948810,"created_at":"2019-10-11 09:06:37","updated_at":"2025-02-24 07:16:35","name":"United States #5055","station":"89.187.175.2","ipv6_station":"","hostname":"us5055.nordvpn.com","status":"online","load":11,"ips":[{"id":795035,"created_at":"2023-01-16 13:35:10","updated_at":"2023-01-16 13:35:10","server_id":948810,"ip_id":78471,"type":"entry","ip":{"id":78471,"ip":"89.187.175.2","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,21],"service_ids":[1,5],"location_ids":[79]},{"id":949095,"created_at":"2019-10-29 07:51:33","updated_at":"2025-02-24 00:16:49","name":"United States #2949","station":"64.44.32.75","ipv6_station":"","hostname":"us2949.nordvpn.com","status":"online","load":0,"ips":[{"id":155328,"created_at":"2019-10-30 08:32:23","updated_at":"2019-10-30 08:32:23","server_id":949095,"ip_id":80337,"type":"entry","ip":{"id":80337,"ip":"64.44.32.75","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":949098,"created_at":"2019-10-29 07:51:33","updated_at":"2025-02-24 03:04:34","name":"United States #2950","station":"64.44.32.76","ipv6_station":"","hostname":"us2950.nordvpn.com","status":"online","load":0,"ips":[{"id":193733,"created_at":"2020-04-28 07:18:59","updated_at":"2020-04-28 07:18:59","server_id":949098,"ip_id":80340,"type":"entry","ip":{"id":80340,"ip":"64.44.32.76","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[19]},{"id":949581,"created_at":"2019-11-20 07:55:10","updated_at":"2025-02-24 07:16:35","name":"France #439","station":"185.93.2.199","ipv6_station":"","hostname":"fr439.nordvpn.com","status":"online","load":2,"ips":[{"id":1803435,"created_at":"2024-08-27 13:14:39","updated_at":"2024-08-27 13:14:39","server_id":949581,"ip_id":82254,"type":"entry","ip":{"id":82254,"ip":"185.93.2.199","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[87]},{"id":949584,"created_at":"2019-11-20 07:55:10","updated_at":"2025-02-24 07:16:35","name":"France #440","station":"185.93.2.206","ipv6_station":"","hostname":"fr440.nordvpn.com","status":"online","load":2,"ips":[{"id":1779073,"created_at":"2024-08-22 08:12:09","updated_at":"2024-08-22 08:12:09","server_id":949584,"ip_id":82257,"type":"entry","ip":{"id":82257,"ip":"185.93.2.206","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,19],"service_ids":[1,5],"location_ids":[87]},{"id":950271,"created_at":"2019-12-02 10:45:18","updated_at":"2025-02-24 07:12:35","name":"Japan #429","station":"37.120.210.107","ipv6_station":"","hostname":"jp429.nordvpn.com","status":"online","load":17,"ips":[{"id":723494,"created_at":"2022-11-17 10:58:24","updated_at":"2022-11-17 10:58:24","server_id":950271,"ip_id":85143,"type":"entry","ip":{"id":85143,"ip":"37.120.210.107","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"SAio0Z0suFlRfmydzPdcn6MamqS7Mq4pSOm2YmJkLSs="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,23],"service_ids":[1,5],"location_ids":[3984]},{"id":950346,"created_at":"2019-12-03 07:26:00","updated_at":"2025-02-24 07:16:35","name":"Spain #114","station":"37.120.199.243","ipv6_station":"","hostname":"es114.nordvpn.com","status":"online","load":10,"ips":[{"id":1022015,"created_at":"2023-07-14 12:08:53","updated_at":"2023-07-14 12:08:53","server_id":950346,"ip_id":85356,"type":"entry","ip":{"id":85356,"ip":"37.120.199.243","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"IF1FGVSzrUznFVZ+dymIz+6bdlCgsuiT/d6cyapN8lw="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[113]},{"id":950361,"created_at":"2019-12-03 07:52:53","updated_at":"2025-02-24 07:16:35","name":"Italy #132","station":"217.138.197.75","ipv6_station":"","hostname":"it132.nordvpn.com","status":"online","load":19,"ips":[{"id":939377,"created_at":"2023-06-20 06:54:02","updated_at":"2023-06-20 06:54:02","server_id":950361,"ip_id":85416,"type":"entry","ip":{"id":85416,"ip":"217.138.197.75","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FgxaycYZ4t1kp4x7LDv60sczNTAl0h/d4pyyUNHhgBc="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[3978]},{"id":950406,"created_at":"2019-12-03 09:17:57","updated_at":"2025-02-24 07:16:35","name":"United States #4735","station":"217.138.198.235","ipv6_station":"","hostname":"us4735.nordvpn.com","status":"online","load":17,"ips":[{"id":438578,"created_at":"2021-12-08 11:11:25","updated_at":"2021-12-08 11:11:25","server_id":950406,"ip_id":85596,"type":"entry","ip":{"id":85596,"ip":"217.138.198.235","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,21],"service_ids":[1,5],"location_ids":[305]},{"id":950436,"created_at":"2019-12-03 09:54:36","updated_at":"2025-02-24 07:12:35","name":"Poland #122","station":"37.120.211.171","ipv6_station":"","hostname":"pl122.nordvpn.com","status":"online","load":14,"ips":[{"id":1020326,"created_at":"2023-07-14 07:43:43","updated_at":"2023-07-14 07:43:43","server_id":950436,"ip_id":85716,"type":"entry","ip":{"id":85716,"ip":"37.120.211.171","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"kjAOzXQRVGpmQdqE2zPsITH8QHmFK83AAPktqWed9wM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[367]},{"id":950481,"created_at":"2019-12-03 12:01:58","updated_at":"2025-02-24 07:16:35","name":"Czech Republic #93","station":"217.138.199.27","ipv6_station":"","hostname":"cz93.nordvpn.com","status":"online","load":11,"ips":[{"id":1042049,"created_at":"2023-07-19 10:40:00","updated_at":"2023-07-19 10:40:00","server_id":950481,"ip_id":85899,"type":"entry","ip":{"id":85899,"ip":"217.138.199.27","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"apEe1p4IQvCQxexoxoUTXsm2p582FtbDAboPwThFYEs="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[143]},{"id":950538,"created_at":"2019-12-03 12:56:46","updated_at":"2025-02-24 07:16:35","name":"Austria #80","station":"5.253.207.203","ipv6_station":"","hostname":"at80.nordvpn.com","status":"online","load":18,"ips":[{"id":1012112,"created_at":"2023-07-12 10:42:31","updated_at":"2023-07-12 10:42:31","server_id":950538,"ip_id":86127,"type":"entry","ip":{"id":86127,"ip":"5.253.207.203","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"F6b2ac9H7hEvt03EonY1bS4FzNAabEmURDTB8wIIPXc="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[205]},{"id":950568,"created_at":"2019-12-03 13:48:18","updated_at":"2025-02-24 07:16:35","name":"Romania #59","station":"86.106.137.187","ipv6_station":"","hostname":"ro59.nordvpn.com","status":"online","load":19,"ips":[{"id":1043009,"created_at":"2023-07-19 11:39:41","updated_at":"2023-07-19 11:39:41","server_id":950568,"ip_id":86247,"type":"entry","ip":{"id":86247,"ip":"86.106.137.187","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"o3Dj1qKYmzBBOBaD9JAhK9cg/8nfYxWg6GADL09DPHE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[65]},{"id":950598,"created_at":"2019-12-03 14:06:40","updated_at":"2025-02-24 07:12:35","name":"Switzerland #198","station":"37.120.213.131","ipv6_station":"","hostname":"ch198.nordvpn.com","status":"online","load":14,"ips":[{"id":938273,"created_at":"2023-06-19 10:48:10","updated_at":"2023-06-19 10:48:10","server_id":950598,"ip_id":86367,"type":"entry","ip":{"id":86367,"ip":"37.120.213.131","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[107]},{"id":950628,"created_at":"2019-12-03 14:25:53","updated_at":"2025-02-24 07:00:36","name":"Bulgaria #38","station":"217.138.202.147","ipv6_station":"","hostname":"bg38.nordvpn.com","status":"online","load":5,"ips":[{"id":1030013,"created_at":"2023-07-19 06:14:34","updated_at":"2023-07-19 06:14:34","server_id":950628,"ip_id":86487,"type":"entry","ip":{"id":86487,"ip":"217.138.202.147","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"xqa+kDsDeYLQAnVDUQaFun9Djfo3c1ESTMwfNArHw10="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[259]},{"id":950658,"created_at":"2019-12-03 14:43:02","updated_at":"2025-02-24 07:16:35","name":"Hungary #47","station":"217.138.192.99","ipv6_station":"","hostname":"hu47.nordvpn.com","status":"online","load":5,"ips":[{"id":1038686,"created_at":"2023-07-19 09:30:15","updated_at":"2023-07-19 09:30:15","server_id":950658,"ip_id":86607,"type":"entry","ip":{"id":86607,"ip":"217.138.192.99","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"3KWTCjpHlmXD3BroyAIFMN8ajr+ibShIl8OSUGgejXY="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[247]},{"id":951120,"created_at":"2019-12-09 11:56:08","updated_at":"2025-02-24 07:16:35","name":"France #452","station":"45.152.181.219","ipv6_station":"","hostname":"fr452.nordvpn.com","status":"online","load":11,"ips":[{"id":965984,"created_at":"2023-06-27 13:02:08","updated_at":"2023-06-27 13:02:08","server_id":951120,"ip_id":87555,"type":"entry","ip":{"id":87555,"ip":"45.152.181.219","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":951123,"created_at":"2019-12-09 15:34:59","updated_at":"2025-02-24 07:16:35","name":"Japan #454","station":"89.187.161.54","ipv6_station":"","hostname":"jp454.nordvpn.com","status":"online","load":17,"ips":[{"id":596243,"created_at":"2022-07-08 07:48:04","updated_at":"2022-07-08 07:48:04","server_id":951123,"ip_id":87579,"type":"entry","ip":{"id":87579,"ip":"89.187.161.54","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"SAio0Z0suFlRfmydzPdcn6MamqS7Mq4pSOm2YmJkLSs="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,23],"service_ids":[1,5],"location_ids":[3984]},{"id":952599,"created_at":"2019-12-18 11:06:55","updated_at":"2025-02-24 07:04:35","name":"United States #4951","station":"84.17.44.122","ipv6_station":"","hostname":"us4951.nordvpn.com","status":"online","load":1,"ips":[{"id":1809916,"created_at":"2024-08-28 10:54:56","updated_at":"2024-08-28 10:54:56","server_id":952599,"ip_id":88899,"type":"entry","ip":{"id":88899,"ip":"84.17.44.122","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[51]},{"id":956138,"created_at":"2020-02-17 09:36:29","updated_at":"2025-02-24 07:16:35","name":"Denmark #150","station":"37.120.194.3","ipv6_station":"","hostname":"dk150.nordvpn.com","status":"online","load":11,"ips":[{"id":1010432,"created_at":"2023-07-12 09:16:23","updated_at":"2023-07-12 09:16:23","server_id":956138,"ip_id":98828,"type":"entry","ip":{"id":98828,"ip":"37.120.194.3","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"EHL1zeXjZEJlqtFA8qaRVuvl0zR4skbC/AjiG66CLCc="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[169]},{"id":956471,"created_at":"2020-02-25 08:28:44","updated_at":"2025-02-24 07:16:35","name":"Germany #750","station":"5.180.62.120","ipv6_station":"","hostname":"de750.nordvpn.com","status":"online","load":12,"ips":[{"id":979883,"created_at":"2023-06-30 07:46:11","updated_at":"2023-06-30 07:46:11","server_id":956471,"ip_id":102428,"type":"entry","ip":{"id":102428,"ip":"5.180.62.120","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[133]},{"id":956477,"created_at":"2020-02-25 11:14:12","updated_at":"2025-02-24 07:16:35","name":"United States #4953","station":"89.187.175.53","ipv6_station":"","hostname":"us4953.nordvpn.com","status":"online","load":2,"ips":[{"id":1850299,"created_at":"2024-09-12 13:39:49","updated_at":"2024-09-12 13:39:49","server_id":956477,"ip_id":102437,"type":"entry","ip":{"id":102437,"ip":"89.187.175.53","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[79]},{"id":956480,"created_at":"2020-02-25 11:14:13","updated_at":"2025-02-24 05:13:28","name":"United States #4954","station":"89.187.175.54","ipv6_station":"","hostname":"us4954.nordvpn.com","status":"online","load":1,"ips":[{"id":1812651,"created_at":"2024-08-28 12:13:26","updated_at":"2024-08-28 12:13:26","server_id":956480,"ip_id":102440,"type":"entry","ip":{"id":102440,"ip":"89.187.175.54","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":200,"value":"2.0.0"}]}],"technologies":[{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="}],"status":"online"},{"id":42,"status":"online"},{"id":45,"status":"online"}],"group_ids":[9,21],"service_ids":[1,5],"location_ids":[79]},{"id":956489,"created_at":"2020-02-25 12:24:48","updated_at":"2025-02-24 07:16:35","name":"Poland #125","station":"217.138.209.67","ipv6_station":"","hostname":"pl125.nordvpn.com","status":"online","load":61,"ips":[{"id":1020452,"created_at":"2023-07-14 07:44:07","updated_at":"2023-07-14 07:44:07","server_id":956489,"ip_id":102491,"type":"entry","ip":{"id":102491,"ip":"217.138.209.67","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"kjAOzXQRVGpmQdqE2zPsITH8QHmFK83AAPktqWed9wM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[367]},{"id":956522,"created_at":"2020-02-28 10:10:05","updated_at":"2025-02-24 07:16:35","name":"United States #5057","station":"217.138.208.211","ipv6_station":"","hostname":"us5057.nordvpn.com","status":"online","load":13,"ips":[{"id":438611,"created_at":"2021-12-08 11:11:42","updated_at":"2021-12-08 11:11:42","server_id":956522,"ip_id":102632,"type":"entry","ip":{"id":102632,"ip":"217.138.208.211","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,21],"service_ids":[1,5],"location_ids":[305]},{"id":956525,"created_at":"2020-02-28 10:10:06","updated_at":"2025-02-24 07:12:35","name":"United States #5058","station":"217.138.208.219","ipv6_station":"","hostname":"us5058.nordvpn.com","status":"online","load":13,"ips":[{"id":438644,"created_at":"2021-12-08 11:11:57","updated_at":"2021-12-08 11:11:57","server_id":956525,"ip_id":102638,"type":"entry","ip":{"id":102638,"ip":"217.138.208.219","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,21],"service_ids":[1,5],"location_ids":[305]},{"id":956528,"created_at":"2020-02-28 10:10:06","updated_at":"2025-02-24 07:16:35","name":"United States #5059","station":"217.138.208.139","ipv6_station":"","hostname":"us5059.nordvpn.com","status":"online","load":8,"ips":[{"id":438677,"created_at":"2021-12-08 11:12:16","updated_at":"2021-12-08 11:12:16","server_id":956528,"ip_id":102644,"type":"entry","ip":{"id":102644,"ip":"217.138.208.139","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,21],"service_ids":[1,5],"location_ids":[305]},{"id":956531,"created_at":"2020-02-28 10:10:07","updated_at":"2025-02-24 07:16:35","name":"United States #5060","station":"217.138.208.147","ipv6_station":"","hostname":"us5060.nordvpn.com","status":"online","load":18,"ips":[{"id":438710,"created_at":"2021-12-08 11:12:34","updated_at":"2021-12-08 11:12:34","server_id":956531,"ip_id":102650,"type":"entry","ip":{"id":102650,"ip":"217.138.208.147","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,21],"service_ids":[1,5],"location_ids":[305]},{"id":956603,"created_at":"2020-03-05 13:10:47","updated_at":"2025-02-24 07:16:35","name":"Norway #141","station":"37.120.203.163","ipv6_station":"","hostname":"no141.nordvpn.com","status":"online","load":18,"ips":[{"id":924911,"created_at":"2023-06-14 11:24:03","updated_at":"2023-06-14 11:24:03","server_id":956603,"ip_id":106556,"type":"entry","ip":{"id":106556,"ip":"37.120.203.163","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956606,"created_at":"2020-03-05 13:10:47","updated_at":"2025-02-24 07:16:36","name":"Norway #142","station":"37.120.203.171","ipv6_station":"","hostname":"no142.nordvpn.com","status":"online","load":5,"ips":[{"id":924866,"created_at":"2023-06-14 11:23:43","updated_at":"2023-06-14 11:23:43","server_id":956606,"ip_id":106562,"type":"entry","ip":{"id":106562,"ip":"37.120.203.171","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956609,"created_at":"2020-03-05 13:10:48","updated_at":"2025-02-24 07:12:36","name":"Norway #143","station":"37.120.203.179","ipv6_station":"","hostname":"no143.nordvpn.com","status":"online","load":6,"ips":[{"id":917294,"created_at":"2023-06-06 12:12:15","updated_at":"2023-06-06 12:12:15","server_id":956609,"ip_id":106568,"type":"entry","ip":{"id":106568,"ip":"37.120.203.179","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956612,"created_at":"2020-03-05 13:10:48","updated_at":"2025-02-24 07:16:36","name":"Norway #144","station":"37.120.203.187","ipv6_station":"","hostname":"no144.nordvpn.com","status":"online","load":6,"ips":[{"id":917252,"created_at":"2023-06-06 12:11:27","updated_at":"2023-06-06 12:11:27","server_id":956612,"ip_id":106574,"type":"entry","ip":{"id":106574,"ip":"37.120.203.187","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956615,"created_at":"2020-03-05 13:10:48","updated_at":"2025-02-24 07:16:36","name":"Norway #145","station":"37.120.203.195","ipv6_station":"","hostname":"no145.nordvpn.com","status":"online","load":6,"ips":[{"id":917210,"created_at":"2023-06-06 12:10:06","updated_at":"2023-06-06 12:10:06","server_id":956615,"ip_id":106580,"type":"entry","ip":{"id":106580,"ip":"37.120.203.195","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956618,"created_at":"2020-03-05 13:10:49","updated_at":"2025-02-24 07:16:36","name":"Norway #146","station":"37.120.203.203","ipv6_station":"","hostname":"no146.nordvpn.com","status":"online","load":9,"ips":[{"id":917168,"created_at":"2023-06-06 12:09:17","updated_at":"2023-06-06 12:09:17","server_id":956618,"ip_id":106586,"type":"entry","ip":{"id":106586,"ip":"37.120.203.203","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956621,"created_at":"2020-03-05 13:10:49","updated_at":"2025-02-24 07:16:36","name":"Norway #147","station":"37.120.203.211","ipv6_station":"","hostname":"no147.nordvpn.com","status":"online","load":7,"ips":[{"id":917126,"created_at":"2023-06-06 12:08:21","updated_at":"2023-06-06 12:08:21","server_id":956621,"ip_id":106592,"type":"entry","ip":{"id":106592,"ip":"37.120.203.211","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956624,"created_at":"2020-03-05 13:10:50","updated_at":"2025-02-24 07:16:36","name":"Norway #148","station":"37.120.203.219","ipv6_station":"","hostname":"no148.nordvpn.com","status":"online","load":9,"ips":[{"id":917084,"created_at":"2023-06-06 12:07:34","updated_at":"2023-06-06 12:07:34","server_id":956624,"ip_id":106598,"type":"entry","ip":{"id":106598,"ip":"37.120.203.219","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956627,"created_at":"2020-03-05 13:10:50","updated_at":"2025-02-24 07:16:36","name":"Norway #149","station":"95.174.66.27","ipv6_station":"","hostname":"no149.nordvpn.com","status":"online","load":7,"ips":[{"id":917042,"created_at":"2023-06-06 12:07:05","updated_at":"2023-06-06 12:07:05","server_id":956627,"ip_id":106604,"type":"entry","ip":{"id":106604,"ip":"95.174.66.27","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[97]},{"id":956636,"created_at":"2020-03-06 10:50:34","updated_at":"2025-02-24 07:08:37","name":"United Kingdom #1785","station":"194.35.233.75","ipv6_station":"","hostname":"uk1785.nordvpn.com","status":"online","load":13,"ips":[{"id":1031597,"created_at":"2023-07-19 06:16:16","updated_at":"2023-07-19 06:16:16","server_id":956636,"ip_id":70750,"type":"entry","ip":{"id":70750,"ip":"194.35.233.75","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[45]},{"id":956693,"created_at":"2020-03-10 11:07:25","updated_at":"2025-02-24 07:12:36","name":"Hungary #49","station":"217.138.192.83","ipv6_station":"","hostname":"hu49.nordvpn.com","status":"online","load":6,"ips":[{"id":1038770,"created_at":"2023-07-19 09:30:35","updated_at":"2023-07-19 09:30:35","server_id":956693,"ip_id":86595,"type":"entry","ip":{"id":86595,"ip":"217.138.192.83","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"3KWTCjpHlmXD3BroyAIFMN8ajr+ibShIl8OSUGgejXY="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[247]},{"id":956696,"created_at":"2020-03-10 12:25:51","updated_at":"2025-02-24 07:16:36","name":"France #536","station":"217.138.207.139","ipv6_station":"","hostname":"fr536.nordvpn.com","status":"online","load":12,"ips":[{"id":966083,"created_at":"2023-06-27 13:02:36","updated_at":"2023-06-27 13:02:36","server_id":956696,"ip_id":107162,"type":"entry","ip":{"id":107162,"ip":"217.138.207.139","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956699,"created_at":"2020-03-10 12:25:51","updated_at":"2025-02-24 07:16:36","name":"France #537","station":"217.138.207.147","ipv6_station":"","hostname":"fr537.nordvpn.com","status":"online","load":9,"ips":[{"id":966116,"created_at":"2023-06-27 13:02:44","updated_at":"2023-06-27 13:02:44","server_id":956699,"ip_id":107168,"type":"entry","ip":{"id":107168,"ip":"217.138.207.147","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956702,"created_at":"2020-03-10 12:25:51","updated_at":"2025-02-24 07:16:36","name":"France #538","station":"217.138.207.155","ipv6_station":"","hostname":"fr538.nordvpn.com","status":"online","load":12,"ips":[{"id":966149,"created_at":"2023-06-27 13:02:52","updated_at":"2023-06-27 13:02:52","server_id":956702,"ip_id":107174,"type":"entry","ip":{"id":107174,"ip":"217.138.207.155","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956705,"created_at":"2020-03-10 12:25:52","updated_at":"2025-02-24 07:16:36","name":"France #539","station":"217.138.207.163","ipv6_station":"","hostname":"fr539.nordvpn.com","status":"online","load":17,"ips":[{"id":966182,"created_at":"2023-06-27 13:02:59","updated_at":"2023-06-27 13:02:59","server_id":956705,"ip_id":107180,"type":"entry","ip":{"id":107180,"ip":"217.138.207.163","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956708,"created_at":"2020-03-10 12:25:52","updated_at":"2025-02-24 07:16:36","name":"France #540","station":"217.138.207.195","ipv6_station":"","hostname":"fr540.nordvpn.com","status":"online","load":11,"ips":[{"id":966215,"created_at":"2023-06-27 13:03:07","updated_at":"2023-06-27 13:03:07","server_id":956708,"ip_id":107186,"type":"entry","ip":{"id":107186,"ip":"217.138.207.195","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956711,"created_at":"2020-03-10 12:25:53","updated_at":"2025-02-24 07:16:36","name":"France #541","station":"217.138.207.203","ipv6_station":"","hostname":"fr541.nordvpn.com","status":"online","load":13,"ips":[{"id":966248,"created_at":"2023-06-27 13:03:16","updated_at":"2023-06-27 13:03:16","server_id":956711,"ip_id":107192,"type":"entry","ip":{"id":107192,"ip":"217.138.207.203","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956714,"created_at":"2020-03-10 12:25:53","updated_at":"2025-02-24 07:12:36","name":"France #542","station":"217.138.207.171","ipv6_station":"","hostname":"fr542.nordvpn.com","status":"online","load":17,"ips":[{"id":966281,"created_at":"2023-06-27 13:03:24","updated_at":"2023-06-27 13:03:24","server_id":956714,"ip_id":107198,"type":"entry","ip":{"id":107198,"ip":"217.138.207.171","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956717,"created_at":"2020-03-10 12:25:54","updated_at":"2025-02-24 07:16:36","name":"France #543","station":"217.138.207.179","ipv6_station":"","hostname":"fr543.nordvpn.com","status":"online","load":18,"ips":[{"id":966314,"created_at":"2023-06-27 13:03:35","updated_at":"2023-06-27 13:03:35","server_id":956717,"ip_id":107204,"type":"entry","ip":{"id":107204,"ip":"217.138.207.179","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956720,"created_at":"2020-03-10 12:25:54","updated_at":"2025-02-24 07:16:36","name":"France #544","station":"217.138.207.187","ipv6_station":"","hostname":"fr544.nordvpn.com","status":"online","load":17,"ips":[{"id":966347,"created_at":"2023-06-27 13:03:42","updated_at":"2023-06-27 13:03:42","server_id":956720,"ip_id":107210,"type":"entry","ip":{"id":107210,"ip":"217.138.207.187","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[87]},{"id":956732,"created_at":"2020-03-12 13:04:17","updated_at":"2025-02-24 07:16:36","name":"Switzerland #221","station":"91.132.136.235","ipv6_station":"","hostname":"ch221.nordvpn.com","status":"online","load":14,"ips":[{"id":938321,"created_at":"2023-06-19 10:48:33","updated_at":"2023-06-19 10:48:33","server_id":956732,"ip_id":107477,"type":"entry","ip":{"id":107477,"ip":"91.132.136.235","version":4}}],"specifications":[{"id":8,"title":"Version","identifier":"version","values":[{"id":257,"value":"2.1.0"}]}],"technologies":[{"id":1,"status":"online"},{"id":3,"status":"online"},{"id":5,"status":"online"},{"id":21,"status":"online"},{"id":23,"status":"online"},{"id":35,"metadata":[{"name":"public_key","value":"SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="}],"status":"online"},{"id":51,"metadata":[{"name":"port","value":"8443"}],"status":"online"}],"group_ids":[11,15,19],"service_ids":[1,5],"location_ids":[107]}],"groups":[{"id":11,"created_at":"2017-06-13 13:43:00","updated_at":"2017-06-13 13:43:00","title":"Standard VPN servers","identifier":"legacy_standard","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":15,"created_at":"2017-06-13 13:43:38","updated_at":"2017-06-13 13:43:38","title":"P2P","identifier":"legacy_p2p","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":19,"created_at":"2017-10-27 14:17:17","updated_at":"2017-10-27 14:17:17","title":"Europe","identifier":"europe","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}},{"id":21,"created_at":"2017-10-27 14:23:03","updated_at":"2017-10-30 08:09:48","title":"The Americas","identifier":"the_americas","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}},{"id":9,"created_at":"2017-06-13 13:42:36","updated_at":"2018-08-22 12:54:48","title":"Dedicated IP","identifier":"legacy_dedicated_ip","type":{"id":3,"created_at":"2017-06-13 13:40:17","updated_at":"2017-06-13 13:40:23","title":"Legacy category","identifier":"legacy_group_category"}},{"id":23,"created_at":"2017-10-27 14:23:51","updated_at":"2017-10-30 08:09:57","title":"Asia Pacific","identifier":"asia_pacific","type":{"id":5,"created_at":"2017-10-27 14:16:30","updated_at":"2017-10-27 14:16:30","title":"Regions","identifier":"regions"}}],"services":[{"id":1,"name":"VPN","identifier":"vpn","created_at":"2017-03-21 12:00:45","updated_at":"2017-05-25 13:12:31"},{"id":5,"name":"Proxy","identifier":"proxy","created_at":"2017-05-29 19:38:30","updated_at":"2017-05-29 19:38:30"}],"locations":[{"id":367,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":52.25,"longitude":21,"country":{"id":174,"name":"Poland","code":"PL","city":{"id":6863429,"name":"Warsaw","latitude":52.25,"longitude":21,"dns_name":"warsaw","hub_score":0}}},{"id":247,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":47.5,"longitude":19.083333,"country":{"id":98,"name":"Hungary","code":"HU","city":{"id":3348344,"name":"Budapest","latitude":47.5,"longitude":19.083333,"dns_name":"budapest","hub_score":0}}},{"id":51,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":34.0522222,"longitude":-118.2427778,"country":{"id":228,"name":"United States","code":"US","city":{"id":8761958,"name":"Los Angeles","latitude":34.0522222,"longitude":-118.2427778,"dns_name":"los-angeles","hub_score":0}}},{"id":205,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":48.2,"longitude":16.366667,"country":{"id":14,"name":"Austria","code":"AT","city":{"id":448799,"name":"Vienna","latitude":48.2,"longitude":16.366667,"dns_name":"vienna","hub_score":0}}},{"id":107,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":47.366667,"longitude":8.55,"country":{"id":209,"name":"Switzerland","code":"CH","city":{"id":1171814,"name":"Zurich","latitude":47.366667,"longitude":8.55,"dns_name":"zurich","hub_score":0}}},{"id":169,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":55.666667,"longitude":12.583333,"country":{"id":58,"name":"Denmark","code":"DK","city":{"id":2382515,"name":"Copenhagen","latitude":55.666667,"longitude":12.583333,"dns_name":"copenhagen","hub_score":0}}},{"id":97,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":59.916667,"longitude":10.75,"country":{"id":163,"name":"Norway","code":"NO","city":{"id":6127364,"name":"Oslo","latitude":59.916667,"longitude":10.75,"dns_name":"oslo","hub_score":0}}},{"id":45,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":51.514125,"longitude":-0.093689,"country":{"id":227,"name":"United Kingdom","code":"GB","city":{"id":2989907,"name":"London","latitude":51.514125,"longitude":-0.093689,"dns_name":"london","hub_score":0}}},{"id":87,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":48.866667,"longitude":2.333333,"country":{"id":74,"name":"France","code":"FR","city":{"id":2886284,"name":"Paris","latitude":48.866667,"longitude":2.333333,"dns_name":"paris","hub_score":0}}},{"id":133,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.116667,"longitude":8.683333,"country":{"id":81,"name":"Germany","code":"DE","city":{"id":2215709,"name":"Frankfurt","latitude":50.116667,"longitude":8.683333,"dns_name":"frankfurt","hub_score":0}}},{"id":19,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":42.8863889,"longitude":-78.8786111,"country":{"id":228,"name":"United States","code":"US","city":{"id":8963153,"name":"Buffalo","latitude":42.8863889,"longitude":-78.8786111,"dns_name":"buffalo","hub_score":0}}},{"id":3990,"created_at":"2018-06-18 14:58:07","updated_at":"2018-06-18 14:58:07","latitude":50.833333,"longitude":4.333333,"country":{"id":21,"name":"Belgium","code":"BE","city":{"id":654293,"name":"Brussels","latitude":50.833333,"longitude":4.333333,"dns_name":"brussels","hub_score":0}}},{"id":79,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":32.7833333,"longitude":-96.8,"country":{"id":228,"name":"United States","code":"US","city":{"id":9080300,"name":"Dallas","latitude":32.7833333,"longitude":-96.8,"dns_name":"dallas","hub_score":0}}},{"id":5,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":52.35,"longitude":4.916667,"country":{"id":153,"name":"Netherlands","code":"NL","city":{"id":6076868,"name":"Amsterdam","latitude":52.35,"longitude":4.916667,"dns_name":"amsterdam","hub_score":0}}},{"id":3984,"created_at":"2018-06-18 14:45:14","updated_at":"2018-06-18 14:45:14","latitude":35.685,"longitude":139.751389,"country":{"id":108,"name":"Japan","code":"JP","city":{"id":4633349,"name":"Tokyo","latitude":35.685,"longitude":139.751389,"dns_name":"tokyo","hub_score":0}}},{"id":113,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":40.408566,"longitude":-3.69222,"country":{"id":202,"name":"Spain","code":"ES","city":{"id":2619989,"name":"Madrid","latitude":40.408566,"longitude":-3.69222,"dns_name":"madrid","hub_score":0}}},{"id":3978,"created_at":"2018-06-18 11:48:51","updated_at":"2018-06-18 11:48:51","latitude":45.466667,"longitude":9.2,"country":{"id":106,"name":"Italy","code":"IT","city":{"id":4542737,"name":"Milan","latitude":45.466667,"longitude":9.2,"dns_name":"milan","hub_score":0}}},{"id":305,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":40.7141667,"longitude":-74.0063889,"country":{"id":228,"name":"United States","code":"US","city":{"id":8971718,"name":"New York","latitude":40.7141667,"longitude":-74.0063889,"dns_name":"new-york","hub_score":0}}},{"id":143,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":50.083333,"longitude":14.466667,"country":{"id":57,"name":"Czech Republic","code":"CZ","city":{"id":2144945,"name":"Prague","latitude":50.083333,"longitude":14.466667,"dns_name":"prague","hub_score":0}}},{"id":65,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":44.433333,"longitude":26.1,"country":{"id":179,"name":"Romania","code":"RO","city":{"id":6953096,"name":"Bucharest","latitude":44.433333,"longitude":26.1,"dns_name":"bucharest","hub_score":0}}},{"id":259,"created_at":"2017-06-15 14:06:47","updated_at":"2017-06-15 14:06:47","latitude":42.6833333,"longitude":23.3166667,"country":{"id":33,"name":"Bulgaria","code":"BG","city":{"id":777368,"name":"Sofia","latitude":42.6833333,"longitude":23.3166667,"dns_name":"sofia","hub_score":0}}}],"technologies":[{"id":1,"name":"IKEv2/IPSec","identifier":"ikev2","created_at":"2017-03-21 12:00:24","updated_at":"2017-09-05 14:20:16","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}},{"id":3,"name":"OpenVPN UDP","identifier":"openvpn_udp","created_at":"2017-05-04 08:03:24","updated_at":"2017-05-09 19:27:37","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}},{"id":5,"name":"OpenVPN TCP","identifier":"openvpn_tcp","created_at":"2017-05-09 19:28:14","updated_at":"2017-05-09 19:28:14","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}},{"id":21,"name":"HTTP Proxy (SSL)","identifier":"proxy_ssl","created_at":"2017-10-02 12:45:14","updated_at":"2017-10-02 12:45:14","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}},{"id":23,"name":"HTTP CyberSec Proxy (SSL)","identifier":"proxy_ssl_cybersec","created_at":"2017-10-02 12:50:49","updated_at":"2017-10-02 12:50:49","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}},{"id":35,"name":"Wireguard","identifier":"wireguard_udp","created_at":"2019-02-14 14:08:43","updated_at":"2019-02-14 14:08:43","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}},{"id":51,"name":"NordWhisper","identifier":"nordwhisper","created_at":"2024-10-07 10:17:17","updated_at":"2024-10-07 10:17:17","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}},{"id":42,"name":"OpenVPN UDP Dedicated","identifier":"openvpn_dedicated_udp","created_at":"2019-09-19 14:49:18","updated_at":"2019-09-19 14:49:18","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}},{"id":45,"name":"OpenVPN TCP Dedicated","identifier":"openvpn_dedicated_tcp","created_at":"2019-09-19 14:49:54","updated_at":"2019-09-19 14:49:54","metadata":null,"pivot":{"technology_id":0,"server_id":0,"status":""}}]}

================
File: src/nyord_vpn/api/v2_servers.py
================
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["pydantic", "requests", "loguru"]
# ///
# this_file: src/nyord_vpn/api/v2-servers.py

"""NordVPN API v2 server information client.

This module provides a clean interface to the NordVPN v2 servers API endpoint.
The v2 API provides a normalized data structure where server information and related
data (groups, services, locations, technologies) are separated to avoid redundancy.
"""

from datetime import datetime
from loguru import logger
import requests
from pydantic import BaseModel, TypeAdapter

# Constants
NORDVPN_API_BASE = "https://api.nordvpn.com"
SERVERS_V2_ENDPOINT = f"{NORDVPN_API_BASE}/v2/servers"
DEFAULT_TIMEOUT = 10  # seconds

class TechnologyMetadata(BaseModel):
    """Metadata associated with a technology.

    For example, a technology might have metadata about its public key or other
    configuration parameters.
    """

    name: str
    value: str

class Technology(BaseModel):
    """A VPN technology supported by NordVPN servers.

    Technologies represent different VPN protocols and configurations available
    on the servers (e.g., OpenVPN, IKEv2, etc.).
    """

    id: int
    name: str
    identifier: str
    created_at: datetime
    updated_at: datetime
    status: str | None = None
    metadata: list[TechnologyMetadata] | None = None

class IP(BaseModel):
    """IP address information for a server."""

    id: int
    ip: str
    version: int

class ServerIP(BaseModel):
    """Detailed IP configuration for a server including type and metadata."""

    id: int
    created_at: datetime
    updated_at: datetime
    server_id: int
    ip_id: int
    type: str
    ip: IP

class SpecificationValue(BaseModel):
    """Value for a server specification."""

    id: int
    value: str

class Specification(BaseModel):
    """Technical specification of a server capability."""

    id: int
    title: str
    identifier: str
    values: list[SpecificationValue]

class GroupType(BaseModel):
    """Type classification for server groups."""

    id: int
    created_at: datetime
    updated_at: datetime
    title: str
    identifier: str

class Group(BaseModel):
    """Server group information (e.g., P2P, Standard VPN, etc.)."""

    id: int
    created_at: datetime
    updated_at: datetime
    title: str
    identifier: str
    type: GroupType

class Service(BaseModel):
    """Service provided by the server."""

    id: int
    name: str
    identifier: str
    created_at: datetime
    updated_at: datetime

class City(BaseModel):
    """City location information for a server."""

    id: int
    name: str
    latitude: float
    longitude: float
    dns_name: str
    hub_score: int

class Country(BaseModel):
    """Country information including its primary city."""

    id: int
    name: str
    code: str
    city: City

class Location(BaseModel):
    """Geographical location information for a server."""

    id: int
    created_at: datetime
    updated_at: datetime
    latitude: float
    longitude: float
    country: Country

class Server(BaseModel):
    """NordVPN server information.

    This model represents a complete server entry from the v2 API, including
    all its relationships to other entities like locations, groups, and services.
    """

    id: int
    created_at: datetime
    updated_at: datetime
    name: str
    station: str
    ipv6_station: str
    hostname: str
    status: str
    load: int
    ips: list[ServerIP]
    specifications: list[Specification]
    technologies: list[Technology]
    groups: list[Group] = []
    services: list[Service] = []
    locations: list[Location] = []

class NordVPNServersV2:
    """Client for the NordVPN v2 servers API.

    This class provides methods to fetch and work with server information from
    the NordVPN v2 API. The v2 API provides a normalized data structure where
    server information and related data are separated to avoid redundancy.
    """

    def __init__(self, timeout: int = DEFAULT_TIMEOUT) -> None:
        """Initialize the API client.

        Args:
            timeout: Request timeout in seconds.

        """
        self.timeout = timeout
        self._type_adapters = {
            "servers": TypeAdapter(list[Server]),
            "groups": TypeAdapter(list[Group]),
            "services": TypeAdapter(list[Service]),
            "locations": TypeAdapter(list[Location]),
            "technologies": TypeAdapter(list[Technology])
        }

    def fetch_all(self) -> tuple[list[Server], list[Group], list[Service], list[Location], list[Technology]]:
        """Fetch and parse all server data from the v2 API.

        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).

        Raises:
            requests.exceptions.RequestException: If the API request fails.

        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()

            # Parse each component using its type adapter
            parsed_data = {
                key: self._type_adapters[key].validate_python(data[key])
                for key in self._type_adapters
            }

            # Create lookup maps for efficient linking
            maps = {
                "groups": {g.id: g for g in parsed_data["groups"]},
                "services": {s.id: s for s in parsed_data["services"]},
                "locations": {l.id: l for l in parsed_data["locations"]}
            }

            # Link related objects to servers
            for server in parsed_data["servers"]:
                self._link_server_relations(server, maps)

            return (
                parsed_data["servers"],
                parsed_data["groups"],
                parsed_data["services"],
                parsed_data["locations"],
                parsed_data["technologies"]
            )

        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN server data: {e}")
            raise

    def _link_server_relations(self, server: Server, maps: dict) -> None:
        """Link related objects (groups, services, locations) to a server.

        Args:
            server: The server object to update.
            maps: Dictionary containing the lookup maps for related objects.

        """
        # Link groups
        server.groups = [
            maps["groups"][group_id]
            for group_id in getattr(server, "group_ids", [])
            if group_id in maps["groups"]
        ]

        # Link services
        server.services = [
            maps["services"][service_id]
            for service_id in getattr(server, "service_ids", [])
            if service_id in maps["services"]
        ]

        # Link locations
        server.locations = [
            maps["locations"][location_id]
            for location_id in getattr(server, "location_ids", [])
            if location_id in maps["locations"]
        ]

        # Clean up ID lists
        for attr in ["group_ids", "service_ids", "location_ids"]:
            if hasattr(server, attr):
                delattr(server, attr)

def get_servers_by_country(servers: list[Server], country_code: str) -> list[Server]:
    """Filter servers by country code.

    Args:
        servers: List of servers to filter.
        country_code: Two-letter country code (e.g., 'US', 'DE').

    Returns:
        List of servers in the specified country.

    """
    return [
        server for server in servers
        if server.locations and server.locations[0].country.code.upper() == country_code.upper()
    ]

def get_servers_by_group(servers: list[Server], group_identifier: str) -> list[Server]:
    """Filter servers by group identifier.

    Args:
        servers: List of servers to filter.
        group_identifier: Group identifier (e.g., 'legacy_p2p').

    Returns:
        List of servers in the specified group.

    """
    return [
        server for server in servers
        if any(group.identifier == group_identifier for group in server.groups)
    ]

if __name__ == "__main__":
    # Example usage
    client = NordVPNServersV2()
    try:
        servers, groups, services, locations, technologies = client.fetch_all()

        # Print some server information
        for server in servers[:5]:  # First 5 servers
            logger.info(f"Server: {server.name} ({server.hostname}) - Load: {server.load}%")
            if server.locations:
                loc = server.locations[0]
                logger.info(f"  Location: {loc.country.name}, {loc.country.city.name}")
            if server.groups:
                logger.info(f"  Groups: {', '.join(group.title for group in server.groups)}")
            if server.services:
                logger.info(f"  Services: {', '.join(service.name for service in server.services)}")
            logger.info("---")

        # Example: Find US servers
        us_servers = get_servers_by_country(servers, "US")
        logger.info(f"\nNumber of US servers: {len(us_servers)}")

        # Example: Find P2P servers
        p2p_servers = get_servers_by_group(servers, "legacy_p2p")
        logger.info(f"\nNumber of P2P servers: {len(p2p_servers)}")

    except requests.exceptions.RequestException as e:
        logger.error(f"Failed to fetch server data: {e}")

================
File: src/nyord_vpn/core/__init__.py
================
"""Core modules for nyord-vpn.

this_file: src/nyord_vpn/core/__init__.py

This package contains the core functionality including
the main Client class and API interactions.
"""

================
File: src/nyord_vpn/core/api.py
================
"""NordVPN API client for data retrieval and API interactions.

this_file: src/nyord_vpn/core/api.py

This module provides the NordVPNAPIClient class for interacting with NordVPN's API.
It handles all API-related operations and caching to ensure reliable data access.

Core Responsibilities:
1. Authentication with NordVPN API
2. Country and server information retrieval
3. Cache management for API responses
4. Location and city information lookup
5. API connectivity testing

Integration Points:
- Used by Client (core/client.py) for API operations
- Used by ServerManager (network/server.py) for server info
- Interacts with cache system in utils/utils.py
- Handles models defined in storage/models.py

The client implements automatic fallback to cached data when
API requests fail, and provides both raw and formatted data
access methods. This ensures continuous operation even during
API outages or rate limiting.

Cache Management:
- Stores data in ~/.cache/nyord-vpn/
- Implements TTL-based cache invalidation
- Provides fallback data for core countries
- Handles cache corruption gracefully

Error Handling:
- Provides detailed error messages
- Implements automatic retries
- Falls back to cached data
- Logs failures for debugging
"""

import time

from loguru import logger
from requests import get, RequestException

from nyord_vpn.network.country import get_cached_countries, cache_countries
from nyord_vpn.storage.models import City, Country, CountryCache
from nyord_vpn.utils.utils import API_HEADERS, CACHE_FILE


class NordVPNAPIClient:
    """Base client for NordVPN API interactions.

    This class provides a comprehensive interface to the NordVPN API:
    1. Server and country information retrieval
    2. Location-based server lookup
    3. Cache management for API responses
    4. Connectivity testing and monitoring

    The client handles both v1 and v2 API endpoints, with automatic
    fallback to cached data when API requests fail. It provides
    methods for both raw data access and formatted information
    suitable for display.

    Attributes:
        BASE_API_URL: Base URL for NordVPN API
        BASE_API_V1_URL: Base URL for v1 API endpoints
        BASE_API_V2_URL: Base URL for v2 API endpoints

    """

    BASE_API_URL: str = "https://api.nordvpn.com"
    BASE_API_V1_URL: str = f"{BASE_API_URL}/v1"
    BASE_API_V2_URL: str = f"{BASE_API_URL}/v2"

    def __init__(self, username: str, password: str, verbose: bool = False) -> None:
        """Initialize the NordVPN API client.

        Sets up the client with authentication and configuration:
        1. Stores credentials for API authentication
        2. Configures logging based on verbosity
        3. Sets up cache file location
        4. Initializes API interaction settings

        Args:
            username: NordVPN account username
            password: NordVPN account password
            verbose: Enable detailed logging (default: False)

        Note:
            The client doesn't validate credentials on initialization.
            Validation occurs on first API interaction.

        """
        self.username = username
        self.password = password
        self.verbose = verbose
        self.logger = logger
        self.cache_file = CACHE_FILE

    def list_countries(self, use_cache: bool = True) -> list[Country]:
        """Fetch list of available server countries.

        Retrieves a comprehensive list of countries with servers:
        1. Attempts to fetch fresh data from API
        2. Updates local cache with new data
        3. Falls back to cached data if API fails
        4. Includes server counts and city information

        Args:
            use_cache: Whether to allow using cached data (default: True)

        Returns:
            list[Country]: List of countries with their details:
                - name: Country name
                - code: Two-letter country code
                - id: Country identifier
                - cities: List of cities with servers
                - serverCount: Total servers in country

        Note:
            The method automatically updates the cache with fresh data
            on successful API requests. Cache format matches API response
            to ensure consistency.

        """
        try:
            url = f"{self.BASE_API_URL}/servers/countries"
            response = get(url, headers=API_HEADERS, timeout=10)
            response.raise_for_status()
            countries: list[Country] = response.json()

            cache_data: CountryCache = {
                "countries": countries,
                "last_updated": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
            }
            cache_countries(cache_data)
            return countries

        except RequestException as e:
            self.logger.warning(f"Failed to fetch countries: {e}")
            cached = get_cached_countries()
            if cached:
                return cached["countries"]
            return []

    def get_country_by_code(self, code: str) -> Country | None:
        """Find country information by country code.

        Searches for a country using its ISO code:
        1. Converts code to uppercase for consistency
        2. Searches in available countries list
        3. Returns full country information if found

        Args:
            code: Two-letter country code (case insensitive)

        Returns:
            Country | None: Country information if found:
                - name: Country name
                - code: Two-letter country code
                - id: Country identifier
                - cities: List of cities with servers
                - serverCount: Total servers in country
            Returns None if country not found.

        Note:
            This method uses list_countries() internally, so it may
            trigger an API request if no cached data is available.

        """
        code = code.upper()
        for country in self.list_countries():
            if country["code"] == code:
                return country
        return None

    def get_country_by_name(self, name: str) -> Country | None:
        """Get country info by name."""
        name = name.lower()
        for country in self.list_countries():
            if country["name"].lower() == name:
                return country
        return None

    def get_available_locations(self) -> list[str]:
        """Get formatted list of available locations."""
        locations = []
        for country in sorted(self.list_countries(), key=lambda x: x["name"]):
            total_servers = country["serverCount"]
            locations.append(
                f"{country['name']} ({country['code'].lower()}) - {total_servers} servers",
            )
            for city in sorted(country["cities"], key=lambda x: x["name"]):
                locations.append(f"  {city['name']} - {city['serverCount']} servers")
        return locations

    def get_best_city(self, country_code: str) -> City | None:
        """Find optimal city for VPN connection in a country.

        Selects the best city based on multiple factors:
        1. Hub score (network infrastructure quality)
        2. Number of available servers
        3. Geographic distribution
        4. Server performance metrics

        Args:
            country_code: Two-letter country code

        Returns:
            City | None: Best city information if found:
                - name: City name
                - dns_name: DNS hostname component
                - hub_score: Infrastructure quality score
                - serverCount: Available servers
                - latitude/longitude: Geographic coordinates
            Returns None if country not found or has no cities.

        Note:
            The hub score is a NordVPN metric combining various
            factors like infrastructure quality, server capacity,
            and network performance.

        """
        country = self.get_country_by_code(country_code)
        if not country:
            return None
        sorted_cities = sorted(
            country["cities"],
            key=lambda x: (x["hub_score"], x["serverCount"]),
            reverse=True,
        )
        return sorted_cities[0] if sorted_cities else None

    def test_api_connectivity(self) -> bool:
        """Test connectivity to NordVPN API.

        Performs a basic health check of the API:
        1. Attempts to fetch server list
        2. Verifies response format
        3. Checks response timing
        4. Validates API version compatibility

        Returns:
            bool: True if API is accessible and responding correctly,
                 False if any connectivity issues are detected

        Note:
            This method is used during initialization and can be
            called periodically to verify API health. It uses a
            short timeout to quickly detect connectivity issues.

        """
        try:
            response = get(
                f"{self.BASE_API_V2_URL}/servers",
                headers=API_HEADERS,
                timeout=5,
            )
            response.raise_for_status()
            return True
        except Exception as e:
            if self.verbose:
                self.logger.exception(f"API connectivity test failed: {e}")
            return False

================
File: src/nyord_vpn/core/base.py
================
"""Base NordVPN client implementation.

This module contains the base NordVPN client class that handles:
- Country list management
- Cache handling
- Location lookup
- API interaction

This class is extended by the main Client class to add connection functionality.
"""

import json
import sys
import time

import requests
from loguru import logger

from nyord_vpn.network.country import get_cached_countries, cache_countries
from nyord_vpn.storage.models import City, Country, CountryCache
from nyord_vpn.utils.utils import CACHE_FILE, API_HEADERS

# Fallback data in case API is unreachable
FALLBACK_DATA: CountryCache = {
    "countries": [
        {
            "cities": [
                {
                    "dns_name": "new-york",
                    "hub_score": 0,
                    "id": 8971718,
                    "latitude": 40.7141667,
                    "longitude": -74.0063889,
                    "name": "New York",
                    "serverCount": 529,
                },
            ],
            "code": "US",
            "id": 228,
            "name": "United States",
            "serverCount": 529,
        },
        {
            "cities": [
                {
                    "dns_name": "london",
                    "hub_score": 0,
                    "id": 2989907,
                    "latitude": 51.514125,
                    "longitude": -0.093689,
                    "name": "London",
                    "serverCount": 785,
                },
            ],
            "code": "GB",
            "id": 227,
            "name": "United Kingdom",
            "serverCount": 785,
        },
        {
            "cities": [
                {
                    "dns_name": "frankfurt",
                    "hub_score": 0,
                    "id": 2215709,
                    "latitude": 50.116667,
                    "longitude": 8.683333,
                    "name": "Frankfurt",
                    "serverCount": 301,
                },
            ],
            "code": "DE",
            "id": 81,
            "name": "Germany",
            "serverCount": 301,
        },
    ],
    "last_updated": "2024-02-23T00:00:00Z",
}


class NordVPNClient:
    """Base NordVPN client for managing country data and API interactions."""

    BASE_API_URL: str = "https://api.nordvpn.com/v1"

    def __init__(self, username: str, password: str, verbose: bool = False) -> None:
        """Initialize NordVPN client.

        Args:
            username: NordVPN username
            password: NordVPN password
            verbose: Whether to enable verbose logging

        """
        self.username = username
        self.password = password
        self.verbose = verbose
        self.logger = logger
        self.cache_file = CACHE_FILE
        self.countries = self._load_countries()
        self.logger.add(sys.stdout, level="DEBUG" if self.verbose else "INFO")

    def _load_countries(self) -> list[Country]:
        """Load countries from cache or fallback data."""
        try:
            with open(self.cache_file) as f:
                cache_data: CountryCache = json.load(f)
                return cache_data["countries"]
        except (FileNotFoundError, json.JSONDecodeError) as e:
            self.logger.warning(f"Failed to load cache: {e}. Using fallback data.")
            return FALLBACK_DATA["countries"]

    def get_country_by_code(self, code: str) -> Country | None:
        """Get country by its code.

        Args:
            code: Two-letter country code (e.g. 'us', 'uk')

        """
        code = code.upper()
        for country in self.countries:
            if country["code"] == code:
                return country
        return None

    def get_country_by_name(self, name: str) -> Country | None:
        """Get country by its name.

        Args:
            name: Country name (case-insensitive)

        """
        name = name.lower()
        for country in self.countries:
            if country["name"].lower() == name:
                return country
        return None

    def get_available_locations(self) -> list[str]:
        """Get list of available locations with server counts."""
        locations = []
        for country in sorted(self.countries, key=lambda x: x["name"]):
            total_servers = country["serverCount"]
            locations.append(
                f"{country['name']} ({country['code'].lower()}) - {total_servers} servers",
            )
            for city in sorted(country["cities"], key=lambda x: x["name"]):
                locations.append(f"  {city['name']} - {city['serverCount']} servers")
        return locations

    def get_best_city(self, country_code: str) -> City | None:
        """Get the best city in a country based on hub score and server count.

        Args:
            country_code: Two-letter country code

        """
        country = self.get_country_by_code(country_code)
        if not country:
            return None

        # Sort cities by hub score (higher is better) and server count
        sorted_cities = sorted(
            country["cities"],
            key=lambda x: (x["hub_score"], x["serverCount"]),
            reverse=True,
        )
        return sorted_cities[0] if sorted_cities else None

    def list_countries(self, use_cache: bool = True) -> list[Country]:
        """Fetch a list of all available server countries from the NordVPN API.

        Args:
            use_cache: Whether to use cached country list (default: True)
                     If False, forces a fresh fetch from the API

        Returns:
            List of dictionaries containing country information

        """
        try:
            url = f"{self.BASE_API_URL}/servers/countries"
            response = requests.get(url, headers=API_HEADERS, timeout=10)
            response.raise_for_status()
            countries: list[Country] = response.json()

            # Cache the fresh data
            cache_data: CountryCache = {
                "countries": countries,
                "last_updated": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
            }
            cache_countries(cache_data)
            return countries

        except requests.RequestException as e:
            self.logger.warning(f"Failed to fetch countries: {e}")
            cached = get_cached_countries()
            if cached:
                return cached["countries"]

            # If no cache available, use fallback list
            return FALLBACK_DATA["countries"]

================
File: src/nyord_vpn/core/client.py
================
"""Main NordVPN client implementation.

this_file: src/nyord_vpn/core/client.py

This module contains the main Client class that coordinates all VPN operations.
It serves as the primary entry point for both CLI and library usage, orchestrating:

Components:
- API interactions via NordVPNAPIClient (core/api.py) for authentication and server info
- VPN connections via VPNConnectionManager (network/vpn.py) for OpenVPN management
- Server selection via ServerManager (network/server.py) for optimal server choice
- State persistence via utils/utils.py for connection recovery

The client implements automatic fallback mechanisms and retry logic to handle:
1. API failures (falls back to cached data)
2. Connection failures (retries with different servers)
3. State management (persists and recovers connection state)
4. Error handling (provides detailed error messages and recovery steps)

Used by:
- CLI interface in __main__.py for command-line operations
- Python applications importing the Client class directly
- Internal test suite for integration testing

Example usage:
    from nyord_vpn import Client

    client = Client(username="user", password="pass")
    client.go("us")  # Connect to US server
    client.status()  # Check connection status
    client.disconnect()  # Disconnect from VPN
"""

import time
import os
from pathlib import Path
from typing import TypedDict, Any

from dotenv import load_dotenv
from loguru import logger
from rich.console import Console
from rich.logging import RichHandler

from nyord_vpn.storage.models import (
    ConnectionError,
    VPNError,
    ServerError,
)
from nyord_vpn.utils.utils import (
    CACHE_DIR,
    CONFIG_DIR,
    DATA_DIR,
    save_vpn_state,
    OPENVPN_AUTH,
)
from nyord_vpn.network.server import ServerManager
from nyord_vpn.core.api import NordVPNAPIClient
from nyord_vpn.network.vpn import VPNConnectionManager

load_dotenv()
logger.configure(
    handlers=[
        {
            "sink": RichHandler(),
            "format": "<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
        },
    ],
)


# Constants
PACKAGE_DIR = Path(__file__).parent
CACHE_FILE = DATA_DIR / "countries.json"

# Rich console for pretty output
console = Console()


# Store cache in the package directory
COUNTRIES_CACHE = PACKAGE_DIR / "data" / "countries.json"


# Type definitions for country data
class City(TypedDict):
    """City information from NordVPN API."""

    dns_name: str
    hub_score: int
    id: int
    latitude: float
    longitude: float
    name: str
    serverCount: int


class Country(TypedDict):
    """Country information from NordVPN API."""

    cities: list[City]
    code: str
    id: int
    name: str
    serverCount: int


class CountryCache(TypedDict):
    """Cache file structure."""

    countries: list[Country]
    last_updated: str


# Fallback country list in case API is unreachable
FALLBACK_DATA: CountryCache = {
    "countries": [
        {
            "cities": [
                {
                    "dns_name": "new-york",
                    "hub_score": 0,
                    "id": 8971718,
                    "latitude": 40.7141667,
                    "longitude": -74.0063889,
                    "name": "New York",
                    "serverCount": 529,
                },
            ],
            "code": "US",
            "id": 228,
            "name": "United States",
            "serverCount": 529,
        },
        {
            "cities": [
                {
                    "dns_name": "london",
                    "hub_score": 0,
                    "id": 2989907,
                    "latitude": 51.514125,
                    "longitude": -0.093689,
                    "name": "London",
                    "serverCount": 785,
                },
            ],
            "code": "GB",
            "id": 227,
            "name": "United Kingdom",
            "serverCount": 785,
        },
        {
            "cities": [
                {
                    "dns_name": "frankfurt",
                    "hub_score": 0,
                    "id": 2215709,
                    "latitude": 50.116667,
                    "longitude": 8.683333,
                    "name": "Frankfurt",
                    "serverCount": 301,
                },
            ],
            "code": "DE",
            "id": 81,
            "name": "Germany",
            "serverCount": 301,
        },
    ],
    "last_updated": "2024-02-23T00:00:00Z",
}

# Cache expiry in seconds (24 hours)
CACHE_EXPIRY = 24 * 60 * 60


class Client:
    """Main NordVPN client that coordinates API, VPN, and server management.

    This class provides the high-level interface for:
    1. Managing VPN connections
    2. Server selection and optimization
    3. Connection status monitoring
    4. User feedback and logging
    """

    def __init__(
        self,
        username_str: str | None = None,
        password_str: str | None = None,
        verbose: bool = False,
    ) -> None:
        """Initialize NordVPN client.

        Args:
            username_str: NordVPN username (optional if NORDVPN_USERNAME env var is set)
            password_str: NordVPN password (optional if NORDVPN_PASSWORD env var is set)
            verbose: Whether to enable verbose output

        Raises:
            VPNError: If credentials are not available

        """
        self.verbose = verbose
        self.logger = logger

        # Get credentials from env vars if not provided
        self.username = username_str or os.environ.get("NORD_USER") or os.environ.get("NORDVPN_LOGIN")
        self.password = password_str or os.environ.get("NORD_PASSWORD") or os.environ.get("NORDVPN_PASSWORD")

        if not self.username or not self.password:
            raise VPNError(
                "No VPN credentials available. Please set NORD_USER (or NORDVPN_LOGIN) and NORD_PASSWORD (or NORDVPN_PASSWORD) environment variables."
            )

        # Initialize components in the correct order
        self.api_client = NordVPNAPIClient(self.username, self.password, verbose)
        self.server_manager = ServerManager(self.api_client)
        self.vpn_manager = VPNConnectionManager(
            api_client=self.api_client,
            server_manager=self.server_manager,
            vpn_manager=self,  # This is a bit circular but needed for the current structure
            verbose=verbose
        )

        # Set up VPN credentials
        try:
            self.vpn_manager.setup_connection("", self.username, self.password)
        except VPNError as e:
            if "hostname" in str(e).lower():
                # Ignore hostname error since we'll set it later
                pass
            else:
                raise

    def is_protected(self) -> bool:
        """Check if VPN is active."""
        status = self.status()
        return status.get("connected", False)

    def status(self) -> dict[str, Any]:
        """Get current VPN status.

        Returns:
            dict: Status information including:
                - connected (bool): Whether connected to VPN
                - ip (str): Current IP address
                - normal_ip (str): IP when not connected to VPN
                - server (str): Connected server if any
                - country (str): Connected country if any

        """
        return self.vpn_manager.status()

    def go(self, country_code: str) -> None:
        """Connect to VPN in specified country.

        Args:
            country_code: Two-letter country code (e.g. 'US', 'GB')

        Raises:
            VPNError: If connection fails
        """
        try:
            # First check if we're already connected
            status = self.status()
            if status.get("connected", False):
                # VPN manager will handle disconnection automatically
                if self.verbose:
                    self.logger.info("Already connected, will disconnect before connecting to new server")

            # Select fastest servers
            servers = self.server_manager.select_fastest_server(country_code)
            if not servers:
                raise VPNError(f"No servers available in {country_code}")

            # Take the first (fastest) server
            server = servers[0]
            hostname = server.get("hostname")
            if not hostname:
                raise VPNError("Selected server has no hostname")

            if self.verbose:
                self.logger.info(f"Selected server: {hostname}")
                console.print(f"Selected server: [cyan]{hostname}[/cyan]")

            # Set up VPN configuration
            if not self.username or not self.password:
                raise VPNError("Missing VPN credentials")
            self.vpn_manager.setup_connection(
                hostname, self.username, self.password
            )

            # Connect to VPN
            if self.verbose:
                self.logger.info("Establishing VPN connection...")
                console.print("Establishing VPN connection...")

            # Connect and wait for result
            self.vpn_manager.connect(servers)  # Pass all servers to try in order

            # Get status for display
            status = self.status()
            console.print("[green]Successfully connected to VPN[/green]")
            console.print(f"Private IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
            console.print(f"Country: [cyan]{status.get('country', 'Unknown')}[/cyan]")
            console.print(f"Server: [cyan]{status.get('server', 'Unknown')}[/cyan]")

        except Exception as e:
            raise VPNError(f"Failed to connect: {e}")

    def bye(self) -> None:
        """Disconnect from the VPN."""
        if self.verbose:
            logger.info("Checking current connection status...")

        try:
            status = self.vpn_manager.status()
            if status["connected"]:
                self.vpn_manager.disconnect()
            elif self.verbose:
                logger.info("No active VPN connection found")
        except VPNError as e:
            logger.error(f"Error during disconnect: {e}")
            return

        # Get current IP before disconnecting
        current_ip = self.vpn_manager.get_current_ip()
        if self.verbose:
            self.logger.info("Checking current connection status...")

        # Disconnect if connected
        if self.vpn_manager.is_connected():
            if self.verbose:
                self.logger.info("Disconnecting from VPN...")
            self.vpn_manager.disconnect()
            console.print("[green]Disconnected from VPN[/green]")
        else:
            if self.verbose:
                self.logger.info("No active VPN connection found")
            console.print("[yellow]Not connected to VPN[/yellow]")

        # Get fresh IP after disconnecting and save state
        public_ip = self.vpn_manager.get_current_ip()
        if not public_ip and current_ip:
            public_ip = current_ip  # Use pre-disconnect IP if available

        # Save state with current IP after disconnection
        state = {
            "connected": False,
            "current_ip": public_ip,  # This will update normal_ip in state
            "server": None,
            "country": None,
            "timestamp": time.time(),
        }
        save_vpn_state(state)

        if public_ip:
            console.print(f"Public IP: [cyan]{public_ip}[/cyan]")
        else:
            console.print("[yellow]Could not determine IP[/yellow]")

    def info(self) -> None:
        """Display current VPN status."""
        try:
            status = self.status()
            if status.get("connected", False):
                console.print("[green]VPN Status: Connected[/green]")
                console.print(f"Private IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
                console.print(
                    f"Country: [cyan]{status.get('country', 'Unknown')}[/cyan]"
                )
                console.print(f"Server: [cyan]{status.get('server', 'Unknown')}[/cyan]")
            else:
                console.print("[yellow]VPN Status: Not Connected[/yellow]")
                console.print(
                    f"Public IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]"
                )
        except Exception as e:
            raise VPNError(f"Failed to get status: {e}")

    def init(self) -> None:
        """Initialize the client environment and verify all dependencies.

        This method performs essential setup tasks:
        1. Verifies OpenVPN installation and accessibility
        2. Creates necessary directory structure for configs and cache
        3. Tests API connectivity to ensure account access
        4. Captures initial IP address for connection verification
        5. Sets up logging based on verbosity level

        The initialization process ensures all components required for
        VPN operation are available and properly configured before
        attempting any connections.

        Raises:
            ConnectionError: If any initialization step fails (OpenVPN missing,
                           directory creation fails, API unreachable, etc.)

        """
        try:
            # Check OpenVPN installation
            openvpn_path = self.vpn_manager.check_openvpn_installation()
            if self.verbose:
                self.logger.info(f"Found OpenVPN at: {openvpn_path}")

            # Create necessary directories
            for directory in [CACHE_DIR, CONFIG_DIR, DATA_DIR]:
                directory.mkdir(parents=True, exist_ok=True)
                if self.verbose:
                    self.logger.info(f"Created directory: {directory}")

            # Test API connectivity
            if not self.api_client.test_api_connectivity():
                raise ConnectionError("Failed to connect to NordVPN API")
            if self.verbose:
                self.logger.info("Successfully connected to NordVPN API")

            # Get initial IP
            initial_ip = self.vpn_manager.get_current_ip()
            if not initial_ip:
                raise ConnectionError("Failed to get initial IP")
            if self.verbose:
                self.logger.info(f"Initial IP: {initial_ip}")

            if self.verbose:
                self.logger.info("Client environment initialized successfully")

        except Exception as e:
            raise ConnectionError(f"Failed to initialize client environment: {e}")

    def get_current_ip(self) -> str | None:
        """Get current IP address."""
        return self.vpn_manager.get_current_ip()

    def _save_state(self) -> None:
        """Save current connection state."""
        state = {
            "connected": self.is_protected(),
            "initial_ip": self.get_current_ip(),
            "connected_ip": self.get_current_ip(),
            "server": self.status().get("server", "Unknown"),
            "country": self.status().get("country", "Unknown"),
            "timestamp": time.time(),
        }
        save_vpn_state(state)

================
File: src/nyord_vpn/data/.specstory/history/.what-is-this.md
================
# SpecStory Artifacts Directory
    
This directory is automatically created and maintained by the SpecStory extension to preserve your Cursor composer and chat history.
    
## What's Here?
    
- `.specstory/history`: Contains markdown files of your AI coding sessions
- Each file represents a separate chat or composer session
- Files are automatically updated as you work

## Valuable Uses
    
- Capture: Keep your context window up-to-date when starting new Chat/Composer sessions via @ references
- Search: For previous prompts and code snippets 
- Learn: Meta-analyze your patterns and learn from your past experiences
    
## Version Control
    
We recommend keeping this directory under version control to maintain a history of your AI interactions. However, if you prefer not to version these files, you can exclude them by adding this to your `.gitignore`:
    
```
.specstory/**
```
    
## Searching Your Codebase
    
When searching your codebase in Cursor, search results may include your previous AI coding interactions. To focus solely on your actual code files, you can exclude the AI interaction history from search results.
    
To exclude AI interaction history:
    
1. Open the "Find in Files" search in Cursor (Cmd/Ctrl + Shift + F)
2. Navigate to the "files to exclude" section
3. Add the following pattern:
    
```
.specstory/*
```
    
This will ensure your searches only return results from your working codebase files.

## Notes

- Auto-save only works when Cursor/sqlite flushes data to disk. This results in a small delay after the AI response is complete before SpecStory can save the history.
- Auto-save does not yet work on remote WSL workspaces.

## Settings
    
You can control auto-saving behavior in Cursor:
    
1. Open Cursor → Settings → VS Code Settings (Cmd/Ctrl + ,)
2. Search for "SpecStory"
3. Find "Auto Save" setting to enable/disable
    
Auto-save occurs when changes are detected in Cursor's sqlite database, or every 2 minutes as a safety net.

================
File: src/nyord_vpn/data/countries.json
================
{
  "servers": [
    {
      "hostname": "pl128.nordvpn.com",
      "load": 34,
      "country": {
        "code": "PL",
        "name": "Poland"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "kjAOzXQRVGpmQdqE2zPsITH8QHmFK83AAPktqWed9wM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "194.99.105.99"
    },
    {
      "hostname": "be148.nordvpn.com",
      "load": 7,
      "country": {
        "code": "BE",
        "name": "Belgium"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "VSa6XYcD279ahd3IuEiUH6VpXn0+h+kWrD4OcN1ExUs="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "82.102.19.137"
    },
    {
      "hostname": "hu48.nordvpn.com",
      "load": 7,
      "country": {
        "code": "HU",
        "name": "Hungary"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "3KWTCjpHlmXD3BroyAIFMN8ajr+ibShIl8OSUGgejXY="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.189.114.28"
    },
    {
      "hostname": "us5063.nordvpn.com",
      "load": 27,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.245.87.59"
    },
    {
      "hostname": "at86.nordvpn.com",
      "load": 12,
      "country": {
        "code": "AT",
        "name": "Austria"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "F6b2ac9H7hEvt03EonY1bS4FzNAabEmURDTB8wIIPXc="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.216.34.100"
    },
    {
      "hostname": "ch217.nordvpn.com",
      "load": 10,
      "country": {
        "code": "CH",
        "name": "Switzerland"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.156.175.132"
    },
    {
      "hostname": "dk152.nordvpn.com",
      "load": 9,
      "country": {
        "code": "DK",
        "name": "Denmark"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "EHL1zeXjZEJlqtFA8qaRVuvl0zR4skbC/AjiG66CLCc="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "82.102.20.212"
    },
    {
      "hostname": "no151.nordvpn.com",
      "load": 4,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "82.102.22.92"
    },
    {
      "hostname": "ch218.nordvpn.com",
      "load": 13,
      "country": {
        "code": "CH",
        "name": "Switzerland"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "84.39.112.20"
    },
    {
      "hostname": "uk1784.nordvpn.com",
      "load": 11,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "81.92.202.11"
    },
    {
      "hostname": "fr555.nordvpn.com",
      "load": 20,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "82.102.18.252"
    },
    {
      "hostname": "ch219.nordvpn.com",
      "load": 12,
      "country": {
        "code": "CH",
        "name": "Switzerland"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.9.18.84"
    },
    {
      "hostname": "us5064.nordvpn.com",
      "load": 24,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "195.206.104.156"
    },
    {
      "hostname": "uk765.nordvpn.com",
      "load": 10,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "89.35.28.131"
    },
    {
      "hostname": "uk812.nordvpn.com",
      "load": 9,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "77.81.191.3"
    },
    {
      "hostname": "uk813.nordvpn.com",
      "load": 18,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "89.34.98.195"
    },
    {
      "hostname": "uk814.nordvpn.com",
      "load": 10,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.121.139.100"
    },
    {
      "hostname": "uk871.nordvpn.com",
      "load": 13,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "89.34.99.131"
    },
    {
      "hostname": "uk873.nordvpn.com",
      "load": 12,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "195.206.180.3"
    },
    {
      "hostname": "uk875.nordvpn.com",
      "load": 14,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "195.206.180.131"
    },
    {
      "hostname": "de507.nordvpn.com",
      "load": 0,
      "country": {
        "code": "DE",
        "name": "Germany"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "185.130.184.115"
    },
    {
      "hostname": "de508.nordvpn.com",
      "load": 0,
      "country": {
        "code": "DE",
        "name": "Germany"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "185.130.184.116"
    },
    {
      "hostname": "de509.nordvpn.com",
      "load": 3,
      "country": {
        "code": "DE",
        "name": "Germany"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "185.130.184.117"
    },
    {
      "hostname": "de510.nordvpn.com",
      "load": 0,
      "country": {
        "code": "DE",
        "name": "Germany"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "185.130.184.118"
    },
    {
      "hostname": "uk877.nordvpn.com",
      "load": 24,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "81.19.217.3"
    },
    {
      "hostname": "us2920.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "96.9.246.179"
    },
    {
      "hostname": "us2921.nordvpn.com",
      "load": 3,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "96.9.246.180"
    },
    {
      "hostname": "uk879.nordvpn.com",
      "load": 10,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "81.19.223.3"
    },
    {
      "hostname": "us2924.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "96.9.247.187"
    },
    {
      "hostname": "us2925.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "96.9.247.188"
    },
    {
      "hostname": "uk884.nordvpn.com",
      "load": 11,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "178.239.169.3"
    },
    {
      "hostname": "us2929.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "107.173.59.99"
    },
    {
      "hostname": "us2930.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "172.93.147.130"
    },
    {
      "hostname": "uk886.nordvpn.com",
      "load": 11,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.44.79.131"
    },
    {
      "hostname": "be149.nordvpn.com",
      "load": 7,
      "country": {
        "code": "BE",
        "name": "Belgium"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "VSa6XYcD279ahd3IuEiUH6VpXn0+h+kWrD4OcN1ExUs="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "77.243.191.250"
    },
    {
      "hostname": "uk1806.nordvpn.com",
      "load": 14,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "193.9.113.134"
    },
    {
      "hostname": "uk888.nordvpn.com",
      "load": 8,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.16.205.3"
    },
    {
      "hostname": "uk890.nordvpn.com",
      "load": 7,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "185.16.205.131"
    },
    {
      "hostname": "us2939.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "172.93.237.99"
    },
    {
      "hostname": "us2940.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "172.93.237.100"
    },
    {
      "hostname": "de655.nordvpn.com",
      "load": 0,
      "country": {
        "code": "DE",
        "name": "Germany"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "194.31.54.4"
    },
    {
      "hostname": "uk892.nordvpn.com",
      "load": 11,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "195.206.170.3"
    },
    {
      "hostname": "uk894.nordvpn.com",
      "load": 9,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "195.206.170.131"
    },
    {
      "hostname": "uk896.nordvpn.com",
      "load": 8,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "178.239.164.3"
    },
    {
      "hostname": "uk898.nordvpn.com",
      "load": 9,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "178.239.164.131"
    },
    {
      "hostname": "us2943.nordvpn.com",
      "load": 1,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "89.187.175.97"
    },
    {
      "hostname": "us2944.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "89.187.175.98"
    },
    {
      "hostname": "us2945.nordvpn.com",
      "load": 10,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "89.187.185.86"
    },
    {
      "hostname": "us2946.nordvpn.com",
      "load": 1,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "89.187.185.97"
    },
    {
      "hostname": "nl408.nordvpn.com",
      "load": 0,
      "country": {
        "code": "NL",
        "name": "Netherlands"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "5p4RkybdRU5uaDi90eu4KZPTFif0lKCg4Qp6t1c4F30="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "185.229.58.3"
    },
    {
      "hostname": "nl409.nordvpn.com",
      "load": 0,
      "country": {
        "code": "NL",
        "name": "Netherlands"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "5p4RkybdRU5uaDi90eu4KZPTFif0lKCg4Qp6t1c4F30="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "185.229.58.129"
    },
    {
      "hostname": "de676.nordvpn.com",
      "load": 0,
      "country": {
        "code": "DE",
        "name": "Germany"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "37.120.223.116"
    },
    {
      "hostname": "us5055.nordvpn.com",
      "load": 13,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "89.187.175.2"
    },
    {
      "hostname": "us2949.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "64.44.32.75"
    },
    {
      "hostname": "us2950.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "dzMgdcXyF4Q95ayR8TEBYAL5Op+RuFEB/WGq2usxkFA="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "64.44.32.76"
    },
    {
      "hostname": "fr439.nordvpn.com",
      "load": 8,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "185.93.2.199"
    },
    {
      "hostname": "fr440.nordvpn.com",
      "load": 1,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "185.93.2.206"
    },
    {
      "hostname": "jp429.nordvpn.com",
      "load": 25,
      "country": {
        "code": "JP",
        "name": "Japan"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "SAio0Z0suFlRfmydzPdcn6MamqS7Mq4pSOm2YmJkLSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.210.107"
    },
    {
      "hostname": "es114.nordvpn.com",
      "load": 7,
      "country": {
        "code": "ES",
        "name": "Spain"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "IF1FGVSzrUznFVZ+dymIz+6bdlCgsuiT/d6cyapN8lw="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.199.243"
    },
    {
      "hostname": "it132.nordvpn.com",
      "load": 15,
      "country": {
        "code": "IT",
        "name": "Italy"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FgxaycYZ4t1kp4x7LDv60sczNTAl0h/d4pyyUNHhgBc="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.197.75"
    },
    {
      "hostname": "us4735.nordvpn.com",
      "load": 16,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.198.235"
    },
    {
      "hostname": "pl122.nordvpn.com",
      "load": 9,
      "country": {
        "code": "PL",
        "name": "Poland"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "kjAOzXQRVGpmQdqE2zPsITH8QHmFK83AAPktqWed9wM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.211.171"
    },
    {
      "hostname": "cz93.nordvpn.com",
      "load": 5,
      "country": {
        "code": "CZ",
        "name": "Czech Republic"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "apEe1p4IQvCQxexoxoUTXsm2p582FtbDAboPwThFYEs="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.199.27"
    },
    {
      "hostname": "at80.nordvpn.com",
      "load": 4,
      "country": {
        "code": "AT",
        "name": "Austria"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "F6b2ac9H7hEvt03EonY1bS4FzNAabEmURDTB8wIIPXc="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "5.253.207.203"
    },
    {
      "hostname": "ro59.nordvpn.com",
      "load": 16,
      "country": {
        "code": "RO",
        "name": "Romania"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "o3Dj1qKYmzBBOBaD9JAhK9cg/8nfYxWg6GADL09DPHE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "86.106.137.187"
    },
    {
      "hostname": "ch198.nordvpn.com",
      "load": 18,
      "country": {
        "code": "CH",
        "name": "Switzerland"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "SqAWBSVdnUJ859Bz2Nyt82rlSebMwPgvwQxIb1DzyF8="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.213.131"
    },
    {
      "hostname": "bg38.nordvpn.com",
      "load": 12,
      "country": {
        "code": "BG",
        "name": "Bulgaria"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "xqa+kDsDeYLQAnVDUQaFun9Djfo3c1ESTMwfNArHw10="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.202.147"
    },
    {
      "hostname": "hu47.nordvpn.com",
      "load": 6,
      "country": {
        "code": "HU",
        "name": "Hungary"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "3KWTCjpHlmXD3BroyAIFMN8ajr+ibShIl8OSUGgejXY="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.192.99"
    },
    {
      "hostname": "fr452.nordvpn.com",
      "load": 10,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "45.152.181.219"
    },
    {
      "hostname": "jp454.nordvpn.com",
      "load": 28,
      "country": {
        "code": "JP",
        "name": "Japan"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "SAio0Z0suFlRfmydzPdcn6MamqS7Mq4pSOm2YmJkLSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "89.187.161.54"
    },
    {
      "hostname": "us4951.nordvpn.com",
      "load": 2,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "V1WC7wt34kcSDyqPuUhN56NJ0v+GlqY9TwZR5WlzzB4="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "84.17.44.122"
    },
    {
      "hostname": "dk150.nordvpn.com",
      "load": 10,
      "country": {
        "code": "DK",
        "name": "Denmark"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "EHL1zeXjZEJlqtFA8qaRVuvl0zR4skbC/AjiG66CLCc="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.194.3"
    },
    {
      "hostname": "de750.nordvpn.com",
      "load": 10,
      "country": {
        "code": "DE",
        "name": "Germany"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "m0tej5P6pYfBivkJc8yRV4KqQXmM81AChLlzlsOSjSs="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "5.180.62.120"
    },
    {
      "hostname": "us4953.nordvpn.com",
      "load": 1,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "89.187.175.53"
    },
    {
      "hostname": "us4954.nordvpn.com",
      "load": 0,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "8pRFH/FfMBs3eBJCM2ABFoOs/13n78LYQvoovZVLdgI="
            }
          ],
          "status": "online"
        },
        {
          "id": 42,
          "status": "online"
        },
        {
          "id": 45,
          "status": "online"
        }
      ],
      "station": "89.187.175.54"
    },
    {
      "hostname": "pl125.nordvpn.com",
      "load": 10,
      "country": {
        "code": "PL",
        "name": "Poland"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "kjAOzXQRVGpmQdqE2zPsITH8QHmFK83AAPktqWed9wM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.209.67"
    },
    {
      "hostname": "us5057.nordvpn.com",
      "load": 14,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.208.211"
    },
    {
      "hostname": "us5058.nordvpn.com",
      "load": 52,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.208.219"
    },
    {
      "hostname": "us5059.nordvpn.com",
      "load": 16,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.208.139"
    },
    {
      "hostname": "us5060.nordvpn.com",
      "load": 18,
      "country": {
        "code": "US",
        "name": "United States"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "0/x2PdBGfcIGr0ayFPFFjxcEEyhrlBRjR4kMcfwXJTU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.208.147"
    },
    {
      "hostname": "no141.nordvpn.com",
      "load": 21,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.203.163"
    },
    {
      "hostname": "no142.nordvpn.com",
      "load": 3,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.203.171"
    },
    {
      "hostname": "no143.nordvpn.com",
      "load": 3,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.203.179"
    },
    {
      "hostname": "no144.nordvpn.com",
      "load": 6,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.203.187"
    },
    {
      "hostname": "no145.nordvpn.com",
      "load": 6,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.203.195"
    },
    {
      "hostname": "no146.nordvpn.com",
      "load": 5,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.203.203"
    },
    {
      "hostname": "no147.nordvpn.com",
      "load": 5,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.203.211"
    },
    {
      "hostname": "no148.nordvpn.com",
      "load": 6,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "37.120.203.219"
    },
    {
      "hostname": "no149.nordvpn.com",
      "load": 4,
      "country": {
        "code": "NO",
        "name": "Norway"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "24IO9X6HN0Rx/KLpFpcZHjcI2bJ6Z6JWJ+ZShKjTZkU="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "95.174.66.27"
    },
    {
      "hostname": "uk1785.nordvpn.com",
      "load": 13,
      "country": {
        "code": "GB",
        "name": "United Kingdom"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "K53l2wOIHU3262sX5N/5kAvCvt4r55lNui30EbvaDlE="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "194.35.233.75"
    },
    {
      "hostname": "hu49.nordvpn.com",
      "load": 5,
      "country": {
        "code": "HU",
        "name": "Hungary"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "3KWTCjpHlmXD3BroyAIFMN8ajr+ibShIl8OSUGgejXY="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.192.83"
    },
    {
      "hostname": "fr536.nordvpn.com",
      "load": 11,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.139"
    },
    {
      "hostname": "fr537.nordvpn.com",
      "load": 20,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.147"
    },
    {
      "hostname": "fr538.nordvpn.com",
      "load": 8,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.155"
    },
    {
      "hostname": "fr539.nordvpn.com",
      "load": 13,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.163"
    },
    {
      "hostname": "fr540.nordvpn.com",
      "load": 8,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.195"
    },
    {
      "hostname": "fr541.nordvpn.com",
      "load": 8,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.203"
    },
    {
      "hostname": "fr542.nordvpn.com",
      "load": 12,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.171"
    },
    {
      "hostname": "fr543.nordvpn.com",
      "load": 9,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.179"
    },
    {
      "hostname": "fr544.nordvpn.com",
      "load": 11,
      "country": {
        "code": "FR",
        "name": "France"
      },
      "status": "online",
      "technologies": [
        {
          "id": 1,
          "status": "online"
        },
        {
          "id": 3,
          "status": "online"
        },
        {
          "id": 5,
          "status": "online"
        },
        {
          "id": 21,
          "status": "online"
        },
        {
          "id": 23,
          "status": "online"
        },
        {
          "id": 35,
          "metadata": [
            {
              "name": "public_key",
              "value": "FT46M53w4dhBep/2VScW1j/EoZbpBgzvk71FlLZLDBM="
            }
          ],
          "status": "online"
        },
        {
          "id": 51,
          "metadata": [
            {
              "name": "port",
              "value": "8443"
            }
          ],
          "status": "online"
        }
      ],
      "station": "217.138.207.187"
    }
  ],
  "last_updated": "2025-02-23T06:17:51Z",
  "expires_at": 1740377871.590903
}

================
File: src/nyord_vpn/data/country_ids.json
================
{
    "AL": "2",
    "AR": "10",
    "AU": "13",
    "AT": "14",
    "BE": "21",
    "BA": "27",
    "BR": "30",
    "BG": "33",
    "CA": "38",
    "CL": "43",
    "CR": "52",
    "HR": "54",
    "CY": "56",
    "CZ": "57",
    "DK": "58",
    "EE": "68",
    "FI": "73",
    "FR": "74",
    "GE": "80",
    "DE": "81",
    "GR": "84",
    "HK": "97",
    "HU": "98",
    "IS": "99",
    "IN": "100",
    "ID": "101",
    "IE": "104",
    "IL": "105",
    "IT": "106",
    "JP": "108",
    "LV": "119",
    "LU": "126",
    "MY": "131",
    "MX": "140",
    "MD": "142",
    "NL": "153",
    "NZ": "156",
    "MK": "128",
    "NO": "163",
    "PL": "174",
    "PT": "175",
    "RO": "179",
    "RS": "192",
    "SG": "195",
    "SK": "196",
    "SI": "197",
    "ZA": "200",
    "KR": "114",
    "ES": "202",
    "SE": "208",
    "CH": "209",
    "TW": "211",
    "TH": "214",
    "TR": "220",
    "UA": "225",
    "GB": "227",
    "US": "228",
    "VN": "234"
}

================
File: src/nyord_vpn/network/__init__.py
================
"""Network-related modules for nyord-vpn.

this_file: src/nyord_vpn/network/__init__.py

This package contains modules for network operations including
VPN connection management and server selection.
"""

================
File: src/nyord_vpn/network/country.py
================
import json
import time

from nyord_vpn.storage.models import CountryCache
from nyord_vpn.utils.utils import COUNTRIES_CACHE, CACHE_EXPIRY


def get_cached_countries() -> CountryCache | None:
    """Get cached country list if available and not expired."""
    try:
        if not COUNTRIES_CACHE.exists():
            return None
        # Check if cache is expired
        if time.time() - COUNTRIES_CACHE.stat().st_mtime > CACHE_EXPIRY:
            return None
        return json.loads(COUNTRIES_CACHE.read_text())
    except (json.JSONDecodeError, OSError):
        return None


def cache_countries(data: CountryCache) -> None:
    """Cache the country list to disk.

    Args:
        data: Dictionary containing countries list and last_updated timestamp

    """
    try:
        COUNTRIES_CACHE.parent.mkdir(parents=True, exist_ok=True)
        COUNTRIES_CACHE.write_text(json.dumps(data, indent=2, sort_keys=True))
        COUNTRIES_CACHE.chmod(0o644)  # Make readable for all users
    except OSError:
        pass

================
File: src/nyord_vpn/network/server.py
================
import json
import random
import subprocess
import time
import socket
import ssl
from pathlib import Path
from typing import Any, TypedDict, NotRequired, Dict, List, Optional, cast, Sequence
from loguru import logger
import requests

from nyord_vpn.core.api import NordVPNAPIClient
from nyord_vpn.storage.models import ServerError
from nyord_vpn.utils.utils import API_HEADERS, CACHE_DIR, CACHE_EXPIRY


"""Server management and selection for NordVPN.

this_file: src/nyord_vpn/network/server.py

This module provides server selection and management functionality for NordVPN.
It implements intelligent server selection based on multiple metrics and maintains
server state information.

Core Responsibilities:
1. Server discovery and filtering
2. Load balancing and server selection
3. Server performance measurement
4. Country-based server filtering
5. Cache management for server information

Integration Points:
- Used by Client (core/client.py) for server selection
- Uses NordVPNAPIClient (core/api.py) for server data
- Uses models from storage/models.py
- Uses cache system from utils/utils.py

Selection Algorithm:
The server selection process considers multiple factors:
1. Server load (from API)
2. Geographic proximity (ping times)
3. Connection stability (failure tracking)
4. Feature support (OpenVPN TCP)

Cache Management:
- Implements TTL-based caching
- Handles API failures gracefully
- Provides fallback data
- Validates cached entries

Error Handling:
- Tracks failed servers
- Implements automatic retries
- Provides fallback options
- Detailed error reporting

The module uses TypedDict classes to ensure type safety when
handling server information from the NordVPN API.
"""


class Country(TypedDict):
    """Country information."""
    name: str
    code: str


class ServerLocation(TypedDict):
    """Server location information."""
    id: str
    country: Country


class Technology(TypedDict):
    """Server technology information."""
    id: int
    status: str
    metadata: NotRequired[List[Dict[str, str]]]


class ServerInfo(TypedDict):
    """Server information structure."""
    hostname: str
    location_ids: List[str]
    status: str
    load: int
    technologies: List[Technology]


class ServerCache(TypedDict):
    """Cache structure for server information."""
    servers: List[ServerInfo]
    locations: Dict[str, ServerLocation]
    last_updated: float


# Constants
SERVERS_CACHE_FILE = CACHE_DIR / "servers.json"
SERVERS_CACHE_TTL = 3600  # 1 hour in seconds


def _safe_dict_get(d: Dict[str, Any], key: str, default: Any = None) -> Any:
    """Safely get a value from a dictionary."""
    return d.get(key, default) if isinstance(d, dict) else default


def _safe_get(d: Optional[Dict[str, Any]], key: str, default: Any = None) -> Any:
    """Safely get a value from a dictionary that might be None."""
    if d is None:
        return default
    return _safe_dict_get(d, key, default)


def _safe_str_get(s: Optional[str], key: str, default: Any = None) -> Any:
    """Safely get a value from a string that might be None."""
    if s is None:
        return default
    try:
        return s[int(key)] if key.isdigit() else default
    except (ValueError, IndexError):
        return default


def _safe_dict_access(d: Dict[str, Any], key: str) -> Any:
    """Safely access a dictionary key that must exist."""
    if not isinstance(d, dict) or key not in d:
        raise KeyError(f"Required key {key} not found in dictionary")
    return d[key]


def _safe_dict_cast(d: Any) -> Dict[str, Any]:
    """Cast a value to a dictionary if possible."""
    if not isinstance(d, dict):
        return {}
    return cast(Dict[str, Any], d)


def _safe_dict_get_str(d: Dict[str, Any], key: str, default: str = "") -> str:
    """Safely get a string value from a dictionary."""
    value = _safe_dict_get(d, key, default)
    return str(value) if value is not None else default


def _safe_dict_get_int(d: Dict[str, Any], key: str, default: int = 0) -> int:
    """Safely get an integer value from a dictionary."""
    value = _safe_dict_get(d, key, default)
    try:
        return int(value) if value is not None else default
    except (ValueError, TypeError):
        return default


def _safe_dict_get_list(d: Dict[str, Any], key: str, default: Optional[List[Any]] = None) -> List[Any]:
    """Safely get a list value from a dictionary."""
    if default is None:
        default = []
    value = _safe_dict_get(d, key, default)
    return value if isinstance(value, list) else default


def _safe_dict_get_dict(d: Dict[str, Any], key: str, default: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
    """Safely get a dictionary value from a dictionary."""
    if default is None:
        default = {}
    value = _safe_dict_get(d, key, default)
    return value if isinstance(value, dict) else default


def cache_servers(data: Dict[str, Any]) -> None:
    """Cache server information from the API.

    Args:
        data: Server data from the API to cache in the ServerCache format
    """
    try:
        if not isinstance(data, dict):
            logger.warning("Invalid server data format")
            return

        # Ensure cache directory exists
        SERVERS_CACHE_FILE.parent.mkdir(parents=True, exist_ok=True)
        
        # Write to temporary file first
        temp_file = SERVERS_CACHE_FILE.with_suffix('.tmp')
        temp_file.write_text(json.dumps(data, indent=2))
        
        # Atomic rename
        temp_file.replace(SERVERS_CACHE_FILE)
        
    except Exception as e:
        logger.warning(f"Failed to cache server information: {e}")


def _parse_timestamp(timestamp: Any) -> float:
    """Parse a timestamp value into a float.
    
    Handles both float timestamps and ISO format strings.
    """
    if isinstance(timestamp, (int, float)):
        return float(timestamp)
    if isinstance(timestamp, str):
        try:
            # Try parsing as float first
            return float(timestamp)
        except ValueError:
            try:
                # Try parsing as ISO format
                from datetime import datetime
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                return dt.timestamp()
            except ValueError:
                return 0.0
    return 0.0


def get_cached_servers() -> Optional[ServerCache]:
    """Get cached server information if available and not expired.

    Returns:
        Cached server data if available and fresh, None otherwise
    """
    try:
        if not SERVERS_CACHE_FILE.exists():
            return None
            
        data = json.loads(SERVERS_CACHE_FILE.read_text())
        if not isinstance(data, dict):
            return None

        last_updated = _parse_timestamp(_safe_dict_get(data, "last_updated", 0))
        
        # Check if cache is expired
        if time.time() - last_updated > SERVERS_CACHE_TTL:
            return None
            
        # Validate and convert data
        cache_data: ServerCache = {
            "servers": cast(List[ServerInfo], _safe_dict_get_list(data, "servers", [])),
            "locations": cast(Dict[str, ServerLocation], _safe_dict_get_dict(data, "locations", {})),
            "last_updated": last_updated
        }
        
        return cache_data
        
    except Exception as e:
        logger.warning(f"Failed to read server cache: {e}")
        return None


class ServerManager:
    """Manages NordVPN server selection and optimization.

    This class handles all server-related operations including:
    1. Server discovery and filtering
    2. Performance measurement and ranking
    3. Load balancing across available servers
    4. Cache management for server information
    5. Country-based server selection

    The manager maintains a cache of server information and tracks
    failed servers within a session to avoid repeated connection
    attempts to problematic servers.
    """

    def __init__(self, api_client: NordVPNAPIClient) -> None:
        """Initialize server manager with API client.

        Sets up the server manager with:
        1. API client for server information retrieval
        2. Logging configuration from API client
        3. Server cache initialization
        4. Failed servers tracking

        Args:
            api_client: NordVPN API client for server information

        """
        self.api_client = api_client
        self.logger = api_client.logger
        self._servers_cache: Optional[ServerCache] = None
        self._last_cache_update: float = 0
        self._failed_servers = set()  # Track failed servers in this session

    def _validate_country_code(self, country_code: str | None) -> str | None:
        """Validate and normalize country code.

        Args:
            country_code: Two-letter country code or None

        Returns:
            Normalized uppercase country code or None if no code provided

        Raises:
            ServerError: If country code is invalid

        """
        if not country_code:
            return None

        normalized = country_code.upper()
        if not isinstance(normalized, str) or len(normalized) != 2:
            raise ServerError(f"Invalid country code format: {country_code}")

        # Verify country exists in cache
        cache = self.get_servers_cache()
        if not cache:
            raise ServerError("No server information available")

        for location in cache["locations"].values():
            if location["country"]["code"].upper() == normalized:
                return normalized

        # Get list of available countries for better error message
        available_countries = sorted(list({
            loc["country"]["code"].upper()
            for loc in cache["locations"].values()
            if loc["country"]["code"]
        }))

        raise ServerError(
            f"Country code not found: {normalized}. "
            f"Available countries: {', '.join(available_countries)}"
        )

    def fetch_server_info(self, country: str | None = None) -> tuple[str, str] | None:
        """Fetch information about recommended servers supporting OpenVPN.

        Queries the NordVPN v2 API for servers based on:
        1. OpenVPN TCP support
        2. Server load
        3. Country preference (if specified)
        4. Server status and availability

        Args:
            country: Optional two-letter country code for filtering

        Returns:
            tuple: (hostname, station) if successful, None if no servers available
                  hostname: Server hostname for connection
                  station: Station identifier (if available)

        Raises:
            ServerError: If server fetch fails or no suitable servers found
                        Includes specific error for invalid country codes
        """
        try:
            # Get all servers from cache or API
            cache = self.get_servers_cache()
            if not cache:
                raise ServerError("Failed to get server list")

            servers = cache["servers"]
            locations = cache["locations"]

            # Create location lookup by ID
            location_lookup = {}
            for loc_id, location in locations.items():
                if isinstance(location, dict):
                    location_lookup[str(loc_id)] = location

            # Filter for online servers with OpenVPN TCP support
            filtered_servers = []
            for server in servers:
                # Check if server is online
                if server["status"] != "online":
                    continue

                # Check if server has OpenVPN TCP (id: 5)
                has_tcp = False
                for tech in server["technologies"]:
                    if tech["id"] == 5 and tech["status"] == "online":
                        has_tcp = True
                        break
                if not has_tcp:
                    continue

                # Filter by country if specified
                if country:
                    normalized_country = self._validate_country_code(country)
                    server_country = None
                    for loc_id in server["location_ids"]:
                        location = location_lookup.get(str(loc_id))
                        if location and location["country"]["code"].upper() == normalized_country:
                            server_country = normalized_country
                            break
                    if not server_country:
                        continue

                filtered_servers.append(server)

            if not filtered_servers:
                # Get list of available countries
                available_countries = sorted(list({
                    loc["country"]["code"].upper()
                    for loc in locations.values()
                    if loc["country"]["code"]
                }))
                error_msg = f"No servers available{' in ' + country.upper() if country else ''}"
                if country:
                    error_msg += f"\nAvailable countries: {', '.join(available_countries)}"
                raise ServerError(error_msg)

            # Sort by load and select the least loaded server
            server = min(filtered_servers, key=lambda x: x["load"])
            hostname = server["hostname"]
            if not hostname:
                raise ServerError("Invalid server data received")

            if self.api_client.verbose:
                self.logger.debug(f"Selected server {hostname} with load {server['load']}%")

            return hostname, server.get("station", "")

        except Exception as e:
            raise ServerError(f"Failed to fetch server info: {e}")

    def get_servers_cache(self) -> Optional[ServerCache]:
        """Get server information from cache or API.

        Returns:
            Server information if available, None if both cache and API fail
        """
        try:
            # Try to get from memory cache first
            if self._servers_cache and time.time() - self._last_cache_update <= SERVERS_CACHE_TTL:
                return self._servers_cache

            # Try to get from file cache
            file_cache = get_cached_servers()
            if file_cache:
                self._servers_cache = file_cache
                self._last_cache_update = time.time()
                return file_cache

            # Fetch from API
            response = requests.get(
                "https://api.nordvpn.com/v2/servers",
                headers=API_HEADERS,
                timeout=10
            )
            response.raise_for_status()
            api_data = response.json()

            # Process API response
            if not isinstance(api_data, dict):
                self.logger.warning("Invalid API response format - expected object with servers and locations")
                return None

            # Initialize cache data structure
            new_cache: ServerCache = {
                "servers": [],
                "locations": {},
                "last_updated": time.time()
            }

            # Extract servers and build locations map
            servers: List[ServerInfo] = []
            locations: Dict[str, ServerLocation] = {}

            # First pass: Process locations from the API response
            for location in api_data.get("locations", []):
                if not isinstance(location, dict):
                    continue

                location_id = str(location.get("id", ""))
                if not location_id:
                    continue

                country_data = location.get("country", {})
                if isinstance(country_data, dict):
                    country: Country = {
                        "name": str(country_data.get("name", "")),
                        "code": str(country_data.get("code", ""))
                    }
                    locations[location_id] = {
                        "id": location_id,
                        "country": country
                    }

            # Second pass: Process servers
            for item in api_data.get("servers", []):
                if not isinstance(item, dict):
                    continue

                # Get technologies
                technologies: List[Technology] = []
                for tech in item.get("technologies", []):
                    if not isinstance(tech, dict):
                        continue
                    tech_id = tech.get("id")
                    if tech_id is None:
                        continue
                    technology: Technology = {
                        "id": int(tech_id),
                        "status": str(tech.get("status", ""))
                    }
                    if tech.get("metadata"):
                        technology["metadata"] = cast(List[Dict[str, str]], tech["metadata"])
                    technologies.append(technology)

                # Create server info
                server_info: ServerInfo = {
                    "hostname": str(item.get("hostname", "")),
                    "location_ids": [str(lid) for lid in item.get("location_ids", [])],
                    "status": str(item.get("status", "")),
                    "load": int(item.get("load", 0)),
                    "technologies": technologies
                }
                servers.append(server_info)

            new_cache["servers"] = servers
            new_cache["locations"] = locations

            # Cache the results
            self._servers_cache = new_cache
            self._last_cache_update = time.time()
            cache_servers(cast(Dict[str, Any], new_cache))

            return new_cache

        except Exception as e:
            self.logger.warning(f"Failed to get server information: {e}")
            return None

    def _ping_server(self, hostname: str) -> float:
        """Ping a server and return response time in ms.

        Args:
            hostname: Server hostname to ping

        Returns:
            float: Ping time in milliseconds, or float('inf') if ping failed

        """
        try:
            # Platform-specific ping command
            import platform

            system = platform.system().lower()

            if system == "windows":
                cmd = ["ping", "-n", "2", "-w", "1000", hostname]
            elif system == "darwin":  # macOS
                cmd = ["ping", "-c", "2", "-W", "1", "-t", "1", hostname]
            else:  # Linux and others
                cmd = ["ping", "-c", "2", "-W", "1", hostname]

            if self.api_client.verbose:
                self.logger.debug(f"Running ping command: {' '.join(cmd)}")

            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=3,
                check=False,  # Overall timeout
            )

            if result.returncode == 0:
                # Extract time from ping output more robustly
                min_time = float("inf")
                for line in result.stdout.splitlines():
                    if self.api_client.verbose:
                        self.logger.debug(f"Ping output line: {line}")

                    # Look for min/avg/max line
                    if "min/avg/max" in line:
                        try:
                            # Format: round-trip min/avg/max/stddev = 18.894/18.894/18.894/0.000 ms
                            stats = line.split("=")[1].strip().split("/")
                            min_time = float(stats[0])
                            if self.api_client.verbose:
                                self.logger.debug(
                                    f"Parsed min time from stats: {min_time}ms",
                                )
                            return min_time
                        except (IndexError, ValueError) as e:
                            if self.api_client.verbose:
                                self.logger.debug(
                                    f"Failed to parse min/avg/max line '{line}': {e}",
                                )
                            continue
                    # Look for individual ping responses
                    elif "time=" in line:
                        try:
                            time_str = line.split("time=")[1].split()[0].rstrip("ms")
                            ping_time = float(time_str)
                            min_time = min(min_time, ping_time)
                            if self.api_client.verbose:
                                self.logger.debug(
                                    f"Parsed time from response: {ping_time}ms",
                                )
                        except (IndexError, ValueError) as e:
                            if self.api_client.verbose:
                                self.logger.debug(
                                    f"Failed to parse time from line '{line}': {e}",
                                )
                            continue

                if min_time < float("inf"):
                    if self.api_client.verbose:
                        self.logger.debug(
                            f"Server {hostname} responded in {min_time}ms",
                        )
                    return min_time

                # If we couldn't parse any times but ping succeeded
                if self.api_client.verbose:
                    self.logger.debug(
                        f"Server {hostname} responded but couldn't parse time from output:\n{result.stdout}",
                    )
                return float("inf")
            if self.api_client.verbose:
                self.logger.debug(
                    f"Server {hostname} ping failed with code {result.returncode}:\n"
                    f"stdout: {result.stdout}\n"
                    f"stderr: {result.stderr}",
                )
            return float("inf")

        except subprocess.TimeoutExpired:
            if self.api_client.verbose:
                self.logger.debug(f"Server {hostname} ping timed out")
            return float("inf")
        except Exception as e:
            if self.api_client.verbose:
                self.logger.debug(f"Server {hostname} ping error: {e}")
                import traceback

                self.logger.debug(f"Traceback: {traceback.format_exc()}")
            return float("inf")

    def _is_valid_server(self, server: Any) -> bool:
        """Basic server validation.

        Only checks:
        1. Has valid hostname
        2. Has OpenVPN TCP support

        Args:
            server: Server data to validate

        Returns:
            bool: True if server data is valid
        """
        if not isinstance(server, dict):
            return False

        # Check hostname
        hostname = server.get("hostname")
        if not isinstance(hostname, str) or not hostname:
            return False

        # Check OpenVPN TCP support
        has_openvpn_tcp = False
        for tech in server.get("technologies", []):
            tech_name = tech.get("name", "")
            if (
                isinstance(tech, dict)
                and isinstance(tech_name, str)
                and "OpenVPN TCP" in tech_name
            ):
                has_openvpn_tcp = True
                break

        return has_openvpn_tcp

    def _test_server(self, server: Dict[str, Any]) -> tuple[Dict[str, Any], float]:
        """Test a server's response time using both ping and TCP connection.

        Args:
            server: Server information dictionary

        Returns:
            Tuple of (server, score) where score is combined ping/TCP time
            Lower score is better, float('inf') means failed
        """
        hostname = _safe_dict_get(server, "hostname")
        if not hostname:
            return server, float("inf")

        try:
            # Quick TCP connection test first (more important for VPN)
            tcp_time = float("inf")
            try:
                # Create a less strict SSL context for testing
                context = ssl.create_default_context()
                context.check_hostname = False
                context.verify_mode = ssl.CERT_NONE
                
                start = time.time()
                with socket.create_connection((hostname, 443), timeout=1) as sock:
                    # Just test basic TCP connection first
                    tcp_time = (time.time() - start) * 1000  # Convert to ms
                    
                    try:
                        # Try SSL handshake but don't fail if it doesn't work
                        with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                            ssock.do_handshake()
                    except ssl.SSLError:
                        # SSL failed but TCP worked, add penalty to score
                        tcp_time *= 1.5

            except (socket.timeout, socket.error) as e:
                if self.api_client.verbose:
                    self.logger.debug(f"TCP test failed for {hostname}: {e}")
                return server, float("inf")

            # Quick single ping test
            ping_time = float("inf")
            try:
                import platform
                system = platform.system().lower()

                if system == "darwin":  # macOS
                    cmd = ["ping", "-c", "1", "-W", "1", "-t", "1", hostname]
                elif system == "windows":
                    cmd = ["ping", "-n", "1", "-w", "1000", hostname]
                else:  # Linux and others
                    cmd = ["ping", "-c", "1", "-W", "1", hostname]

                result = subprocess.run(
                    cmd,
                    capture_output=True,
                    text=True,
                    timeout=2,
                    check=False
                )

                if result.returncode == 0:
                    # Parse time from output
                    if system == "darwin":
                        # macOS: round-trip min/avg/max/stddev = 20.237/20.237/20.237/0.000 ms
                        for line in result.stdout.splitlines():
                            if "round-trip" in line:
                                try:
                                    ping_time = float(line.split("=")[1].strip().split("/")[0])
                                    break
                                except (IndexError, ValueError):
                                    continue
                    else:
                        # Linux/Windows: time=20.2 ms
                        try:
                            ping_time = float(result.stdout.split("time=")[1].split()[0].rstrip("ms"))
                        except (IndexError, ValueError):
                            pass

            except (subprocess.TimeoutExpired, subprocess.SubprocessError) as e:
                if self.api_client.verbose:
                    self.logger.debug(f"Ping failed for {hostname}: {e}")
                # Don't fail completely if ping fails but TCP worked
                ping_time = tcp_time * 1.5  # Estimate ping as 1.5x TCP time

            # Combined score (70% TCP, 30% ping)
            # TCP matters more for VPN performance
            score = (tcp_time * 0.7) + (ping_time * 0.3)

            if self.api_client.verbose:
                self.logger.debug(
                    f"Server {hostname} test results: "
                    f"tcp={tcp_time:.1f}ms, ping={ping_time:.1f}ms, score={score:.1f}ms"
                )

            return server, score

        except Exception as e:
            if self.api_client.verbose:
                self.logger.debug(f"Failed to test server {hostname}: {e}")
            return server, float("inf")

    def _select_diverse_servers(
        self, servers: list[dict[str, Any]], count: int = 4
    ) -> list[dict[str, Any]]:
        """Select geographically diverse servers.

        When no country is specified, this ensures we test servers from different regions
        to find the best performing one regardless of location.

        Args:
            servers: List of server dictionaries
            count: Number of servers to select

        Returns:
            List of selected servers, may be fewer than requested count if not enough servers available

        """
        # Group servers by region/continent
        regions = {}
        for server in servers:
            region = server.get("country", {}).get("region", {}).get("name", "Unknown")
            if region not in regions:
                regions[region] = []
            regions[region].append(server)

        # Select servers from different regions if possible
        selected = []
        region_names = list(regions.keys())

        while len(selected) < count and region_names:
            # Cycle through regions
            region = region_names.pop(random.randrange(len(region_names)))
            if region_servers := regions.get(region, []):
                # Select random server from region
                server = random.choice(region_servers)
                selected.append(server)

        # If we still need more servers and have unselected ones available
        remaining_servers = [s for s in servers if s not in selected]
        if remaining_servers and len(selected) < count:
            # Only try to sample what's available
            sample_size = min(count - len(selected), len(remaining_servers))
            if sample_size > 0:
                remaining = random.sample(remaining_servers, sample_size)
                selected.extend(remaining)

        if not selected:
            # Ensure we return at least one server if available
            if servers:
                selected.append(random.choice(servers))

        return selected

    def select_fastest_server(self, country_code: str | None = None) -> list[Dict[str, Any]]:
        """Select fastest servers in a country based on ping times.

        Args:
            country_code: Two-letter country code

        Returns:
            List of server dicts sorted by speed (fastest first)
        """
        try:
            # Get all servers
            cache = self.get_servers_cache()
            if not cache:
                raise ServerError("No servers available")

            servers = cache["servers"]
            locations = cache["locations"]

            if not servers:
                raise ServerError("No servers available")

            # Create location lookup by ID
            location_lookup = {str(loc["id"]): loc for loc in locations.values()}

            # Filter by country if specified
            if country_code:
                country_code = country_code.upper()
                filtered_servers = []
                
                for server in servers:
                    # Check each location ID
                    for loc_id in server["location_ids"]:
                        location = location_lookup.get(str(loc_id))
                        if location and location["country"]["code"].upper() == country_code:
                            filtered_servers.append(server)
                            break
                
                servers = filtered_servers

                if not servers:
                    # Get list of available countries
                    available_countries = sorted(list({
                        loc["country"]["code"].upper()
                        for loc in locations.values()
                        if loc["country"]["code"]
                    }))
                    raise ServerError(
                        f"No servers available in {country_code}. "
                        f"Available countries: {', '.join(available_countries)}"
                    )

            # Remove failed servers
            servers = [s for s in servers if s["hostname"] not in self._failed_servers]
            if not servers:
                self._failed_servers.clear()  # Reset failed servers if none left
                return self.select_fastest_server(country_code)  # Try again

            # Take 20 servers with highest load
            servers.sort(key=lambda x: x["load"])
            logger.debug(servers)

            # Test response times
            results = []
            for server in servers:
                hostname = server["hostname"]
                if not hostname:
                    continue

                # Test server response time
                server_result, score = self._test_server(cast(Dict[str, Any], server))
                if score < float("inf"):
                    results.append((server_result, score))

            # Sort by response time
            results.sort(key=lambda x: x[1])
            return [r[0] for r in results]  # Return servers only, sorted by speed

        except Exception as e:
            if isinstance(e, ServerError):
                raise
            raise ServerError(f"Failed to select server: {e}")

    def _get_country_id(self, country_code: str) -> str:
        """Get NordVPN country ID from country code.

        Args:
            country_code: Two-letter country code

        Returns:
            Country ID or empty string if not found
        """
        try:
            # Check our cache
            cache = self.get_servers_cache()
            if not cache:
                return ""

            # Look through locations for matching country
            for location in cache["locations"].values():
                if isinstance(location, dict) and isinstance(location.get("country"), dict):
                    country = location["country"]
                    if country.get("code", "").upper() == country_code.upper():
                        return str(country.get("id", ""))

        except Exception as e:
            if self.api_client.verbose:
                self.logger.warning(f"Failed to get country ID: {e}")

        return ""

    def get_random_country(self) -> str:
        """Get a random country code from available servers.

        Returns:
            Two-letter country code, defaults to "US" on error

        Note:
            Uses cache to avoid unnecessary API calls.

        """
        try:
            cache = self.get_servers_cache()
            if not cache:
                raise ServerError("No servers available")

            countries = {
                loc["country"]["code"].upper()
                for loc in cache["locations"].values()
                if loc["country"]["code"]
            }
            if not countries:
                raise ServerError("No countries found in server list")

            selected = random.choice(list(countries))
            if self.api_client.verbose:
                self.logger.debug(f"Selected random country: {selected}")
            return selected

        except Exception as e:
            self.logger.warning(f"Failed to get random country: {e}")
            return "US"

    def get_country_info(self, country_code: str) -> dict[str, Any] | None:
        """Get country information from NordVPN API.

        Args:
            country_code: Two-letter country code

        Returns:
            Dictionary with country information or None if not found

        Note:
            Uses cache first, falls back to API if needed.
            Cache format matches API response for consistency.

        """
        if not country_code:
            return None

        normalized = country_code.upper()

        try:
            # First check cache
            cache = self.get_servers_cache()
            if not cache:
                return None

            for location in cache["locations"].values():
                if location["country"]["code"].upper() == normalized:
                    return {
                        "code": location["country"]["code"],
                        "name": location["country"]["name"],
                        "id": location["id"],
                    }

            return None

        except Exception as e:
            if self.api_client.verbose:
                self.logger.warning(f"Failed to get country info for {normalized}: {e}")
            return None

================
File: src/nyord_vpn/network/vpn_commands.py
================
"""OpenVPN command construction and management.

this_file: src/nyord_vpn/network/vpn_commands.py

This module provides utilities for constructing and managing OpenVPN commands.
It centralizes all OpenVPN-related command construction to ensure consistency
and proper configuration across the application.
"""

import platform
from pathlib import Path

from nyord_vpn.exceptions import VPNConfigError


def get_openvpn_command(
    config_path: Path,
    auth_path: Path,
    log_path: Path | None = None,
    verbosity: int = 5,
    connect_retry: int = 2,
    connect_timeout: int = 10,
    ping_interval: int = 10,
    ping_restart: int = 60,
) -> list[str]:
    """Construct OpenVPN command with all necessary arguments.

    This is the central place for OpenVPN command construction. It provides
    a comprehensive set of options for connection management, monitoring,
    and error handling.

    Args:
        config_path: Path to OpenVPN config file
        auth_path: Path to authentication file
        log_path: Optional path to log file
        verbosity: Logging verbosity level (1-6)
        connect_retry: Number of connection retry attempts
        connect_timeout: Connection timeout in seconds
        ping_interval: Interval between ping tests in seconds
        ping_restart: Time without ping response before restart

    Returns:
        List of command arguments for OpenVPN

    Raises:
        VPNConfigError: If required files don't exist or aren't accessible

    Note:
        The command includes security-focused defaults and robust
        error handling parameters to ensure stable VPN connections.

    """
    # Validate required files
    if not config_path.exists():
        raise VPNConfigError(f"OpenVPN config file not found: {config_path}")
    if not auth_path.exists():
        raise VPNConfigError(f"OpenVPN auth file not found: {auth_path}")

    # Validate file permissions (should be readable)
    try:
        config_path.read_bytes()
        auth_path.read_bytes()
    except (PermissionError, OSError) as e:
        raise VPNConfigError(f"Cannot read OpenVPN files: {e}")

    # Create log directory if needed
    if log_path:
        log_path.parent.mkdir(parents=True, exist_ok=True)

    # Validate verbosity level
    if not 1 <= verbosity <= 6:
        raise VPNConfigError(f"Invalid verbosity level: {verbosity} (must be 1-6)")

    # Base command with common options
    cmd = [
        "openvpn",
        "--config",
        str(config_path),
        "--auth-user-pass",
        str(auth_path),
        "--verb",
        str(verbosity),
        "--connect-retry",
        str(connect_retry),
        "--connect-timeout",
        str(connect_timeout),
        "--resolv-retry",
        "infinite",
        "--ping",
        str(ping_interval),
        "--ping-restart",
        str(ping_restart),
        "--script-security",
        "2",
        "--persist-tun",
        "--persist-key",
        "--nobind",
        "--fast-io",
        "--data-ciphers",
        "AES-256-GCM:AES-128-GCM:CHACHA20-POLY1305:AES-256-CBC",
        "--data-ciphers-fallback",
        "AES-256-CBC",
        "--auth-retry",
        "nointeract",
        "--auth-nocache",
        "--pull-filter",
        "ignore",
        "auth-token",
        "--tls-version-min",
        "1.2",
        "--tls-cipher",
        "TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384:TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256",
    ]

    # Platform-specific options
    system = platform.system().lower()
    if system == "darwin":  # macOS
        cmd.extend(
            [
                # Basic routing
                "--redirect-gateway",
                "def1",
                # DNS configuration
                "--dhcp-option",
                "DNS",
                "103.86.96.100",  # NordVPN DNS
                "--dhcp-option",
                "DNS",
                "103.86.99.100",  # NordVPN DNS backup
            ]
        )
    else:  # Linux and others
        # Use standard Linux DNS update scripts if available
        resolv_conf_script = Path("/etc/openvpn/update-resolv-conf")
        if resolv_conf_script.exists():
            cmd.extend(
                [
                    "--up",
                    str(resolv_conf_script),
                    "--down",
                    str(resolv_conf_script),
                ]
            )

        cmd.extend(
            [
                # Enable routing
                "--redirect-gateway",  # Redirect all traffic through VPN
                "def1",  # Use default gateway
                "bypass-dhcp",  # Don't redirect DHCP
                "bypass-dns",  # Don't redirect DNS
            ]
        )

    # Add log file if specified
    if log_path:
        cmd.extend(["--log", str(log_path)])

    return cmd

================
File: src/nyord_vpn/network/vpn.py
================
"""VPN connection management module.

this_file: src/nyord_vpn/network/vpn.py

This module provides the VPNConnectionManager class that handles
OpenVPN connections to NordVPN servers.

Core Responsibilities:
1. OpenVPN process management and configuration
2. Connection establishment and verification
3. IP address tracking and validation
4. Connection state management
5. Config file generation and cleanup

Integration Points:
- Used by Client (core/client.py) for VPN operations
- Uses templates from utils/templates.py for config
- Uses connection utils from utils/connection.py
- Stores state via utils/utils.py

Security Features:
- Strong encryption (AES-256-GCM)
- Certificate validation
- DNS leak prevention
- Secure process management

Error Handling:
- Graceful process termination
- Connection verification
- State recovery
- Detailed error messages

The manager implements robust connection handling with:
- Automatic retry logic
- Connection health monitoring
- Process cleanup on errors
- State persistence for recovery
"""

import subprocess
import time
from pathlib import Path
from typing import Any, Dict
import requests
from loguru import logger
import psutil
import os
import signal
import sys
import socket

from rich.console import Console

from nyord_vpn.exceptions import (
    VPNError,
    VPNAuthenticationError,
    VPNConfigError,
)
from nyord_vpn.utils.templates import (
    get_config_path,
)
from nyord_vpn.network.vpn_commands import get_openvpn_command
from nyord_vpn.utils.utils import (
    OPENVPN_AUTH,
    OPENVPN_LOG,
    check_root,
    ensure_root,
)
from nyord_vpn.storage.state import save_vpn_state, load_vpn_state
from nyord_vpn.network.server import ServerManager

console = Console()

# Constants
OPENVPN_AUTH = Path.home() / ".cache" / "nyord-vpn" / "openvpn.auth"
OPENVPN_LOG = Path.home() / ".cache" / "nyord-vpn" / "openvpn.log"


class VPNConnectionManager:
    """Manages VPN connections using OpenVPN.

    This class is responsible for the low-level VPN connection management:
    1. OpenVPN process control (start, stop, monitor)
    2. Configuration file management
    3. Connection state tracking and verification
    4. IP address monitoring and validation

    The manager maintains state about the current connection including:
    - Public IP when not connected to VPN
    - Connected IP after successful connection
    - Current server hostname
    - Connected country information
    """

    def __init__(
        self,
        api_client: Any,
        server_manager: ServerManager,
        vpn_manager: Any,
        verbose: bool = False,
    ):
        """Initialize VPN connection manager.

        Args:
            api_client: API client instance
            server_manager: Server manager instance
            vpn_manager: VPN manager instance
            verbose: Whether to enable verbose logging
        """
        self.api_client = api_client
        self.server_manager = server_manager
        self.vpn_manager = vpn_manager
        self.verbose = verbose
        self.logger = logger
        self.process: subprocess.Popen | None = None
        self.openvpn_path: str | None = None

        # Connection state
        self._normal_ip: str | None = None
        self._connected_ip: str | None = None
        self._server: str | None = None
        self._country_name: str | None = None

        # IP caching
        self._cached_ip: str | None = None
        self._cached_ip_time: float = 0
        self._ip_cache_ttl: float = 3.0  # Cache IP for 3 seconds

        # Load saved state
        state = load_vpn_state()
        self._normal_ip = state.get("normal_ip")
        self._connected_ip = state.get("connected_ip")
        self._server = state.get("server")
        self._country_name = state.get("country")

        # Ensure cache directory exists
        OPENVPN_AUTH.parent.mkdir(parents=True, exist_ok=True)

        # Try to find OpenVPN at init
        try:
            self.openvpn_path = self.check_openvpn_installation()
        except VPNError:
            if self.verbose:
                self.logger.warning("OpenVPN not found during initialization")

    def check_openvpn_installation(self) -> str:
        """Check if OpenVPN is installed and accessible.

        Returns:
            str: Path to OpenVPN executable

        Raises:
            VPNError: If OpenVPN is not installed or not accessible

        """
        try:
            # Try to find openvpn in common locations
            openvpn_paths = [
                "/usr/local/sbin/openvpn",  # Homebrew on macOS
                "/usr/sbin/openvpn",  # Linux
                "/opt/homebrew/sbin/openvpn",  # Apple Silicon macOS
            ]

            for path in openvpn_paths:
                if Path(path).exists():
                    # Verify we can run it
                    result = subprocess.run(
                        [path, "--version"], capture_output=True, text=True, check=False
                    )
                    if result.returncode == 0:
                        if self.verbose:
                            self.logger.debug(f"Found OpenVPN at {path}")
                        return path

            # If not found in common paths, try which
            try:
                result = subprocess.run(
                    ["which", "openvpn"], capture_output=True, text=True, check=True
                )
                path = result.stdout.strip()
                if path:
                    if self.verbose:
                        self.logger.debug(f"Found OpenVPN at {path}")
                    return path
            except subprocess.CalledProcessError:
                pass

            raise VPNError(
                "OpenVPN not found. Please install OpenVPN:\n"
                "  macOS: brew install openvpn\n"
                "  Linux: sudo apt install openvpn  # or your distro's package manager"
            )

        except Exception as e:
            if isinstance(e, VPNError):
                raise
            raise VPNError(f"Failed to verify OpenVPN installation: {e}")

    def setup_connection(self, hostname: str, username: str, password: str) -> None:
        """Set up VPN connection configuration.

        This method prepares the authentication and configuration files needed
        for establishing a VPN connection. It must be called before connect().

        Args:
            hostname: VPN server hostname to connect to
            username: NordVPN username
            password: NordVPN password

        Raises:
            VPNAuthenticationError: If credentials are invalid or auth file creation fails
            VPNConfigError: If config file creation fails

        Note:
            Creates auth file with 0600 permissions for security.
            Validates credentials format before writing.

        """
        try:
            # Validate credentials
            if not username or not isinstance(username, str):
                raise VPNAuthenticationError("Username must be a non-empty string")
            username = username.strip()
            if not username:
                raise VPNAuthenticationError("Username cannot be empty")

            if not password or not isinstance(password, str):
                raise VPNAuthenticationError("Password must be a non-empty string")
            password = password.strip()
            if not password:
                raise VPNAuthenticationError("Password cannot be empty")
            if len(password) < 8:
                raise VPNAuthenticationError("Password must be at least 8 characters")

            # Ensure cache directory exists with secure permissions
            auth_dir = OPENVPN_AUTH.parent
            auth_dir.mkdir(mode=0o700, parents=True, exist_ok=True)

            # Create auth file with credentials
            temp_auth = auth_dir / f".openvpn.auth.{os.getpid()}.tmp"
            try:
                # Write to temp file first
                temp_auth.write_text(f"{username}\n{password}")
                temp_auth.chmod(0o600)

                # Move temp file to final location (atomic operation)
                temp_auth.replace(OPENVPN_AUTH)

                if self.verbose:
                    self.logger.debug(f"Created auth file at {OPENVPN_AUTH}")

            except Exception as e:
                # Clean up temp file if it exists
                try:
                    if temp_auth.exists():
                        temp_auth.unlink()
                except Exception:
                    pass
                raise VPNAuthenticationError(
                    f"Failed to create auth file: {e}. "
                    "Please check file permissions and disk space."
                )

            # Verify auth file permissions and contents
            try:
                stat = OPENVPN_AUTH.stat()
                if stat.st_mode & 0o777 != 0o600:
                    OPENVPN_AUTH.chmod(0o600)
                    if self.verbose:
                        self.logger.debug("Fixed auth file permissions")

                # Verify file contents
                lines = OPENVPN_AUTH.read_text().strip().split("\n")
                if len(lines) != 2:
                    raise VPNAuthenticationError(
                        "Auth file is corrupted - please run setup again"
                    )
                if lines[0].strip() != username or lines[1].strip() != password:
                    raise VPNAuthenticationError(
                        "Auth file contents don't match - please run setup again"
                    )

            except Exception as e:
                if isinstance(e, VPNAuthenticationError):
                    raise
                raise VPNAuthenticationError(
                    f"Failed to verify auth file: {e}. "
                    "Please check file permissions and try again."
                )

        except Exception as e:
            if isinstance(e, VPNAuthenticationError):
                raise
            raise VPNAuthenticationError(str(e))

    def get_current_ip(self) -> str | None:
        """Get current IP address with basic verification.

        Uses api.ipify.org as primary service with ip-api.com as backup.
        Results are cached for 30 seconds to avoid excessive API calls.

        Returns:
            Current public IP address or None if unavailable

        """

        def is_valid_ipv4(ip: str) -> bool:
            """Validate IPv4 address format."""
            try:
                parts = ip.strip().split(".")
                if len(parts) != 4:
                    return False
                return all(0 <= int(part) <= 255 for part in parts)
            except (AttributeError, TypeError, ValueError):
                return False

        # Try primary service first (up to 2 attempts)
        for attempt in range(2):
            try:
                if self.verbose:
                    self.logger.debug(
                        f"Checking IP with api.ipify.org (attempt {attempt + 1})"
                    )
                response = requests.get("https://api.ipify.org?format=json", timeout=3)
                response.raise_for_status()
                data = response.json()
                ip = data.get("ip")
                if ip and is_valid_ipv4(ip):
                    if self.verbose:
                        self.logger.debug(f"Got valid IP {ip} from api.ipify.org")
                    return ip
            except Exception as e:
                if self.verbose:
                    self.logger.debug(
                        f"Primary IP check failed (attempt {attempt + 1}): {e}"
                    )
                if attempt < 1:  # Only sleep between attempts
                    time.sleep(0.5)

        # Try backup service (up to 2 attempts)
        for attempt in range(2):
            try:
                if self.verbose:
                    self.logger.debug(
                        f"Checking IP with ip-api.com (attempt {attempt + 1})"
                    )
                response = requests.get("http://ip-api.com/json", timeout=3)
                response.raise_for_status()
                data = response.json()
                ip = data.get("query")
                if ip and is_valid_ipv4(ip):
                    if self.verbose:
                        self.logger.debug(f"Got valid IP {ip} from ip-api.com")
                    return ip
            except Exception as e:
                if self.verbose:
                    self.logger.debug(
                        f"Backup IP check failed (attempt {attempt + 1}): {e}"
                    )
                if attempt < 1:  # Only sleep between attempts
                    time.sleep(0.5)

        # Try one last service as final fallback
        try:
            if self.verbose:
                self.logger.debug("Checking IP with ifconfig.me (final attempt)")
            response = requests.get("https://ifconfig.me/ip", timeout=3)
            response.raise_for_status()
            ip = response.text.strip()
            if ip and is_valid_ipv4(ip):
                if self.verbose:
                    self.logger.debug(f"Got valid IP {ip} from ifconfig.me")
                return ip
        except Exception as e:
            if self.verbose:
                self.logger.debug(f"Final IP check failed: {e}")

        if self.verbose:
            self.logger.warning("Failed to get current IP from any service")
        return None

    def _save_state(self) -> None:
        """Save current connection state."""
        current_ip = self.get_current_ip()
        state = {
            "connected": self.is_connected(),
            "current_ip": current_ip,  # Used to update normal_ip when disconnected
            "normal_ip": self._normal_ip,
            "connected_ip": self._connected_ip,
            "server": self._server,
            "country": self._country_name,
            "process_id": self.process.pid if self.process else None,
            "timestamp": time.time(),
        }
        save_vpn_state(state)
        if self.verbose:
            self.logger.debug(
                f"Saved state: connected={state['connected']}, "
                f"server={state['server']}, country={state['country']}"
            )

    def connect(self, servers: list[dict[str, Any]]) -> None:
        """Connect to a VPN server, trying servers from the list on failure.

        Args:
            servers: List of server information dictionaries, ideally sorted.

        Raises:
            VPNError: If connection fails after trying all servers.

        """
        error_messages = []  # Collect error messages

        for server in servers:
            try:
                hostname = server.get("hostname")
                if not hostname:
                    raise VPNError("Invalid server info - missing hostname")

                # Force cleanup of any existing connections
                try:
                    self.disconnect()
                except Exception as e:
                    if self.verbose:
                        self.logger.warning(
                            f"Error during disconnect: {e}, attempting force cleanup"
                        )

                    # Ensure no OpenVPN processes are running
                    for proc in psutil.process_iter(["name", "pid", "cmdline"]):
                        try:
                            if proc.info["name"] == "openvpn":
                                cmdline = proc.info.get("cmdline", [])
                                if any("nordvpn.com" in arg for arg in cmdline):
                                    try:
                                        os.kill(proc.info["pid"], signal.SIGKILL)
                                        time.sleep(0.1)  # Brief pause after kill
                                    except Exception:
                                        pass
                        except (psutil.NoSuchProcess, psutil.AccessDenied):
                            continue

                # Store server info
                self._server = hostname
                # Store full country name from server data
                try:
                    location_ids = server.get("location_ids", [])
                    locations = self.server_manager.get_servers_cache().get("locations", {})
                    for loc_id in location_ids:
                        location = locations.get(str(loc_id))
                        if location and location.get("country"):
                            self._country_name = location["country"]["name"]
                            break
                except Exception as e:
                    if self.verbose:
                        self.logger.warning(f"Failed to get country name from server data: {e}")
                    self._country_name = None

                # Ensure OpenVPN is available
                if not self.openvpn_path:
                    self.openvpn_path = self.check_openvpn_installation()

                if self.verbose:
                    self.logger.debug(f"Connecting to {hostname}")

                # Get OpenVPN config
                config_path = get_config_path(hostname)
                if not config_path:
                    raise VPNConfigError(f"Failed to get OpenVPN config for {hostname}")

                # Log config file contents for debugging
                if self.verbose:
                    try:
                        config_content = config_path.read_text()
                        self.logger.debug(f"OpenVPN config for {hostname}:")
                        for line in config_content.splitlines():
                            if not line.strip().startswith("#"):  # Skip comments
                                self.logger.debug(f"  {line}")
                    except Exception as e:
                        self.logger.warning(f"Failed to read config file: {e}")

                # Verify auth file exists and has correct format
                if not OPENVPN_AUTH.exists():
                    raise VPNError("Auth file not found - please run setup first")
                try:
                    auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
                    if len(auth_content) != 2:
                        raise VPNError(
                            "Auth file is corrupted - please run setup again"
                        )
                    if not auth_content[0] or not auth_content[1]:
                        raise VPNError(
                            "Auth file contains empty username or password - please run setup again"
                        )
                    if self.verbose:
                        self.logger.debug("Auth file exists and has correct format")
                except Exception as e:
                    if isinstance(e, VPNError):
                        raise
                    raise VPNError(f"Failed to read auth file: {e}")

                # Start OpenVPN process
                cmd = get_openvpn_command(
                    config_path=config_path,
                    auth_path=OPENVPN_AUTH,
                    log_path=OPENVPN_LOG if self.verbose else None,
                    verbosity=5 if self.verbose else 3,
                )

                if self.verbose:
                    self.logger.debug("Running OpenVPN command:")
                    self.logger.debug(" ".join(cmd))

                try:
                    # Clear any existing log file
                    if OPENVPN_LOG and OPENVPN_LOG.exists():
                        OPENVPN_LOG.unlink()

                    # Start OpenVPN process
                    self.process = subprocess.Popen(
                        cmd,
                        stdout=subprocess.PIPE,
                        stderr=subprocess.PIPE,
                        text=True,
                        bufsize=1,
                    )

                    # Give process a moment to start
                    time.sleep(0.5)

                    # Check if process died immediately
                    if self.process.poll() is not None:
                        stdout, stderr = self.process.communicate()
                        raise VPNError(
                            f"OpenVPN process failed to start:\n"
                            f"Exit code: {self.process.returncode}\n"
                            f"Output: {stdout}\n"
                            f"Error: {stderr}"
                        )

                except subprocess.SubprocessError as e:
                    raise VPNError(f"Failed to start OpenVPN process: {e}")

                # Monitor OpenVPN output
                start_time = time.time()
                success = False
                error_msg = None
                log_content = ""

                while time.time() - start_time < 30:  # 30 second timeout
                    # Check if process died
                    if self.process.poll() is not None:
                        stdout, stderr = self.process.communicate()

                        # Try to get log content for better error reporting
                        try:
                            if OPENVPN_LOG and OPENVPN_LOG.exists():
                                log_content = OPENVPN_LOG.read_text()
                                if self.verbose:
                                    self.logger.debug("OpenVPN log content:")
                                    for line in log_content.splitlines():
                                        self.logger.debug(f"  {line}")
                        except Exception as e:
                            if self.verbose:
                                self.logger.warning(f"Failed to read OpenVPN log: {e}")

                        # If we have log content, check for known errors
                        if log_content:
                            if "AUTH_FAILED" in log_content:
                                # Get more context around the auth failure
                                auth_lines = [
                                    line
                                    for line in log_content.splitlines()
                                    if "AUTH" in line
                                ]
                                if auth_lines and self.verbose:
                                    self.logger.debug("Auth-related log lines:")
                                    for line in auth_lines:
                                        self.logger.debug(f"  {line}")
                                error_msg = (
                                    "Authentication failed - check your credentials"
                                )
                                if "AUTH_FAILED,SESSION" in log_content:
                                    error_msg = "Session authentication failed - server may require re-login"
                                elif "AUTH_FAILED,CERTIFICATE" in log_content:
                                    error_msg = "Certificate authentication failed - server config may be invalid"
                            elif "Cannot load certificate file" in log_content:
                                error_msg = (
                                    "Certificate error - server config may be invalid"
                                )
                            elif "Cannot load private key file" in log_content:
                                error_msg = (
                                    "Private key error - server config may be invalid"
                                )
                            elif (
                                "All TAP-Windows adapters on this system are currently in use"
                                in log_content
                            ):
                                error_msg = "All VPN adapters are in use"
                            elif "TLS Error" in log_content:
                                error_msg = "TLS handshake failed - server may be down"
                            elif "TLS key negotiation failed" in log_content:
                                error_msg = "TLS key negotiation failed - server may require different TLS settings"
                            elif "Connection timed out" in log_content:
                                error_msg = (
                                    "Connection timed out - server may be unreachable"
                                )
                            elif "Cannot resolve host address" in log_content:
                                error_msg = "Cannot resolve server hostname - DNS issue"

                        # If no specific error found, use a generic message
                        if not error_msg:
                            error_msg = (
                                f"OpenVPN process terminated unexpectedly:\n"
                                f"Exit code: {self.process.returncode}\n"
                                f"Output: {stdout}\n"
                                f"Error: {stderr}\n"
                                f"Log: {log_content if log_content else 'No log available'}"
                            )
                        break

                    # Check log file for status
                    if OPENVPN_LOG and OPENVPN_LOG.exists():
                        try:
                            log_content = OPENVPN_LOG.read_text()

                            # Check for success
                            if "Initialization Sequence Completed" in log_content:
                                success = True
                                break

                            # Check for auth progress
                            if self.verbose and "AUTH" in log_content:
                                auth_lines = [
                                    line
                                    for line in log_content.splitlines()
                                    if "AUTH" in line
                                ]
                                if auth_lines:
                                    self.logger.debug("Auth progress:")
                                    for line in auth_lines:
                                        self.logger.debug(f"  {line}")

                            # Check for common errors
                            if "AUTH_FAILED" in log_content:
                                error_msg = (
                                    "Authentication failed - check your credentials"
                                )
                                break
                            if "TLS Error" in log_content:
                                error_msg = "TLS handshake failed - server may be down"
                                break
                            if "Connection timed out" in log_content:
                                error_msg = (
                                    "Connection timed out - server may be unreachable"
                                )
                                break
                            if "Cannot resolve host address" in log_content:
                                error_msg = "Cannot resolve server hostname - DNS issue"
                                break
                            if (
                                "All TAP-Windows adapters on this system are currently in use"
                                in log_content
                            ):
                                error_msg = "All VPN adapters are in use"
                                break
                            if "Cannot load certificate file" in log_content:
                                error_msg = (
                                    "Certificate error - server config may be invalid"
                                )
                                break
                            if "Cannot load private key file" in log_content:
                                error_msg = (
                                    "Private key error - server config may be invalid"
                                )
                                break
                        except Exception as e:
                            if self.verbose:
                                self.logger.warning(f"Failed to read OpenVPN log: {e}")

                    time.sleep(0.1)

                # Handle timeout or error
                if not success:
                    # Kill the process if it's still running
                    if self.process and self.process.poll() is None:
                        try:
                            self.process.terminate()
                            time.sleep(0.1)
                            if self.process.poll() is None:
                                self.process.kill()
                        except Exception:
                            pass

                    if error_msg:
                        if self.verbose:
                            self.logger.warning(
                                f"Connection to {hostname} failed: {error_msg}"
                            )
                        error_messages.append(
                            f"Connection to {hostname} failed: {error_msg}"
                        )  # Collect
                    else:
                        if self.verbose:
                            self.logger.warning(
                                f"Connection to {hostname} timed out after 30 seconds"
                            )
                        error_messages.append(
                            f"Connection to {hostname} timed out after 30 seconds"
                        )  # Collect
                    continue  # Try the next server

                # Verify connection is working
                time.sleep(1)  # Brief pause to let connection stabilize
                if not self.verify_connection():
                    error_msg = "Connection verification failed"
                    if self.verbose:
                        self.logger.warning(error_msg)
                    error_messages.append(error_msg)  # Collect
                    continue  # Try next server

                # Update state
                state = {
                    "connected": True,
                    "process_id": self.process.pid if self.process else None,
                    "server": self._server,
                    "country": self._country_name,
                    "timestamp": time.time(),
                }
                save_vpn_state(state)

                if self.verbose:
                    self.logger.info(f"Connected to {hostname}")
                return  # Success!

            except Exception as e:
                # Clean up on error
                if self.process:
                    try:
                        self.process.terminate()
                        time.sleep(0.1)  # Brief pause
                        if self.process.poll() is None:
                            self.process.kill()
                    except Exception:
                        pass

                # Reset state
                self.process = None
                self._server = None
                self._country_name = None

                error_messages.append(str(e))  # Collect

                # Re-raise with context
                if isinstance(e, VPNError | VPNAuthenticationError | VPNConfigError):
                    # raise # No, we try other servers
                    continue  # Yes, try other servers
                # raise VPNError(f"Failed to connect to VPN: {e}") # No, we try other servers
                continue

        # If we get here, all attempts failed
        raise VPNError(
            "Failed to connect after trying all servers:\n" + "\n".join(error_messages)
        )

    def disconnect(self) -> None:
        """Disconnect from VPN and clean up.

        Performs a clean disconnection:
        1. Terminates OpenVPN process
        2. Updates connection state
        3. Records Public IP
        4. Cleans up resources

        Raises:
            VPNError: If disconnection fails with details about what failed

        """
        try:
            # First try graceful termination of our tracked process
            if self.process and self.process.poll() is None:
                try:
                    self.process.terminate()
                    # Give it a moment to terminate gracefully
                    for _ in range(10):  # 1 second total
                        if self.process.poll() is not None:
                            break
                        time.sleep(0.1)
                except Exception as e:
                    if self.verbose:
                        self.logger.warning(f"Error terminating tracked process: {e}")

            # Find and kill ALL OpenVPN processes
            for proc in psutil.process_iter(["name", "pid", "cmdline"]):
                try:
                    if proc.info["name"] == "openvpn":
                        # Double check it's our OpenVPN process by looking at cmdline
                        cmdline = proc.info.get("cmdline", [])
                        if any("nordvpn.com" in arg for arg in cmdline):
                            if self.verbose:
                                self.logger.debug(
                                    f"Found OpenVPN process {proc.info['pid']}"
                                )

                            # Try graceful termination first
                            try:
                                os.kill(proc.info["pid"], signal.SIGTERM)
                                time.sleep(0.1)  # Brief pause
                            except Exception:
                                pass

                            # Force kill if still running
                            try:
                                if self._is_process_running(proc.info["pid"]):
                                    os.kill(proc.info["pid"], signal.SIGKILL)
                                    if self.verbose:
                                        self.logger.debug(
                                            f"Force killed OpenVPN process {proc.info['pid']}"
                                        )
                            except Exception as e:
                                if self.verbose:
                                    self.logger.warning(
                                        f"Failed to kill process {proc.info['pid']}: {e}"
                                    )

                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue

            # Verify no OpenVPN processes are left
            remaining = []
            for proc in psutil.process_iter(["name", "pid", "cmdline"]):
                try:
                    if proc.info["name"] == "openvpn":
                        cmdline = proc.info.get("cmdline", [])
                        if any("nordvpn.com" in arg for arg in cmdline):
                            remaining.append(proc.info["pid"])
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue

            if remaining:
                raise VPNError(
                    f"Failed to kill all OpenVPN processes. Remaining: {remaining}"
                )

            # Clean up OpenVPN log file
            if OPENVPN_LOG and OPENVPN_LOG.exists():
                try:
                    OPENVPN_LOG.unlink()
                    if self.verbose:
                        self.logger.debug("Cleaned up OpenVPN log file")
                except Exception as e:
                    if self.verbose:
                        self.logger.warning(f"Failed to clean up OpenVPN log: {e}")

            # Update instance state
            self.process = None
            self._server = None
            self._country_name = None
            self._connected_ip = None
            self._invalidate_ip_cache()

            # Save minimal state
            state = {
                "connected": False,
                "process_id": None,
                "server": None,
                "country": None,
                "connected_ip": None,
                "timestamp": time.time(),
            }
            save_vpn_state(state)

            if self.verbose:
                self.logger.info("Disconnected from VPN")

        except Exception as e:
            error_details = []
            if isinstance(e, ProcessLookupError):
                error_details.append("Process not found")
            elif isinstance(e, PermissionError):
                error_details.append("Permission denied")
            else:
                error_details.append(str(e))

            if self.verbose:
                self.logger.exception(
                    f"Error during disconnect: {'; '.join(error_details)}"
                )

            raise VPNError(
                f"Failed to disconnect from VPN: {'; '.join(error_details)}"
            ) from e

    def is_connected(self) -> bool:
        """Check if OpenVPN process is running."""
        return self.process is not None and self.process.poll() is None

    def verify_connection(self) -> bool:
        """Verify that the VPN connection is working properly.

        Returns:
            bool: True if connection is verified working

        This method checks:
        1. OpenVPN process is running
        2. TUN/TAP interface is up
        3. DNS is working
        4. IP has changed from pre-connection IP

        """
        try:
            # Check process is still running
            if not self.process or self.process.poll() is not None:
                if self.verbose:
                    self.logger.debug("OpenVPN process not running")
                return False

            # Check TUN/TAP interface (platform specific)
            if sys.platform == "darwin":  # macOS
                try:
                    output = subprocess.check_output(["ifconfig"], text=True)
                    if not any(
                        line.startswith("utun") and "UP" in line
                        for line in output.split("\n")
                    ):
                        if self.verbose:
                            self.logger.debug("No active utun interface found")
                        return False
                except subprocess.CalledProcessError:
                    if self.verbose:
                        self.logger.debug("Failed to check TUN interface")
                    return False
            elif sys.platform == "linux":
                try:
                    output = subprocess.check_output(
                        ["ip", "link", "show", "tun0"], text=True
                    )
                    if "UP" not in output:
                        if self.verbose:
                            self.logger.debug("TUN interface not up")
                        return False
                except subprocess.CalledProcessError:
                    if self.verbose:
                        self.logger.debug("Failed to check TUN interface")
                    return False

            # Check DNS resolution
            try:
                socket.gethostbyname("nordvpn.com")
            except socket.gaierror:
                if self.verbose:
                    self.logger.debug("DNS resolution failed")
                return False

            # Check IP has changed
            try:
                current_ip = self.get_current_ip()
                if not current_ip:
                    if self.verbose:
                        self.logger.debug("Failed to get current IP")
                    return False

                # Get the pre-connection IP from state
                state = load_vpn_state()
                normal_ip = state.get("normal_ip")

                if normal_ip and current_ip == normal_ip:
                    if self.verbose:
                        self.logger.debug("IP has not changed from pre-connection IP")
                    return False

            except Exception as e:
                if self.verbose:
                    self.logger.debug(f"IP verification failed: {e}")
                return False

            return True

        except Exception as e:
            if self.verbose:
                self.logger.debug(f"Connection verification failed: {e}")
            return False

    def status(self) -> dict[str, Any]:
        """Get current VPN connection status.

        Returns:
            dict: Status information including:
                - connected (bool): Whether connected to VPN
                - ip (str): Current IP address
                - normal_ip (str): IP when not connected to VPN
                - server (str): Connected server if any
                - country (str): Connected country if any

        """
        status = {
            "connected": self.is_connected(),
            "ip": self.get_current_ip(),
            "normal_ip": self._normal_ip,
            "server": self._server,
            "country": None,
        }

        # Get country information from server manager's cached data
        if self._server:
            try:
                # Get server info from cache
                cache = self.server_manager.get_servers_cache()
                if cache and cache.get("servers"):
                    # Find our server in the cache
                    for server in cache["servers"]:
                        if server.get("hostname") == self._server:
                            # Get location info
                            location_ids = server.get("location_ids", [])
                            locations = cache.get("locations", {})
                            
                            # Find matching location with country info
                            for loc_id in location_ids:
                                location = locations.get(str(loc_id))
                                if location and location.get("country"):
                                    status["country"] = location["country"]["name"]
                                    break
                            break

                # Fallback to hostname parsing if server not found in cache
                if not status["country"]:
                    country_code = self._server.split('.')[0][:2].upper()
                    country = self.api_client.get_country_by_code(country_code)
                    if country:
                        status["country"] = country["name"]

            except Exception as e:
                if self.verbose:
                    self.logger.warning(f"Failed to get country information from server data: {e}")

        return status

    def _is_process_running(self, process_id: int) -> bool:
        """Check if a process is running by its PID.

        Args:
            process_id: Process ID to check

        Returns:
            bool: True if running, False if not

        """
        try:
            os.kill(process_id, 0)
            return True
        except OSError:
            return False
        except Exception as e:
            if self.verbose:
                self.logger.debug(f"Error checking process {process_id}: {e}")
            return False

    def check_connection_state(self) -> bool:
        """Check current VPN connection state.

        Verifies the VPN connection by checking if OpenVPN process is running
        and has completed initialization.

        Returns:
            bool: True if connected to VPN, False otherwise

        """
        try:
            # Load state once
            state = load_vpn_state()

            # Check process first
            process_id = state.get("process_id")
            if not process_id or not self._is_process_running(process_id):
                if self.verbose:
                    self.logger.debug("OpenVPN process not running")
                # Only disconnect if we think we're connected
                if state.get("connected"):
                    self.disconnect()
                return False

            # Check OpenVPN log for connection status
            if OPENVPN_LOG and OPENVPN_LOG.exists():
                try:
                    log_content = OPENVPN_LOG.read_text()
                    if "Initialization Sequence Completed" in log_content:
                        if self.verbose:
                            self.logger.debug("OpenVPN connection verified")
                        return True
                except Exception as e:
                    if self.verbose:
                        self.logger.debug(f"Failed to read OpenVPN log: {e}")

            return False

        except Exception as e:
            if self.verbose:
                self.logger.exception(f"Error checking connection state: {e}")
            return False

    def _invalidate_ip_cache(self) -> None:
        """Invalidate the IP cache.

        Call this when we know the IP has changed (e.g. after connecting/disconnecting).
        """
        self._cached_ip = None
        self._cached_ip_time = 0
        if self.verbose:
            self.logger.debug("IP cache invalidated")

    def go(self, country_code: str) -> None:
        """Connect to VPN in specified country.

        Args:
            country_code: Two-letter country code (e.g. 'US', 'GB')

        Raises:
            VPNError: If connection fails
        """
        if not check_root():
            ensure_root()
            return

        try:
            # First check if we're already connected
            status = self.status()
            if status.get("connected", False):
                # Automatically disconnect before connecting to new server
                if self.verbose:
                    self.logger.info("Disconnecting from current server before connecting to new one")
                self.disconnect()

            # Get fastest servers
            servers = self.server_manager.select_fastest_server(country_code)
            if not servers:
                raise VPNError(f"No servers available in {country_code}")

            if self.verbose:
                self.logger.info(f"Selected {len(servers)} servers to try")
                for i, server in enumerate(servers, 1):
                    self.logger.info(f"{i}. {server.get('hostname')} (load: {server.get('load')}%)")

            # Try servers in order until one works
            errors = []
            for server in servers:
                hostname = None  # Initialize outside try block
                try:
                    hostname = server.get("hostname")
                    if not hostname:
                        continue

                    if self.verbose:
                        self.logger.info(f"Trying server: {hostname}")
                        console.print(f"Trying server: [cyan]{hostname}[/cyan]")

                    # Set up VPN configuration
                    self.setup_connection(hostname, self.api_client.username, self.api_client.password)

                    # Try to connect
                    self.connect([server])  # Pass as list for compatibility
                    
                    # If we get here, connection succeeded
                    if self.verbose:
                        self.logger.info(f"Successfully connected to {hostname}")
                    return

                except Exception as e:
                    error_msg = f"{hostname if hostname else 'Unknown server'}: {str(e)}"
                    errors.append(error_msg)
                    if self.verbose:
                        self.logger.warning(f"Failed to connect to {hostname if hostname else 'Unknown server'}: {e}")
                    continue

            # If we get here, all servers failed
            raise VPNError(
                f"Failed to connect to any server in {country_code}:\n" + 
                "\n".join(f"- {e}" for e in errors)
            )

        except Exception as e:
            raise VPNError(f"Failed to connect: {e}")

================
File: src/nyord_vpn/scripts/__init__.py
================
"""Utility scripts for nyord-vpn."""

================
File: src/nyord_vpn/scripts/update_countries.py
================
#!/usr/bin/env -S uv run
# /// script
# dependencies = ["requests", "rich"]
# ///

"""Script to fetch and update the country list from NordVPN API."""

import json
import sys
import time
from pathlib import Path
from typing import TypedDict

import requests
from rich import print as rprint
from rich.progress import Progress, SpinnerColumn, TextColumn


class City(TypedDict):
    """City information from NordVPN API."""

    dns_name: str
    hub_score: int
    id: int
    latitude: float
    longitude: float
    name: str
    serverCount: int


class Country(TypedDict):
    """Country information from NordVPN API."""

    cities: list[City]
    code: str
    id: int
    name: str
    serverCount: int


class CountryCache(TypedDict):
    """Cache file structure."""

    countries: list[Country]
    last_updated: str


def fetch_countries() -> list[Country]:
    """Fetch countries from NordVPN API."""
    url = "https://api.nordvpn.com/v1/servers/countries"

    with Progress(
        SpinnerColumn(),
        TextColumn("[progress.description]{task.description}"),
        transient=True,
    ) as progress:
        progress.add_task(
            description="Fetching country list from NordVPN API...",
            total=None,
        )
        response = requests.get(url, timeout=10)
        response.raise_for_status()

    # The API already returns the exact structure we want
    countries: list[Country] = response.json()
    return sorted(countries, key=lambda x: x["name"])


def main() -> None:
    """Update the country list cache file."""
    try:
        # Get package data directory
        package_dir = Path(__file__).parent.parent
        data_dir = package_dir / "data"
        cache_file = data_dir / "countries.json"

        # Ensure data directory exists
        data_dir.mkdir(parents=True, exist_ok=True)

        # Fetch fresh data
        countries = fetch_countries()

        # Calculate total servers across all countries
        total_servers = sum(country["serverCount"] for country in countries)
        total_cities = sum(len(country["cities"]) for country in countries)

        # Prepare cache data
        cache_data: CountryCache = {
            "countries": countries,
            "last_updated": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
        }

        # Save to file
        with cache_file.open("w") as f:
            json.dump(cache_data, f, indent=2, sort_keys=True)
        cache_file.chmod(0o644)

        rprint("[green]✓ Updated country list cache with:[/green]")
        rprint(f"  • [cyan]{len(countries)}[/cyan] countries")
        rprint(f"  • [cyan]{total_cities}[/cyan] cities")
        rprint(f"  • [cyan]{total_servers}[/cyan] servers")
        rprint(f"[blue]Cache file: {cache_file}[/blue]")

    except requests.RequestException as e:
        rprint(f"[red]✗ Failed to fetch country list: {e}[/red]")
        sys.exit(1)
    except (OSError, json.JSONDecodeError) as e:
        rprint(f"[red]✗ Failed to update cache file: {e}[/red]")
        sys.exit(1)


if __name__ == "__main__":
    main()

================
File: src/nyord_vpn/storage/models.py
================
"""Data models and exceptions for the NordVPN client.

this_file: src/nyord_vpn/storage/models.py

This module defines the core data structures and error handling for the client.
It provides type-safe models for API data and a comprehensive exception hierarchy.

Data Models:
1. TypedDict classes for API responses:
   - City: Server location information
   - Country: Country-level server data
   - CountryCache: Cache storage format

Integration Points:
- Used by Client (core/client.py) for data handling
- Used by NordVPNAPIClient (core/api.py) for responses
- Used by ServerManager (network/server.py) for data
- Used throughout codebase for error handling

Exception Hierarchy:
1. VPNError - Base exception for all client errors
2. Specific exceptions for different scenarios:
   - ServerError: Server selection issues
   - ConnectionError: Connection failures
   - AuthenticationError: Credential problems
   - StateError: State management issues
   - CacheError: Cache operation failures

Error Handling Design:
- Each exception provides detailed error messages
- Includes recovery suggestions in messages
- Maintains consistent error handling patterns
- Supports both CLI and library usage

The models ensure type safety and data validation throughout
the codebase, while the exception hierarchy provides clear
error handling patterns and user-friendly error messages.
"""

from typing import TypedDict


class City(TypedDict):
    """City information from NordVPN API.

    Represents a city where NordVPN servers are located, including:
    - Geographic information (coordinates)
    - Server infrastructure details
    - Connection quality metrics

    Attributes:
        dns_name: DNS hostname component for server addresses
        hub_score: Infrastructure quality score (0-100)
        id: Unique city identifier
        latitude: Geographic latitude
        longitude: Geographic longitude
        name: Human-readable city name
        serverCount: Number of available servers

    """

    dns_name: str
    hub_score: int
    id: int
    latitude: float
    longitude: float
    name: str
    serverCount: int


class Country(TypedDict):
    """Country information from NordVPN API.

    Represents a country with NordVPN server presence, containing:
    - Basic country information
    - List of cities with servers
    - Server availability metrics

    Attributes:
        cities: List of City objects with server information
        code: Two-letter ISO country code
        id: Unique country identifier
        name: Full country name
        serverCount: Total servers in the country

    Note:
        The serverCount is the sum of all servers across cities,
        providing a quick way to assess server availability.

    """

    cities: list[City]
    code: str
    id: int
    name: str
    serverCount: int


class CountryCache(TypedDict):
    """Cache structure for country and server information.

    Provides a persistent storage format for server data:
    - Complete country and city information
    - Cache metadata for freshness checking

    Attributes:
        countries: List of Country objects with full server info
        last_updated: ISO 8601 timestamp of last update

    Note:
        This structure is used for both file storage and memory
        caching, ensuring consistent data representation.

    """

    countries: list[Country]
    last_updated: str


class VPNError(Exception):
    """Base exception for all VPN-related errors.

    Provides common functionality for VPN error handling:
    1. Default error messages
    2. Optional custom messages
    3. Base for specific error types

    All VPN-related exceptions should inherit from this class
    to ensure consistent error handling throughout the client.
    """

    def __init__(self, message: str | None = None) -> None:
        """Initialize base VPN error.

        Args:
            message: Optional custom error message
                    Falls back to generic message if None

        """
        super().__init__(message or "An unknown VPN error occurred")


class ServerError(VPNError):
    """Exception for server selection and availability issues.

    Raised when:
    1. No servers available in selected country
    2. Server selection algorithm fails
    3. Selected server becomes unavailable
    4. Load balancing cannot find suitable server

    The error message includes suggestions for resolution,
    such as trying a different country or server.
    """

    def __init__(self, message: str | None = None) -> None:
        """Initialize server error with helpful message.

        Args:
            message: Optional specific error details
                    Falls back to guidance message if None

        """
        super().__init__(
            message
            or "Failed to select a server. Please try again or choose a different country.",
        )


class ConnectionError(VPNError):
    """Exception for VPN connection establishment failures.

    Raised when:
    1. OpenVPN process fails to start
    2. Connection times out
    3. Network is unreachable
    4. System configuration prevents connection

    Includes diagnostic information and recovery steps
    in the error message.
    """

    def __init__(self, message: str | None = None) -> None:
        """Initialize connection error with diagnostics.

        Args:
            message: Optional connection failure details
                    Falls back to troubleshooting steps if None

        """
        super().__init__(
            message
            or "Failed to establish VPN connection. Please check your internet connection and try again.",
        )


class AuthenticationError(VPNError):
    """Exception for NordVPN authentication failures.

    Raised when:
    1. Invalid credentials provided
    2. Account is inactive or expired
    3. API authentication fails
    4. Token refresh fails

    Provides clear guidance on credential verification
    and account status checking.
    """

    def __init__(self, message: str | None = None) -> None:
        """Initialize authentication error with guidance.

        Args:
            message: Optional auth failure details
                    Falls back to credential check message if None

        """
        super().__init__(
            message or "Authentication failed. Please check your NordVPN credentials.",
        )


class CredentialsError(VPNError):
    """Exception for missing or invalid credentials.

    Raised when:
    1. Required environment variables are missing
    2. Credentials file is not found
    3. Credentials format is invalid
    4. Credentials are not properly set

    Provides detailed instructions for credential setup
    including environment variables and file locations.
    """

    def __init__(self, message: str | None = None) -> None:
        """Initialize credentials error with setup instructions.

        Args:
            message: Optional specific error details
                    Falls back to setup instructions if None

        """
        super().__init__(
            message
            or (
                "NordVPN credentials not found. Please set environment variables:\n"
                "  export NORD_USER='your-username'\n"
                "  export NORD_PASSWORD='your-password'\n"
                "\nOr provide them directly when running the command:\n"
                "  NORD_USER='your-username' NORD_PASSWORD='your-password' nyord-vpn <command>"
            ),
        )


class StateError(VPNError):
    """Exception for VPN state management failures.

    Raised when:
    1. State file operations fail
    2. State becomes inconsistent
    3. State transition fails
    4. State validation fails

    Includes recovery steps to restore consistent state
    through disconnection and reconnection.
    """

    def __init__(self, message: str | None = None) -> None:
        """Initialize state error with recovery steps.

        Args:
            message: Optional state error details
                    Falls back to recovery instructions if None

        """
        super().__init__(
            message
            or "Failed to manage VPN state. Please try disconnecting and reconnecting.",
        )


class CacheError(VPNError):
    """Exception for cache operation failures.

    Raised when:
    1. Cache file operations fail
    2. Cache data is corrupted
    3. Cache update fails
    4. Cache validation fails

    Provides instructions for cache refresh and
    manual cache management when needed.
    """

    def __init__(self, message: str | None = None) -> None:
        """Initialize cache error with refresh instructions.

        Args:
            message: Optional cache error details
                    Falls back to refresh instructions if None

        """
        super().__init__(
            message
            or "Failed to manage cache. Try running 'nyord-vpn update' to refresh the cache.",
        )

================
File: src/nyord_vpn/storage/state.py
================
import json
import time

from nyord_vpn.utils.utils import STATE_FILE, logger
import contextlib


def save_vpn_state(state: dict) -> None:
    """Save VPN connection state to persistent storage.

    Maintains a record of the VPN connection state including:
    1. Connection status and timing
    2. IP address information (original and VPN)
    3. Server details and location
    4. State metadata

    Args:
        state: Dictionary containing state information:
            - connected (bool): Current connection status
            - normal_ip (str): IP address when not connected to VPN
            - connected_ip (str): VPN-assigned IP
            - server (str): Connected server hostname
            - country (str): Server country
            - timestamp (float): State update time
            - current_ip (str, optional): Current IP after disconnection

    Note:
        The state file is used for connection recovery
        and status monitoring. Failed saves are logged
        but don't raise exceptions to prevent disrupting
        VPN operations.

    """
    try:
        # Load existing state to preserve important info
        existing = {}
        if STATE_FILE.exists():
            with contextlib.suppress(json.JSONDecodeError):
                existing = json.loads(STATE_FILE.read_text())

        # Handle IP updates
        current_ip = state.get("current_ip")

        # If we're disconnected and have a current_ip, that's definitely our normal_ip
        # This happens after a disconnect operation (bye command)
        if not state.get("connected") and current_ip:
            state["normal_ip"] = current_ip  # Decisively update normal_ip
            state["connected_ip"] = None  # Clear VPN IP
        # If we're connected and have a current_ip, it's our VPN IP
        elif state.get("connected") and current_ip:
            state["connected_ip"] = current_ip
            # Keep existing normal_ip while connected
            if not state.get("normal_ip") and existing.get("normal_ip"):
                state["normal_ip"] = existing.get("normal_ip")

        # Ensure timestamp is updated
        state["timestamp"] = time.time()

        # Write state atomically using temp file
        temp_state = STATE_FILE.with_suffix(".tmp")
        temp_state.write_text(json.dumps(state, indent=2))
        temp_state.replace(STATE_FILE)

    except Exception as e:
        logger.warning(f"Failed to save VPN state: {e}")


def load_vpn_state() -> dict:
    """Load VPN connection state from storage.

    Retrieves and validates the stored VPN state:
    1. Checks state file existence
    2. Validates state freshness (5 minute TTL)
    3. Provides default state if needed

    Returns:
        dict: State information containing:
            - connected (bool): Connection status
            - normal_ip (str|None): IP when not connected to VPN
            - connected_ip (str|None): VPN IP
            - server (str|None): Server hostname
            - country (str|None): Server country
            - timestamp (float): Update time

    Note:
        The state is considered stale after 5 minutes
        to prevent using outdated connection information.
        Failed loads return a safe default state.

    """
    try:
        if STATE_FILE.exists():
            state = json.loads(STATE_FILE.read_text())
            # State is valid for 5 minutes
            if time.time() - state.get("timestamp", 0) < 300:
                return state
            # Even if state is stale, preserve IPs
            return {
                "connected": False,
                "normal_ip": state.get("normal_ip"),
                "connected_ip": None,
                "server": None,
                "country": None,
                "timestamp": time.time(),
            }
    except Exception as e:
        logger.warning(f"Failed to load VPN state: {e}")

    return {
        "connected": False,
        "normal_ip": None,
        "connected_ip": None,
        "server": None,
        "country": None,
        "timestamp": time.time(),
    }

================
File: src/nyord_vpn/utils/__init__.py
================
"""Utility modules for nyord-vpn.

this_file: src/nyord_vpn/utils/__init__.py

This package contains utility modules for configuration management,
file handling, and other helper functions.
"""

================
File: src/nyord_vpn/utils/connection.py
================
"""Network connection utilities for VPN management.

this_file: src/nyord_vpn/utils/connection.py

This module provides utilities for VPN connection verification and monitoring.
It implements robust connection checking by combining multiple data sources.

Core Functionality:
1. Process monitoring for OpenVPN
2. Connection status verification
3. IP address change detection
4. Multi-source status validation

Integration Points:
- Used by VPNConnectionManager (network/vpn.py)
- Used by Client (core/client.py) for status
- Works with utils/utils.py for state
- Supports error handling in models.py

Connection Verification:
The module implements a sophisticated verification system:
1. Process state monitoring
2. IP address validation
3. API status integration
4. State consistency checks

Design Philosophy:
- Prefers multiple verification sources
- Implements graceful fallbacks
- Provides detailed status info
- Supports debugging and logging

The utilities ensure reliable connection status reporting
by combining multiple indicators and implementing fallback
logic when certain checks fail.
"""

import psutil


def is_openvpn_running() -> bool:
    """Check if any OpenVPN process is currently running.

    Uses psutil to scan all running processes and identify
    any OpenVPN instances. This is a key component of
    connection verification, as a running OpenVPN process
    is necessary (but not sufficient) for an active VPN.

    Returns:
        bool: True if an OpenVPN process is found,
              False if no OpenVPN process is running

    Note:
        This function only checks for process existence,
        not whether the process is functioning correctly
        or if the VPN connection is actually established.

    """
    for proc in psutil.process_iter(["name"]):
        if proc.info.get("name") == "openvpn":
            return True
    return False


def compute_connection_status(
    current_ip: str,
    initial_ip: str | None,
    connected_ip: str | None,
    openvpn_running: bool,
    nord_status: bool | None = None,
) -> bool:
    """Determine VPN connection status through multiple checks.

    This function implements a comprehensive connection verification
    algorithm that combines multiple data points:

    1. Process Check:
       - Verifies OpenVPN process is running

    2. IP Address Validation:
       - Compares current IP against initial (pre-VPN) IP
       - Verifies current IP matches expected VPN IP

    3. NordVPN API Status (if available):
       - Incorporates server-side connection status

    The algorithm handles various edge cases:
    - Initial connection establishment
    - Connection drops and recoveries
    - API unavailability
    - Process state mismatches

    Args:
        current_ip: Currently detected IP address
        initial_ip: IP address before VPN connection (may be None)
        connected_ip: Expected VPN IP address (may be None)
        openvpn_running: Whether OpenVPN process is active
        nord_status: Optional NordVPN API connection status

    Returns:
        bool: True if VPN connection is verified active,
              False if any verification step fails

    Note:
        The function implements fallback logic when the API
        status is unavailable, relying more heavily on
        local indicators in such cases.

    """
    if nord_status is not None:
        is_connected = (
            openvpn_running
            and (current_ip == connected_ip or nord_status)
            and (initial_ip is None or current_ip != initial_ip)
        )
    else:
        is_connected = (
            openvpn_running
            and (current_ip == connected_ip)
            and (initial_ip is None or current_ip != initial_ip)
        )
    if not is_connected and openvpn_running and current_ip == connected_ip:
        is_connected = True
    return is_connected

================
File: src/nyord_vpn/utils/templates.py
================
"""OpenVPN configuration templates and utilities.

this_file: src/nyord_vpn/utils/templates.py

This module handles OpenVPN configuration file management:
1. Config directory setup and maintenance
2. Config file download and extraction
3. Path resolution for config files
4. Secure file handling and permissions
"""

import os
import random
import subprocess
import time
import zipfile
import hashlib
from datetime import datetime, timedelta
from pathlib import Path

import requests
from loguru import logger
from nyord_vpn.exceptions import VPNConfigError
import contextlib

# Constants
CACHE_DIR = Path.home() / ".cache" / "nyord-vpn"
CONFIG_DIR = CACHE_DIR / "configs"
CONFIG_ZIP = CACHE_DIR / "ovpn.zip"
OVPN_CONFIG_URL = "https://downloads.nordcdn.com/configs/archives/servers/ovpn.zip"
ZIP_MAX_AGE_DAYS = 7  # Maximum age of ZIP file before redownload
MAX_CACHED_CONFIGS = 5  # Maximum number of cached config files
MAX_RETRIES = 3  # Maximum number of download retries
INITIAL_RETRY_DELAY = 1  # Initial retry delay in seconds
MAX_RETRY_DELAY = 30  # Maximum retry delay in seconds

# Browser-like headers to avoid 403
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
    "Accept": "application/json",
    "Accept-Language": "en-US,en;q=0.9",
    "Referer": "https://nordvpn.com/",
    "Origin": "https://nordvpn.com",
}


def log_debug(msg: str, *args: object, **kwargs: object) -> None:
    """Log debug message only if debug logging is enabled."""
    if logger.level("DEBUG").no <= logger.level("INFO").no:
        logger.debug(msg.format(*args, **kwargs))


def calculate_sha256(data: bytes) -> str:
    """Calculate SHA256 hash of data."""
    return hashlib.sha256(data).hexdigest()


def verify_file_integrity(path: Path, expected_hash: str) -> bool:
    """Verify file integrity using SHA256 hash."""
    try:
        actual_hash = calculate_sha256(path.read_bytes())
        return actual_hash == expected_hash
    except Exception as e:
        log_debug("Failed to verify file integrity: {}", e)
        return False


def get_zip_age() -> timedelta | None:
    """Get the age of the cached ZIP file."""
    try:
        if not CONFIG_ZIP.exists():
            return None
        mtime = datetime.fromtimestamp(CONFIG_ZIP.stat().st_mtime)
        return datetime.now() - mtime
    except Exception as e:
        log_debug("Failed to get ZIP file age: {}", e)
        return None


def is_zip_expired() -> bool:
    """Check if the cached ZIP file is older than ZIP_MAX_AGE_DAYS."""
    age = get_zip_age()
    if age is None:
        return True
    return age > timedelta(days=ZIP_MAX_AGE_DAYS)


def secure_directory(path: Path, mode: int = 0o700) -> None:
    """Create directory with secure permissions."""
    try:
        path.mkdir(mode=mode, parents=True, exist_ok=True)
        stat_info = path.stat()
        if stat_info.st_mode & 0o777 != mode:
            path.chmod(mode)
            log_debug("Fixed directory permissions for {}", path)
        user_id = os.getuid()
        group_id = os.getgid()
        try:
            os.chown(path, user_id, group_id)
        except PermissionError:
            try:
                subprocess.run(
                    ["sudo", "chown", f"{user_id}:{group_id}", str(path)],
                    check=True,
                    capture_output=True,
                )
            except subprocess.CalledProcessError as e:
                raise VPNConfigError(
                    f"Failed to set ownership with sudo: {e.stderr.decode()}"
                ) from e
        log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
    except Exception as e:
        raise VPNConfigError(f"Failed to secure directory {path}: {e}")


def cleanup_old_configs() -> None:
    """Clean up old config files if more than MAX_CACHED_CONFIGS exist."""
    try:
        existing_configs = list(CONFIG_DIR.glob("*.tcp.ovpn"))
        if len(existing_configs) > MAX_CACHED_CONFIGS:
            log_debug("Cleaning up old config files...")
            existing_configs.sort(key=lambda p: p.stat().st_mtime)
            for config in existing_configs[:-MAX_CACHED_CONFIGS]:
                try:
                    config.unlink()
                    log_debug("Removed old config: {}", config)
                except Exception as e:
                    log_debug("Failed to remove old config {}: {}", config, e)
    except Exception as e:
        log_debug("Failed to cleanup old configs: {}", e)


def download_with_retry(
    url: str, headers: dict, timeout: int = 30
) -> tuple[bytes, str]:
    """Download a file with exponential backoff retry."""
    last_error = None
    delay = INITIAL_RETRY_DELAY

    for attempt in range(MAX_RETRIES):
        try:
            if attempt > 0:
                jitter = random.uniform(0, 0.1) * delay
                sleep_time = delay + jitter
                log_debug(
                    "Retry attempt {} after {:.1f}s delay...", attempt + 1, sleep_time
                )
                time.sleep(sleep_time)

            response = requests.get(url, headers=headers, timeout=timeout)
            response.raise_for_status()
            content = response.content
            content_hash = calculate_sha256(content)
            return content, content_hash

        except requests.RequestException as e:
            last_error = e
            if isinstance(e, requests.HTTPError) and (
                400 <= e.response.status_code < 500 and e.response.status_code != 429
            ):
                raise VPNConfigError(
                    f"Failed to download (HTTP {e.response.status_code}): {e}"
                ) from e
            delay = min(delay * 2, MAX_RETRY_DELAY)
            log_debug(
                "Download failed (attempt {}/{}): {}", attempt + 1, MAX_RETRIES, str(e)
            )

    if isinstance(last_error, requests.HTTPError):
        raise VPNConfigError(
            f"Failed to download after {MAX_RETRIES} retries "
            f"(HTTP {last_error.response.status_code}): {last_error}"
        ) from last_error
    raise VPNConfigError(
        f"Failed to download after {MAX_RETRIES} retries: {last_error}"
    ) from last_error


def extract_config_from_zip(server: str) -> Path:
    """Extract a single OpenVPN configuration file from the ZIP."""
    try:
        secure_directory(CONFIG_DIR)
        cleanup_old_configs()

        zip_path = f"ovpn_tcp/{server}.tcp.ovpn"
        config_path = CONFIG_DIR / f"{server}.tcp.ovpn"

        log_debug("Extracting config file {} from {}", zip_path, CONFIG_ZIP)
        try:
            with zipfile.ZipFile(CONFIG_ZIP) as zip_ref:
                try:
                    zip_ref.getinfo(zip_path)
                    file_hash = calculate_sha256(zip_ref.read(zip_path))
                    zip_ref.extract(zip_path, CONFIG_DIR)
                    extracted_path = CONFIG_DIR / zip_path
                    if not verify_file_integrity(extracted_path, file_hash):
                        raise VPNConfigError("Extracted file is corrupted")
                except KeyError:
                    tcp_configs = [
                        name
                        for name in zip_ref.namelist()
                        if name.startswith("ovpn_tcp/") and name.endswith(".tcp.ovpn")
                    ]
                    log_debug("Available TCP configs in ZIP: {}", len(tcp_configs))
                    if tcp_configs:
                        log_debug("Sample configs: {}", tcp_configs[:5])
                    raise VPNConfigError(
                        f"Config file {zip_path} not found in ZIP. "
                        f"ZIP contains {len(tcp_configs)} TCP configs."
                    )
        except zipfile.BadZipFile as e:
            with contextlib.suppress(Exception):
                CONFIG_ZIP.unlink()
            raise VPNConfigError(f"Corrupted ZIP file: {e}") from e

        extracted_path = CONFIG_DIR / zip_path
        try:
            extracted_path.rename(config_path)
            if not verify_file_integrity(config_path, file_hash):
                raise VPNConfigError("Config file corrupted during move")
        except Exception as e:
            raise VPNConfigError(f"Failed to move config file: {e}") from e

        with contextlib.suppress(FileNotFoundError, OSError):
            (CONFIG_DIR / "ovpn_tcp").rmdir()

        try:
            config_path.chmod(0o600)
            log_debug("Set permissions on {}", config_path)
        except Exception as e:
            raise VPNConfigError(f"Failed to set config file permissions: {e}") from e

        return config_path

    except VPNConfigError:
        raise
    except Exception as e:
        raise VPNConfigError(f"Failed to extract configuration: {e}")


def download_config_zip() -> None:
    """Download and cache the OpenVPN configuration ZIP file."""
    try:
        secure_directory(CACHE_DIR)
        temp_zip = CACHE_DIR / f".ovpn.{os.getpid()}.zip.tmp"
        try:
            log_debug("Downloading OpenVPN configurations...")
            content, content_hash = download_with_retry(OVPN_CONFIG_URL, HEADERS)

            try:
                temp_zip.write_bytes(content)
                temp_zip.chmod(0o600)
                if not verify_file_integrity(temp_zip, content_hash):
                    raise VPNConfigError("Downloaded file corrupted during write")
            except Exception as e:
                raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e

            try:
                with zipfile.ZipFile(temp_zip) as zip_ref:
                    tcp_configs = [
                        name
                        for name in zip_ref.namelist()
                        if name.startswith("ovpn_tcp/") and name.endswith(".tcp.ovpn")
                    ]
                    if not tcp_configs:
                        raise VPNConfigError(
                            "Downloaded ZIP contains no TCP configurations"
                        )
                    log_debug("ZIP contains {} TCP configs", len(tcp_configs))
            except zipfile.BadZipFile as e:
                raise VPNConfigError("Downloaded file is not a valid ZIP") from e

            try:
                temp_zip.replace(CONFIG_ZIP)
                if not verify_file_integrity(CONFIG_ZIP, content_hash):
                    raise VPNConfigError("ZIP file corrupted during move")
                log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
            except Exception as e:
                raise VPNConfigError(f"Failed to save ZIP file: {e}") from e

        except Exception:
            try:
                if temp_zip.exists():
                    temp_zip.unlink()
            except Exception:
                pass
            raise

    except VPNConfigError:
        raise
    except Exception as e:
        raise VPNConfigError(f"Failed to download/cache configurations: {e}")


def get_config_path(server: str) -> Path:
    """Get path to OpenVPN config file for server."""
    server = server.replace(".tcp", "")
    config_path = CONFIG_DIR / f"{server}.tcp.ovpn"
    log_debug("Looking for config file at: {}", config_path)

    if is_zip_expired():
        age = get_zip_age()
        if age:
            log_debug("ZIP file is {} days old, downloading fresh copy...", age.days)
        else:
            log_debug("ZIP file is missing, downloading...")
        if CONFIG_ZIP.exists():
            try:
                CONFIG_ZIP.unlink()
            except Exception as e:
                log_debug("Failed to remove old ZIP file: {}", e)
        download_config_zip()

    if not config_path.exists():
        log_debug("Config file not found at: {}", config_path)
        if not CONFIG_ZIP.exists():
            download_config_zip()
        config_path = extract_config_from_zip(server)
        log_debug("Successfully extracted config to: {}", config_path)

    try:
        stat_info = config_path.stat()
        if stat_info.st_mode & 0o777 != 0o600:
            config_path.chmod(0o600)
            log_debug("Fixed config file permissions for {}", config_path)
    except Exception as e:
        raise VPNConfigError(f"Failed to verify config file permissions: {e}")

    return config_path

================
File: src/nyord_vpn/utils/utils.py
================
"""Utility functions and constants for the NordVPN client.

this_file: src/nyord_vpn/utils/utils.py

This module provides core utilities and configuration management.
It handles file paths, state persistence, and common functionality.

Directory Structure:
1. Cache Directory (~/.cache/nyord-vpn/):
   - Server information cache
   - Connection state
   - OpenVPN configuration
   - Authentication data

2. Config Directory (~/.cache/nyord-vpn/):
   - User configuration
   - Custom settings
   - Persistent data

3. Package Data:
   - Country mappings
   - Default configurations
   - Templates

Integration Points:
- Used throughout codebase for paths
- Used by Client (core/client.py) for state
- Used by VPNConnectionManager for config
- Used by API client for caching

Constants and Settings:
1. File Paths:
   - Cache locations
   - Config locations
   - State management
   - Log files

2. API Configuration:
   - Request headers
   - Cache settings
   - Country mappings

3. OpenVPN Settings:
   - Configuration paths
   - Authentication paths
   - Log paths

State Management:
- Implements atomic file operations
- Handles concurrent access
- Provides fallback data
- Manages cache lifecycle

The module ensures proper directory structure exists
and provides fallback data when needed, serving as
the foundation for the client's file operations and
state management.
"""

import json
import os
import sys
import subprocess
import time
from pathlib import Path

from platformdirs import user_cache_dir, user_config_dir
from rich.console import Console
from loguru import logger
import contextlib

console = Console()

# Application directories
APP_NAME = "nyord-vpn"
APP_AUTHOR = "twardoch"
CACHE_DIR = Path(user_cache_dir(APP_NAME, APP_AUTHOR))
CONFIG_DIR = Path(user_config_dir(APP_NAME, APP_AUTHOR))

# Ensure directories exist with proper permissions
CACHE_DIR.mkdir(mode=0o700, parents=True, exist_ok=True)
CONFIG_DIR.mkdir(mode=0o700, parents=True, exist_ok=True)

# File paths
PACKAGE_DIR = Path(__file__).parent
DATA_DIR = PACKAGE_DIR / "data"
CACHE_FILE = DATA_DIR / "countries.json"
COUNTRIES_CACHE = CACHE_DIR / "countries.json"
COUNTRY_IDS_FILE = DATA_DIR / "country_ids.json"
STATE_FILE = CACHE_DIR / "state.json"
OPENVPN_CONFIG = CACHE_DIR / "openvpn.ovpn"
OPENVPN_AUTH = CACHE_DIR / "openvpn.auth"
OPENVPN_LOG = CACHE_DIR / "openvpn.log"

# Cache expiry in seconds (24 hours)
CACHE_EXPIRY = 24 * 60 * 60  # 24 hours in seconds


def check_root() -> bool:
    """Check if running with root privileges.

    Returns:
        bool: True if already running as root, False if needs elevation

    """
    return os.geteuid() == 0


def ensure_root() -> None:
    """Request root privileges using sudo.

    This function checks if the current process has root privileges.
    If not, it attempts to re-run the script with sudo.

    The function will:
    1. Check current user's effective UID
    2. If not root, re-run with sudo
    3. Display appropriate messages
    4. Exit with status code on failure

    Note:
        This is required for OpenVPN operations which need
        root access to configure network interfaces.

    """
    if not check_root():
        try:
            # Get the original command without sudo
            cmd = sys.argv[:]
            if cmd[0].startswith("sudo"):
                cmd = cmd[1:]

            # Re-run the script with sudo, preserving environment variables
            env = os.environ.copy()

            # If in virtualenv, use nyord-vpn from virtualenv bin
            if os.environ.get("VIRTUAL_ENV"):
                nyord_vpn_path = os.path.join(
                    os.environ["VIRTUAL_ENV"], "bin", "nyord-vpn"
                )
                if os.path.exists(nyord_vpn_path):
                    args = ["sudo", "-E", nyord_vpn_path, *cmd[1:]]
                else:
                    # Fallback to system nyord-vpn
                    args = ["sudo", "-E", "nyord-vpn", *cmd[1:]]
            else:
                # Not in virtualenv, use system nyord-vpn
                args = ["sudo", "-E", "nyord-vpn", *cmd[1:]]

            console.print(
                "[yellow]This command requires admin privileges.[/yellow]",
            )
            console.print(
                "[cyan]Enter your computer admin (sudo) password when asked.[/cyan]"
            )

            if logger.level("DEBUG").no <= logger.level("INFO").no:
                logger.debug(f"Running command: {' '.join(args)}")

            subprocess.run(args, env=env, check=True)
            sys.exit(0)
        except subprocess.CalledProcessError as e:
            console.print("[red]Error: Admin privileges required.[/red]")
            console.print("[yellow]Run the command again with sudo:[/yellow]")
            console.print(f"[blue]sudo -E {' '.join(sys.argv)}[/blue]")
            if logger.level("DEBUG").no <= logger.level("INFO").no:
                logger.debug(f"Command failed with error: {e}")
            sys.exit(1)


def is_process_running(process_id: int) -> bool | None:
    """Check if a process is running by its PID.

    Args:
        process_id: Process ID to check

    Returns:
        bool: True if running, False if not, None if check fails

    """
    try:
        os.kill(process_id, 0)
        return True
    except OSError:
        return False
    except Exception:
        return None


def ensure_data_dir() -> None:
    """Ensure data directory exists and is writable."""
    DATA_DIR.mkdir(parents=True, exist_ok=True)


# Initialize data directory
ensure_data_dir()


# Load country ID mappings with fallback data
try:
    with open(COUNTRY_IDS_FILE) as f:
        NORDVPN_COUNTRY_IDS: dict[str, str] = json.load(f)
except (FileNotFoundError, json.JSONDecodeError):
    # Fallback to core countries if file is missing/invalid
    NORDVPN_COUNTRY_IDS = {
        "US": "228",  # United States
        "GB": "227",  # United Kingdom
        "DE": "81",  # Germany
    }

# API request headers to mimic browser behavior
API_HEADERS = {
    "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36",
    "Accept": "application/json",
    "Accept-Language": "en-US,en;q=0.9",
    "Referer": "https://nordvpn.com/",
    "Origin": "https://nordvpn.com",
}


def save_vpn_state(state: dict) -> None:
    """Save VPN connection state to persistent storage.

    Args:
        state: Dictionary containing state information:
            - connected (bool): Current connection status
            - normal_ip (str): IP address when not connected to VPN
            - connected_ip (str): VPN-assigned IP
            - server (str): Connected server hostname
            - country (str): Server country
            - timestamp (float): State update time
            - current_ip (str, optional): Current IP after disconnection

    """
    try:
        # Load existing state to preserve important info
        existing = {}
        if STATE_FILE.exists():
            with contextlib.suppress(json.JSONDecodeError):
                existing = json.loads(STATE_FILE.read_text())

        # If we're disconnected and have a current_ip, that's our normal_ip
        if not state.get("connected") and state.get("current_ip"):
            state["normal_ip"] = state["current_ip"]
            state["connected_ip"] = None
        # If we're connected and have a current_ip, that's our VPN IP
        elif state.get("connected") and state.get("current_ip"):
            state["connected_ip"] = state["current_ip"]
            # Keep existing normal_ip
            if not state.get("normal_ip") and existing.get("normal_ip"):
                state["normal_ip"] = existing.get("normal_ip")

        # Ensure timestamp is updated
        state["timestamp"] = time.time()

        # Write state atomically using temp file
        temp_state = STATE_FILE.with_suffix(".tmp")
        temp_state.write_text(json.dumps(state, indent=2))
        temp_state.chmod(0o600)
        temp_state.replace(STATE_FILE)

        if logger.level("DEBUG").no <= logger.level("INFO").no:
            logger.debug(f"Saved state to {STATE_FILE}: {json.dumps(state, indent=2)}")

    except Exception as e:
        logger.warning(f"Failed to save VPN state: {e}")


def load_vpn_state() -> dict:
    """Load VPN connection state from storage."""
    try:
        if STATE_FILE.exists():
            try:
                state = json.loads(STATE_FILE.read_text())
                if logger.level("DEBUG").no <= logger.level("INFO").no:
                    logger.debug(
                        f"Loaded state from {STATE_FILE}: {json.dumps(state, indent=2)}"
                    )
                # State is valid for 5 minutes
                if time.time() - state.get("timestamp", 0) < 300:
                    return state
                # Even if state is stale, preserve IPs
                return {
                    "connected": False,
                    "normal_ip": state.get("normal_ip"),
                    "connected_ip": None,
                    "server": None,
                    "country": None,
                    "timestamp": time.time(),
                }
            except json.JSONDecodeError as e:
                logger.warning(f"Failed to parse state file: {e}")
    except Exception as e:
        logger.warning(f"Failed to load VPN state: {e}")

    return {
        "connected": False,
        "normal_ip": None,
        "connected_ip": None,
        "server": None,
        "country": None,
        "timestamp": time.time(),
    }

================
File: src/nyord_vpn/__init__.py
================
"""Modern Python client for NordVPN with automatic API fallback.

this_file: src/nyord_vpn/__init__.py

This package provides a comprehensive VPN client for NordVPN,
offering both a command-line interface and a Python library.

Package Structure:
1. Core Components (core/):
   - client.py: Main client implementation
   - api.py: NordVPN API client
   - base.py: Base classes and interfaces

2. Network Components (network/):
   - vpn.py: OpenVPN connection management
   - server.py: Server selection and management
   - country.py: Country information handling

3. Storage Components (storage/):
   - models.py: Data models and exceptions
   - state.py: State management

4. Utilities (utils/):
   - connection.py: Connection verification
   - templates.py: OpenVPN templates
   - utils.py: Common utilities

Command-Line Interface:
    nyord-vpn go <country>     Connect to VPN in specified country
    nyord-vpn bye             Disconnect from VPN
    nyord-vpn info            Show connection status
    nyord-vpn where           List available countries
    nyord-vpn update          Update country/server cache

Python Library Usage:
    from nyord_vpn import Client

    client = Client(username="user", password="pass")
    client.go("us")  # Connect to US server
    client.status()  # Check connection
    client.disconnect()  # Disconnect

Features:
1. Modern Security
   - AES-256-GCM encryption
   - ChaCha20-Poly1305 support
   - Strong certificate validation
   - DNS leak prevention

2. Smart Server Selection
   - Load-based balancing
   - Geographic optimization
   - Connection quality metrics
   - Automatic failover

3. Robust Error Handling
   - Comprehensive exception hierarchy
   - Detailed error messages
   - Recovery suggestions
   - Automatic retries

4. Performance Optimization
   - Connection caching
   - State persistence
   - Smart reconnection
   - API result caching

Requirements:
- OpenVPN (install via package manager)
- Python 3.9+
- Root/sudo access for VPN connections

Environment Variables:
    NORD_USER: NordVPN username
    NORD_PASSWORD: NordVPN password
"""

from nyord_vpn.core.client import Client
from nyord_vpn.storage.models import (
    ConnectionError,
    CredentialsError,
    ServerError,
    VPNError,
)

__version__ = "1.0.7"
__all__ = [
    "Client",
    "ConnectionError",
    "CredentialsError",
    "ServerError",
    "VPNError",
]

================
File: src/nyord_vpn/__main__.py
================
"""Command line interface for nyord-vpn."""

import os
import sys

import fire
from rich.console import Console
from dotenv import load_dotenv

from nyord_vpn.core.client import Client, VPNError
from nyord_vpn.scripts.update_countries import fetch_countries
from nyord_vpn.utils.utils import check_root

console = Console()

# Load environment variables
load_dotenv()


class CLI:
    """NordVPN CLI interface."""

    def __init__(self, verbose: bool = False) -> None:
        """Initialize CLI."""
        try:
            # Get credentials from environment
            username = os.getenv("NORD_USER") or os.getenv("NORDVPN_LOGIN")
            password = os.getenv("NORD_PASSWORD") or os.getenv("NORDVPN_PASSWORD")

            if not username or not password:
                console.print("[red]Error: Missing credentials[/red]")
                console.print("Please set the following environment variables:")
                console.print("  NORD_USER or NORDVPN_LOGIN")
                console.print("  NORD_PASSWORD or NORDVPN_PASSWORD")
                sys.exit(1)

            self.client = Client(username, password, verbose=verbose)
        except VPNError as e:
            console.print(f"[red]Error:[/red] {e}")
            sys.exit(1)

    def go(self, country_code: str) -> None:
        """Connect to VPN in specified country."""
        check_root()
        try:
            self.client.go(country_code)
        except VPNError as e:
            console.print(f"[red]Error:[/red] {e}")
            sys.exit(1)

    def bye(self) -> None:
        """Disconnect from VPN."""
        check_root()
        try:
            self.client.bye()
        except VPNError as e:
            console.print(f"[red]Error:[/red] {e}")
            sys.exit(1)

    def info(self) -> None:
        """Display current VPN status."""
        try:
            self.client.info()
        except VPNError as e:
            console.print(f"[red]Error:[/red] {e}")
            sys.exit(1)

    def update(self) -> None:
        """Update country information."""
        try:
            fetch_countries()
            console.print("[green]Successfully updated country information[/green]")
        except Exception as e:
            console.print(f"[red]Error updating country information:[/red] {e}")
            sys.exit(1)


def main() -> None:
    """Main entry point."""
    try:
        fire.Fire(CLI)
    except Exception as e:
        console.print(f"[red]Error:[/red] {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()

================
File: src/nyord_vpn/exceptions.py
================
"""Custom exceptions for the NordVPN client.

this_file: src/nyord_vpn/exceptions.py

This module defines custom exceptions used throughout the NordVPN client.
Each exception type corresponds to a specific category of errors that may
occur during VPN operations.

The exception hierarchy is:
- NyordVPNError (base)
  - VPNError (VPN-specific base)
    - VPNConfigError
    - VPNAuthenticationError
    - VPNProcessError
    - VPNConnectionError
    - VPNDisconnectionError
  - CredentialsError
  - ConnectionError
  - DisconnectionError
  - ServerNotFoundError
  - VPNServerError
  - VPNTimeoutError
"""


class NyordVPNError(Exception):
    """Base exception for all NordVPN client errors.

    This is the root exception class for all errors that may occur in the NordVPN client.
    It provides a consistent interface for error handling and logging.

    Args:
        message: A descriptive error message
        details: Additional error details or context
        cause: The underlying exception that caused this error

    """

    def __init__(
        self,
        message: str = "An error occurred in the NordVPN client",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        self.message = message
        self.details = details
        self.cause = cause
        super().__init__(self._format_message())

    def _format_message(self) -> str:
        """Format the complete error message including details and cause."""
        msg = self.message
        if self.details:
            msg += f"\nDetails: {self.details}"
        if self.cause:
            msg += f"\nCause: {self.cause!s}"
        return msg


class VPNError(NyordVPNError):
    """Base exception for VPN-related errors.

    This exception serves as a base for all VPN-specific errors that may occur
    during VPN operations like configuration, authentication, and process management.
    """

    def __init__(
        self,
        message: str = "A VPN-related error occurred",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class CredentialsError(NyordVPNError):
    """Raised when there are issues with VPN credentials.

    This exception is raised when there are problems with user credentials,
    such as missing, invalid, or expired credentials.
    """

    def __init__(
        self,
        message: str = "Invalid or missing VPN credentials",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class ConnectionError(NyordVPNError):
    """Raised when connection to VPN server fails.

    This exception indicates a failure to establish a connection to the VPN server,
    which could be due to network issues, server problems, or client configuration.
    """

    def __init__(
        self,
        message: str = "Failed to connect to VPN server",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class DisconnectionError(NyordVPNError):
    """Raised when disconnection from VPN fails.

    This exception is raised when there are problems disconnecting from the VPN,
    such as stuck processes or network issues.
    """

    def __init__(
        self,
        message: str = "Failed to disconnect from VPN",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class ServerNotFoundError(NyordVPNError):
    """Raised when a VPN server cannot be found.

    This exception indicates that the requested VPN server is not available
    or cannot be found in the server list.
    """

    def __init__(
        self,
        message: str = "VPN server not found",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class VPNConfigError(VPNError):
    """Raised when there are issues with OpenVPN configuration.

    This exception is raised when there are problems with the OpenVPN configuration,
    such as invalid settings, missing files, or permission issues.
    """

    def __init__(
        self,
        message: str = "Invalid or missing OpenVPN configuration",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class VPNServerError(NyordVPNError):
    """Raised when there are issues with VPN server selection or availability.

    This exception indicates problems with VPN server selection or availability,
    such as server overload, maintenance, or network issues.
    """

    def __init__(
        self,
        message: str = "VPN server error or unavailable",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class VPNAuthenticationError(VPNError):
    """Raised when authentication fails.

    This exception is raised when authentication with the VPN server fails,
    which could be due to invalid credentials or server-side issues.
    """

    def __init__(
        self,
        message: str = "VPN authentication failed",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class VPNTimeoutError(NyordVPNError):
    """Raised when VPN operations timeout.

    This exception indicates that a VPN operation took too long to complete,
    such as connection establishment or server response.
    """

    def __init__(
        self,
        message: str = "VPN operation timed out",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class VPNProcessError(VPNError):
    """Raised when there are issues with the OpenVPN process.

    This exception is raised when there are problems managing the OpenVPN process,
    such as startup failures, crashes, or unexpected termination.
    """

    def __init__(
        self,
        message: str = "OpenVPN process error",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class VPNConnectionError(VPNError):
    """Raised when connection establishment fails.

    This exception indicates a failure in establishing the VPN connection,
    which could be due to network issues, configuration problems, or server errors.
    """

    def __init__(
        self,
        message: str = "Failed to establish VPN connection",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)


class VPNDisconnectionError(VPNError):
    """Raised when disconnection fails.

    This exception is raised when there are problems disconnecting from the VPN,
    such as process cleanup issues or network problems.
    """

    def __init__(
        self,
        message: str = "Failed to disconnect from VPN",
        details: str | None = None,
        cause: Exception | None = None,
    ) -> None:
        super().__init__(message, details, cause)

================
File: tests/integration/__init__.py
================
"""Integration tests for nyord_vpn."""

================
File: tests/integration/test_config_loading.py
================
"""Integration tests for configuration loading."""

import pytest
from pathlib import Path
import json

from nyord_vpn.core.client import VPNClient
from nyord_vpn.core.config import VPNConfig
from tests.conftest import TEST_PASSWORD, TEST_USERNAME


@pytest.mark.integration
async def test_file_loading(temp_dir) -> None:
    """Test configuration loading from file."""
    # Create config file with all options
    config_file = temp_dir / "config.json"
    config_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD.get_secret_value(),
        "default_country": "Sweden",
        "retry_attempts": 5,
        "use_legacy_fallback": False,
        "config_dir": "custom/config/dir",
        "api_timeout": 60,
    }
    config_file.write_text(json.dumps(config_data))

    # Test loading with VPNClient
    client = VPNClient.from_file(config_file)
    assert client.config.username == TEST_USERNAME
    assert client.config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    assert client.config.default_country == "Sweden"
    assert client.config.retry_attempts == 5
    assert client.config.use_legacy_fallback is False
    assert client.config.config_dir == Path("custom/config/dir").resolve()
    assert client.config.api_timeout == 60

    # Test loading with VPNConfig
    config = VPNConfig.from_file(config_file)
    assert config.username == TEST_USERNAME
    assert config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    assert config.default_country == "Sweden"
    assert config.retry_attempts == 5
    assert config.use_legacy_fallback is False
    assert config.config_dir == Path("custom/config/dir").resolve()
    assert config.api_timeout == 60


@pytest.mark.integration
async def test_environment_loading_unprefixed(monkeypatch) -> None:
    """Test configuration loading from unprefixed environment variables."""
    # Set environment variables
    monkeypatch.setenv("NORD_USER", TEST_USERNAME)
    monkeypatch.setenv("NORD_PASSWORD", TEST_PASSWORD.get_secret_value())
    monkeypatch.setenv("NORDVPN_DEFAULT_COUNTRY", "Norway")
    monkeypatch.setenv("NORDVPN_RETRY_ATTEMPTS", "4")

    # Test loading with VPNClient
    client = VPNClient.from_env()
    assert client.config.username == TEST_USERNAME
    assert client.config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    assert client.config.default_country == "Norway"
    assert client.config.retry_attempts == 4


@pytest.mark.integration
async def test_environment_loading_prefixed(monkeypatch) -> None:
    """Test configuration loading from prefixed environment variables."""
    # Set environment variables
    monkeypatch.setenv("NORDVPN_USERNAME", TEST_USERNAME)
    monkeypatch.setenv("NORDVPN_PASSWORD", TEST_PASSWORD.get_secret_value())
    monkeypatch.setenv("NORDVPN_DEFAULT_COUNTRY", "Sweden")
    monkeypatch.setenv("NORDVPN_RETRY_ATTEMPTS", "5")

    # Test loading with VPNClient
    client = VPNClient.from_env()
    assert client.config.username == TEST_USERNAME
    assert client.config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    assert client.config.default_country == "Sweden"
    assert client.config.retry_attempts == 5


@pytest.mark.integration
async def test_environment_loading_precedence(monkeypatch) -> None:
    """Test precedence between prefixed and unprefixed environment variables."""
    # Set both prefixed and unprefixed variables
    monkeypatch.setenv("NORD_USER", "unprefixed_user")
    monkeypatch.setenv("NORD_PASSWORD", "unprefixed_pass")
    monkeypatch.setenv("NORDVPN_USERNAME", "prefixed_user")
    monkeypatch.setenv("NORDVPN_PASSWORD", "prefixed_pass")

    # Unprefixed should take precedence
    client = VPNClient.from_env()
    assert client.config.username == "unprefixed_user"
    assert client.config.password.get_secret_value() == "unprefixed_pass"


@pytest.mark.integration
async def test_default_values() -> None:
    """Test configuration default values."""
    # Test with minimal configuration
    config = VPNConfig(username="test", password="test")
    assert config.username == "test"
    assert config.password.get_secret_value() == "test"
    assert config.default_country == "United States"
    assert config.retry_attempts == 3
    assert config.use_legacy_fallback is True
    assert config.config_dir == Path.home() / ".cache" / "nyord-vpn"
    assert config.api_timeout == 30

    # Test with VPNClient
    client = VPNClient(username="test", password="test")
    assert client.config.username == "test"
    assert client.config.password.get_secret_value() == "test"
    assert client.config.default_country == "United States"
    assert client.config.retry_attempts == 3
    assert client.config.use_legacy_fallback is True
    assert client.config.config_dir == Path.home() / ".cache" / "nyord-vpn"
    assert client.config.api_timeout == 30


@pytest.mark.integration
async def test_config_file_precedence(temp_dir, monkeypatch) -> None:
    """Test configuration loading precedence between file and environment."""
    # Create config file
    config_file = temp_dir / "config.json"
    config_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD.get_secret_value(),
        "default_country": "Sweden",
        "retry_attempts": 5,
    }
    config_file.write_text(json.dumps(config_data))

    # Set environment variables
    monkeypatch.setenv("NORD_USER", "env_user")
    monkeypatch.setenv("NORD_PASSWORD", "env_pass")
    monkeypatch.setenv("NORDVPN_DEFAULT_COUNTRY", "Norway")
    monkeypatch.setenv("NORDVPN_API_TIMEOUT", "45")

    # Test with VPNClient - explicit args > file > env > defaults
    client = VPNClient.from_file(
        config_file,
        username="arg_user",
        password=TEST_PASSWORD.get_secret_value(),
    )
    assert client.config.username == "arg_user"  # From arg
    assert (
        client.config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    )  # From arg
    assert client.config.default_country == "Sweden"  # From file
    assert client.config.retry_attempts == 5  # From file
    assert client.config.api_timeout == 45  # From env
    assert client.config.use_legacy_fallback is True  # Default

    # Test with VPNConfig - file > env > defaults
    config = VPNConfig.from_file(config_file)
    assert config.username == TEST_USERNAME  # From file
    assert (
        config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    )  # From file
    assert config.default_country == "Sweden"  # From file
    assert config.retry_attempts == 5  # From file
    assert config.api_timeout == 45  # From env
    assert config.use_legacy_fallback is True  # Default


@pytest.mark.integration
async def test_config_validation(temp_dir) -> None:
    """Test configuration validation."""
    # Test invalid retry attempts
    config_file = temp_dir / "invalid_retry.json"
    config_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD.get_secret_value(),
        "retry_attempts": 0,
    }
    config_file.write_text(json.dumps(config_data))
    with pytest.raises(ValueError, match="ensure this value is greater than 0"):
        VPNConfig.from_file(config_file)

    # Test invalid timeout
    config_file = temp_dir / "invalid_timeout.json"
    config_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD.get_secret_value(),
        "api_timeout": -1,
    }
    config_file.write_text(json.dumps(config_data))
    with pytest.raises(ValueError, match="ensure this value is greater than 0"):
        VPNConfig.from_file(config_file)

    # Test invalid config directory
    config_file = temp_dir / "invalid_dir.json"
    config_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD.get_secret_value(),
        "config_dir": "/nonexistent/dir",
    }
    config_file.write_text(json.dumps(config_data))
    with pytest.raises(ValueError, match="Failed to setup config directory"):
        VPNConfig.from_file(config_file)

    # Test missing required fields
    config_file = temp_dir / "missing_fields.json"
    config_data = {
        "default_country": "Sweden",
        "retry_attempts": 5,
    }
    config_file.write_text(json.dumps(config_data))
    with pytest.raises(ValueError, match="Field required"):
        VPNConfig.from_file(config_file)


def test_load_from_file(tmp_path: Path) -> None:
    """Test loading configuration from file."""
    # Create config file
    config_path = tmp_path / "config.json"
    config_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD.get_secret_value(),
        "api_timeout": 30,
        "retry_attempts": 5,
    }
    config_path.write_text(json.dumps(config_data))

    # Test client initialization from file
    client = VPNClient(config_file=config_path)
    assert client.config.username == TEST_USERNAME
    assert client.config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    assert client.config.api_timeout == 30
    assert client.config.retry_attempts == 5

    # Test direct config loading
    config = VPNConfig.from_file(config_path)
    assert config.username == TEST_USERNAME
    assert config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    assert config.api_timeout == 30
    assert config.retry_attempts == 5


def test_load_from_env(monkeypatch) -> None:
    """Test loading configuration from environment variables."""
    # Set environment variables
    monkeypatch.setenv("NORDVPN_USERNAME", TEST_USERNAME)
    monkeypatch.setenv("NORDVPN_PASSWORD", TEST_PASSWORD.get_secret_value())
    monkeypatch.setenv("NORDVPN_API_TIMEOUT", "30")
    monkeypatch.setenv("NORDVPN_RETRY_ATTEMPTS", "5")

    # Test client initialization from env
    client = VPNClient()  # Will load from env by default
    assert client.config.username == TEST_USERNAME
    assert client.config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    assert client.config.api_timeout == 30
    assert client.config.retry_attempts == 5

    # Test direct config loading
    config = VPNConfig.from_env()
    assert config.username == TEST_USERNAME
    assert config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()
    assert config.api_timeout == 30
    assert config.retry_attempts == 5


def test_direct_initialization() -> None:
    """Test direct initialization with parameters."""
    # Test config initialization
    config = VPNConfig(
        username=TEST_USERNAME,
        password=TEST_PASSWORD.get_secret_value(),
    )
    assert config.username == TEST_USERNAME
    assert config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()

    # Test client initialization
    client = VPNClient(
        username=TEST_USERNAME,
        password=TEST_PASSWORD.get_secret_value(),
    )
    assert client.config.username == TEST_USERNAME
    assert client.config.password.get_secret_value() == TEST_PASSWORD.get_secret_value()


def test_invalid_config_file(tmp_path: Path) -> None:
    """Test handling of invalid configuration files."""
    # Test non-existent file
    with pytest.raises(FileNotFoundError):
        VPNConfig.from_file(tmp_path / "nonexistent.json")

    # Test invalid JSON
    invalid_path = tmp_path / "invalid.json"
    invalid_path.write_text("invalid json content")
    with pytest.raises(json.JSONDecodeError):
        VPNConfig.from_file(invalid_path)

    # Test missing required fields
    empty_path = tmp_path / "empty.json"
    empty_path.write_text("{}")
    with pytest.raises(ValueError):
        VPNConfig.from_file(empty_path)


def test_invalid_environment(monkeypatch) -> None:
    """Test handling of invalid environment variables."""
    # Test missing required variables
    with pytest.raises(ValueError):
        VPNConfig.from_env()

    # Test invalid values
    monkeypatch.setenv("NORDVPN_USERNAME", TEST_USERNAME)
    monkeypatch.setenv("NORDVPN_PASSWORD", TEST_PASSWORD.get_secret_value())
    monkeypatch.setenv("NORDVPN_API_TIMEOUT", "invalid")
    with pytest.raises(ValueError):
        VPNConfig.from_env()

================
File: tests/integration/test_connection.py
================
"""Integration tests for VPN connection."""

import asyncio
import pytest

from nyord_vpn.core.exceptions import VPNError, VPNConnectionError


@pytest.mark.integration
@pytest.mark.asyncio
async def test_connection_success(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
    mock_env_credentials,
) -> None:
    """Test successful VPN connection."""
    # Test primary API
    async with mock_client as client:
        await client.connect()
        status = await client.status()
        assert status["connected"] is True
        assert status["country"] == "Test Country"
        assert status["ip"] == "1.2.3.4"
        assert status["server"] == "test.server.com"

    # Test fallback API
    mock_client.primary_api.connect.side_effect = VPNError("Primary API failed")
    async with mock_client as client:
        await client.connect()
        status = await client.status()
        assert status["connected"] is True
        assert status["country"] == "Test Country"
        assert status["ip"] == "1.2.3.4"
        assert status["server"] == "test.server.com"


@pytest.mark.integration
@pytest.mark.asyncio
async def test_connection_failure(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
    mock_env_credentials,
) -> None:
    """Test VPN connection failure handling."""
    # Test primary API failure
    mock_client.primary_api.connect.side_effect = VPNError("Primary API failed")
    mock_client.fallback_api.connect.side_effect = VPNError("Fallback API failed")

    with pytest.raises(VPNConnectionError, match="Both primary and fallback failed"):
        async with mock_client as client:
            await client.connect()

    # Test network error
    mock_aiohttp_session.get.side_effect = asyncio.TimeoutError()
    with pytest.raises(VPNConnectionError, match="Failed to connect"):
        async with mock_client as client:
            await client.connect()

    # Test subprocess error
    mock_subprocess.side_effect = Exception("Subprocess error")
    with pytest.raises(VPNConnectionError, match="Failed to connect"):
        async with mock_client as client:
            await client.connect()


@pytest.mark.integration
@pytest.mark.asyncio
async def test_country_selection(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
    mock_env_credentials,
) -> None:
    """Test VPN country selection."""
    # Test valid country
    async with mock_client as client:
        await client.connect("Test Country")
        status = await client.status()
        assert status["country"] == "Test Country"

    # Test invalid country
    mock_client.primary_api.connect.side_effect = VPNError("Invalid country")
    mock_client.fallback_api.connect.side_effect = VPNError("Invalid country")
    with pytest.raises(VPNConnectionError, match="Invalid country"):
        async with mock_client as client:
            await client.connect("Invalid Country")

================
File: tests/integration/test_errors.py
================
"""Integration tests for error handling."""

import asyncio
import pytest
from unittest.mock import AsyncMock, MagicMock
import json
from pathlib import Path
import subprocess

from nyord_vpn.core.client import VPNClient
from nyord_vpn.core.exceptions import VPNError, VPNConnectionError, VPNConfigError
from tests.conftest import TEST_PASSWORD, TEST_USERNAME


@pytest.mark.integration
@pytest.mark.asyncio
async def test_network_errors(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
    mock_env_credentials,
) -> None:
    """Test handling of network-related errors."""
    # Test connection timeout
    mock_aiohttp_session.get.side_effect = asyncio.TimeoutError()
    with pytest.raises(VPNConnectionError, match="Failed to connect"):
        async with mock_client as client:
            await client.connect()

    # Test connection refused
    mock_aiohttp_session.get.side_effect = ConnectionRefusedError()
    with pytest.raises(VPNConnectionError, match="Failed to connect"):
        async with mock_client as client:
            await client.connect()

    # Test DNS resolution error
    mock_aiohttp_session.get.side_effect = Exception("DNS resolution failed")
    with pytest.raises(VPNConnectionError, match="Failed to connect"):
        async with mock_client as client:
            await client.connect()

    # Test SSL error
    mock_aiohttp_session.get.side_effect = Exception("SSL verification failed")
    with pytest.raises(VPNConnectionError, match="Failed to connect"):
        async with mock_client as client:
            await client.connect()


@pytest.mark.integration
@pytest.mark.asyncio
async def test_subprocess_errors(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
    mock_env_credentials,
) -> None:
    """Test handling of subprocess-related errors."""
    # Test OpenVPN not found
    mock_subprocess.side_effect = FileNotFoundError("openvpn not found")
    with pytest.raises(VPNConfigError):
        async with mock_client as client:
            await client.connect()

    # Test OpenVPN error
    mock_subprocess.side_effect = subprocess.SubprocessError("OpenVPN error")
    with pytest.raises(VPNConnectionError):
        async with mock_client as client:
            await client.connect()


@pytest.mark.integration
@pytest.mark.asyncio
async def test_configuration_errors(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
    temp_dir,
) -> None:
    """Test handling of configuration-related errors."""
    # Test missing credentials
    with pytest.raises(VPNConfigError, match="Field required"):
        VPNClient()

    # Test invalid config file
    config_file = temp_dir / "invalid.toml"
    config_file.write_text("invalid = toml [ content")
    with pytest.raises(VPNConfigError, match="Failed to load configuration"):
        VPNClient(config_file=config_file)

    # Test non-existent config file
    with pytest.raises(VPNConfigError, match="Failed to load configuration"):
        VPNClient(config_file=temp_dir / "nonexistent.toml")

    # Test invalid config directory
    config_file = temp_dir / "config.toml"
    config_file.write_text(
        """
        username = "test_user"
        password = "test_pass"
        config_dir = "/nonexistent/dir"
        """,
    )
    with pytest.raises(VPNConfigError, match="Failed to setup config directory"):
        VPNClient(config_file=config_file)


@pytest.mark.integration
@pytest.mark.asyncio
async def test_api_errors(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
    mock_env_credentials,
) -> None:
    """Test handling of API-related errors."""
    # Test API error response
    mock_aiohttp_session.get.return_value.__aenter__.return_value.json.return_value = {
        "error": "API error",
    }
    with pytest.raises(VPNConnectionError):
        async with mock_client as client:
            await client.connect()

    # Test invalid API response
    mock_aiohttp_session.get.return_value.__aenter__.return_value.json.side_effect = (
        json.JSONDecodeError("Invalid JSON", "{", 0)
    )
    with pytest.raises(VPNConnectionError):
        async with mock_client as client:
            await client.connect()


@pytest.mark.integration
@pytest.mark.asyncio
async def test_error_recovery(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
) -> None:
    """Test error recovery behavior."""
    # Test recovery after network error
    mock_aiohttp_session.get.side_effect = [
        asyncio.TimeoutError(),  # First attempt fails
        MagicMock(  # Second attempt succeeds
            status=200,
            json=AsyncMock(
                return_value={
                    "ip": "1.2.3.4",
                    "country": "Test Country",
                    "hostname": "test.server.com",
                },
            ),
        ),
    ]

    async with mock_client as client:
        result = await client.connect()
        assert result is True

        # Verify status
        status = await client.status()
        assert status["connected"] is True

    # Test recovery after subprocess error
    mock_subprocess.side_effect = [
        Exception("First attempt failed"),  # First attempt fails
        MagicMock(  # Second attempt succeeds
            returncode=0,
            communicate=AsyncMock(return_value=(b"Success", b"")),
        ),
    ]

    async with mock_client as client:
        result = await client.connect()
        assert result is True

        # Verify status
        status = await client.status()
        assert status["connected"] is True


@pytest.mark.asyncio
async def test_invalid_credentials() -> None:
    """Test handling of invalid credentials."""
    client = VPNClient(username="invalid", password=TEST_PASSWORD.get_secret_value())
    with pytest.raises(VPNConnectionError):
        await client.connect()


@pytest.mark.asyncio
async def test_network_errors() -> None:
    """Test handling of network errors."""
    client = VPNClient(
        username=TEST_USERNAME,
        password=TEST_PASSWORD.get_secret_value(),
    )

    # Test connection with network error
    with pytest.raises(VPNConnectionError):
        await client.connect()

    # Test status check with network error
    with pytest.raises(VPNError):
        await client.status()

    # Test country listing with network error
    with pytest.raises(VPNError):
        await client.list_countries()


@pytest.mark.asyncio
async def test_timeout_handling(tmp_path: Path) -> None:
    """Test handling of timeouts."""
    # Create config with short timeout
    config_path = tmp_path / "timeout_config.json"
    config_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD.get_secret_value(),
        "api_timeout": 1,
    }
    config_path.write_text(json.dumps(config_data))

    client = VPNClient(config_file=config_path)

    # Test connection timeout
    with pytest.raises(VPNConnectionError):
        await client.connect()

    # Test status check timeout
    with pytest.raises(VPNError):
        await client.status()


@pytest.mark.asyncio
async def test_retry_behavior(tmp_path: Path) -> None:
    """Test retry behavior on failures."""
    # Create config with retry settings
    config_path = tmp_path / "retry_config.json"
    config_data = {
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD.get_secret_value(),
        "retry_attempts": 2,
    }
    config_path.write_text(json.dumps(config_data))

    client = VPNClient(config_file=config_path)

    # Test connection retries
    with pytest.raises(VPNConnectionError):
        await client.connect()

    # Test status check retries
    with pytest.raises(VPNError):
        await client.status()


@pytest.mark.asyncio
async def test_fallback_behavior() -> None:
    """Test fallback to legacy API."""
    client = VPNClient(
        username=TEST_USERNAME,
        password=TEST_PASSWORD.get_secret_value(),
        use_legacy_fallback=True,
    )

    # Test connection with fallback
    assert await client.connect() is True
    status = await client.status()
    assert status["connected"] is True

    # Cleanup
    await client.disconnect()


@pytest.mark.asyncio
async def test_invalid_country() -> None:
    """Test handling of invalid country names."""
    client = VPNClient(
        username=TEST_USERNAME,
        password=TEST_PASSWORD.get_secret_value(),
    )

    # Test connection with invalid country
    with pytest.raises(VPNConnectionError):
        await client.connect("Invalid Country")

    # Test connection with empty country
    with pytest.raises(VPNConnectionError):
        await client.connect("")


@pytest.mark.integration
@pytest.mark.asyncio
async def test_cleanup_after_error(
    mock_client,
    mock_aiohttp_session,
    mock_subprocess,
    mock_pycountry,
    mock_env_credentials,
) -> None:
    """Test cleanup after errors."""
    # Test cleanup after connection error
    mock_client.primary_api.connect.side_effect = VPNError("Connection failed")
    mock_client.fallback_api.connect.side_effect = VPNError("Connection failed")

    try:
        async with mock_client as client:
            await client.connect()
    except VPNConnectionError:
        pass

    # Verify cleanup
    status = mock_client.status()
    assert status["connected"] is False
    assert status["server"] == ""

================
File: tests/integration/test_validation_integration.py
================
"""Integration tests for validation."""

import os
import pytest

from nyord_vpn.core.exceptions import VPNError
from nyord_vpn.api.njord import NjordVPNClient
from nyord_vpn.api.legacy import LegacyVPNClient


@pytest.fixture(autouse=True)
def clear_env():
    """Clear environment variables before each test."""
    os.environ.pop("NORD_USER", None)
    os.environ.pop("NORD_PASSWORD", None)
    yield
    os.environ.pop("NORD_USER", None)
    os.environ.pop("NORD_PASSWORD", None)


def test_invalid_credentials_njord() -> None:
    """Test invalid credentials with Njord API."""
    with pytest.raises(VPNError, match="Missing credentials"):
        NjordVPNClient()


def test_invalid_credentials_legacy() -> None:
    """Test invalid credentials with Legacy API."""
    with pytest.raises(VPNError, match="Missing credentials"):
        LegacyVPNClient()


def test_invalid_country_njord() -> None:
    """Test invalid country with Njord API."""
    os.environ["NORD_USER"] = "test_user"
    os.environ["NORD_PASSWORD"] = "test_pass"
    with pytest.raises(VPNError):
        client = NjordVPNClient()
        client.connect("Invalid Country")


def test_invalid_country_legacy() -> None:
    """Test invalid country with Legacy API."""
    os.environ["NORD_USER"] = "test_user"
    os.environ["NORD_PASSWORD"] = "test_pass"
    with pytest.raises(VPNError):
        client = LegacyVPNClient()
        client.connect("Invalid Country")

================
File: tests/__init__.py
================
"""Test suite for nyord-vpn package."""

================
File: tests/conftest.py
================
"""Test fixtures and configuration."""

from unittest.mock import patch
import json

import pytest

from nyord_vpn.core.client import VPNClient


@pytest.fixture
def mock_env_credentials(monkeypatch) -> None:
    """Mock environment variables for testing."""
    monkeypatch.setenv("NORD_USER", "test_user")
    monkeypatch.setenv("NORD_PASSWORD", "test_pass")


@pytest.fixture
def mock_openvpn():
    """Mock OpenVPN command."""
    with patch("subprocess.run") as mock_run:
        mock_run.return_value.stdout = b"OpenVPN 2.5.0\n"
        yield mock_run


@pytest.fixture
def mock_requests():
    """Mock requests for API calls."""
    with patch("requests.get") as mock_get:
        # Mock server recommendations
        mock_get.return_value.json.return_value = [
            {"hostname": "test.server.com", "load": 10, "status": "online"},
        ]
        mock_get.return_value.status_code = 200
        yield mock_get


@pytest.fixture
def mock_process():
    """Mock subprocess for OpenVPN."""
    with patch("subprocess.Popen") as mock_popen:
        mock_popen.return_value.pid = 12345
        mock_popen.return_value.returncode = 0
        yield mock_popen


@pytest.fixture
def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
    """Create a mock VPN client."""
    with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
        # Setup mock APIs
        mock_legacy.return_value.connect.return_value = True
        mock_legacy.return_value.disconnect.return_value = True
        mock_legacy.return_value.status.return_value = {
            "connected": True,
            "country": "Test Country",
            "ip": "1.2.3.4",
            "server": "test.server.com",
        }
        mock_legacy.return_value.list_countries.return_value = [
            {"name": "Country 1", "code": "1"},
            {"name": "Country 2", "code": "2"},
        ]

        # Create client
        client = VPNClient()
        yield client


@pytest.fixture
def temp_config_file(tmp_path):
    """Create a temporary config file."""
    config = {
        "username": "test_user",
        "password": "test_pass",
        "default_country": "us",
        "use_legacy_fallback": True,
    }

    config_file = tmp_path / "config.json"
    config_file.write_text(json.dumps(config))
    return config_file


@pytest.fixture
def mock_ip_info():
    """Mock IP info response."""
    with patch("requests.get") as mock_get:
        mock_get.return_value.json.return_value = {
            "ip": "1.2.3.4",
            "country": "US",
            "org": "NordVPN",
        }
        mock_get.return_value.status_code = 200
        yield mock_get

================
File: tests/test_client.py
================
"""Tests for VPN client."""

import pytest

from nyord_vpn.core.exceptions import VPNError


def test_client_connect(mock_client) -> None:
    """Test VPN client connect."""
    # Test successful connection
    result = mock_client.connect("Test Country")
    assert result is True

    # Test connection status
    status = mock_client.status()
    assert status["connected"] is True
    assert status["country"] == "Test Country"
    assert status["ip"] == "1.2.3.4"
    assert status["server"] == "test.server.com"


def test_client_disconnect(mock_client) -> None:
    """Test VPN client disconnect."""
    # Connect first
    mock_client.connect("Test Country")

    # Test disconnection
    result = mock_client.disconnect()
    assert result is True

    # Test status after disconnect
    status = mock_client.status()
    assert status["connected"] is False


def test_client_list_countries(mock_client) -> None:
    """Test VPN client country listing."""
    countries = mock_client.list_countries()
    assert isinstance(countries, list)
    assert len(countries) > 0
    assert all(isinstance(c, dict) for c in countries)
    assert all("name" in c and "code" in c for c in countries)


def test_client_error_handling(mock_client, mocker) -> None:
    """Test VPN client error handling."""
    # Mock API to raise error
    mocker.patch.object(
        mock_client._connect,
        "__call__",
        side_effect=VPNError("Test error"),
    )

    # Test error handling
    with pytest.raises(VPNError, match="Test error"):
        mock_client.connect("Test Country")


@pytest.mark.asyncio
async def test_client_context_manager(mock_client) -> None:
    """Test VPN client context manager."""
    async with mock_client as client:
        # Test connection inside context
        result = await client.connect("Test Country")
        assert result is True

        # Test status
        status = await client.status()
        assert status["connected"] is True

    # Test auto-disconnect after context
    status = await mock_client.status()
    assert status["connected"] is False

================
File: tests/test_legacy_api.py
================
"""Tests for LegacyVPNClient implementation."""

import pytest
import requests
import os
import subprocess

from nyord_vpn.core.exceptions import VPNError
from nyord_vpn.api.legacy import LegacyVPNClient


def test_init(mock_env_credentials, mock_openvpn) -> None:
    """Test LegacyVPNClient initialization."""
    api = LegacyVPNClient()
    assert api.username == os.getenv("NORD_USER")
    assert isinstance(api.password, str)
    assert api.password == os.getenv("NORD_PASSWORD")


def test_connect_success(
    mock_env_credentials,
    mock_openvpn,
    mock_requests,
    mock_process,
    mock_ip_info,
) -> None:
    """Test successful connection."""
    api = LegacyVPNClient()
    assert api.connect() is True


def test_connect_failure(
    mock_env_credentials,
    mock_openvpn,
    mock_requests,
    mock_process,
) -> None:
    """Test connection failure."""
    mock_process.side_effect = requests.RequestException("Failed to connect")
    api = LegacyVPNClient()
    with pytest.raises(VPNError, match="Failed to connect"):
        api.connect()


def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
    """Test successful disconnection."""
    api = LegacyVPNClient()
    assert api.disconnect() is True


def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
    """Test status when connected."""
    api = LegacyVPNClient()
    status = api.status()
    assert status["connected"] is True
    assert status["country"] == "US"
    assert status["ip"] == "1.2.3.4"
    assert status["server"] == ""


def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
    """Test listing available countries."""
    mock_requests.return_value.json.return_value = [
        {"name": "United States", "id": 228},
        {"name": "United Kingdom", "id": 227},
    ]
    api = LegacyVPNClient()
    countries = api.list_countries()
    assert len(countries) == 2
    assert all(isinstance(c, dict) for c in countries)
    assert all("name" in c and "code" in c for c in countries)
    assert countries[0]["name"] == "United Kingdom"
    assert countries[1]["name"] == "United States"


def test_openvpn_not_found(mock_env_credentials) -> None:
    """Test OpenVPN not found error."""
    with pytest.raises(VPNError, match="OpenVPN not found"):
        LegacyVPNClient()


def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
    """Test server not found error."""
    mock_requests.return_value.json.return_value = []
    api = LegacyVPNClient()
    with pytest.raises(VPNError, match="No servers found"):
        api.connect("invalid_country")


def test_config_download_error(
    mock_env_credentials, mock_openvpn, mock_requests
) -> None:
    """Test config download error."""
    mock_requests.side_effect = requests.RequestException("Failed to download")
    api = LegacyVPNClient()
    with pytest.raises(VPNError, match="Failed to download"):
        api.connect()


def test_process_error(
    mock_env_credentials, mock_openvpn, mock_requests, mock_process
) -> None:
    """Test process error handling."""
    mock_process.side_effect = subprocess.SubprocessError("Process failed")
    api = LegacyVPNClient()
    with pytest.raises(VPNError, match="Failed to connect"):
        api.connect()


def test_api_credentials() -> None:
    """Test API credentials are set correctly."""
    api = LegacyVPNClient()
    assert api.username == os.getenv("NORD_USER")
    assert api.password == os.getenv("NORD_PASSWORD")

================
File: tests/test_package.py
================
"""Test suite for nyord_vpn."""


def test_version() -> None:
    """Verify package exposes version."""
    import nyord_vpn

    assert nyord_vpn.__version__

================
File: tests/test_server_manager.py
================
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["pytest"]
# ///
# this_file: tests/test_server_manager.py

"""Tests for server manager functionality."""

import pytest
from unittest.mock import MagicMock

from nyord_vpn.network.server import ServerManager
from nyord_vpn.core.api import NordVPNAPIClient


@pytest.fixture
def mock_api_client():
    """Create a mock API client."""
    client = MagicMock(spec=NordVPNAPIClient)
    client.verbose = True
    client.logger = MagicMock()
    return client


@pytest.fixture
def server_manager(mock_api_client):
    """Create a server manager instance."""
    return ServerManager(mock_api_client)


def test_openvpn_tcp_validation(server_manager):
    """Test OpenVPN TCP technology validation."""
    # Test regular OpenVPN TCP
    server = {
        "hostname": "test.nordvpn.com",
        "status": "online",
        "load": 50,
        "country": {"code": "US", "name": "United States"},
        "technologies": [
            {"id": 5, "name": "OpenVPN TCP", "status": "online"},
        ],
    }
    assert server_manager._is_valid_server(server) is True

    # Test OpenVPN TCP Dedicated
    server = {
        "hostname": "test.nordvpn.com",
        "status": "online",
        "load": 50,
        "country": {"code": "US", "name": "United States"},
        "technologies": [
            {"id": 45, "name": "OpenVPN TCP Dedicated", "status": "online"},
        ],
    }
    assert server_manager._is_valid_server(server) is True

    # Test server without OpenVPN TCP
    server = {
        "hostname": "test.nordvpn.com",
        "status": "online",
        "load": 50,
        "country": {"code": "US", "name": "United States"},
        "technologies": [
            {"id": 3, "name": "OpenVPN UDP", "status": "online"},
            {"id": 35, "name": "Wireguard", "status": "online"},
        ],
    }
    assert server_manager._is_valid_server(server) is False

    # Test server with invalid technology format
    server = {
        "hostname": "test.nordvpn.com",
        "status": "online",
        "load": 50,
        "country": {"code": "US", "name": "United States"},
        "technologies": [
            {"id": 5},  # Missing name
            {"name": "OpenVPN TCP"},  # Missing id
            None,  # Invalid technology
        ],
    }
    assert server_manager._is_valid_server(server) is False

    # Test server with empty technologies
    server = {
        "hostname": "test.nordvpn.com",
        "status": "online",
        "load": 50,
        "country": {"code": "US", "name": "United States"},
        "technologies": [],
    }
    assert server_manager._is_valid_server(server) is False

    # Test server with invalid hostname
    server = {
        "hostname": "test.example.com",  # Not a nordvpn.com domain
        "status": "online",
        "load": 50,
        "country": {"code": "US", "name": "United States"},
        "technologies": [
            {"id": 5, "name": "OpenVPN TCP", "status": "online"},
        ],
    }
    assert server_manager._is_valid_server(server) is False

    # Test server with invalid status
    server = {
        "hostname": "test.nordvpn.com",
        "status": "offline",  # Should be online
        "load": 50,
        "country": {"code": "US", "name": "United States"},
        "technologies": [
            {"id": 5, "name": "OpenVPN TCP", "status": "online"},
        ],
    }
    assert server_manager._is_valid_server(server) is False

    # Test server with invalid load
    server = {
        "hostname": "test.nordvpn.com",
        "status": "online",
        "load": 150,  # Should be 0-100
        "country": {"code": "US", "name": "United States"},
        "technologies": [
            {"id": 5, "name": "OpenVPN TCP", "status": "online"},
        ],
    }
    assert server_manager._is_valid_server(server) is False

    # Test server with invalid country code
    server = {
        "hostname": "test.nordvpn.com",
        "status": "online",
        "load": 50,
        "country": {"code": "USA", "name": "United States"},  # Should be 2 letters
        "technologies": [
            {"id": 5, "name": "OpenVPN TCP", "status": "online"},
        ],
    }
    assert server_manager._is_valid_server(server) is False


def test_server_filtering(server_manager, mock_api_client):
    """Test server filtering in get_servers_cache."""
    # Mock API response with various server types
    mock_api_client.get.return_value.json.return_value = [
        {
            "hostname": "tcp1.nordvpn.com",
            "status": "online",
            "load": 50,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 5, "name": "OpenVPN TCP", "status": "online"},
            ],
        },
        {
            "hostname": "tcp2.nordvpn.com",
            "status": "online",
            "load": 60,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 45, "name": "OpenVPN TCP Dedicated", "status": "online"},
            ],
        },
        {
            "hostname": "udp1.nordvpn.com",
            "status": "online",
            "load": 40,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 3, "name": "OpenVPN UDP", "status": "online"},
            ],
        },
        {
            "hostname": "offline1.nordvpn.com",
            "status": "offline",
            "load": 30,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 5, "name": "OpenVPN TCP", "status": "online"},
            ],
        },
    ]

    # Get filtered servers
    cache = server_manager.get_servers_cache()
    servers = cache.get("servers", [])

    # Should only include online servers with OpenVPN TCP
    assert len(servers) == 2
    assert any(s["hostname"] == "tcp1.nordvpn.com" for s in servers)
    assert any(s["hostname"] == "tcp2.nordvpn.com" for s in servers)

    # Verify logging
    mock_api_client.logger.debug.assert_any_call("Found OpenVPN TCP support: OpenVPN TCP")
    mock_api_client.logger.debug.assert_any_call("Found OpenVPN TCP support: OpenVPN TCP Dedicated")
    mock_api_client.logger.debug.assert_any_call(
        "Skipping server without OpenVPN TCP: udp1.nordvpn.com. "
        "Available technologies: ['OpenVPN UDP']"
    )

================
File: .gitignore
================
*_autogen/
.DS_Store
__version__.py
__pycache__/
_Chutzpah*
_deps
_NCrunch_*
_pkginfo.txt
_Pvt_Extensions
_ReSharper*/
_TeamCity*
_UpgradeReport_Files/
!?*.[Cc]ache/
!.axoCover/settings.json
!.vscode/extensions.json
!.vscode/launch.json
!.vscode/settings.json
!.vscode/tasks.json
!**/[Pp]ackages/build/
!Directory.Build.rsp
.*crunch*.local.xml
.axoCover/*
.builds
.cr/personal
.fake/
.history/
.ionide/
.localhistory/
.mfractor/
.ntvs_analysis.dat
.paket/paket.exe
.sass-cache/
.vs/
.vscode
.vscode/*
.vshistory/
[Aa][Rr][Mm]/
[Aa][Rr][Mm]64/
[Bb]in/
[Bb]uild[Ll]og.*
[Dd]ebug/
[Dd]ebugPS/
[Dd]ebugPublic/
[Ee]xpress/
[Ll]og/
[Ll]ogs/
[Oo]bj/
[Rr]elease/
[Rr]eleasePS/
[Rr]eleases/
[Tt]est[Rr]esult*/
[Ww][Ii][Nn]32/
*_h.h
*_i.c
*_p.c
*_wpftmp.csproj
*- [Bb]ackup ([0-9]).rdl
*- [Bb]ackup ([0-9][0-9]).rdl
*- [Bb]ackup.rdl
*.[Cc]ache
*.[Pp]ublish.xml
*.[Rr]e[Ss]harper
*.a
*.app
*.appx
*.appxbundle
*.appxupload
*.aps
*.azurePubxml
*.bim_*.settings
*.bim.layout
*.binlog
*.btm.cs
*.btp.cs
*.build.csdef
*.cab
*.cachefile
*.code-workspace
*.coverage
*.coveragexml
*.d
*.dbmdl
*.dbproj.schemaview
*.dll
*.dotCover
*.DotSettings.user
*.dsp
*.dsw
*.dylib
*.e2e
*.exe
*.gch
*.GhostDoc.xml
*.gpState
*.ilk
*.iobj
*.ipdb
*.jfm
*.jmconfig
*.la
*.lai
*.ldf
*.lib
*.lo
*.log
*.mdf
*.meta
*.mm.*
*.mod
*.msi
*.msix
*.msm
*.msp
*.ncb
*.ndf
*.nuget.props
*.nuget.targets
*.nupkg
*.nvuser
*.o
*.obj
*.odx.cs
*.opendb
*.opensdf
*.opt
*.out
*.pch
*.pdb
*.pfx
*.pgc
*.pgd
*.pidb
*.plg
*.psess
*.publishproj
*.publishsettings
*.pubxml
*.pyc
*.rdl.data
*.rptproj.bak
*.rptproj.rsuser
*.rsp
*.rsuser
*.sap
*.sbr
*.scc
*.sdf
*.sln.docstates
*.sln.iml
*.slo
*.smod
*.snupkg
*.so
*.suo
*.svclog
*.tlb
*.tlh
*.tli
*.tlog
*.tmp
*.tmp_proj
*.tss
*.user
*.userosscache
*.userprefs
*.vbp
*.vbw
*.VC.db
*.VC.VC.opendb
*.VisualState.xml
*.vsp
*.vspscc
*.vspx
*.vssscc
*.xsd.cs
**/[Pp]ackages/*
**/*.DesktopClient/GeneratedArtifacts
**/*.DesktopClient/ModelManifest.xml
**/*.HTMLClient/GeneratedArtifacts
**/*.Server/GeneratedArtifacts
**/*.Server/ModelManifest.xml
*~
~$*
$tf/
AppPackages/
artifacts/
ASALocalRun/
AutoTest.Net/
Backup*/
BenchmarkDotNet.Artifacts/
bld/
BundleArtifacts/
ClientBin/
cmake_install.cmake
CMakeCache.txt
CMakeFiles
CMakeLists.txt.user
CMakeScripts
CMakeUserPresets.json
compile_commands.json
coverage*.info
coverage*.json
coverage*.xml
csx/
CTestTestfile.cmake
dlldata.c
DocProject/buildhelp/
DocProject/Help/*.hhc
DocProject/Help/*.hhk
DocProject/Help/*.hhp
DocProject/Help/*.HxC
DocProject/Help/*.HxT
DocProject/Help/html
DocProject/Help/Html2
ecf/
FakesAssemblies/
FodyWeavers.xsd
Generated_Code/
Generated\ Files/
healthchecksdb
install_manifest.txt
ipch/
Makefile
MigrationBackup/
mono_crash.*
nCrunchTemp_*
node_modules/
nunit-*.xml
OpenCover/
orleans.codegen.cs
Package.StoreAssociation.xml
paket-files/
project.fragment.lock.json
project.lock.json
publish/
PublishScripts/
rcf/
ScaffoldingReadMe.txt
ServiceFabricBackup/
StyleCopReport.xml
Testing
TestResult.xml
UpgradeLog*.htm
UpgradeLog*.XML
x64/
x86/
# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Distribution / packaging
!dist/.gitkeep

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
.ruff_cache/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE
.idea/
.vscode/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Project specific
__version__.py
_private

================
File: .pre-commit-config.yaml
================
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.3.4
    hooks:
      - id: ruff
        args: [--fix]
      - id: ruff-format
        args: [--respect-gitignore]
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-added-large-files
      - id: debug-statements
      - id: check-case-conflict
      - id: mixed-line-ending
        args: [--fix=lf]

================
File: cleanup.py
================
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = [
#   "ruff>=0.9.6",
#   "pytest>=8.3.4",
#   "mypy>=1.15.0",
# ]
# ///
# this_file: cleanup.py

"""
Cleanup tool for managing repository tasks and maintaining code quality.

This script provides a comprehensive set of commands for repository maintenance:

When to use each command:

- `cleanup.py status`: Use this FIRST when starting work to check the current state
of the repository. It shows file structure, git status, and runs all code quality
checks. Run this before making any changes to ensure you're starting from a clean state.

- `cleanup.py venv`: Run this when setting up the project for the first time or if
your virtual environment is corrupted/missing. Creates a new virtual environment
using uv.

- `cleanup.py install`: Use after `venv` or when dependencies have changed. Installs
the package and all development dependencies in editable mode.

- `cleanup.py update`: Run this when you've made changes and want to commit them.
It will:
1. Show current status (like `status` command)
2. Stage and commit any changes with a generic message
Use this for routine maintenance commits.

- `cleanup.py push`: Run this after `update` when you want to push your committed
changes to the remote repository.

Workflow Example:
1. Start work: `cleanup.py status`
2. Make changes to code
3. Commit changes: `cleanup.py update`
4. Push to remote: `cleanup.py push`

The script maintains a CLEANUP.log file that records all operations with timestamps.
It also includes content from README.md at the start and TODO.md at the end of logs
for context.

Required Files:
- LOG.md: Project changelog
- README.md: Project documentation
- TODO.md: Pending tasks and future plans
"""

import subprocess
import os
import sys
from datetime import datetime
from pathlib import Path
from typing import NoReturn

# Configuration
IGNORE_PATTERNS = [
    ".git",
    ".venv",
    "__pycache__",
    "*.pyc",
    "dist",
    "build",
    "*.egg-info",
]
REQUIRED_FILES = ["LOG.md", ".cursor/rules/0project.mdc", "TODO.md"]
LOG_FILE = Path("CLEANUP.log")

# Ensure we're working from the script's directory
os.chdir(Path(__file__).parent)


def new() -> None:
    """Remove existing log file."""
    if LOG_FILE.exists():
        LOG_FILE.unlink()


def prefix() -> None:
    """Write README.md content to log file."""
    readme = Path(".cursor/rules/0project.mdc")
    if readme.exists():
        log_message("\n=== PROJECT STATEMENT ===")
        content = readme.read_text()
        log_message(content)


def suffix() -> None:
    """Write TODO.md content to log file."""
    todo = Path("TODO.md")
    if todo.exists():
        log_message("\n=== TODO.md ===")
        content = todo.read_text()
        log_message(content)


def log_message(message: str) -> None:
    """Log a message to file and console with timestamp."""
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    log_line = f"{timestamp} - {message}\n"
    with LOG_FILE.open("a") as f:
        f.write(log_line)


def run_command(cmd: list[str], check: bool = True) -> subprocess.CompletedProcess:
    """Run a shell command and return the result."""
    try:
        result = subprocess.run(cmd, check=check, capture_output=True, text=True)
        if result.stdout:
            log_message(result.stdout)
        return result
    except subprocess.CalledProcessError as e:
        log_message(f"Command failed: {' '.join(cmd)}")
        log_message(f"Error: {e.stderr}")
        if check:
            raise
        return subprocess.CompletedProcess(cmd, 1, "", str(e))


def check_command_exists(cmd: str) -> bool:
    """Check if a command exists in the system."""
    try:
        subprocess.run(["which", cmd], check=True, capture_output=True)
        return True
    except subprocess.CalledProcessError:
        return False


class Cleanup:
    """Main cleanup tool class."""

    def __init__(self) -> None:
        self.workspace = Path.cwd()

    def _print_header(self, message: str) -> None:
        """Print a section header."""
        log_message(f"\n=== {message} ===")

    def _check_required_files(self) -> bool:
        """Check if all required files exist."""
        missing = False
        for file in REQUIRED_FILES:
            if not (self.workspace / file).exists():
                log_message(f"Error: {file} is missing")
                missing = True
        return not missing

    def _generate_tree(self) -> None:
        """Generate and display tree structure of the project."""
        if not check_command_exists("tree"):
            log_message("Warning: 'tree' command not found. Skipping tree generation.")
            return None

        try:
            # Create/overwrite the file with YAML frontmatter
            rules_dir = Path(".cursor/rules")
            rules_dir.mkdir(parents=True, exist_ok=True)
            # Get tree output
            tree_result = run_command(
                ["tree", "-a", "-I", ".git", "--gitignore", "-n", "-h", "-I", "*_cache"]
            )
            tree_text = tree_result.stdout
            # Write frontmatter and tree output to file
            with open(rules_dir / "filetree.mdc", "w") as f:
                f.write("---\ndescription: File tree of the project\nglobs: \n---\n")
                f.write(tree_text)

            # Log the contents
            log_message("\nProject structure:")
            log_message(tree_text)

        except Exception as e:
            log_message(f"Failed to generate tree: {e}")
        return None

    def _git_status(self) -> bool:
        """Check git status and return True if there are changes."""
        result = run_command(["git", "status", "--porcelain"], check=False)
        return bool(result.stdout.strip())

    def _venv(self) -> None:
        """Create and activate virtual environment using uv."""
        log_message("Setting up virtual environment")
        try:
            run_command(["uv", "venv"])
            # Activate the virtual environment
            venv_path = self.workspace / ".venv" / "bin" / "activate"
            if venv_path.exists():
                os.environ["VIRTUAL_ENV"] = str(self.workspace / ".venv")
                os.environ["PATH"] = (
                    f"{self.workspace / '.venv' / 'bin'}{os.pathsep}{os.environ['PATH']}"
                )
                log_message("Virtual environment created and activated")
            else:
                log_message("Virtual environment created but activation failed")
        except Exception as e:
            log_message(f"Failed to create virtual environment: {e}")

    def _install(self) -> None:
        """Install package in development mode with all extras."""
        log_message("Installing package with all extras")
        try:
            self._venv()
            run_command(["uv", "pip", "install", "-e", ".[test,dev]"])
            log_message("Package installed successfully")
        except Exception as e:
            log_message(f"Failed to install package: {e}")

    def _run_checks(self) -> None:
        """Run code quality checks using ruff and pytest."""

        try:
            # Run ruff checks
            log_message(">>>\n>>> %s...\n>>> TODO: Check the errors!\n>>>" % "Running code fixes")
            run_command(
                [
                    "python",
                    "-m",
                    "ruff",
                    "check",
                    "--fix",
                    "--unsafe-fixes",
                    "src",
                    "tests",
                ],
                check=False,
            )
            run_command(
                [
                    "python",
                    "-m",
                    "ruff",
                    "format",
                    "--respect-gitignore",
                    "src",
                    "tests",
                ],
                check=False,
            )

            # Run type checks
            log_message(">>>\n>>> %s...\n>>> TODO: Check the errors!\n>>>" % "Running type checks")
            run_command(["python", "-m", "mypy", "src", "tests"], check=False)

            # Check unused code
            log_message(">>>\n>>> %s...\n>>> TODO: Check the errors!\n>>>" % "Checking for _potentially_ unused code")
            run_command(["python", "-m", "vulture", "src"], check=False)


            # Run tests
            log_message(">>>\n>>> %s...\n>>> TODO: Try to fix the problems, always think whether the test actually makes sense, then either adjust the implementation or the test!\n>>>" % "Running tests")
            run_command(["python", "-m", "pytest", "tests"], check=False)

            log_message("All checks completed")
        except Exception as e:
            log_message(f"Failed during checks: {e}")

    def status(self) -> None:
        """Show current repository status: tree structure, git status, and run checks."""
        prefix()  # Add README.md content at start
        self._print_header("Current Status")

        # Check required files
        self._check_required_files()

        # Show tree structure
        self._generate_tree()

        # Show git status
        result = run_command(["git", "status"], check=False)
        log_message(result.stdout)

        # Run additional checks
        self._print_header("Environment Status")
        self._venv()
        self._install()
        self._run_checks()

        suffix()  # Add TODO.md content at end

    def venv(self) -> None:
        """Create and activate virtual environment."""
        self._print_header("Virtual Environment Setup")
        self._venv()

    def install(self) -> None:
        """Install package with all extras."""
        self._print_header("Package Installation")
        self._install()

    def update(self) -> None:
        """Show status and commit any changes if needed."""
        # First show current status
        self.status()

        # Then handle git changes if any
        if self._git_status():
            log_message("Changes detected in repository")
            try:
                # Add all changes
                run_command(["git", "add", "."])
                # Commit changes
                commit_msg = "Update repository files"
                run_command(["git", "commit", "-m", commit_msg])
                log_message("Changes committed successfully")
            except Exception as e:
                log_message(f"Failed to commit changes: {e}")
        else:
            log_message("No changes to commit")

    def push(self) -> None:
        """Push changes to remote repository."""
        self._print_header("Pushing Changes")
        try:
            run_command(["git", "push"])
            log_message("Changes pushed successfully")
        except Exception as e:
            log_message(f"Failed to push changes: {e}")


def print_usage() -> None:
    """Print usage information."""
    log_message("Usage:")
    log_message("  cleanup.py status   # Show current status and run all checks")
    log_message("  cleanup.py venv     # Create virtual environment")
    log_message("  cleanup.py install  # Install package with all extras")
    log_message("  cleanup.py update   # Update and commit changes")
    log_message("  cleanup.py push     # Push changes to remote")


def main() -> NoReturn:
    """Main entry point."""
    new()  # Clear log file

    if len(sys.argv) < 2:
        print_usage()
        sys.exit(1)

    command = sys.argv[1]
    cleanup = Cleanup()

    try:
        if command == "status":
            cleanup.status()
        elif command == "venv":
            cleanup.venv()
        elif command == "install":
            cleanup.install()
        elif command == "update":
            cleanup.update()
        elif command == "push":
            cleanup.push()
        else:
            print_usage()
    except Exception as e:
        log_message(f"Error: {e}")

    print(Path("CLEANUP.log").read_text())


if __name__ == "__main__":
    main()

================
File: LICENSE
================
MIT License

Copyright (c) 2025 Adam Twardoch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: package.toml
================
# Package configuration
[package]
include_cli = true        # Include CLI boilerplate
include_logging = true    # Include logging setup
use_pydantic = true      # Use Pydantic for data validation
use_rich = true          # Use Rich for terminal output

[features]
mkdocs = false           # Enable MkDocs documentation
vcs = true              # Initialize Git repository
github_actions = true   # Add GitHub Actions workflows

================
File: pyproject.toml
================
# this_file: pyproject.toml
[build-system]
requires = ["setuptools>=45", "setuptools-scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "nyord-vpn"
version = "0.1.0"
description = "NordVPN client with API fallback support"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
keywords = ["vpn", "nordvpn", "security"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

dependencies = [
    "njord>=0.0.1",
    "tenacity>=8.0.0",
    "backoff>=2.0.0",
    "rich>=13.4.2",
    "fire>=0.7.0",
    "pydantic>=2.10.6",
    "pydantic-settings>=2.8.0",
    "requests>=2.31.0",
    "keyring>=24.2.0",
    "pycountry>=24.6.1",
    "psutil>=5.9.5",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.11.0",
    "cryptography>=42.0.0",
    "black>=23.7.0",
    "bleach>=6.0.0",
    "build>=0.10.0",
    "certifi>=2023.5.7",
    "charset-normalizer>=3.2.0",
    "click>=8.1.5",
    "docutils>=0.20.1",
    "idna>=3.4",
    "importlib-metadata>=6.8.0",
    "jaraco-classes>=3.3.0",
    "markdown-it-py>=3.0.0",
    "mdurl>=0.1.2",
    "more-itertools>=9.1.0",
    "mypy-extensions>=1.0.0",
    "packaging>=23.1",
    "pathspec>=0.11.1",
    "pkginfo>=1.9.6",
    "platformdirs>=3.9.1",
    "pygments>=2.15.1",
    "pyproject-hooks>=1.0.0",
    "readme-renderer>=40.0",
    "requests-toolbelt>=1.0.0",
    "rfc3986>=2.0.0",
    "six>=1.16.0",
    "tomli>=2.0.1",
    "twine>=4.0.2",
    "typing-extensions>=4.7.1",
    "urllib3>=2.0.3",
    "webencodings>=0.5.1",
    "zipp>=3.16.2",
    "loguru>=0.7.3",
    "vulture>=2.14",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=3.6.0",
    "ruff>=0.9.7",
    "mypy>=1.0.0",
    "pyupgrade>=3.19.0",
    "autoflake>=2.0.0",
    "isort>=5.10.1",
    "vulture>=2.10",
]

test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.25.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.3.0",
    "pytest-xdist>=3.5.0",
]

[project.scripts]
nyord-vpn = "nyord_vpn.__main__:main"

[tool.setuptools]
package-dir = {"" = "src"}
packages = ["nyord_vpn"]
package-data = {"nyord_vpn" = ["data/*.json"]}

[[project.authors]]
name = "Adam Twardoch"
email = "adam+github@twardoch.com"

[project.urls]
Documentation = "https://github.com/twardoch/nyord-vpn#readme"
Issues = "https://github.com/twardoch/nyord-vpn/issues"
Source = "https://github.com/twardoch/nyord-vpn"

[tool.coverage.paths]
nyord_vpn = ["src/nyord_vpn", "*/nyord-vpn/src/nyord_vpn"]
tests = ["tests", "*/nyord-vpn/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.coverage.run]
source_pkgs = ["nyord_vpn", "tests"]
branch = true
parallel = true
omit = [
    "src/nyord_vpn/__about__.py",
]

[tool.hatch.build.hooks.vcs]
version-file = "src/nyord_vpn/__version__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/nyord_vpn"]

[tool.hatch.envs.default]
dependencies = [
]

[[tool.hatch.envs.all.matrix]]
python = ["3.10", "3.11", "3.12"]

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/nyord_vpn --cov=tests {args:tests}"
type-check = "mypy src/nyord_vpn tests"
lint = ["ruff check src/nyord_vpn tests", "ruff format --respect-gitignore src/nyord_vpn tests"]
fix = ["ruff check  --fix --unsafe-fixes src/nyord_vpn tests", "ruff format --respect-gitignore src/nyord_vpn tests"]

[tool.hatch.envs.lint]
detached = true
dependencies = [
]

[tool.hatch.envs.lint.scripts]
typing = "mypy --install-types --non-interactive {args:src/nyord_vpn tests}"
style = ["ruff check {args:.}", "ruff format --respect-gitignore {args:.}", "vulture src"]
fmt = ["ruff format --respect-gitignore {args:.}", "ruff check --fix {args:.}", "vulture src"]
all = ["style", "typing"]

[tool.hatch.envs.test]
dependencies = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.25.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.3.0",
    "pytest-xdist>=3.5.0",
]

[tool.hatch.envs.test.scripts]
test = "python -m pytest {args:tests}"
test-cov = "python -m pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/nyord_vpn --cov=tests {args:tests}"
bench = "python -m pytest -v tests/test_benchmark.py --benchmark-only"
bench-save = "python -m pytest -v tests/test_benchmark.py --benchmark-only --benchmark-json=benchmark/results.json"

[tool.hatch.version]
source = "vcs"

[tool.hatch.version.raw-options]
version_scheme = "post-release"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "A",
    "ANN",
    "ARG",
    "ASYNC",
    "B",
    "C",
    "C4",
    "C90",
    "COM",
    "D",
    "DOC",
    "DTZ",
    "E",
    "ERA",
    "EXE",
    "F",
    "FA",
    "FBT",
    "FIX",
    "FLY",
    "FURB",
    "I",
    "ICN",
    "INP",
    "ISC",
    "N",
    "NPY",
    "PD",
    "PERF",
    "PIE",
    "PL",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "PT",
    "PTH",
    "PYI",
    "Q",
    "RET",
    "RSE",
    "RUF",
    "S",
    "SIM",
    "SLF",
    "T",
    "TC",
    "TD",
    "TID",
    "TRY",
    "UP",
    "W",
    "YTT",
]
ignore = ["ARG001", "COM812", "D203", "D213", "E501", "I001", "RUF001", "PLR2004", "EXE003", "ISC001"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101"]

[tool.pytest.ini_options]
addopts = "-v --durations=10 -p no:briefcase --timeout=30 -n auto"
asyncio_mode = "strict"
asyncio_default_fixture_loop_scope = "function"
console_output_style = "progress"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
    "ignore::pytest.PytestDeprecationWarning",
]
log_cli = true
log_cli_level = "INFO"
markers = [
    "benchmark: marks tests as benchmarks (select with '-m benchmark')",
    "unit: mark a test as a unit test",
    "integration: mark a test as an integration test",
    "async_test: mark a test as an async test",
    "config: mark a test as a configuration test",
    "connection: mark a test as a connection test",
    "security: mark a test as a security test",
]
testpaths = ["tests"]
timeout = 30

[tool.pytest-benchmark]
min_rounds = 100
min_time = 0.1
histogram = true
storage = "file"
save-data = true
compare = [
    "min",    # Minimum time
    "max",    # Maximum time
    "mean",   # Mean time
    "stddev", # Standard deviation
    "median", # Median time
    "iqr",    # Inter-quartile range
    "ops",    # Operations per second
    "rounds", # Number of rounds
]

================
File: README.md
================
# nyord-vpn

nyord-vpn is a simple NordVPN client for macOS users. It provides an easy way to manage VPN connections. 

nyord-vpn is primarily designed for macOS, as it relies on OpenVPN, which is easily installable via Homebrew. However, with some modifications, it might be possible to use it on other platforms like Linux or Windows. Contributions to support additional platforms are welcome.

## Key Features

- **Simple and Reliable Connection Management:** Connect and disconnect from VPN with minimal hassle.
- **Support for Legacy OpenVPN and njord APIs:** Choose between different API versions for flexibility.
- **Country Selection:** Connect to servers in specific countries easily.
- **Status Monitoring:** Check the current status of your VPN connection.
- **Clear Error Messages:** Resolve issues quickly with informative error messages.
- **Minimal Dependencies:** Lightweight and easy to set up.

## Installation

To use nyord-vpn, you need to install some system requirements and the package itself.

### System Requirements

- macOS operating system
- OpenVPN installed

### Installing OpenVPN

Install OpenVPN using Homebrew:

```bash
brew install openvpn
```

### Installing nyord-vpn

Install the package using pip:

```bash
pip install nyord-vpn
```


## Configuration

Before using nyord-vpn, set your NordVPN credentials as environment variables:

```bash
export NORD_USER="your-username"
export NORD_PASSWORD="your-password"
```

Replace `"your-username"` and `"your-password"` with your actual NordVPN credentials.

## Usage

nyord-vpn can be used via the command line interface (CLI) or programmatically through its Python API.

### API Options

### CLI Commands

Here are the available CLI commands:

- **`nyord-vpn connect`**: Connects to a NordVPN server. Defaults to a server in the United States.
- **`nyord-vpn connect --country <country>`**: Connects to a server in the specified country. Replace `<country>` with the country name or code (e.g., `netherlands`).
- **`nyord-vpn --api njord connect`**: Uses the njord API to connect to the VPN.
- **`nyord-vpn --verbose connect`**: Connects to the VPN with verbose logging enabled for debugging.
- **`nyord-vpn status`**: Displays the current status of the VPN connection, including connection status, server, and IP address.
- **`nyord-vpn list-countries`**: Lists all available countries with NordVPN servers.
- **`nyord-vpn disconnect`**: Disconnects from the VPN.

**Note:** Some commands, such as connecting and disconnecting, may require sudo privileges. You might be prompted to enter your password.

### Python API

You can use nyord-vpn programmatically in Python:

```python
from nyord_vpn.core.factory import create_client

# Create a client (choose "legacy" or "njord")
client = create_client("legacy")

# Connect to VPN in a specific country
client.connect("netherlands")

# Check connection status
status = client.status()
print(f"Connected to {status['server']} ({status['ip']})")

# Disconnect from VPN
client.disconnect()
```

Ensure you have the necessary permissions to run OpenVPN when using the Python API.

## Development

To contribute to nyord-vpn or modify the code:

1. **Install dependencies:**

   ```bash
   pip install -r requirements.txt
   ```

2. **Install optional njord support:**

   ```bash
   pip install njord
   ```

3. **Run with debug logging:**

   ```bash
   NORD_USER="username" NORD_PASSWORD="password" nyord-vpn --verbose connect
   ```

For a full development setup, clone the repository, create a virtual environment, and install the package in editable mode:

```bash
git clone https://github.com/yourusername/nyord-vpn.git
cd nyord-vpn
python -m venv venv
source venv/bin/activate
pip install -e .
```

Replace `yourusername` with the actual repository owner.

## Error Handling and Troubleshooting

nyord-vpn provides clear error messages to help resolve issues. Common errors include:

- **`VPNCredentialsError`**: Missing or invalid credentials. Ensure `NORD_USER` and `NORD_PASSWORD` are set correctly.
- **`VPNConnectionError`**: Failed to connect or disconnect. Check your internet connection and try again.
- **`VPNConfigError`**: Configuration issues, such as missing OpenVPN. Install OpenVPN if not already installed.
- **`VPNServerError`**: Failed to get server information. Try again later or check your network connection.

### Troubleshooting Tips

- **"OpenVPN not found" error:** Install OpenVPN using `brew install openvpn`.
- **"Authentication failed" error:** Verify your NordVPN credentials in the environment variables.
- **"Failed to connect" error:** Check your internet connection or try a different country/server.
- **"No servers available" error:** Wait a few minutes and try again; this may be a temporary API issue.

### Security Considerations

- **Keep Credentials Secure:** Do not hardcode credentials; use environment variables or secure storage.
- **Update Regularly:** Keep nyord-vpn and dependencies up to date for security patches.
- **Monitor Connections:** Regularly check your connection status.
- **Use Strong Passwords:** Ensure your NordVPN account has a strong, unique password.

## Contributing

We welcome contributions to nyord-vpn! To contribute:

1. Fork the repository.
2. Create a feature branch for your changes.
3. Make your changes and commit them.
4. Submit a pull request with a clear description of your changes.

For issues or questions, open an issue on the [GitHub repository](https://github.com/yourusername/nyord-vpn).

## License

nyord-vpn is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.

================
File: TODO.md
================
# TODO

Do it! Remember, keep it simple, effective, eyes on the goal!

### 0.1. Enhanced Server Selection

- [ ] Switch to v2/servers API for better efficiency:
  ```python
  def get_servers_cache() -> dict:
      """Fetch and cache full server list from v2/servers:
      1. Single API call to get all servers
      2. Cache for hour
      3. Local filtering by country/load/features
      """
  ```
- [ ] Implement fast server selection:
  ```python
  def select_fastest_server(country_code: str, servers: dict) -> str:
      """Select fastest server:
      1. Filter cached servers by country
      2. Take top 5 by load
      3. Parallel ping test
      4. Return fastest responding server
      """
  ```

### 0.2. Simplified Setup
- [ ] Create one-command initialization:
  ```bash
  nyord init  # Sets up everything needed
  ```
  - Validate OpenVPN installation
  - Create config directories
  - Set up credential storage
  - Test API connectivity
  - Generate initial config

### 0.3. API Usage Optimization
- [ ] Switch to https://api.nordvpn.com/v2/servers for server data fetching (the local "cached" file should be made compatible with the v2 format)
- [ ] Retire both https://api.nordvpn.com/v1/servers/countries and https://api.nordvpn.com/v1/servers/recommendations — the v2 API is better because we don't want a list of all countries in the world, just the ones that have servers :) 
  - Single API call instead of multiple v1 endpoints
  - Local filtering instead of multiple API requests
  - Simpler error handling (only one endpoint)

Keep it focused on these core improvements that directly enhance user experience.

### 0.4. Retry, switch gears

- [ ] Make sure that if the country is not specified, we choose the country randomly
- [ ] Implement a bool parameter "random" that chooses a random server (rather than "the fasterst") from the country 
- [ ] When we're connecting, we should retry connection once and if that's not successful, we should try another random server from the same country. See below for some ideas. 



### 0.5. ANALYSIS FOR "RETRY, SWITCH GEARS"

Out‐of‐the‐box, both re‑engage and tenacity are designed to re‑invoke your function with the same arguments on each attempt. They don’t automatically “step through” a list of alternative parameter values. 

That said, with tenacity you can customize the retry behavior by using callback hooks (such as the “after” hook) to modify the function’s keyword arguments between attempts. For example, you can write a small helper like this:

```python
from tenacity import retry, stop_after_attempt, RetryCallState

def update_B(new_value):
    def after_callback(retry_state: RetryCallState):
        # Update the value for the parameter "B" for the next attempt
        retry_state.kwargs['B'] = new_value
    return after_callback

# First, try with B=5 (the default).
# After two failures, update B to 7.
@retry(stop=stop_after_attempt(2), after=update_B(7))
def func(A, B=5):
    print(f"Attempt with B={B}")
    # Example failure condition
    if B < 11:
        raise Exception("Not high enough!")
    return f"Success with B={B}"

try:
    result = func("some_value")
except Exception as e:
    # You might even chain another retry that sets B to 11 after another round
    print("Initial retry block failed:", e)
    # You can re‑decorate or call a wrapper that uses the next parameter value.
    # For example, you could write a loop that tries B from a list [5,7,11]
    for new_B in [7, 11]:
        try:
            result = func("some_value", B=new_B)
            break
        except Exception:
            continue
    else:
        result = None

print("Result:", result)
```

In this example, the tenacity decorator’s “after” hook is used to modify the value of B for the next attempt. (A similar idea was discussed on Stack Overflow, where an answer demonstrated using an after‑callback to change a parameter dynamically.) citeturn0search0

If you need a more complex sequence (like “try with B=5, if that fails twice then use B=7, then 11”), you might either chain multiple decorators or, more simply, write a custom wrapper that iterates over your list of values and calls your function accordingly.

In summary, while neither library provides a one‑line decorator that automatically “steps” through alternative argument values, tenacity’s flexible callback hooks let you implement that behavior with a bit of extra code.

Both the **Re-Engage** and **Tenacity** libraries provide decorators for retrying functions until success or failure, but they do not natively support the specific use case of trying different arguments upon failure. However, you can implement this functionality using a combination of decorators and custom logic.

## 1. Overview of Libraries

### 1.1. Re-Engage
- **Re-Engage** is a fork of the original backoff library, designed for retrying function calls with decorators like `@backoff.on_exception` and `@backoff.on_predicate`. These decorators allow you to specify conditions under which to retry a function based on exceptions or return values[1].

### 1.2. Tenacity
- **Tenacity** is a general-purpose retrying library that simplifies adding retry behavior to functions. It allows for extensive customization through decorators like `@retry`, which can be configured with various parameters such as maximum attempts, delay between retries, and conditions for retrying[2].

## 2. Implementing Dynamic Argument Retrying

To achieve the desired behavior of trying different arguments after failures, you can create a custom decorator that wraps your function and manages the argument variations. Here’s an example implementation:

```python
from tenacity import retry, stop_after_attempt

def dynamic_retry(args_list):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for args in args_list:
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    print(f"Failed with args {args}: {e}")
            raise Exception("All attempts failed.")
        return wrapper
    return decorator

@dynamic_retry([(5,), (7,), (11,)])  # List of argument tuples
def my_function(b):
    # Simulate a function that may fail
    if b != 11:  # Let's say it fails unless b is 11
        raise ValueError("Failed!")
    return "Success!"

# Usage
result = my_function(5)  # This will try 5, then 7, then 11.
print(result)  # Outputs: Success!
```

### 2.1. Explanation:
- The `dynamic_retry` decorator takes a list of argument tuples.
- The `wrapper` function iterates over these arguments, attempting to call the target function.
- If an exception occurs, it catches the error, logs it, and moves on to the next set of arguments.
- If all attempts fail, it raises an exception.

## 3. Conclusion

While neither Re-Engage nor Tenacity directly supports dynamically changing function arguments upon failure out-of-the-box, you can implement this functionality using custom decorators. This approach allows you to maintain flexibility in your retry logic while leveraging the robust features provided by existing libraries.

Based on the search results and your specific question about retrying with different arguments, I'll provide a comprehensive answer about implementing such functionality.

Let me break this down step by step:

### 3.1. Current State of Retry Libraries

The common retry libraries like `tenacity` and `re-engage` focus primarily on retrying with the same arguments. While they're powerful for basic retry scenarios, they don't directly support changing arguments between retries [0].

### 3.2. Custom Solution Implementation

Here's a custom decorator implementation that allows retrying with different arguments:

```python
from functools import wraps
from typing import List, Any, Callable
import time

def retry_with_different_args(arg_sequences: List[Any], delay: int = 1):
    """
    Retry decorator that attempts the function with different argument values.
    
    Args:
        arg_sequences: List of values to try for the decorated function's first argument
        delay: Delay between retries in seconds
    """
    def decorator(func: Callable):
        @wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            # Replace the first argument with each value in the sequence
            for arg_value in arg_sequences:
                try:
                    new_args = (arg_value,) + args[1:]
                    return func(*new_args, **kwargs)
                except Exception as e:
                    last_exception = e
                    print(f"Attempt with value {arg_value} failed: {str(e)}")
                    time.sleep(delay)
            
            # If we get here, all attempts failed
            raise last_exception or Exception("All retry attempts failed")
            
        return wrapper
    return decorator
```

Example usage:

```python
# Example using the decorator
@retry_with_different_args([5, 7, 11])
def divide_number(divisor: int, number: int = 100):
    if divisor == 7:
        raise ValueError("Don't like 7")
    return number / divisor

# This will try with divisor=5, then 7, then 11
try:
    result = divide_number(5, number=100)
    print(f"Success: {result}")
except Exception as e:
    print(f"Final failure: {e}")
```

### 3.3. Key Points to Consider

1. **Flexibility**: This implementation allows you to specify a sequence of values to try for a specific argument [0].

2. **Error Handling**: Each attempt is wrapped in a try-except block, allowing you to catch and handle specific exceptions [0].

3. **Delay Control**: You can specify delays between attempts to prevent overwhelming systems [0].

### 3.4. Best Practices

1. **Specific Exceptions**: Always catch specific exceptions rather than using a broad Exception catch.

2. **Logging**: Include proper logging to track retry attempts and failures.

3. **Timeout Consideration**: Consider implementing an overall timeout mechanism.

4. **State Management**: Be careful with stateful operations when retrying with different arguments.

### 3.5. Alternative Approach Using Tenacity

While tenacity doesn't directly support changing arguments, you can achieve similar functionality by combining it with a custom retry strategy:

```python
from tenacity import retry, stop_after_attempt
from functools import partial

def retry_sequence(func, arg_sequences):
    for arg in arg_sequences:
        try:
            return func(arg)
        except Exception:
            continue
    raise Exception("All attempts failed")

# Usage example
@retry(stop=stop_after_attempt(1))
def wrapped_function(x):
    return retry_sequence(some_function, [5, 7, 11])
```

This solution provides a way to work with existing retry libraries while adding the functionality to try different arguments, though it's not as elegant as the custom decorator approach.

================
File: uv.lock
================
version = 1
revision = 1
requires-python = ">=3.10"

[[package]]
name = "aiohappyeyeballs"
version = "2.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/08/07/508f9ebba367fc3370162e53a3cfd12f5652ad79f0e0bfdf9f9847c6f159/aiohappyeyeballs-2.4.6.tar.gz", hash = "sha256:9b05052f9042985d32ecbe4b59a77ae19c006a78f1344d7fdad69d28ded3d0b0", size = 21726 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/44/4c/03fb05f56551828ec67ceb3665e5dc51638042d204983a03b0a1541475b6/aiohappyeyeballs-2.4.6-py3-none-any.whl", hash = "sha256:147ec992cf873d74f5062644332c539fcd42956dc69453fe5204195e560517e1", size = 14543 },
]

[[package]]
name = "aiohttp"
version = "3.11.12"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "aiohappyeyeballs" },
    { name = "aiosignal" },
    { name = "async-timeout", marker = "python_full_version < '3.11'" },
    { name = "attrs" },
    { name = "frozenlist" },
    { name = "multidict" },
    { name = "propcache" },
    { name = "yarl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/37/4b/952d49c73084fb790cb5c6ead50848c8e96b4980ad806cf4d2ad341eaa03/aiohttp-3.11.12.tar.gz", hash = "sha256:7603ca26d75b1b86160ce1bbe2787a0b706e592af5b2504e12caa88a217767b0", size = 7673175 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/65/42/3880e133590820aa7bc6d068eb7d8e0ad9fdce9b4663f92b821d3f6b5601/aiohttp-3.11.12-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:aa8a8caca81c0a3e765f19c6953416c58e2f4cc1b84829af01dd1c771bb2f91f", size = 708721 },
    { url = "https://files.pythonhosted.org/packages/d8/8c/04869803bed108b25afad75f94c651b287851843caacbec6677d8f2d572b/aiohttp-3.11.12-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:84ede78acde96ca57f6cf8ccb8a13fbaf569f6011b9a52f870c662d4dc8cd854", size = 468596 },
    { url = "https://files.pythonhosted.org/packages/4f/f4/9074011f0d1335b161c953fb32545b6667cf24465e1932b9767874995c7e/aiohttp-3.11.12-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:584096938a001378484aa4ee54e05dc79c7b9dd933e271c744a97b3b6f644957", size = 455758 },
    { url = "https://files.pythonhosted.org/packages/fd/68/06298c57ef8f534065930b805e6dbd83613f0534447922782fb9920fce28/aiohttp-3.11.12-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:392432a2dde22b86f70dd4a0e9671a349446c93965f261dbaecfaf28813e5c42", size = 1584797 },
    { url = "https://files.pythonhosted.org/packages/bd/1e/cee6b51fcb3b1c4185a7dc62b3113bc136fae07f39386c88c90b7f79f199/aiohttp-3.11.12-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:88d385b8e7f3a870146bf5ea31786ef7463e99eb59e31db56e2315535d811f55", size = 1632535 },
    { url = "https://files.pythonhosted.org/packages/71/1f/42424462b7a09da362e1711090db9f8d68a37a33f0aab51307335517c599/aiohttp-3.11.12-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:b10a47e5390c4b30a0d58ee12581003be52eedd506862ab7f97da7a66805befb", size = 1668484 },
    { url = "https://files.pythonhosted.org/packages/f6/79/0e25542bbe3c2bfd7a12c7a49c7bce73b09a836f65079e4b77bc2bafc89e/aiohttp-3.11.12-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:0b5263dcede17b6b0c41ef0c3ccce847d82a7da98709e75cf7efde3e9e3b5cae", size = 1589708 },
    { url = "https://files.pythonhosted.org/packages/d1/13/93ae26b75e23f7d3a613872e472fae836ca100dc5bde5936ebc93ada8890/aiohttp-3.11.12-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:50c5c7b8aa5443304c55c262c5693b108c35a3b61ef961f1e782dd52a2f559c7", size = 1544752 },
    { url = "https://files.pythonhosted.org/packages/cf/5e/48847fad1b014ef92ef18ea1339a3b58eb81d3bc717b94c3627f5d2a42c5/aiohttp-3.11.12-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:d1c031a7572f62f66f1257db37ddab4cb98bfaf9b9434a3b4840bf3560f5e788", size = 1529417 },
    { url = "https://files.pythonhosted.org/packages/ae/56/fbd4ea019303f4877f0e0b8c9de92e9db24338e7545570d3f275f3c74c53/aiohttp-3.11.12-cp310-cp310-musllinux_1_2_armv7l.whl", hash = "sha256:7e44eba534381dd2687be50cbd5f2daded21575242ecfdaf86bbeecbc38dae8e", size = 1557808 },
    { url = "https://files.pythonhosted.org/packages/f1/43/112189cf6b3c482ecdd6819b420eaa0c2033426f28d741bb7f19db5dd2bb/aiohttp-3.11.12-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:145a73850926018ec1681e734cedcf2716d6a8697d90da11284043b745c286d5", size = 1536765 },
    { url = "https://files.pythonhosted.org/packages/30/12/59986547de8306e06c7b30e547ccda02d29636e152366caba2dd8627bfe1/aiohttp-3.11.12-cp310-cp310-musllinux_1_2_ppc64le.whl", hash = "sha256:2c311e2f63e42c1bf86361d11e2c4a59f25d9e7aabdbdf53dc38b885c5435cdb", size = 1607621 },
    { url = "https://files.pythonhosted.org/packages/aa/9b/af3b323b20df3318ed20d701d8242e523d59c842ca93f23134b05c9d5054/aiohttp-3.11.12-cp310-cp310-musllinux_1_2_s390x.whl", hash = "sha256:ea756b5a7bac046d202a9a3889b9a92219f885481d78cd318db85b15cc0b7bcf", size = 1628977 },
    { url = "https://files.pythonhosted.org/packages/36/62/adf5a331a7bda475cc326dde393fa2bc5849060b1b37ac3d1bee1953f2cd/aiohttp-3.11.12-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:526c900397f3bbc2db9cb360ce9c35134c908961cdd0ac25b1ae6ffcaa2507ff", size = 1564455 },
    { url = "https://files.pythonhosted.org/packages/90/c4/4a24291f22f111a854dfdb54dc94d4e0a5229ccbb7bc7f0bed972aa50410/aiohttp-3.11.12-cp310-cp310-win32.whl", hash = "sha256:b8d3bb96c147b39c02d3db086899679f31958c5d81c494ef0fc9ef5bb1359b3d", size = 416768 },
    { url = "https://files.pythonhosted.org/packages/51/69/5221c8006acb7bb10d9e8e2238fb216571bddc2e00a8d95bcfbe2f579c57/aiohttp-3.11.12-cp310-cp310-win_amd64.whl", hash = "sha256:7fe3d65279bfbee8de0fb4f8c17fc4e893eed2dba21b2f680e930cc2b09075c5", size = 442170 },
    { url = "https://files.pythonhosted.org/packages/9c/38/35311e70196b6a63cfa033a7f741f800aa8a93f57442991cbe51da2394e7/aiohttp-3.11.12-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:87a2e00bf17da098d90d4145375f1d985a81605267e7f9377ff94e55c5d769eb", size = 708797 },
    { url = "https://files.pythonhosted.org/packages/44/3e/46c656e68cbfc4f3fc7cb5d2ba4da6e91607fe83428208028156688f6201/aiohttp-3.11.12-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:b34508f1cd928ce915ed09682d11307ba4b37d0708d1f28e5774c07a7674cac9", size = 468669 },
    { url = "https://files.pythonhosted.org/packages/a0/d6/2088fb4fd1e3ac2bfb24bc172223babaa7cdbb2784d33c75ec09e66f62f8/aiohttp-3.11.12-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:936d8a4f0f7081327014742cd51d320296b56aa6d324461a13724ab05f4b2933", size = 455739 },
    { url = "https://files.pythonhosted.org/packages/e7/dc/c443a6954a56f4a58b5efbfdf23cc6f3f0235e3424faf5a0c56264d5c7bb/aiohttp-3.11.12-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2de1378f72def7dfb5dbd73d86c19eda0ea7b0a6873910cc37d57e80f10d64e1", size = 1685858 },
    { url = "https://files.pythonhosted.org/packages/25/67/2d5b3aaade1d5d01c3b109aa76e3aa9630531252cda10aa02fb99b0b11a1/aiohttp-3.11.12-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:b9d45dbb3aaec05cf01525ee1a7ac72de46a8c425cb75c003acd29f76b1ffe94", size = 1743829 },
    { url = "https://files.pythonhosted.org/packages/90/9b/9728fe9a3e1b8521198455d027b0b4035522be18f504b24c5d38d59e7278/aiohttp-3.11.12-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:930ffa1925393381e1e0a9b82137fa7b34c92a019b521cf9f41263976666a0d6", size = 1785587 },
    { url = "https://files.pythonhosted.org/packages/ce/cf/28fbb43d4ebc1b4458374a3c7b6db3b556a90e358e9bbcfe6d9339c1e2b6/aiohttp-3.11.12-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8340def6737118f5429a5df4e88f440746b791f8f1c4ce4ad8a595f42c980bd5", size = 1675319 },
    { url = "https://files.pythonhosted.org/packages/e5/d2/006c459c11218cabaa7bca401f965c9cc828efbdea7e1615d4644eaf23f7/aiohttp-3.11.12-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:4016e383f91f2814e48ed61e6bda7d24c4d7f2402c75dd28f7e1027ae44ea204", size = 1619982 },
    { url = "https://files.pythonhosted.org/packages/9d/83/ca425891ebd37bee5d837110f7fddc4d808a7c6c126a7d1b5c3ad72fc6ba/aiohttp-3.11.12-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:3c0600bcc1adfaaac321422d615939ef300df81e165f6522ad096b73439c0f58", size = 1654176 },
    { url = "https://files.pythonhosted.org/packages/25/df/047b1ce88514a1b4915d252513640184b63624e7914e41d846668b8edbda/aiohttp-3.11.12-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:0450ada317a65383b7cce9576096150fdb97396dcfe559109b403c7242faffef", size = 1660198 },
    { url = "https://files.pythonhosted.org/packages/d3/cc/6ecb8e343f0902528620b9dbd567028a936d5489bebd7dbb0dd0914f4fdb/aiohttp-3.11.12-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:850ff6155371fd802a280f8d369d4e15d69434651b844bde566ce97ee2277420", size = 1650186 },
    { url = "https://files.pythonhosted.org/packages/f8/f8/453df6dd69256ca8c06c53fc8803c9056e2b0b16509b070f9a3b4bdefd6c/aiohttp-3.11.12-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:8fd12d0f989c6099e7b0f30dc6e0d1e05499f3337461f0b2b0dadea6c64b89df", size = 1733063 },
    { url = "https://files.pythonhosted.org/packages/55/f8/540160787ff3000391de0e5d0d1d33be4c7972f933c21991e2ea105b2d5e/aiohttp-3.11.12-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:76719dd521c20a58a6c256d058547b3a9595d1d885b830013366e27011ffe804", size = 1755306 },
    { url = "https://files.pythonhosted.org/packages/30/7d/49f3bfdfefd741576157f8f91caa9ff61a6f3d620ca6339268327518221b/aiohttp-3.11.12-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:97fe431f2ed646a3b56142fc81d238abcbaff08548d6912acb0b19a0cadc146b", size = 1692909 },
    { url = "https://files.pythonhosted.org/packages/40/9c/8ce00afd6f6112ce9a2309dc490fea376ae824708b94b7b5ea9cba979d1d/aiohttp-3.11.12-cp311-cp311-win32.whl", hash = "sha256:e10c440d142fa8b32cfdb194caf60ceeceb3e49807072e0dc3a8887ea80e8c16", size = 416584 },
    { url = "https://files.pythonhosted.org/packages/35/97/4d3c5f562f15830de472eb10a7a222655d750839943e0e6d915ef7e26114/aiohttp-3.11.12-cp311-cp311-win_amd64.whl", hash = "sha256:246067ba0cf5560cf42e775069c5d80a8989d14a7ded21af529a4e10e3e0f0e6", size = 442674 },
    { url = "https://files.pythonhosted.org/packages/4d/d0/94346961acb476569fca9a644cc6f9a02f97ef75961a6b8d2b35279b8d1f/aiohttp-3.11.12-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:e392804a38353900c3fd8b7cacbea5132888f7129f8e241915e90b85f00e3250", size = 704837 },
    { url = "https://files.pythonhosted.org/packages/a9/af/05c503f1cc8f97621f199ef4b8db65fb88b8bc74a26ab2adb74789507ad3/aiohttp-3.11.12-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:8fa1510b96c08aaad49303ab11f8803787c99222288f310a62f493faf883ede1", size = 464218 },
    { url = "https://files.pythonhosted.org/packages/f2/48/b9949eb645b9bd699153a2ec48751b985e352ab3fed9d98c8115de305508/aiohttp-3.11.12-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:dc065a4285307607df3f3686363e7f8bdd0d8ab35f12226362a847731516e42c", size = 456166 },
    { url = "https://files.pythonhosted.org/packages/14/fb/980981807baecb6f54bdd38beb1bd271d9a3a786e19a978871584d026dcf/aiohttp-3.11.12-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:cddb31f8474695cd61fc9455c644fc1606c164b93bff2490390d90464b4655df", size = 1682528 },
    { url = "https://files.pythonhosted.org/packages/90/cb/77b1445e0a716914e6197b0698b7a3640590da6c692437920c586764d05b/aiohttp-3.11.12-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:9dec0000d2d8621d8015c293e24589d46fa218637d820894cb7356c77eca3259", size = 1737154 },
    { url = "https://files.pythonhosted.org/packages/ff/24/d6fb1f4cede9ccbe98e4def6f3ed1e1efcb658871bbf29f4863ec646bf38/aiohttp-3.11.12-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:e3552fe98e90fdf5918c04769f338a87fa4f00f3b28830ea9b78b1bdc6140e0d", size = 1793435 },
    { url = "https://files.pythonhosted.org/packages/17/e2/9f744cee0861af673dc271a3351f59ebd5415928e20080ab85be25641471/aiohttp-3.11.12-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6dfe7f984f28a8ae94ff3a7953cd9678550dbd2a1f9bda5dd9c5ae627744c78e", size = 1692010 },
    { url = "https://files.pythonhosted.org/packages/90/c4/4a1235c1df544223eb57ba553ce03bc706bdd065e53918767f7fa1ff99e0/aiohttp-3.11.12-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a481a574af914b6e84624412666cbfbe531a05667ca197804ecc19c97b8ab1b0", size = 1619481 },
    { url = "https://files.pythonhosted.org/packages/60/70/cf12d402a94a33abda86dd136eb749b14c8eb9fec1e16adc310e25b20033/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1987770fb4887560363b0e1a9b75aa303e447433c41284d3af2840a2f226d6e0", size = 1641578 },
    { url = "https://files.pythonhosted.org/packages/1b/25/7211973fda1f5e833fcfd98ccb7f9ce4fbfc0074e3e70c0157a751d00db8/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:a4ac6a0f0f6402854adca4e3259a623f5c82ec3f0c049374133bcb243132baf9", size = 1684463 },
    { url = "https://files.pythonhosted.org/packages/93/60/b5905b4d0693f6018b26afa9f2221fefc0dcbd3773fe2dff1a20fb5727f1/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:c96a43822f1f9f69cc5c3706af33239489a6294be486a0447fb71380070d4d5f", size = 1646691 },
    { url = "https://files.pythonhosted.org/packages/b4/fc/ba1b14d6fdcd38df0b7c04640794b3683e949ea10937c8a58c14d697e93f/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:a5e69046f83c0d3cb8f0d5bd9b8838271b1bc898e01562a04398e160953e8eb9", size = 1702269 },
    { url = "https://files.pythonhosted.org/packages/5e/39/18c13c6f658b2ba9cc1e0c6fb2d02f98fd653ad2addcdf938193d51a9c53/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:68d54234c8d76d8ef74744f9f9fc6324f1508129e23da8883771cdbb5818cbef", size = 1734782 },
    { url = "https://files.pythonhosted.org/packages/9f/d2/ccc190023020e342419b265861877cd8ffb75bec37b7ddd8521dd2c6deb8/aiohttp-3.11.12-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:c9fd9dcf9c91affe71654ef77426f5cf8489305e1c66ed4816f5a21874b094b9", size = 1694740 },
    { url = "https://files.pythonhosted.org/packages/3f/54/186805bcada64ea90ea909311ffedcd74369bfc6e880d39d2473314daa36/aiohttp-3.11.12-cp312-cp312-win32.whl", hash = "sha256:0ed49efcd0dc1611378beadbd97beb5d9ca8fe48579fc04a6ed0844072261b6a", size = 411530 },
    { url = "https://files.pythonhosted.org/packages/3d/63/5eca549d34d141bcd9de50d4e59b913f3641559460c739d5e215693cb54a/aiohttp-3.11.12-cp312-cp312-win_amd64.whl", hash = "sha256:54775858c7f2f214476773ce785a19ee81d1294a6bedc5cc17225355aab74802", size = 437860 },
    { url = "https://files.pythonhosted.org/packages/c3/9b/cea185d4b543ae08ee478373e16653722c19fcda10d2d0646f300ce10791/aiohttp-3.11.12-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:413ad794dccb19453e2b97c2375f2ca3cdf34dc50d18cc2693bd5aed7d16f4b9", size = 698148 },
    { url = "https://files.pythonhosted.org/packages/91/5c/80d47fe7749fde584d1404a68ade29bcd7e58db8fa11fa38e8d90d77e447/aiohttp-3.11.12-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:4a93d28ed4b4b39e6f46fd240896c29b686b75e39cc6992692e3922ff6982b4c", size = 460831 },
    { url = "https://files.pythonhosted.org/packages/8e/f9/de568f8a8ca6b061d157c50272620c53168d6e3eeddae78dbb0f7db981eb/aiohttp-3.11.12-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:d589264dbba3b16e8951b6f145d1e6b883094075283dafcab4cdd564a9e353a0", size = 453122 },
    { url = "https://files.pythonhosted.org/packages/8b/fd/b775970a047543bbc1d0f66725ba72acef788028fce215dc959fd15a8200/aiohttp-3.11.12-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e5148ca8955affdfeb864aca158ecae11030e952b25b3ae15d4e2b5ba299bad2", size = 1665336 },
    { url = "https://files.pythonhosted.org/packages/82/9b/aff01d4f9716245a1b2965f02044e4474fadd2bcfe63cf249ca788541886/aiohttp-3.11.12-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:525410e0790aab036492eeea913858989c4cb070ff373ec3bc322d700bdf47c1", size = 1718111 },
    { url = "https://files.pythonhosted.org/packages/e0/a9/166fd2d8b2cc64f08104aa614fad30eee506b563154081bf88ce729bc665/aiohttp-3.11.12-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9bd8695be2c80b665ae3f05cb584093a1e59c35ecb7d794d1edd96e8cc9201d7", size = 1775293 },
    { url = "https://files.pythonhosted.org/packages/13/c5/0d3c89bd9e36288f10dc246f42518ce8e1c333f27636ac78df091c86bb4a/aiohttp-3.11.12-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:f0203433121484b32646a5f5ea93ae86f3d9559d7243f07e8c0eab5ff8e3f70e", size = 1677338 },
    { url = "https://files.pythonhosted.org/packages/72/b2/017db2833ef537be284f64ead78725984db8a39276c1a9a07c5c7526e238/aiohttp-3.11.12-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:40cd36749a1035c34ba8d8aaf221b91ca3d111532e5ccb5fa8c3703ab1b967ed", size = 1603365 },
    { url = "https://files.pythonhosted.org/packages/fc/72/b66c96a106ec7e791e29988c222141dd1219d7793ffb01e72245399e08d2/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:a7442662afebbf7b4c6d28cb7aab9e9ce3a5df055fc4116cc7228192ad6cb484", size = 1618464 },
    { url = "https://files.pythonhosted.org/packages/3f/50/e68a40f267b46a603bab569d48d57f23508801614e05b3369898c5b2910a/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:8a2fb742ef378284a50766e985804bd6adb5adb5aa781100b09befdbfa757b65", size = 1657827 },
    { url = "https://files.pythonhosted.org/packages/c5/1d/aafbcdb1773d0ba7c20793ebeedfaba1f3f7462f6fc251f24983ed738aa7/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:2cee3b117a8d13ab98b38d5b6bdcd040cfb4181068d05ce0c474ec9db5f3c5bb", size = 1616700 },
    { url = "https://files.pythonhosted.org/packages/b0/5e/6cd9724a2932f36e2a6b742436a36d64784322cfb3406ca773f903bb9a70/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:f6a19bcab7fbd8f8649d6595624856635159a6527861b9cdc3447af288a00c00", size = 1685643 },
    { url = "https://files.pythonhosted.org/packages/8b/38/ea6c91d5c767fd45a18151675a07c710ca018b30aa876a9f35b32fa59761/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:e4cecdb52aaa9994fbed6b81d4568427b6002f0a91c322697a4bfcc2b2363f5a", size = 1715487 },
    { url = "https://files.pythonhosted.org/packages/8e/24/e9edbcb7d1d93c02e055490348df6f955d675e85a028c33babdcaeda0853/aiohttp-3.11.12-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:30f546358dfa0953db92ba620101fefc81574f87b2346556b90b5f3ef16e55ce", size = 1672948 },
    { url = "https://files.pythonhosted.org/packages/25/be/0b1fb737268e003198f25c3a68c2135e76e4754bf399a879b27bd508a003/aiohttp-3.11.12-cp313-cp313-win32.whl", hash = "sha256:ce1bb21fc7d753b5f8a5d5a4bae99566386b15e716ebdb410154c16c91494d7f", size = 410396 },
    { url = "https://files.pythonhosted.org/packages/68/fd/677def96a75057b0a26446b62f8fbb084435b20a7d270c99539c26573bfd/aiohttp-3.11.12-cp313-cp313-win_amd64.whl", hash = "sha256:f7914ab70d2ee8ab91c13e5402122edbc77821c66d2758abb53aabe87f013287", size = 436234 },
]

[[package]]
name = "aiosignal"
version = "1.3.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "frozenlist" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ba/b5/6d55e80f6d8a08ce22b982eafa278d823b541c925f11ee774b0b9c43473d/aiosignal-1.3.2.tar.gz", hash = "sha256:a8c255c66fafb1e499c9351d0bf32ff2d8a0321595ebac3b93713656d2436f54", size = 19424 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ec/6a/bc7e17a3e87a2985d3e8f4da4cd0f481060eb78fb08596c42be62c90a4d9/aiosignal-1.3.2-py2.py3-none-any.whl", hash = "sha256:45cde58e409a301715980c2b01d0c28bdde3770d8290b5eb2173759d9acb31a5", size = 7597 },
]

[[package]]
name = "annotated-types"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ee/67/531ea369ba64dcff5ec9c3402f9f51bf748cec26dde048a2f973a4eea7f5/annotated_types-0.7.0.tar.gz", hash = "sha256:aff07c09a53a08bc8cfccb9c85b05f1aa9a2a6f23728d790723543408344ce89", size = 16081 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/b6/6307fbef88d9b5ee7421e68d78a9f162e0da4900bc5f5793f6d3d0e34fb8/annotated_types-0.7.0-py3-none-any.whl", hash = "sha256:1f02e8b43a8fbbc3f3e0d4f0f4bfc8131bcb4eebe8849b8e5c773f3a1c582a53", size = 13643 },
]

[[package]]
name = "async-timeout"
version = "5.0.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/a5/ae/136395dfbfe00dfc94da3f3e136d0b13f394cba8f4841120e34226265780/async_timeout-5.0.1.tar.gz", hash = "sha256:d9321a7a3d5a6a5e187e824d2fa0793ce379a202935782d555d6e9d2735677d3", size = 9274 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fe/ba/e2081de779ca30d473f21f5b30e0e737c438205440784c7dfc81efc2b029/async_timeout-5.0.1-py3-none-any.whl", hash = "sha256:39e3809566ff85354557ec2398b55e096c8364bacac9405a7a1fa429e77fe76c", size = 6233 },
]

[[package]]
name = "attrs"
version = "25.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/49/7c/fdf464bcc51d23881d110abd74b512a42b3d5d376a55a831b44c603ae17f/attrs-25.1.0.tar.gz", hash = "sha256:1c97078a80c814273a76b2a298a932eb681c87415c11dee0a6921de7f1b02c3e", size = 810562 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fc/30/d4986a882011f9df997a55e6becd864812ccfcd821d64aac8570ee39f719/attrs-25.1.0-py3-none-any.whl", hash = "sha256:c75a69e28a550a7e93789579c22aa26b0f5b83b75dc4e08fe092980051e1090a", size = 63152 },
]

[[package]]
name = "autoflake"
version = "2.3.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pyflakes" },
    { name = "tomli", marker = "python_full_version < '3.11'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/2a/cb/486f912d6171bc5748c311a2984a301f4e2d054833a1da78485866c71522/autoflake-2.3.1.tar.gz", hash = "sha256:c98b75dc5b0a86459c4f01a1d32ac7eb4338ec4317a4469515ff1e687ecd909e", size = 27642 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a2/ee/3fd29bf416eb4f1c5579cf12bf393ae954099258abd7bde03c4f9716ef6b/autoflake-2.3.1-py3-none-any.whl", hash = "sha256:3ae7495db9084b7b32818b4140e6dc4fc280b712fb414f5b8fe57b0a8e85a840", size = 32483 },
]

[[package]]
name = "backoff"
version = "2.2.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/47/d7/5bbeb12c44d7c4f2fb5b56abce497eb5ed9f34d85701de869acedd602619/backoff-2.2.1.tar.gz", hash = "sha256:03f829f5bb1923180821643f8753b0502c3b682293992485b0eef2807afa5cba", size = 17001 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/df/73/b6e24bd22e6720ca8ee9a85a0c4a2971af8497d8f3193fa05390cbd46e09/backoff-2.2.1-py3-none-any.whl", hash = "sha256:63579f9a0628e06278f7e47b7d7d5b6ce20dc65c5e96a6f3ca99a6adca0396e8", size = 15148 },
]

[[package]]
name = "backports-tarfile"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/86/72/cd9b395f25e290e633655a100af28cb253e4393396264a98bd5f5951d50f/backports_tarfile-1.2.0.tar.gz", hash = "sha256:d75e02c268746e1b8144c278978b6e98e85de6ad16f8e4b0844a154557eca991", size = 86406 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b9/fa/123043af240e49752f1c4bd24da5053b6bd00cad78c2be53c0d1e8b975bc/backports.tarfile-1.2.0-py3-none-any.whl", hash = "sha256:77e284d754527b01fb1e6fa8a1afe577858ebe4e9dad8919e34c862cb399bc34", size = 30181 },
]

[[package]]
name = "black"
version = "25.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "click" },
    { name = "mypy-extensions" },
    { name = "packaging" },
    { name = "pathspec" },
    { name = "platformdirs" },
    { name = "tomli", marker = "python_full_version < '3.11'" },
    { name = "typing-extensions", marker = "python_full_version < '3.11'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/94/49/26a7b0f3f35da4b5a65f081943b7bcd22d7002f5f0fb8098ec1ff21cb6ef/black-25.1.0.tar.gz", hash = "sha256:33496d5cd1222ad73391352b4ae8da15253c5de89b93a80b3e2c8d9a19ec2666", size = 649449 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/4d/3b/4ba3f93ac8d90410423fdd31d7541ada9bcee1df32fb90d26de41ed40e1d/black-25.1.0-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:759e7ec1e050a15f89b770cefbf91ebee8917aac5c20483bc2d80a6c3a04df32", size = 1629419 },
    { url = "https://files.pythonhosted.org/packages/b4/02/0bde0485146a8a5e694daed47561785e8b77a0466ccc1f3e485d5ef2925e/black-25.1.0-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:0e519ecf93120f34243e6b0054db49c00a35f84f195d5bce7e9f5cfc578fc2da", size = 1461080 },
    { url = "https://files.pythonhosted.org/packages/52/0e/abdf75183c830eaca7589144ff96d49bce73d7ec6ad12ef62185cc0f79a2/black-25.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:055e59b198df7ac0b7efca5ad7ff2516bca343276c466be72eb04a3bcc1f82d7", size = 1766886 },
    { url = "https://files.pythonhosted.org/packages/dc/a6/97d8bb65b1d8a41f8a6736222ba0a334db7b7b77b8023ab4568288f23973/black-25.1.0-cp310-cp310-win_amd64.whl", hash = "sha256:db8ea9917d6f8fc62abd90d944920d95e73c83a5ee3383493e35d271aca872e9", size = 1419404 },
    { url = "https://files.pythonhosted.org/packages/7e/4f/87f596aca05c3ce5b94b8663dbfe242a12843caaa82dd3f85f1ffdc3f177/black-25.1.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:a39337598244de4bae26475f77dda852ea00a93bd4c728e09eacd827ec929df0", size = 1614372 },
    { url = "https://files.pythonhosted.org/packages/e7/d0/2c34c36190b741c59c901e56ab7f6e54dad8df05a6272a9747ecef7c6036/black-25.1.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:96c1c7cd856bba8e20094e36e0f948718dc688dba4a9d78c3adde52b9e6c2299", size = 1442865 },
    { url = "https://files.pythonhosted.org/packages/21/d4/7518c72262468430ead45cf22bd86c883a6448b9eb43672765d69a8f1248/black-25.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:bce2e264d59c91e52d8000d507eb20a9aca4a778731a08cfff7e5ac4a4bb7096", size = 1749699 },
    { url = "https://files.pythonhosted.org/packages/58/db/4f5beb989b547f79096e035c4981ceb36ac2b552d0ac5f2620e941501c99/black-25.1.0-cp311-cp311-win_amd64.whl", hash = "sha256:172b1dbff09f86ce6f4eb8edf9dede08b1fce58ba194c87d7a4f1a5aa2f5b3c2", size = 1428028 },
    { url = "https://files.pythonhosted.org/packages/83/71/3fe4741df7adf015ad8dfa082dd36c94ca86bb21f25608eb247b4afb15b2/black-25.1.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:4b60580e829091e6f9238c848ea6750efed72140b91b048770b64e74fe04908b", size = 1650988 },
    { url = "https://files.pythonhosted.org/packages/13/f3/89aac8a83d73937ccd39bbe8fc6ac8860c11cfa0af5b1c96d081facac844/black-25.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:1e2978f6df243b155ef5fa7e558a43037c3079093ed5d10fd84c43900f2d8ecc", size = 1453985 },
    { url = "https://files.pythonhosted.org/packages/6f/22/b99efca33f1f3a1d2552c714b1e1b5ae92efac6c43e790ad539a163d1754/black-25.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:3b48735872ec535027d979e8dcb20bf4f70b5ac75a8ea99f127c106a7d7aba9f", size = 1783816 },
    { url = "https://files.pythonhosted.org/packages/18/7e/a27c3ad3822b6f2e0e00d63d58ff6299a99a5b3aee69fa77cd4b0076b261/black-25.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:ea0213189960bda9cf99be5b8c8ce66bb054af5e9e861249cd23471bd7b0b3ba", size = 1440860 },
    { url = "https://files.pythonhosted.org/packages/98/87/0edf98916640efa5d0696e1abb0a8357b52e69e82322628f25bf14d263d1/black-25.1.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:8f0b18a02996a836cc9c9c78e5babec10930862827b1b724ddfe98ccf2f2fe4f", size = 1650673 },
    { url = "https://files.pythonhosted.org/packages/52/e5/f7bf17207cf87fa6e9b676576749c6b6ed0d70f179a3d812c997870291c3/black-25.1.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:afebb7098bfbc70037a053b91ae8437c3857482d3a690fefc03e9ff7aa9a5fd3", size = 1453190 },
    { url = "https://files.pythonhosted.org/packages/e3/ee/adda3d46d4a9120772fae6de454c8495603c37c4c3b9c60f25b1ab6401fe/black-25.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:030b9759066a4ee5e5aca28c3c77f9c64789cdd4de8ac1df642c40b708be6171", size = 1782926 },
    { url = "https://files.pythonhosted.org/packages/cc/64/94eb5f45dcb997d2082f097a3944cfc7fe87e071907f677e80788a2d7b7a/black-25.1.0-cp313-cp313-win_amd64.whl", hash = "sha256:a22f402b410566e2d1c950708c77ebf5ebd5d0d88a6a2e87c86d9fb48afa0d18", size = 1442613 },
    { url = "https://files.pythonhosted.org/packages/09/71/54e999902aed72baf26bca0d50781b01838251a462612966e9fc4891eadd/black-25.1.0-py3-none-any.whl", hash = "sha256:95e8176dae143ba9097f351d174fdaf0ccd29efb414b362ae3fd72bf0f710717", size = 207646 },
]

[[package]]
name = "bleach"
version = "6.2.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "webencodings" },
]
sdist = { url = "https://files.pythonhosted.org/packages/76/9a/0e33f5054c54d349ea62c277191c020c2d6ef1d65ab2cb1993f91ec846d1/bleach-6.2.0.tar.gz", hash = "sha256:123e894118b8a599fd80d3ec1a6d4cc7ce4e5882b1317a7e1ba69b56e95f991f", size = 203083 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fc/55/96142937f66150805c25c4d0f31ee4132fd33497753400734f9dfdcbdc66/bleach-6.2.0-py3-none-any.whl", hash = "sha256:117d9c6097a7c3d22fd578fcd8d35ff1e125df6736f554da4e432fdd63f31e5e", size = 163406 },
]

[[package]]
name = "build"
version = "1.2.2.post1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "os_name == 'nt'" },
    { name = "importlib-metadata", marker = "python_full_version < '3.10.2'" },
    { name = "packaging" },
    { name = "pyproject-hooks" },
    { name = "tomli", marker = "python_full_version < '3.11'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/7d/46/aeab111f8e06793e4f0e421fcad593d547fb8313b50990f31681ee2fb1ad/build-1.2.2.post1.tar.gz", hash = "sha256:b36993e92ca9375a219c99e606a122ff365a760a2d4bba0caa09bd5278b608b7", size = 46701 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/84/c2/80633736cd183ee4a62107413def345f7e6e3c01563dbca1417363cf957e/build-1.2.2.post1-py3-none-any.whl", hash = "sha256:1d61c0887fa860c01971625baae8bdd338e517b836a2f70dd1f7aa3a6b2fc5b5", size = 22950 },
]

[[package]]
name = "certifi"
version = "2025.1.31"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1c/ab/c9f1e32b7b1bf505bf26f0ef697775960db7932abeb7b516de930ba2705f/certifi-2025.1.31.tar.gz", hash = "sha256:3d5da6925056f6f18f119200434a4780a94263f10d1c21d032a6f6b2baa20651", size = 167577 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/38/fc/bce832fd4fd99766c04d1ee0eead6b0ec6486fb100ae5e74c1d91292b982/certifi-2025.1.31-py3-none-any.whl", hash = "sha256:ca78db4565a652026a4db2bcdf68f2fb589ea80d0be70e03929ed730746b84fe", size = 166393 },
]

[[package]]
name = "cffi"
version = "1.17.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pycparser" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/97/c783634659c2920c3fc70419e3af40972dbaf758daa229a7d6ea6135c90d/cffi-1.17.1.tar.gz", hash = "sha256:1c39c6016c32bc48dd54561950ebd6836e1670f2ae46128f67cf49e789c52824", size = 516621 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/90/07/f44ca684db4e4f08a3fdc6eeb9a0d15dc6883efc7b8c90357fdbf74e186c/cffi-1.17.1-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:df8b1c11f177bc2313ec4b2d46baec87a5f3e71fc8b45dab2ee7cae86d9aba14", size = 182191 },
    { url = "https://files.pythonhosted.org/packages/08/fd/cc2fedbd887223f9f5d170c96e57cbf655df9831a6546c1727ae13fa977a/cffi-1.17.1-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:8f2cdc858323644ab277e9bb925ad72ae0e67f69e804f4898c070998d50b1a67", size = 178592 },
    { url = "https://files.pythonhosted.org/packages/de/cc/4635c320081c78d6ffc2cab0a76025b691a91204f4aa317d568ff9280a2d/cffi-1.17.1-cp310-cp310-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:edae79245293e15384b51f88b00613ba9f7198016a5948b5dddf4917d4d26382", size = 426024 },
    { url = "https://files.pythonhosted.org/packages/b6/7b/3b2b250f3aab91abe5f8a51ada1b717935fdaec53f790ad4100fe2ec64d1/cffi-1.17.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:45398b671ac6d70e67da8e4224a065cec6a93541bb7aebe1b198a61b58c7b702", size = 448188 },
    { url = "https://files.pythonhosted.org/packages/d3/48/1b9283ebbf0ec065148d8de05d647a986c5f22586b18120020452fff8f5d/cffi-1.17.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ad9413ccdeda48c5afdae7e4fa2192157e991ff761e7ab8fdd8926f40b160cc3", size = 455571 },
    { url = "https://files.pythonhosted.org/packages/40/87/3b8452525437b40f39ca7ff70276679772ee7e8b394934ff60e63b7b090c/cffi-1.17.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5da5719280082ac6bd9aa7becb3938dc9f9cbd57fac7d2871717b1feb0902ab6", size = 436687 },
    { url = "https://files.pythonhosted.org/packages/8d/fb/4da72871d177d63649ac449aec2e8a29efe0274035880c7af59101ca2232/cffi-1.17.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:2bb1a08b8008b281856e5971307cc386a8e9c5b625ac297e853d36da6efe9c17", size = 446211 },
    { url = "https://files.pythonhosted.org/packages/ab/a0/62f00bcb411332106c02b663b26f3545a9ef136f80d5df746c05878f8c4b/cffi-1.17.1-cp310-cp310-musllinux_1_1_aarch64.whl", hash = "sha256:045d61c734659cc045141be4bae381a41d89b741f795af1dd018bfb532fd0df8", size = 461325 },
    { url = "https://files.pythonhosted.org/packages/36/83/76127035ed2e7e27b0787604d99da630ac3123bfb02d8e80c633f218a11d/cffi-1.17.1-cp310-cp310-musllinux_1_1_i686.whl", hash = "sha256:6883e737d7d9e4899a8a695e00ec36bd4e5e4f18fabe0aca0efe0a4b44cdb13e", size = 438784 },
    { url = "https://files.pythonhosted.org/packages/21/81/a6cd025db2f08ac88b901b745c163d884641909641f9b826e8cb87645942/cffi-1.17.1-cp310-cp310-musllinux_1_1_x86_64.whl", hash = "sha256:6b8b4a92e1c65048ff98cfe1f735ef8f1ceb72e3d5f0c25fdb12087a23da22be", size = 461564 },
    { url = "https://files.pythonhosted.org/packages/f8/fe/4d41c2f200c4a457933dbd98d3cf4e911870877bd94d9656cc0fcb390681/cffi-1.17.1-cp310-cp310-win32.whl", hash = "sha256:c9c3d058ebabb74db66e431095118094d06abf53284d9c81f27300d0e0d8bc7c", size = 171804 },
    { url = "https://files.pythonhosted.org/packages/d1/b6/0b0f5ab93b0df4acc49cae758c81fe4e5ef26c3ae2e10cc69249dfd8b3ab/cffi-1.17.1-cp310-cp310-win_amd64.whl", hash = "sha256:0f048dcf80db46f0098ccac01132761580d28e28bc0f78ae0d58048063317e15", size = 181299 },
    { url = "https://files.pythonhosted.org/packages/6b/f4/927e3a8899e52a27fa57a48607ff7dc91a9ebe97399b357b85a0c7892e00/cffi-1.17.1-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:a45e3c6913c5b87b3ff120dcdc03f6131fa0065027d0ed7ee6190736a74cd401", size = 182264 },
    { url = "https://files.pythonhosted.org/packages/6c/f5/6c3a8efe5f503175aaddcbea6ad0d2c96dad6f5abb205750d1b3df44ef29/cffi-1.17.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:30c5e0cb5ae493c04c8b42916e52ca38079f1b235c2f8ae5f4527b963c401caf", size = 178651 },
    { url = "https://files.pythonhosted.org/packages/94/dd/a3f0118e688d1b1a57553da23b16bdade96d2f9bcda4d32e7d2838047ff7/cffi-1.17.1-cp311-cp311-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f75c7ab1f9e4aca5414ed4d8e5c0e303a34f4421f8a0d47a4d019ceff0ab6af4", size = 445259 },
    { url = "https://files.pythonhosted.org/packages/2e/ea/70ce63780f096e16ce8588efe039d3c4f91deb1dc01e9c73a287939c79a6/cffi-1.17.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a1ed2dd2972641495a3ec98445e09766f077aee98a1c896dcb4ad0d303628e41", size = 469200 },
    { url = "https://files.pythonhosted.org/packages/1c/a0/a4fa9f4f781bda074c3ddd57a572b060fa0df7655d2a4247bbe277200146/cffi-1.17.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:46bf43160c1a35f7ec506d254e5c890f3c03648a4dbac12d624e4490a7046cd1", size = 477235 },
    { url = "https://files.pythonhosted.org/packages/62/12/ce8710b5b8affbcdd5c6e367217c242524ad17a02fe5beec3ee339f69f85/cffi-1.17.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:a24ed04c8ffd54b0729c07cee15a81d964e6fee0e3d4d342a27b020d22959dc6", size = 459721 },
    { url = "https://files.pythonhosted.org/packages/ff/6b/d45873c5e0242196f042d555526f92aa9e0c32355a1be1ff8c27f077fd37/cffi-1.17.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:610faea79c43e44c71e1ec53a554553fa22321b65fae24889706c0a84d4ad86d", size = 467242 },
    { url = "https://files.pythonhosted.org/packages/1a/52/d9a0e523a572fbccf2955f5abe883cfa8bcc570d7faeee06336fbd50c9fc/cffi-1.17.1-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:a9b15d491f3ad5d692e11f6b71f7857e7835eb677955c00cc0aefcd0669adaf6", size = 477999 },
    { url = "https://files.pythonhosted.org/packages/44/74/f2a2460684a1a2d00ca799ad880d54652841a780c4c97b87754f660c7603/cffi-1.17.1-cp311-cp311-musllinux_1_1_i686.whl", hash = "sha256:de2ea4b5833625383e464549fec1bc395c1bdeeb5f25c4a3a82b5a8c756ec22f", size = 454242 },
    { url = "https://files.pythonhosted.org/packages/f8/4a/34599cac7dfcd888ff54e801afe06a19c17787dfd94495ab0c8d35fe99fb/cffi-1.17.1-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:fc48c783f9c87e60831201f2cce7f3b2e4846bf4d8728eabe54d60700b318a0b", size = 478604 },
    { url = "https://files.pythonhosted.org/packages/34/33/e1b8a1ba29025adbdcda5fb3a36f94c03d771c1b7b12f726ff7fef2ebe36/cffi-1.17.1-cp311-cp311-win32.whl", hash = "sha256:85a950a4ac9c359340d5963966e3e0a94a676bd6245a4b55bc43949eee26a655", size = 171727 },
    { url = "https://files.pythonhosted.org/packages/3d/97/50228be003bb2802627d28ec0627837ac0bf35c90cf769812056f235b2d1/cffi-1.17.1-cp311-cp311-win_amd64.whl", hash = "sha256:caaf0640ef5f5517f49bc275eca1406b0ffa6aa184892812030f04c2abf589a0", size = 181400 },
    { url = "https://files.pythonhosted.org/packages/5a/84/e94227139ee5fb4d600a7a4927f322e1d4aea6fdc50bd3fca8493caba23f/cffi-1.17.1-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:805b4371bf7197c329fcb3ead37e710d1bca9da5d583f5073b799d5c5bd1eee4", size = 183178 },
    { url = "https://files.pythonhosted.org/packages/da/ee/fb72c2b48656111c4ef27f0f91da355e130a923473bf5ee75c5643d00cca/cffi-1.17.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:733e99bc2df47476e3848417c5a4540522f234dfd4ef3ab7fafdf555b082ec0c", size = 178840 },
    { url = "https://files.pythonhosted.org/packages/cc/b6/db007700f67d151abadf508cbfd6a1884f57eab90b1bb985c4c8c02b0f28/cffi-1.17.1-cp312-cp312-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:1257bdabf294dceb59f5e70c64a3e2f462c30c7ad68092d01bbbfb1c16b1ba36", size = 454803 },
    { url = "https://files.pythonhosted.org/packages/1a/df/f8d151540d8c200eb1c6fba8cd0dfd40904f1b0682ea705c36e6c2e97ab3/cffi-1.17.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:da95af8214998d77a98cc14e3a3bd00aa191526343078b530ceb0bd710fb48a5", size = 478850 },
    { url = "https://files.pythonhosted.org/packages/28/c0/b31116332a547fd2677ae5b78a2ef662dfc8023d67f41b2a83f7c2aa78b1/cffi-1.17.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:d63afe322132c194cf832bfec0dc69a99fb9bb6bbd550f161a49e9e855cc78ff", size = 485729 },
    { url = "https://files.pythonhosted.org/packages/91/2b/9a1ddfa5c7f13cab007a2c9cc295b70fbbda7cb10a286aa6810338e60ea1/cffi-1.17.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:f79fc4fc25f1c8698ff97788206bb3c2598949bfe0fef03d299eb1b5356ada99", size = 471256 },
    { url = "https://files.pythonhosted.org/packages/b2/d5/da47df7004cb17e4955df6a43d14b3b4ae77737dff8bf7f8f333196717bf/cffi-1.17.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b62ce867176a75d03a665bad002af8e6d54644fad99a3c70905c543130e39d93", size = 479424 },
    { url = "https://files.pythonhosted.org/packages/0b/ac/2a28bcf513e93a219c8a4e8e125534f4f6db03e3179ba1c45e949b76212c/cffi-1.17.1-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:386c8bf53c502fff58903061338ce4f4950cbdcb23e2902d86c0f722b786bbe3", size = 484568 },
    { url = "https://files.pythonhosted.org/packages/d4/38/ca8a4f639065f14ae0f1d9751e70447a261f1a30fa7547a828ae08142465/cffi-1.17.1-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:4ceb10419a9adf4460ea14cfd6bc43d08701f0835e979bf821052f1805850fe8", size = 488736 },
    { url = "https://files.pythonhosted.org/packages/86/c5/28b2d6f799ec0bdecf44dced2ec5ed43e0eb63097b0f58c293583b406582/cffi-1.17.1-cp312-cp312-win32.whl", hash = "sha256:a08d7e755f8ed21095a310a693525137cfe756ce62d066e53f502a83dc550f65", size = 172448 },
    { url = "https://files.pythonhosted.org/packages/50/b9/db34c4755a7bd1cb2d1603ac3863f22bcecbd1ba29e5ee841a4bc510b294/cffi-1.17.1-cp312-cp312-win_amd64.whl", hash = "sha256:51392eae71afec0d0c8fb1a53b204dbb3bcabcb3c9b807eedf3e1e6ccf2de903", size = 181976 },
    { url = "https://files.pythonhosted.org/packages/8d/f8/dd6c246b148639254dad4d6803eb6a54e8c85c6e11ec9df2cffa87571dbe/cffi-1.17.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:f3a2b4222ce6b60e2e8b337bb9596923045681d71e5a082783484d845390938e", size = 182989 },
    { url = "https://files.pythonhosted.org/packages/8b/f1/672d303ddf17c24fc83afd712316fda78dc6fce1cd53011b839483e1ecc8/cffi-1.17.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:0984a4925a435b1da406122d4d7968dd861c1385afe3b45ba82b750f229811e2", size = 178802 },
    { url = "https://files.pythonhosted.org/packages/0e/2d/eab2e858a91fdff70533cab61dcff4a1f55ec60425832ddfdc9cd36bc8af/cffi-1.17.1-cp313-cp313-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d01b12eeeb4427d3110de311e1774046ad344f5b1a7403101878976ecd7a10f3", size = 454792 },
    { url = "https://files.pythonhosted.org/packages/75/b2/fbaec7c4455c604e29388d55599b99ebcc250a60050610fadde58932b7ee/cffi-1.17.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:706510fe141c86a69c8ddc029c7910003a17353970cff3b904ff0686a5927683", size = 478893 },
    { url = "https://files.pythonhosted.org/packages/4f/b7/6e4a2162178bf1935c336d4da8a9352cccab4d3a5d7914065490f08c0690/cffi-1.17.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:de55b766c7aa2e2a3092c51e0483d700341182f08e67c63630d5b6f200bb28e5", size = 485810 },
    { url = "https://files.pythonhosted.org/packages/c7/8a/1d0e4a9c26e54746dc08c2c6c037889124d4f59dffd853a659fa545f1b40/cffi-1.17.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:c59d6e989d07460165cc5ad3c61f9fd8f1b4796eacbd81cee78957842b834af4", size = 471200 },
    { url = "https://files.pythonhosted.org/packages/26/9f/1aab65a6c0db35f43c4d1b4f580e8df53914310afc10ae0397d29d697af4/cffi-1.17.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:dd398dbc6773384a17fe0d3e7eeb8d1a21c2200473ee6806bb5e6a8e62bb73dd", size = 479447 },
    { url = "https://files.pythonhosted.org/packages/5f/e4/fb8b3dd8dc0e98edf1135ff067ae070bb32ef9d509d6cb0f538cd6f7483f/cffi-1.17.1-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:3edc8d958eb099c634dace3c7e16560ae474aa3803a5df240542b305d14e14ed", size = 484358 },
    { url = "https://files.pythonhosted.org/packages/f1/47/d7145bf2dc04684935d57d67dff9d6d795b2ba2796806bb109864be3a151/cffi-1.17.1-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:72e72408cad3d5419375fc87d289076ee319835bdfa2caad331e377589aebba9", size = 488469 },
    { url = "https://files.pythonhosted.org/packages/bf/ee/f94057fa6426481d663b88637a9a10e859e492c73d0384514a17d78ee205/cffi-1.17.1-cp313-cp313-win32.whl", hash = "sha256:e03eab0a8677fa80d646b5ddece1cbeaf556c313dcfac435ba11f107ba117b5d", size = 172475 },
    { url = "https://files.pythonhosted.org/packages/7c/fc/6a8cb64e5f0324877d503c854da15d76c1e50eb722e320b15345c4d0c6de/cffi-1.17.1-cp313-cp313-win_amd64.whl", hash = "sha256:f6a16c31041f09ead72d69f583767292f750d24913dadacf5756b966aacb3f1a", size = 182009 },
]

[[package]]
name = "cfgv"
version = "3.4.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/11/74/539e56497d9bd1d484fd863dd69cbbfa653cd2aa27abfe35653494d85e94/cfgv-3.4.0.tar.gz", hash = "sha256:e52591d4c5f5dead8e0f673fb16db7949d2cfb3f7da4582893288f0ded8fe560", size = 7114 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c5/55/51844dd50c4fc7a33b653bfaba4c2456f06955289ca770a5dbd5fd267374/cfgv-3.4.0-py2.py3-none-any.whl", hash = "sha256:b7265b1f29fd3316bfcd2b330d63d024f2bfd8bcb8b0272f8e19a504856c48f9", size = 7249 },
]

[[package]]
name = "charset-normalizer"
version = "3.4.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/16/b0/572805e227f01586461c80e0fd25d65a2115599cc9dad142fee4b747c357/charset_normalizer-3.4.1.tar.gz", hash = "sha256:44251f18cd68a75b56585dd00dae26183e102cd5e0f9f1466e6df5da2ed64ea3", size = 123188 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0d/58/5580c1716040bc89206c77d8f74418caf82ce519aae06450393ca73475d1/charset_normalizer-3.4.1-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:91b36a978b5ae0ee86c394f5a54d6ef44db1de0815eb43de826d41d21e4af3de", size = 198013 },
    { url = "https://files.pythonhosted.org/packages/d0/11/00341177ae71c6f5159a08168bcb98c6e6d196d372c94511f9f6c9afe0c6/charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7461baadb4dc00fd9e0acbe254e3d7d2112e7f92ced2adc96e54ef6501c5f176", size = 141285 },
    { url = "https://files.pythonhosted.org/packages/01/09/11d684ea5819e5a8f5100fb0b38cf8d02b514746607934134d31233e02c8/charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e218488cd232553829be0664c2292d3af2eeeb94b32bea483cf79ac6a694e037", size = 151449 },
    { url = "https://files.pythonhosted.org/packages/08/06/9f5a12939db324d905dc1f70591ae7d7898d030d7662f0d426e2286f68c9/charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:80ed5e856eb7f30115aaf94e4a08114ccc8813e6ed1b5efa74f9f82e8509858f", size = 143892 },
    { url = "https://files.pythonhosted.org/packages/93/62/5e89cdfe04584cb7f4d36003ffa2936681b03ecc0754f8e969c2becb7e24/charset_normalizer-3.4.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:b010a7a4fd316c3c484d482922d13044979e78d1861f0e0650423144c616a46a", size = 146123 },
    { url = "https://files.pythonhosted.org/packages/a9/ac/ab729a15c516da2ab70a05f8722ecfccc3f04ed7a18e45c75bbbaa347d61/charset_normalizer-3.4.1-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:4532bff1b8421fd0a320463030c7520f56a79c9024a4e88f01c537316019005a", size = 147943 },
    { url = "https://files.pythonhosted.org/packages/03/d2/3f392f23f042615689456e9a274640c1d2e5dd1d52de36ab8f7955f8f050/charset_normalizer-3.4.1-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:d973f03c0cb71c5ed99037b870f2be986c3c05e63622c017ea9816881d2dd247", size = 142063 },
    { url = "https://files.pythonhosted.org/packages/f2/e3/e20aae5e1039a2cd9b08d9205f52142329f887f8cf70da3650326670bddf/charset_normalizer-3.4.1-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:3a3bd0dcd373514dcec91c411ddb9632c0d7d92aed7093b8c3bbb6d69ca74408", size = 150578 },
    { url = "https://files.pythonhosted.org/packages/8d/af/779ad72a4da0aed925e1139d458adc486e61076d7ecdcc09e610ea8678db/charset_normalizer-3.4.1-cp310-cp310-musllinux_1_2_ppc64le.whl", hash = "sha256:d9c3cdf5390dcd29aa8056d13e8e99526cda0305acc038b96b30352aff5ff2bb", size = 153629 },
    { url = "https://files.pythonhosted.org/packages/c2/b6/7aa450b278e7aa92cf7732140bfd8be21f5f29d5bf334ae987c945276639/charset_normalizer-3.4.1-cp310-cp310-musllinux_1_2_s390x.whl", hash = "sha256:2bdfe3ac2e1bbe5b59a1a63721eb3b95fc9b6817ae4a46debbb4e11f6232428d", size = 150778 },
    { url = "https://files.pythonhosted.org/packages/39/f4/d9f4f712d0951dcbfd42920d3db81b00dd23b6ab520419626f4023334056/charset_normalizer-3.4.1-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:eab677309cdb30d047996b36d34caeda1dc91149e4fdca0b1a039b3f79d9a807", size = 146453 },
    { url = "https://files.pythonhosted.org/packages/49/2b/999d0314e4ee0cff3cb83e6bc9aeddd397eeed693edb4facb901eb8fbb69/charset_normalizer-3.4.1-cp310-cp310-win32.whl", hash = "sha256:c0429126cf75e16c4f0ad00ee0eae4242dc652290f940152ca8c75c3a4b6ee8f", size = 95479 },
    { url = "https://files.pythonhosted.org/packages/2d/ce/3cbed41cff67e455a386fb5e5dd8906cdda2ed92fbc6297921f2e4419309/charset_normalizer-3.4.1-cp310-cp310-win_amd64.whl", hash = "sha256:9f0b8b1c6d84c8034a44893aba5e767bf9c7a211e313a9605d9c617d7083829f", size = 102790 },
    { url = "https://files.pythonhosted.org/packages/72/80/41ef5d5a7935d2d3a773e3eaebf0a9350542f2cab4eac59a7a4741fbbbbe/charset_normalizer-3.4.1-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:8bfa33f4f2672964266e940dd22a195989ba31669bd84629f05fab3ef4e2d125", size = 194995 },
    { url = "https://files.pythonhosted.org/packages/7a/28/0b9fefa7b8b080ec492110af6d88aa3dea91c464b17d53474b6e9ba5d2c5/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:28bf57629c75e810b6ae989f03c0828d64d6b26a5e205535585f96093e405ed1", size = 139471 },
    { url = "https://files.pythonhosted.org/packages/71/64/d24ab1a997efb06402e3fc07317e94da358e2585165930d9d59ad45fcae2/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:f08ff5e948271dc7e18a35641d2f11a4cd8dfd5634f55228b691e62b37125eb3", size = 149831 },
    { url = "https://files.pythonhosted.org/packages/37/ed/be39e5258e198655240db5e19e0b11379163ad7070962d6b0c87ed2c4d39/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:234ac59ea147c59ee4da87a0c0f098e9c8d169f4dc2a159ef720f1a61bbe27cd", size = 142335 },
    { url = "https://files.pythonhosted.org/packages/88/83/489e9504711fa05d8dde1574996408026bdbdbd938f23be67deebb5eca92/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fd4ec41f914fa74ad1b8304bbc634b3de73d2a0889bd32076342a573e0779e00", size = 143862 },
    { url = "https://files.pythonhosted.org/packages/c6/c7/32da20821cf387b759ad24627a9aca289d2822de929b8a41b6241767b461/charset_normalizer-3.4.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:eea6ee1db730b3483adf394ea72f808b6e18cf3cb6454b4d86e04fa8c4327a12", size = 145673 },
    { url = "https://files.pythonhosted.org/packages/68/85/f4288e96039abdd5aeb5c546fa20a37b50da71b5cf01e75e87f16cd43304/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:c96836c97b1238e9c9e3fe90844c947d5afbf4f4c92762679acfe19927d81d77", size = 140211 },
    { url = "https://files.pythonhosted.org/packages/28/a3/a42e70d03cbdabc18997baf4f0227c73591a08041c149e710045c281f97b/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:4d86f7aff21ee58f26dcf5ae81a9addbd914115cdebcbb2217e4f0ed8982e146", size = 148039 },
    { url = "https://files.pythonhosted.org/packages/85/e4/65699e8ab3014ecbe6f5c71d1a55d810fb716bbfd74f6283d5c2aa87febf/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:09b5e6733cbd160dcc09589227187e242a30a49ca5cefa5a7edd3f9d19ed53fd", size = 151939 },
    { url = "https://files.pythonhosted.org/packages/b1/82/8e9fe624cc5374193de6860aba3ea8070f584c8565ee77c168ec13274bd2/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:5777ee0881f9499ed0f71cc82cf873d9a0ca8af166dfa0af8ec4e675b7df48e6", size = 149075 },
    { url = "https://files.pythonhosted.org/packages/3d/7b/82865ba54c765560c8433f65e8acb9217cb839a9e32b42af4aa8e945870f/charset_normalizer-3.4.1-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:237bdbe6159cff53b4f24f397d43c6336c6b0b42affbe857970cefbb620911c8", size = 144340 },
    { url = "https://files.pythonhosted.org/packages/b5/b6/9674a4b7d4d99a0d2df9b215da766ee682718f88055751e1e5e753c82db0/charset_normalizer-3.4.1-cp311-cp311-win32.whl", hash = "sha256:8417cb1f36cc0bc7eaba8ccb0e04d55f0ee52df06df3ad55259b9a323555fc8b", size = 95205 },
    { url = "https://files.pythonhosted.org/packages/1e/ab/45b180e175de4402dcf7547e4fb617283bae54ce35c27930a6f35b6bef15/charset_normalizer-3.4.1-cp311-cp311-win_amd64.whl", hash = "sha256:d7f50a1f8c450f3925cb367d011448c39239bb3eb4117c36a6d354794de4ce76", size = 102441 },
    { url = "https://files.pythonhosted.org/packages/0a/9a/dd1e1cdceb841925b7798369a09279bd1cf183cef0f9ddf15a3a6502ee45/charset_normalizer-3.4.1-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:73d94b58ec7fecbc7366247d3b0b10a21681004153238750bb67bd9012414545", size = 196105 },
    { url = "https://files.pythonhosted.org/packages/d3/8c/90bfabf8c4809ecb648f39794cf2a84ff2e7d2a6cf159fe68d9a26160467/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dad3e487649f498dd991eeb901125411559b22e8d7ab25d3aeb1af367df5efd7", size = 140404 },
    { url = "https://files.pythonhosted.org/packages/ad/8f/e410d57c721945ea3b4f1a04b74f70ce8fa800d393d72899f0a40526401f/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:c30197aa96e8eed02200a83fba2657b4c3acd0f0aa4bdc9f6c1af8e8962e0757", size = 150423 },
    { url = "https://files.pythonhosted.org/packages/f0/b8/e6825e25deb691ff98cf5c9072ee0605dc2acfca98af70c2d1b1bc75190d/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2369eea1ee4a7610a860d88f268eb39b95cb588acd7235e02fd5a5601773d4fa", size = 143184 },
    { url = "https://files.pythonhosted.org/packages/3e/a2/513f6cbe752421f16d969e32f3583762bfd583848b763913ddab8d9bfd4f/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bc2722592d8998c870fa4e290c2eec2c1569b87fe58618e67d38b4665dfa680d", size = 145268 },
    { url = "https://files.pythonhosted.org/packages/74/94/8a5277664f27c3c438546f3eb53b33f5b19568eb7424736bdc440a88a31f/charset_normalizer-3.4.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ffc9202a29ab3920fa812879e95a9e78b2465fd10be7fcbd042899695d75e616", size = 147601 },
    { url = "https://files.pythonhosted.org/packages/7c/5f/6d352c51ee763623a98e31194823518e09bfa48be2a7e8383cf691bbb3d0/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:804a4d582ba6e5b747c625bf1255e6b1507465494a40a2130978bda7b932c90b", size = 141098 },
    { url = "https://files.pythonhosted.org/packages/78/d4/f5704cb629ba5ab16d1d3d741396aec6dc3ca2b67757c45b0599bb010478/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:0f55e69f030f7163dffe9fd0752b32f070566451afe180f99dbeeb81f511ad8d", size = 149520 },
    { url = "https://files.pythonhosted.org/packages/c5/96/64120b1d02b81785f222b976c0fb79a35875457fa9bb40827678e54d1bc8/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c4c3e6da02df6fa1410a7680bd3f63d4f710232d3139089536310d027950696a", size = 152852 },
    { url = "https://files.pythonhosted.org/packages/84/c9/98e3732278a99f47d487fd3468bc60b882920cef29d1fa6ca460a1fdf4e6/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:5df196eb874dae23dcfb968c83d4f8fdccb333330fe1fc278ac5ceeb101003a9", size = 150488 },
    { url = "https://files.pythonhosted.org/packages/13/0e/9c8d4cb99c98c1007cc11eda969ebfe837bbbd0acdb4736d228ccaabcd22/charset_normalizer-3.4.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:e358e64305fe12299a08e08978f51fc21fac060dcfcddd95453eabe5b93ed0e1", size = 146192 },
    { url = "https://files.pythonhosted.org/packages/b2/21/2b6b5b860781a0b49427309cb8670785aa543fb2178de875b87b9cc97746/charset_normalizer-3.4.1-cp312-cp312-win32.whl", hash = "sha256:9b23ca7ef998bc739bf6ffc077c2116917eabcc901f88da1b9856b210ef63f35", size = 95550 },
    { url = "https://files.pythonhosted.org/packages/21/5b/1b390b03b1d16c7e382b561c5329f83cc06623916aab983e8ab9239c7d5c/charset_normalizer-3.4.1-cp312-cp312-win_amd64.whl", hash = "sha256:6ff8a4a60c227ad87030d76e99cd1698345d4491638dfa6673027c48b3cd395f", size = 102785 },
    { url = "https://files.pythonhosted.org/packages/38/94/ce8e6f63d18049672c76d07d119304e1e2d7c6098f0841b51c666e9f44a0/charset_normalizer-3.4.1-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:aabfa34badd18f1da5ec1bc2715cadc8dca465868a4e73a0173466b688f29dda", size = 195698 },
    { url = "https://files.pythonhosted.org/packages/24/2e/dfdd9770664aae179a96561cc6952ff08f9a8cd09a908f259a9dfa063568/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:22e14b5d70560b8dd51ec22863f370d1e595ac3d024cb8ad7d308b4cd95f8313", size = 140162 },
    { url = "https://files.pythonhosted.org/packages/24/4e/f646b9093cff8fc86f2d60af2de4dc17c759de9d554f130b140ea4738ca6/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:8436c508b408b82d87dc5f62496973a1805cd46727c34440b0d29d8a2f50a6c9", size = 150263 },
    { url = "https://files.pythonhosted.org/packages/5e/67/2937f8d548c3ef6e2f9aab0f6e21001056f692d43282b165e7c56023e6dd/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2d074908e1aecee37a7635990b2c6d504cd4766c7bc9fc86d63f9c09af3fa11b", size = 142966 },
    { url = "https://files.pythonhosted.org/packages/52/ed/b7f4f07de100bdb95c1756d3a4d17b90c1a3c53715c1a476f8738058e0fa/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:955f8851919303c92343d2f66165294848d57e9bba6cf6e3625485a70a038d11", size = 144992 },
    { url = "https://files.pythonhosted.org/packages/96/2c/d49710a6dbcd3776265f4c923bb73ebe83933dfbaa841c5da850fe0fd20b/charset_normalizer-3.4.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:44ecbf16649486d4aebafeaa7ec4c9fed8b88101f4dd612dcaf65d5e815f837f", size = 147162 },
    { url = "https://files.pythonhosted.org/packages/b4/41/35ff1f9a6bd380303dea55e44c4933b4cc3c4850988927d4082ada230273/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:0924e81d3d5e70f8126529951dac65c1010cdf117bb75eb02dd12339b57749dd", size = 140972 },
    { url = "https://files.pythonhosted.org/packages/fb/43/c6a0b685fe6910d08ba971f62cd9c3e862a85770395ba5d9cad4fede33ab/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:2967f74ad52c3b98de4c3b32e1a44e32975e008a9cd2a8cc8966d6a5218c5cb2", size = 149095 },
    { url = "https://files.pythonhosted.org/packages/4c/ff/a9a504662452e2d2878512115638966e75633519ec11f25fca3d2049a94a/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:c75cb2a3e389853835e84a2d8fb2b81a10645b503eca9bcb98df6b5a43eb8886", size = 152668 },
    { url = "https://files.pythonhosted.org/packages/6c/71/189996b6d9a4b932564701628af5cee6716733e9165af1d5e1b285c530ed/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:09b26ae6b1abf0d27570633b2b078a2a20419c99d66fb2823173d73f188ce601", size = 150073 },
    { url = "https://files.pythonhosted.org/packages/e4/93/946a86ce20790e11312c87c75ba68d5f6ad2208cfb52b2d6a2c32840d922/charset_normalizer-3.4.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:fa88b843d6e211393a37219e6a1c1df99d35e8fd90446f1118f4216e307e48cd", size = 145732 },
    { url = "https://files.pythonhosted.org/packages/cd/e5/131d2fb1b0dddafc37be4f3a2fa79aa4c037368be9423061dccadfd90091/charset_normalizer-3.4.1-cp313-cp313-win32.whl", hash = "sha256:eb8178fe3dba6450a3e024e95ac49ed3400e506fd4e9e5c32d30adda88cbd407", size = 95391 },
    { url = "https://files.pythonhosted.org/packages/27/f2/4f9a69cc7712b9b5ad8fdb87039fd89abba997ad5cbe690d1835d40405b0/charset_normalizer-3.4.1-cp313-cp313-win_amd64.whl", hash = "sha256:b1ac5992a838106edb89654e0aebfc24f5848ae2547d22c2c3f66454daa11971", size = 102702 },
    { url = "https://files.pythonhosted.org/packages/0e/f6/65ecc6878a89bb1c23a086ea335ad4bf21a588990c3f535a227b9eea9108/charset_normalizer-3.4.1-py3-none-any.whl", hash = "sha256:d98b1668f06378c6dbefec3b92299716b931cd4e6061f3c875a71ced1780ab85", size = 49767 },
]

[[package]]
name = "click"
version = "8.1.8"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b9/2e/0090cbf739cee7d23781ad4b89a9894a41538e4fcf4c31dcdd705b78eb8b/click-8.1.8.tar.gz", hash = "sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a", size = 226593 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7e/d4/7ebdbd03970677812aac39c869717059dbb71a4cfc033ca6e5221787892c/click-8.1.8-py3-none-any.whl", hash = "sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2", size = 98188 },
]

[[package]]
name = "colorama"
version = "0.4.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d8/53/6f443c9a4a8358a93a6792e2acffb9d9d5cb0a5cfd8802644b7b1c9a02e4/colorama-0.4.6.tar.gz", hash = "sha256:08695f5cb7ed6e0531a20572697297273c47b8cae5a63ffc6d6ed5c201be6e44", size = 27697 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d1/d6/3965ed04c63042e047cb6a3e6ed1a63a35087b6a609aa3a15ed8ac56c221/colorama-0.4.6-py2.py3-none-any.whl", hash = "sha256:4f1d9991f5acc0ca119f9d443620b77f9d6b33703e51011c16baf57afb285fc6", size = 25335 },
]

[[package]]
name = "coverage"
version = "7.6.12"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0c/d6/2b53ab3ee99f2262e6f0b8369a43f6d66658eab45510331c0b3d5c8c4272/coverage-7.6.12.tar.gz", hash = "sha256:48cfc4641d95d34766ad41d9573cc0f22a48aa88d22657a1fe01dca0dbae4de2", size = 805941 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ba/67/81dc41ec8f548c365d04a29f1afd492d3176b372c33e47fa2a45a01dc13a/coverage-7.6.12-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:704c8c8c6ce6569286ae9622e534b4f5b9759b6f2cd643f1c1a61f666d534fe8", size = 208345 },
    { url = "https://files.pythonhosted.org/packages/33/43/17f71676016c8829bde69e24c852fef6bd9ed39f774a245d9ec98f689fa0/coverage-7.6.12-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:ad7525bf0241e5502168ae9c643a2f6c219fa0a283001cee4cf23a9b7da75879", size = 208775 },
    { url = "https://files.pythonhosted.org/packages/86/25/c6ff0775f8960e8c0840845b723eed978d22a3cd9babd2b996e4a7c502c6/coverage-7.6.12-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:06097c7abfa611c91edb9e6920264e5be1d6ceb374efb4986f38b09eed4cb2fe", size = 237925 },
    { url = "https://files.pythonhosted.org/packages/b0/3d/5f5bd37046243cb9d15fff2c69e498c2f4fe4f9b42a96018d4579ed3506f/coverage-7.6.12-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:220fa6c0ad7d9caef57f2c8771918324563ef0d8272c94974717c3909664e674", size = 235835 },
    { url = "https://files.pythonhosted.org/packages/b5/f1/9e6b75531fe33490b910d251b0bf709142e73a40e4e38a3899e6986fe088/coverage-7.6.12-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3688b99604a24492bcfe1c106278c45586eb819bf66a654d8a9a1433022fb2eb", size = 236966 },
    { url = "https://files.pythonhosted.org/packages/4f/bc/aef5a98f9133851bd1aacf130e754063719345d2fb776a117d5a8d516971/coverage-7.6.12-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:d1a987778b9c71da2fc8948e6f2656da6ef68f59298b7e9786849634c35d2c3c", size = 236080 },
    { url = "https://files.pythonhosted.org/packages/eb/d0/56b4ab77f9b12aea4d4c11dc11cdcaa7c29130b837eb610639cf3400c9c3/coverage-7.6.12-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:cec6b9ce3bd2b7853d4a4563801292bfee40b030c05a3d29555fd2a8ee9bd68c", size = 234393 },
    { url = "https://files.pythonhosted.org/packages/0d/77/28ef95c5d23fe3dd191a0b7d89c82fea2c2d904aef9315daf7c890e96557/coverage-7.6.12-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:ace9048de91293e467b44bce0f0381345078389814ff6e18dbac8fdbf896360e", size = 235536 },
    { url = "https://files.pythonhosted.org/packages/29/62/18791d3632ee3ff3f95bc8599115707d05229c72db9539f208bb878a3d88/coverage-7.6.12-cp310-cp310-win32.whl", hash = "sha256:ea31689f05043d520113e0552f039603c4dd71fa4c287b64cb3606140c66f425", size = 211063 },
    { url = "https://files.pythonhosted.org/packages/fc/57/b3878006cedfd573c963e5c751b8587154eb10a61cc0f47a84f85c88a355/coverage-7.6.12-cp310-cp310-win_amd64.whl", hash = "sha256:676f92141e3c5492d2a1596d52287d0d963df21bf5e55c8b03075a60e1ddf8aa", size = 211955 },
    { url = "https://files.pythonhosted.org/packages/64/2d/da78abbfff98468c91fd63a73cccdfa0e99051676ded8dd36123e3a2d4d5/coverage-7.6.12-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:e18aafdfb3e9ec0d261c942d35bd7c28d031c5855dadb491d2723ba54f4c3015", size = 208464 },
    { url = "https://files.pythonhosted.org/packages/31/f2/c269f46c470bdabe83a69e860c80a82e5e76840e9f4bbd7f38f8cebbee2f/coverage-7.6.12-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:66fe626fd7aa5982cdebad23e49e78ef7dbb3e3c2a5960a2b53632f1f703ea45", size = 208893 },
    { url = "https://files.pythonhosted.org/packages/47/63/5682bf14d2ce20819998a49c0deadb81e608a59eed64d6bc2191bc8046b9/coverage-7.6.12-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0ef01d70198431719af0b1f5dcbefc557d44a190e749004042927b2a3fed0702", size = 241545 },
    { url = "https://files.pythonhosted.org/packages/6a/b6/6b6631f1172d437e11067e1c2edfdb7238b65dff965a12bce3b6d1bf2be2/coverage-7.6.12-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:07e92ae5a289a4bc4c0aae710c0948d3c7892e20fd3588224ebe242039573bf0", size = 239230 },
    { url = "https://files.pythonhosted.org/packages/c7/01/9cd06cbb1be53e837e16f1b4309f6357e2dfcbdab0dd7cd3b1a50589e4e1/coverage-7.6.12-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:e695df2c58ce526eeab11a2e915448d3eb76f75dffe338ea613c1201b33bab2f", size = 241013 },
    { url = "https://files.pythonhosted.org/packages/4b/26/56afefc03c30871326e3d99709a70d327ac1f33da383cba108c79bd71563/coverage-7.6.12-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:d74c08e9aaef995f8c4ef6d202dbd219c318450fe2a76da624f2ebb9c8ec5d9f", size = 239750 },
    { url = "https://files.pythonhosted.org/packages/dd/ea/88a1ff951ed288f56aa561558ebe380107cf9132facd0b50bced63ba7238/coverage-7.6.12-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:e995b3b76ccedc27fe4f477b349b7d64597e53a43fc2961db9d3fbace085d69d", size = 238462 },
    { url = "https://files.pythonhosted.org/packages/6e/d4/1d9404566f553728889409eff82151d515fbb46dc92cbd13b5337fa0de8c/coverage-7.6.12-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:b1f097878d74fe51e1ddd1be62d8e3682748875b461232cf4b52ddc6e6db0bba", size = 239307 },
    { url = "https://files.pythonhosted.org/packages/12/c1/e453d3b794cde1e232ee8ac1d194fde8e2ba329c18bbf1b93f6f5eef606b/coverage-7.6.12-cp311-cp311-win32.whl", hash = "sha256:1f7ffa05da41754e20512202c866d0ebfc440bba3b0ed15133070e20bf5aeb5f", size = 211117 },
    { url = "https://files.pythonhosted.org/packages/d5/db/829185120c1686fa297294f8fcd23e0422f71070bf85ef1cc1a72ecb2930/coverage-7.6.12-cp311-cp311-win_amd64.whl", hash = "sha256:e216c5c45f89ef8971373fd1c5d8d1164b81f7f5f06bbf23c37e7908d19e8558", size = 212019 },
    { url = "https://files.pythonhosted.org/packages/e2/7f/4af2ed1d06ce6bee7eafc03b2ef748b14132b0bdae04388e451e4b2c529b/coverage-7.6.12-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:b172f8e030e8ef247b3104902cc671e20df80163b60a203653150d2fc204d1ad", size = 208645 },
    { url = "https://files.pythonhosted.org/packages/dc/60/d19df912989117caa95123524d26fc973f56dc14aecdec5ccd7d0084e131/coverage-7.6.12-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:641dfe0ab73deb7069fb972d4d9725bf11c239c309ce694dd50b1473c0f641c3", size = 208898 },
    { url = "https://files.pythonhosted.org/packages/bd/10/fecabcf438ba676f706bf90186ccf6ff9f6158cc494286965c76e58742fa/coverage-7.6.12-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0e549f54ac5f301e8e04c569dfdb907f7be71b06b88b5063ce9d6953d2d58574", size = 242987 },
    { url = "https://files.pythonhosted.org/packages/4c/53/4e208440389e8ea936f5f2b0762dcd4cb03281a7722def8e2bf9dc9c3d68/coverage-7.6.12-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:959244a17184515f8c52dcb65fb662808767c0bd233c1d8a166e7cf74c9ea985", size = 239881 },
    { url = "https://files.pythonhosted.org/packages/c4/47/2ba744af8d2f0caa1f17e7746147e34dfc5f811fb65fc153153722d58835/coverage-7.6.12-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bda1c5f347550c359f841d6614fb8ca42ae5cb0b74d39f8a1e204815ebe25750", size = 242142 },
    { url = "https://files.pythonhosted.org/packages/e9/90/df726af8ee74d92ee7e3bf113bf101ea4315d71508952bd21abc3fae471e/coverage-7.6.12-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1ceeb90c3eda1f2d8c4c578c14167dbd8c674ecd7d38e45647543f19839dd6ea", size = 241437 },
    { url = "https://files.pythonhosted.org/packages/f6/af/995263fd04ae5f9cf12521150295bf03b6ba940d0aea97953bb4a6db3e2b/coverage-7.6.12-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:0f16f44025c06792e0fb09571ae454bcc7a3ec75eeb3c36b025eccf501b1a4c3", size = 239724 },
    { url = "https://files.pythonhosted.org/packages/1c/8e/5bb04f0318805e190984c6ce106b4c3968a9562a400180e549855d8211bd/coverage-7.6.12-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:b076e625396e787448d27a411aefff867db2bffac8ed04e8f7056b07024eed5a", size = 241329 },
    { url = "https://files.pythonhosted.org/packages/9e/9d/fa04d9e6c3f6459f4e0b231925277cfc33d72dfab7fa19c312c03e59da99/coverage-7.6.12-cp312-cp312-win32.whl", hash = "sha256:00b2086892cf06c7c2d74983c9595dc511acca00665480b3ddff749ec4fb2a95", size = 211289 },
    { url = "https://files.pythonhosted.org/packages/53/40/53c7ffe3c0c3fff4d708bc99e65f3d78c129110d6629736faf2dbd60ad57/coverage-7.6.12-cp312-cp312-win_amd64.whl", hash = "sha256:7ae6eabf519bc7871ce117fb18bf14e0e343eeb96c377667e3e5dd12095e0288", size = 212079 },
    { url = "https://files.pythonhosted.org/packages/76/89/1adf3e634753c0de3dad2f02aac1e73dba58bc5a3a914ac94a25b2ef418f/coverage-7.6.12-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:488c27b3db0ebee97a830e6b5a3ea930c4a6e2c07f27a5e67e1b3532e76b9ef1", size = 208673 },
    { url = "https://files.pythonhosted.org/packages/ce/64/92a4e239d64d798535c5b45baac6b891c205a8a2e7c9cc8590ad386693dc/coverage-7.6.12-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:5d1095bbee1851269f79fd8e0c9b5544e4c00c0c24965e66d8cba2eb5bb535fd", size = 208945 },
    { url = "https://files.pythonhosted.org/packages/b4/d0/4596a3ef3bca20a94539c9b1e10fd250225d1dec57ea78b0867a1cf9742e/coverage-7.6.12-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0533adc29adf6a69c1baa88c3d7dbcaadcffa21afbed3ca7a225a440e4744bf9", size = 242484 },
    { url = "https://files.pythonhosted.org/packages/1c/ef/6fd0d344695af6718a38d0861408af48a709327335486a7ad7e85936dc6e/coverage-7.6.12-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:53c56358d470fa507a2b6e67a68fd002364d23c83741dbc4c2e0680d80ca227e", size = 239525 },
    { url = "https://files.pythonhosted.org/packages/0c/4b/373be2be7dd42f2bcd6964059fd8fa307d265a29d2b9bcf1d044bcc156ed/coverage-7.6.12-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:64cbb1a3027c79ca6310bf101014614f6e6e18c226474606cf725238cf5bc2d4", size = 241545 },
    { url = "https://files.pythonhosted.org/packages/a6/7d/0e83cc2673a7790650851ee92f72a343827ecaaea07960587c8f442b5cd3/coverage-7.6.12-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:79cac3390bfa9836bb795be377395f28410811c9066bc4eefd8015258a7578c6", size = 241179 },
    { url = "https://files.pythonhosted.org/packages/ff/8c/566ea92ce2bb7627b0900124e24a99f9244b6c8c92d09ff9f7633eb7c3c8/coverage-7.6.12-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:9b148068e881faa26d878ff63e79650e208e95cf1c22bd3f77c3ca7b1d9821a3", size = 239288 },
    { url = "https://files.pythonhosted.org/packages/7d/e4/869a138e50b622f796782d642c15fb5f25a5870c6d0059a663667a201638/coverage-7.6.12-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:8bec2ac5da793c2685ce5319ca9bcf4eee683b8a1679051f8e6ec04c4f2fd7dc", size = 241032 },
    { url = "https://files.pythonhosted.org/packages/ae/28/a52ff5d62a9f9e9fe9c4f17759b98632edd3a3489fce70154c7d66054dd3/coverage-7.6.12-cp313-cp313-win32.whl", hash = "sha256:200e10beb6ddd7c3ded322a4186313d5ca9e63e33d8fab4faa67ef46d3460af3", size = 211315 },
    { url = "https://files.pythonhosted.org/packages/bc/17/ab849b7429a639f9722fa5628364c28d675c7ff37ebc3268fe9840dda13c/coverage-7.6.12-cp313-cp313-win_amd64.whl", hash = "sha256:2b996819ced9f7dbb812c701485d58f261bef08f9b85304d41219b1496b591ef", size = 212099 },
    { url = "https://files.pythonhosted.org/packages/d2/1c/b9965bf23e171d98505eb5eb4fb4d05c44efd256f2e0f19ad1ba8c3f54b0/coverage-7.6.12-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:299cf973a7abff87a30609879c10df0b3bfc33d021e1adabc29138a48888841e", size = 209511 },
    { url = "https://files.pythonhosted.org/packages/57/b3/119c201d3b692d5e17784fee876a9a78e1b3051327de2709392962877ca8/coverage-7.6.12-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:4b467a8c56974bf06e543e69ad803c6865249d7a5ccf6980457ed2bc50312703", size = 209729 },
    { url = "https://files.pythonhosted.org/packages/52/4e/a7feb5a56b266304bc59f872ea07b728e14d5a64f1ad3a2cc01a3259c965/coverage-7.6.12-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:2458f275944db8129f95d91aee32c828a408481ecde3b30af31d552c2ce284a0", size = 253988 },
    { url = "https://files.pythonhosted.org/packages/65/19/069fec4d6908d0dae98126aa7ad08ce5130a6decc8509da7740d36e8e8d2/coverage-7.6.12-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:0a9d8be07fb0832636a0f72b80d2a652fe665e80e720301fb22b191c3434d924", size = 249697 },
    { url = "https://files.pythonhosted.org/packages/1c/da/5b19f09ba39df7c55f77820736bf17bbe2416bbf5216a3100ac019e15839/coverage-7.6.12-cp313-cp313t-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:14d47376a4f445e9743f6c83291e60adb1b127607a3618e3185bbc8091f0467b", size = 252033 },
    { url = "https://files.pythonhosted.org/packages/1e/89/4c2750df7f80a7872267f7c5fe497c69d45f688f7b3afe1297e52e33f791/coverage-7.6.12-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:b95574d06aa9d2bd6e5cc35a5bbe35696342c96760b69dc4287dbd5abd4ad51d", size = 251535 },
    { url = "https://files.pythonhosted.org/packages/78/3b/6d3ae3c1cc05f1b0460c51e6f6dcf567598cbd7c6121e5ad06643974703c/coverage-7.6.12-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:ecea0c38c9079570163d663c0433a9af4094a60aafdca491c6a3d248c7432827", size = 249192 },
    { url = "https://files.pythonhosted.org/packages/6e/8e/c14a79f535ce41af7d436bbad0d3d90c43d9e38ec409b4770c894031422e/coverage-7.6.12-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:2251fabcfee0a55a8578a9d29cecfee5f2de02f11530e7d5c5a05859aa85aee9", size = 250627 },
    { url = "https://files.pythonhosted.org/packages/cb/79/b7cee656cfb17a7f2c1b9c3cee03dd5d8000ca299ad4038ba64b61a9b044/coverage-7.6.12-cp313-cp313t-win32.whl", hash = "sha256:eb5507795caabd9b2ae3f1adc95f67b1104971c22c624bb354232d65c4fc90b3", size = 212033 },
    { url = "https://files.pythonhosted.org/packages/b6/c3/f7aaa3813f1fa9a4228175a7bd368199659d392897e184435a3b66408dd3/coverage-7.6.12-cp313-cp313t-win_amd64.whl", hash = "sha256:f60a297c3987c6c02ffb29effc70eadcbb412fe76947d394a1091a3615948e2f", size = 213240 },
    { url = "https://files.pythonhosted.org/packages/7a/7f/05818c62c7afe75df11e0233bd670948d68b36cdbf2a339a095bc02624a8/coverage-7.6.12-pp39.pp310-none-any.whl", hash = "sha256:7e39e845c4d764208e7b8f6a21c541ade741e2c41afabdfa1caa28687a3c98cf", size = 200558 },
    { url = "https://files.pythonhosted.org/packages/fb/b2/f655700e1024dec98b10ebaafd0cedbc25e40e4abe62a3c8e2ceef4f8f0a/coverage-7.6.12-py3-none-any.whl", hash = "sha256:eb8668cfbc279a536c633137deeb9435d2962caec279c3f8cf8b91fff6ff8953", size = 200552 },
]

[package.optional-dependencies]
toml = [
    { name = "tomli", marker = "python_full_version <= '3.11'" },
]

[[package]]
name = "cryptography"
version = "44.0.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cffi", marker = "platform_python_implementation != 'PyPy'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c7/67/545c79fe50f7af51dbad56d16b23fe33f63ee6a5d956b3cb68ea110cbe64/cryptography-44.0.1.tar.gz", hash = "sha256:f51f5705ab27898afda1aaa430f34ad90dc117421057782022edf0600bec5f14", size = 710819 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/72/27/5e3524053b4c8889da65cf7814a9d0d8514a05194a25e1e34f46852ee6eb/cryptography-44.0.1-cp37-abi3-macosx_10_9_universal2.whl", hash = "sha256:bf688f615c29bfe9dfc44312ca470989279f0e94bb9f631f85e3459af8efc009", size = 6642022 },
    { url = "https://files.pythonhosted.org/packages/34/b9/4d1fa8d73ae6ec350012f89c3abfbff19fc95fe5420cf972e12a8d182986/cryptography-44.0.1-cp37-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:dd7c7e2d71d908dc0f8d2027e1604102140d84b155e658c20e8ad1304317691f", size = 3943865 },
    { url = "https://files.pythonhosted.org/packages/6e/57/371a9f3f3a4500807b5fcd29fec77f418ba27ffc629d88597d0d1049696e/cryptography-44.0.1-cp37-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:887143b9ff6bad2b7570da75a7fe8bbf5f65276365ac259a5d2d5147a73775f2", size = 4162562 },
    { url = "https://files.pythonhosted.org/packages/c5/1d/5b77815e7d9cf1e3166988647f336f87d5634a5ccecec2ffbe08ef8dd481/cryptography-44.0.1-cp37-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:322eb03ecc62784536bc173f1483e76747aafeb69c8728df48537eb431cd1911", size = 3951923 },
    { url = "https://files.pythonhosted.org/packages/28/01/604508cd34a4024467cd4105887cf27da128cba3edd435b54e2395064bfb/cryptography-44.0.1-cp37-abi3-manylinux_2_28_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:21377472ca4ada2906bc313168c9dc7b1d7ca417b63c1c3011d0c74b7de9ae69", size = 3685194 },
    { url = "https://files.pythonhosted.org/packages/c6/3d/d3c55d4f1d24580a236a6753902ef6d8aafd04da942a1ee9efb9dc8fd0cb/cryptography-44.0.1-cp37-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:df978682c1504fc93b3209de21aeabf2375cb1571d4e61907b3e7a2540e83026", size = 4187790 },
    { url = "https://files.pythonhosted.org/packages/ea/a6/44d63950c8588bfa8594fd234d3d46e93c3841b8e84a066649c566afb972/cryptography-44.0.1-cp37-abi3-manylinux_2_34_aarch64.whl", hash = "sha256:eb3889330f2a4a148abead555399ec9a32b13b7c8ba969b72d8e500eb7ef84cd", size = 3951343 },
    { url = "https://files.pythonhosted.org/packages/c1/17/f5282661b57301204cbf188254c1a0267dbd8b18f76337f0a7ce1038888c/cryptography-44.0.1-cp37-abi3-manylinux_2_34_x86_64.whl", hash = "sha256:8e6a85a93d0642bd774460a86513c5d9d80b5c002ca9693e63f6e540f1815ed0", size = 4187127 },
    { url = "https://files.pythonhosted.org/packages/f3/68/abbae29ed4f9d96596687f3ceea8e233f65c9645fbbec68adb7c756bb85a/cryptography-44.0.1-cp37-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:6f76fdd6fd048576a04c5210d53aa04ca34d2ed63336d4abd306d0cbe298fddf", size = 4070666 },
    { url = "https://files.pythonhosted.org/packages/0f/10/cf91691064a9e0a88ae27e31779200b1505d3aee877dbe1e4e0d73b4f155/cryptography-44.0.1-cp37-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:6c8acf6f3d1f47acb2248ec3ea261171a671f3d9428e34ad0357148d492c7864", size = 4288811 },
    { url = "https://files.pythonhosted.org/packages/38/78/74ea9eb547d13c34e984e07ec8a473eb55b19c1451fe7fc8077c6a4b0548/cryptography-44.0.1-cp37-abi3-win32.whl", hash = "sha256:24979e9f2040c953a94bf3c6782e67795a4c260734e5264dceea65c8f4bae64a", size = 2771882 },
    { url = "https://files.pythonhosted.org/packages/cf/6c/3907271ee485679e15c9f5e93eac6aa318f859b0aed8d369afd636fafa87/cryptography-44.0.1-cp37-abi3-win_amd64.whl", hash = "sha256:fd0ee90072861e276b0ff08bd627abec29e32a53b2be44e41dbcdf87cbee2b00", size = 3206989 },
    { url = "https://files.pythonhosted.org/packages/9f/f1/676e69c56a9be9fd1bffa9bc3492366901f6e1f8f4079428b05f1414e65c/cryptography-44.0.1-cp39-abi3-macosx_10_9_universal2.whl", hash = "sha256:a2d8a7045e1ab9b9f803f0d9531ead85f90c5f2859e653b61497228b18452008", size = 6643714 },
    { url = "https://files.pythonhosted.org/packages/ba/9f/1775600eb69e72d8f9931a104120f2667107a0ee478f6ad4fe4001559345/cryptography-44.0.1-cp39-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b8272f257cf1cbd3f2e120f14c68bff2b6bdfcc157fafdee84a1b795efd72862", size = 3943269 },
    { url = "https://files.pythonhosted.org/packages/25/ba/e00d5ad6b58183829615be7f11f55a7b6baa5a06910faabdc9961527ba44/cryptography-44.0.1-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:1e8d181e90a777b63f3f0caa836844a1182f1f265687fac2115fcf245f5fbec3", size = 4166461 },
    { url = "https://files.pythonhosted.org/packages/b3/45/690a02c748d719a95ab08b6e4decb9d81e0ec1bac510358f61624c86e8a3/cryptography-44.0.1-cp39-abi3-manylinux_2_28_aarch64.whl", hash = "sha256:436df4f203482f41aad60ed1813811ac4ab102765ecae7a2bbb1dbb66dcff5a7", size = 3950314 },
    { url = "https://files.pythonhosted.org/packages/e6/50/bf8d090911347f9b75adc20f6f6569ed6ca9b9bff552e6e390f53c2a1233/cryptography-44.0.1-cp39-abi3-manylinux_2_28_armv7l.manylinux_2_31_armv7l.whl", hash = "sha256:4f422e8c6a28cf8b7f883eb790695d6d45b0c385a2583073f3cec434cc705e1a", size = 3686675 },
    { url = "https://files.pythonhosted.org/packages/e1/e7/cfb18011821cc5f9b21efb3f94f3241e3a658d267a3bf3a0f45543858ed8/cryptography-44.0.1-cp39-abi3-manylinux_2_28_x86_64.whl", hash = "sha256:72198e2b5925155497a5a3e8c216c7fb3e64c16ccee11f0e7da272fa93b35c4c", size = 4190429 },
    { url = "https://files.pythonhosted.org/packages/07/ef/77c74d94a8bfc1a8a47b3cafe54af3db537f081742ee7a8a9bd982b62774/cryptography-44.0.1-cp39-abi3-manylinux_2_34_aarch64.whl", hash = "sha256:2a46a89ad3e6176223b632056f321bc7de36b9f9b93b2cc1cccf935a3849dc62", size = 3950039 },
    { url = "https://files.pythonhosted.org/packages/6d/b9/8be0ff57c4592382b77406269b1e15650c9f1a167f9e34941b8515b97159/cryptography-44.0.1-cp39-abi3-manylinux_2_34_x86_64.whl", hash = "sha256:53f23339864b617a3dfc2b0ac8d5c432625c80014c25caac9082314e9de56f41", size = 4189713 },
    { url = "https://files.pythonhosted.org/packages/78/e1/4b6ac5f4100545513b0847a4d276fe3c7ce0eacfa73e3b5ebd31776816ee/cryptography-44.0.1-cp39-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:888fcc3fce0c888785a4876ca55f9f43787f4c5c1cc1e2e0da71ad481ff82c5b", size = 4071193 },
    { url = "https://files.pythonhosted.org/packages/3d/cb/afff48ceaed15531eab70445abe500f07f8f96af2bb35d98af6bfa89ebd4/cryptography-44.0.1-cp39-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:00918d859aa4e57db8299607086f793fa7813ae2ff5a4637e318a25ef82730f7", size = 4289566 },
    { url = "https://files.pythonhosted.org/packages/30/6f/4eca9e2e0f13ae459acd1ca7d9f0257ab86e68f44304847610afcb813dc9/cryptography-44.0.1-cp39-abi3-win32.whl", hash = "sha256:9b336599e2cb77b1008cb2ac264b290803ec5e8e89d618a5e978ff5eb6f715d9", size = 2772371 },
    { url = "https://files.pythonhosted.org/packages/d2/05/5533d30f53f10239616a357f080892026db2d550a40c393d0a8a7af834a9/cryptography-44.0.1-cp39-abi3-win_amd64.whl", hash = "sha256:e403f7f766ded778ecdb790da786b418a9f2394f36e8cc8b796cc056ab05f44f", size = 3207303 },
    { url = "https://files.pythonhosted.org/packages/15/06/507bfb5c7e048114a0185dd65f7814677a2ba285d15705c3d69e660c21d7/cryptography-44.0.1-pp310-pypy310_pp73-macosx_10_9_x86_64.whl", hash = "sha256:1f9a92144fa0c877117e9748c74501bea842f93d21ee00b0cf922846d9d0b183", size = 3380782 },
    { url = "https://files.pythonhosted.org/packages/e0/f1/7fb4982d59aa86e1a116c812b545e7fc045352be07738ae3fb278835a9a4/cryptography-44.0.1-pp310-pypy310_pp73-manylinux_2_28_aarch64.whl", hash = "sha256:610a83540765a8d8ce0f351ce42e26e53e1f774a6efb71eb1b41eb01d01c3d12", size = 3888155 },
    { url = "https://files.pythonhosted.org/packages/60/7b/cbc203838d3092203493d18b923fbbb1de64e0530b332a713ba376905b0b/cryptography-44.0.1-pp310-pypy310_pp73-manylinux_2_28_x86_64.whl", hash = "sha256:5fed5cd6102bb4eb843e3315d2bf25fede494509bddadb81e03a859c1bc17b83", size = 4106417 },
    { url = "https://files.pythonhosted.org/packages/12/c7/2fe59fb085ab418acc82e91e040a6acaa7b1696fcc1c1055317537fbf0d3/cryptography-44.0.1-pp310-pypy310_pp73-manylinux_2_34_aarch64.whl", hash = "sha256:f4daefc971c2d1f82f03097dc6f216744a6cd2ac0f04c68fb935ea2ba2a0d420", size = 3887540 },
    { url = "https://files.pythonhosted.org/packages/48/89/09fc7b115f60f5bd970b80e32244f8e9aeeb9244bf870b63420cec3b5cd5/cryptography-44.0.1-pp310-pypy310_pp73-manylinux_2_34_x86_64.whl", hash = "sha256:94f99f2b943b354a5b6307d7e8d19f5c423a794462bde2bf310c770ba052b1c4", size = 4106040 },
    { url = "https://files.pythonhosted.org/packages/2e/38/3fd83c4690dc7d753a442a284b3826ea5e5c380a411443c66421cd823898/cryptography-44.0.1-pp310-pypy310_pp73-win_amd64.whl", hash = "sha256:d9c5b9f698a83c8bd71e0f4d3f9f839ef244798e5ffe96febfa9714717db7af7", size = 3134657 },
]

[[package]]
name = "distlib"
version = "0.3.9"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0d/dd/1bec4c5ddb504ca60fc29472f3d27e8d4da1257a854e1d96742f15c1d02d/distlib-0.3.9.tar.gz", hash = "sha256:a60f20dea646b8a33f3e7772f74dc0b2d0772d2837ee1342a00645c81edf9403", size = 613923 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/91/a1/cf2472db20f7ce4a6be1253a81cfdf85ad9c7885ffbed7047fb72c24cf87/distlib-0.3.9-py2.py3-none-any.whl", hash = "sha256:47f8c22fd27c27e25a65601af709b38e4f0a45ea4fc2e710f65755fa8caaaf87", size = 468973 },
]

[[package]]
name = "docutils"
version = "0.21.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ae/ed/aefcc8cd0ba62a0560c3c18c33925362d46c6075480bfa4df87b28e169a9/docutils-0.21.2.tar.gz", hash = "sha256:3a6b18732edf182daa3cd12775bbb338cf5691468f91eeeb109deff6ebfa986f", size = 2204444 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8f/d7/9322c609343d929e75e7e5e6255e614fcc67572cfd083959cdef3b7aad79/docutils-0.21.2-py3-none-any.whl", hash = "sha256:dafca5b9e384f0e419294eb4d2ff9fa826435bf15f15b7bd45723e8ad76811b2", size = 587408 },
]

[[package]]
name = "exceptiongroup"
version = "1.2.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/09/35/2495c4ac46b980e4ca1f6ad6db102322ef3ad2410b79fdde159a4b0f3b92/exceptiongroup-1.2.2.tar.gz", hash = "sha256:47c2edf7c6738fafb49fd34290706d1a1a2f4d1c6df275526b62cbb4aa5393cc", size = 28883 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/02/cc/b7e31358aac6ed1ef2bb790a9746ac2c69bcb3c8588b41616914eb106eaf/exceptiongroup-1.2.2-py3-none-any.whl", hash = "sha256:3111b9d131c238bec2f8f516e123e14ba243563fb135d3fe885990585aa7795b", size = 16453 },
]

[[package]]
name = "execnet"
version = "2.1.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/bb/ff/b4c0dc78fbe20c3e59c0c7334de0c27eb4001a2b2017999af398bf730817/execnet-2.1.1.tar.gz", hash = "sha256:5189b52c6121c24feae288166ab41b32549c7e2348652736540b9e6e7d4e72e3", size = 166524 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/43/09/2aea36ff60d16dd8879bdb2f5b3ee0ba8d08cbbdcdfe870e695ce3784385/execnet-2.1.1-py3-none-any.whl", hash = "sha256:26dee51f1b80cebd6d0ca8e74dd8745419761d3bef34163928cbebbdc4749fdc", size = 40612 },
]

[[package]]
name = "filelock"
version = "3.17.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/dc/9c/0b15fb47b464e1b663b1acd1253a062aa5feecb07d4e597daea542ebd2b5/filelock-3.17.0.tar.gz", hash = "sha256:ee4e77401ef576ebb38cd7f13b9b28893194acc20a8e68e18730ba9c0e54660e", size = 18027 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/89/ec/00d68c4ddfedfe64159999e5f8a98fb8442729a63e2077eb9dcd89623d27/filelock-3.17.0-py3-none-any.whl", hash = "sha256:533dc2f7ba78dc2f0f531fc6c4940addf7b70a481e269a5a3b93be94ffbe8338", size = 16164 },
]

[[package]]
name = "fire"
version = "0.7.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "termcolor" },
]
sdist = { url = "https://files.pythonhosted.org/packages/6b/b6/82c7e601d6d3c3278c40b7bd35e17e82aa227f050aa9f66cb7b7fce29471/fire-0.7.0.tar.gz", hash = "sha256:961550f07936eaf65ad1dc8360f2b2bf8408fad46abbfa4d2a3794f8d2a95cdf", size = 87189 }

[[package]]
name = "frozenlist"
version = "1.5.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/8f/ed/0f4cec13a93c02c47ec32d81d11c0c1efbadf4a471e3f3ce7cad366cbbd3/frozenlist-1.5.0.tar.gz", hash = "sha256:81d5af29e61b9c8348e876d442253723928dce6433e0e76cd925cd83f1b4b817", size = 39930 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/54/79/29d44c4af36b2b240725dce566b20f63f9b36ef267aaaa64ee7466f4f2f8/frozenlist-1.5.0-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:5b6a66c18b5b9dd261ca98dffcb826a525334b2f29e7caa54e182255c5f6a65a", size = 94451 },
    { url = "https://files.pythonhosted.org/packages/47/47/0c999aeace6ead8a44441b4f4173e2261b18219e4ad1fe9a479871ca02fc/frozenlist-1.5.0-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:d1b3eb7b05ea246510b43a7e53ed1653e55c2121019a97e60cad7efb881a97bb", size = 54301 },
    { url = "https://files.pythonhosted.org/packages/8d/60/107a38c1e54176d12e06e9d4b5d755b677d71d1219217cee063911b1384f/frozenlist-1.5.0-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:15538c0cbf0e4fa11d1e3a71f823524b0c46299aed6e10ebb4c2089abd8c3bec", size = 52213 },
    { url = "https://files.pythonhosted.org/packages/17/62/594a6829ac5679c25755362a9dc93486a8a45241394564309641425d3ff6/frozenlist-1.5.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:e79225373c317ff1e35f210dd5f1344ff31066ba8067c307ab60254cd3a78ad5", size = 240946 },
    { url = "https://files.pythonhosted.org/packages/7e/75/6c8419d8f92c80dd0ee3f63bdde2702ce6398b0ac8410ff459f9b6f2f9cb/frozenlist-1.5.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:9272fa73ca71266702c4c3e2d4a28553ea03418e591e377a03b8e3659d94fa76", size = 264608 },
    { url = "https://files.pythonhosted.org/packages/88/3e/82a6f0b84bc6fb7e0be240e52863c6d4ab6098cd62e4f5b972cd31e002e8/frozenlist-1.5.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:498524025a5b8ba81695761d78c8dd7382ac0b052f34e66939c42df860b8ff17", size = 261361 },
    { url = "https://files.pythonhosted.org/packages/fd/85/14e5f9ccac1b64ff2f10c927b3ffdf88772aea875882406f9ba0cec8ad84/frozenlist-1.5.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:92b5278ed9d50fe610185ecd23c55d8b307d75ca18e94c0e7de328089ac5dcba", size = 231649 },
    { url = "https://files.pythonhosted.org/packages/ee/59/928322800306f6529d1852323014ee9008551e9bb027cc38d276cbc0b0e7/frozenlist-1.5.0-cp310-cp310-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7f3c8c1dacd037df16e85227bac13cca58c30da836c6f936ba1df0c05d046d8d", size = 241853 },
    { url = "https://files.pythonhosted.org/packages/7d/bd/e01fa4f146a6f6c18c5d34cab8abdc4013774a26c4ff851128cd1bd3008e/frozenlist-1.5.0-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:f2ac49a9bedb996086057b75bf93538240538c6d9b38e57c82d51f75a73409d2", size = 243652 },
    { url = "https://files.pythonhosted.org/packages/a5/bd/e4771fd18a8ec6757033f0fa903e447aecc3fbba54e3630397b61596acf0/frozenlist-1.5.0-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:e66cc454f97053b79c2ab09c17fbe3c825ea6b4de20baf1be28919460dd7877f", size = 241734 },
    { url = "https://files.pythonhosted.org/packages/21/13/c83821fa5544af4f60c5d3a65d054af3213c26b14d3f5f48e43e5fb48556/frozenlist-1.5.0-cp310-cp310-musllinux_1_2_ppc64le.whl", hash = "sha256:5a3ba5f9a0dfed20337d3e966dc359784c9f96503674c2faf015f7fe8e96798c", size = 260959 },
    { url = "https://files.pythonhosted.org/packages/71/f3/1f91c9a9bf7ed0e8edcf52698d23f3c211d8d00291a53c9f115ceb977ab1/frozenlist-1.5.0-cp310-cp310-musllinux_1_2_s390x.whl", hash = "sha256:6321899477db90bdeb9299ac3627a6a53c7399c8cd58d25da094007402b039ab", size = 262706 },
    { url = "https://files.pythonhosted.org/packages/4c/22/4a256fdf5d9bcb3ae32622c796ee5ff9451b3a13a68cfe3f68e2c95588ce/frozenlist-1.5.0-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:76e4753701248476e6286f2ef492af900ea67d9706a0155335a40ea21bf3b2f5", size = 250401 },
    { url = "https://files.pythonhosted.org/packages/af/89/c48ebe1f7991bd2be6d5f4ed202d94960c01b3017a03d6954dd5fa9ea1e8/frozenlist-1.5.0-cp310-cp310-win32.whl", hash = "sha256:977701c081c0241d0955c9586ffdd9ce44f7a7795df39b9151cd9a6fd0ce4cfb", size = 45498 },
    { url = "https://files.pythonhosted.org/packages/28/2f/cc27d5f43e023d21fe5c19538e08894db3d7e081cbf582ad5ed366c24446/frozenlist-1.5.0-cp310-cp310-win_amd64.whl", hash = "sha256:189f03b53e64144f90990d29a27ec4f7997d91ed3d01b51fa39d2dbe77540fd4", size = 51622 },
    { url = "https://files.pythonhosted.org/packages/79/43/0bed28bf5eb1c9e4301003b74453b8e7aa85fb293b31dde352aac528dafc/frozenlist-1.5.0-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:fd74520371c3c4175142d02a976aee0b4cb4a7cc912a60586ffd8d5929979b30", size = 94987 },
    { url = "https://files.pythonhosted.org/packages/bb/bf/b74e38f09a246e8abbe1e90eb65787ed745ccab6eaa58b9c9308e052323d/frozenlist-1.5.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:2f3f7a0fbc219fb4455264cae4d9f01ad41ae6ee8524500f381de64ffaa077d5", size = 54584 },
    { url = "https://files.pythonhosted.org/packages/2c/31/ab01375682f14f7613a1ade30149f684c84f9b8823a4391ed950c8285656/frozenlist-1.5.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:f47c9c9028f55a04ac254346e92977bf0f166c483c74b4232bee19a6697e4778", size = 52499 },
    { url = "https://files.pythonhosted.org/packages/98/a8/d0ac0b9276e1404f58fec3ab6e90a4f76b778a49373ccaf6a563f100dfbc/frozenlist-1.5.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0996c66760924da6e88922756d99b47512a71cfd45215f3570bf1e0b694c206a", size = 276357 },
    { url = "https://files.pythonhosted.org/packages/ad/c9/c7761084fa822f07dac38ac29f841d4587570dd211e2262544aa0b791d21/frozenlist-1.5.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:a2fe128eb4edeabe11896cb6af88fca5346059f6c8d807e3b910069f39157869", size = 287516 },
    { url = "https://files.pythonhosted.org/packages/a1/ff/cd7479e703c39df7bdab431798cef89dc75010d8aa0ca2514c5b9321db27/frozenlist-1.5.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:1a8ea951bbb6cacd492e3948b8da8c502a3f814f5d20935aae74b5df2b19cf3d", size = 283131 },
    { url = "https://files.pythonhosted.org/packages/59/a0/370941beb47d237eca4fbf27e4e91389fd68699e6f4b0ebcc95da463835b/frozenlist-1.5.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:de537c11e4aa01d37db0d403b57bd6f0546e71a82347a97c6a9f0dcc532b3a45", size = 261320 },
    { url = "https://files.pythonhosted.org/packages/b8/5f/c10123e8d64867bc9b4f2f510a32042a306ff5fcd7e2e09e5ae5100ee333/frozenlist-1.5.0-cp311-cp311-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9c2623347b933fcb9095841f1cc5d4ff0b278addd743e0e966cb3d460278840d", size = 274877 },
    { url = "https://files.pythonhosted.org/packages/fa/79/38c505601ae29d4348f21706c5d89755ceded02a745016ba2f58bd5f1ea6/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:cee6798eaf8b1416ef6909b06f7dc04b60755206bddc599f52232606e18179d3", size = 269592 },
    { url = "https://files.pythonhosted.org/packages/19/e2/39f3a53191b8204ba9f0bb574b926b73dd2efba2a2b9d2d730517e8f7622/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:f5f9da7f5dbc00a604fe74aa02ae7c98bcede8a3b8b9666f9f86fc13993bc71a", size = 265934 },
    { url = "https://files.pythonhosted.org/packages/d5/c9/3075eb7f7f3a91f1a6b00284af4de0a65a9ae47084930916f5528144c9dd/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:90646abbc7a5d5c7c19461d2e3eeb76eb0b204919e6ece342feb6032c9325ae9", size = 283859 },
    { url = "https://files.pythonhosted.org/packages/05/f5/549f44d314c29408b962fa2b0e69a1a67c59379fb143b92a0a065ffd1f0f/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:bdac3c7d9b705d253b2ce370fde941836a5f8b3c5c2b8fd70940a3ea3af7f4f2", size = 287560 },
    { url = "https://files.pythonhosted.org/packages/9d/f8/cb09b3c24a3eac02c4c07a9558e11e9e244fb02bf62c85ac2106d1eb0c0b/frozenlist-1.5.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:03d33c2ddbc1816237a67f66336616416e2bbb6beb306e5f890f2eb22b959cdf", size = 277150 },
    { url = "https://files.pythonhosted.org/packages/37/48/38c2db3f54d1501e692d6fe058f45b6ad1b358d82cd19436efab80cfc965/frozenlist-1.5.0-cp311-cp311-win32.whl", hash = "sha256:237f6b23ee0f44066219dae14c70ae38a63f0440ce6750f868ee08775073f942", size = 45244 },
    { url = "https://files.pythonhosted.org/packages/ca/8c/2ddffeb8b60a4bce3b196c32fcc30d8830d4615e7b492ec2071da801b8ad/frozenlist-1.5.0-cp311-cp311-win_amd64.whl", hash = "sha256:0cc974cc93d32c42e7b0f6cf242a6bd941c57c61b618e78b6c0a96cb72788c1d", size = 51634 },
    { url = "https://files.pythonhosted.org/packages/79/73/fa6d1a96ab7fd6e6d1c3500700963eab46813847f01ef0ccbaa726181dd5/frozenlist-1.5.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:31115ba75889723431aa9a4e77d5f398f5cf976eea3bdf61749731f62d4a4a21", size = 94026 },
    { url = "https://files.pythonhosted.org/packages/ab/04/ea8bf62c8868b8eada363f20ff1b647cf2e93377a7b284d36062d21d81d1/frozenlist-1.5.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:7437601c4d89d070eac8323f121fcf25f88674627505334654fd027b091db09d", size = 54150 },
    { url = "https://files.pythonhosted.org/packages/d0/9a/8e479b482a6f2070b26bda572c5e6889bb3ba48977e81beea35b5ae13ece/frozenlist-1.5.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:7948140d9f8ece1745be806f2bfdf390127cf1a763b925c4a805c603df5e697e", size = 51927 },
    { url = "https://files.pythonhosted.org/packages/e3/12/2aad87deb08a4e7ccfb33600871bbe8f0e08cb6d8224371387f3303654d7/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:feeb64bc9bcc6b45c6311c9e9b99406660a9c05ca8a5b30d14a78555088b0b3a", size = 282647 },
    { url = "https://files.pythonhosted.org/packages/77/f2/07f06b05d8a427ea0060a9cef6e63405ea9e0d761846b95ef3fb3be57111/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:683173d371daad49cffb8309779e886e59c2f369430ad28fe715f66d08d4ab1a", size = 289052 },
    { url = "https://files.pythonhosted.org/packages/bd/9f/8bf45a2f1cd4aa401acd271b077989c9267ae8463e7c8b1eb0d3f561b65e/frozenlist-1.5.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:7d57d8f702221405a9d9b40f9da8ac2e4a1a8b5285aac6100f3393675f0a85ee", size = 291719 },
    { url = "https://files.pythonhosted.org/packages/41/d1/1f20fd05a6c42d3868709b7604c9f15538a29e4f734c694c6bcfc3d3b935/frozenlist-1.5.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:30c72000fbcc35b129cb09956836c7d7abf78ab5416595e4857d1cae8d6251a6", size = 267433 },
    { url = "https://files.pythonhosted.org/packages/af/f2/64b73a9bb86f5a89fb55450e97cd5c1f84a862d4ff90d9fd1a73ab0f64a5/frozenlist-1.5.0-cp312-cp312-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:000a77d6034fbad9b6bb880f7ec073027908f1b40254b5d6f26210d2dab1240e", size = 283591 },
    { url = "https://files.pythonhosted.org/packages/29/e2/ffbb1fae55a791fd6c2938dd9ea779509c977435ba3940b9f2e8dc9d5316/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:5d7f5a50342475962eb18b740f3beecc685a15b52c91f7d975257e13e029eca9", size = 273249 },
    { url = "https://files.pythonhosted.org/packages/2e/6e/008136a30798bb63618a114b9321b5971172a5abddff44a100c7edc5ad4f/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:87f724d055eb4785d9be84e9ebf0f24e392ddfad00b3fe036e43f489fafc9039", size = 271075 },
    { url = "https://files.pythonhosted.org/packages/ae/f0/4e71e54a026b06724cec9b6c54f0b13a4e9e298cc8db0f82ec70e151f5ce/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:6e9080bb2fb195a046e5177f10d9d82b8a204c0736a97a153c2466127de87784", size = 285398 },
    { url = "https://files.pythonhosted.org/packages/4d/36/70ec246851478b1c0b59f11ef8ade9c482ff447c1363c2bd5fad45098b12/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:9b93d7aaa36c966fa42efcaf716e6b3900438632a626fb09c049f6a2f09fc631", size = 294445 },
    { url = "https://files.pythonhosted.org/packages/37/e0/47f87544055b3349b633a03c4d94b405956cf2437f4ab46d0928b74b7526/frozenlist-1.5.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:52ef692a4bc60a6dd57f507429636c2af8b6046db8b31b18dac02cbc8f507f7f", size = 280569 },
    { url = "https://files.pythonhosted.org/packages/f9/7c/490133c160fb6b84ed374c266f42800e33b50c3bbab1652764e6e1fc498a/frozenlist-1.5.0-cp312-cp312-win32.whl", hash = "sha256:29d94c256679247b33a3dc96cce0f93cbc69c23bf75ff715919332fdbb6a32b8", size = 44721 },
    { url = "https://files.pythonhosted.org/packages/b1/56/4e45136ffc6bdbfa68c29ca56ef53783ef4c2fd395f7cbf99a2624aa9aaa/frozenlist-1.5.0-cp312-cp312-win_amd64.whl", hash = "sha256:8969190d709e7c48ea386db202d708eb94bdb29207a1f269bab1196ce0dcca1f", size = 51329 },
    { url = "https://files.pythonhosted.org/packages/da/3b/915f0bca8a7ea04483622e84a9bd90033bab54bdf485479556c74fd5eaf5/frozenlist-1.5.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:7a1a048f9215c90973402e26c01d1cff8a209e1f1b53f72b95c13db61b00f953", size = 91538 },
    { url = "https://files.pythonhosted.org/packages/c7/d1/a7c98aad7e44afe5306a2b068434a5830f1470675f0e715abb86eb15f15b/frozenlist-1.5.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:dd47a5181ce5fcb463b5d9e17ecfdb02b678cca31280639255ce9d0e5aa67af0", size = 52849 },
    { url = "https://files.pythonhosted.org/packages/3a/c8/76f23bf9ab15d5f760eb48701909645f686f9c64fbb8982674c241fbef14/frozenlist-1.5.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:1431d60b36d15cda188ea222033eec8e0eab488f39a272461f2e6d9e1a8e63c2", size = 50583 },
    { url = "https://files.pythonhosted.org/packages/1f/22/462a3dd093d11df623179d7754a3b3269de3b42de2808cddef50ee0f4f48/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:6482a5851f5d72767fbd0e507e80737f9c8646ae7fd303def99bfe813f76cf7f", size = 265636 },
    { url = "https://files.pythonhosted.org/packages/80/cf/e075e407fc2ae7328155a1cd7e22f932773c8073c1fc78016607d19cc3e5/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:44c49271a937625619e862baacbd037a7ef86dd1ee215afc298a417ff3270608", size = 270214 },
    { url = "https://files.pythonhosted.org/packages/a1/58/0642d061d5de779f39c50cbb00df49682832923f3d2ebfb0fedf02d05f7f/frozenlist-1.5.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:12f78f98c2f1c2429d42e6a485f433722b0061d5c0b0139efa64f396efb5886b", size = 273905 },
    { url = "https://files.pythonhosted.org/packages/ab/66/3fe0f5f8f2add5b4ab7aa4e199f767fd3b55da26e3ca4ce2cc36698e50c4/frozenlist-1.5.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ce3aa154c452d2467487765e3adc730a8c153af77ad84096bc19ce19a2400840", size = 250542 },
    { url = "https://files.pythonhosted.org/packages/f6/b8/260791bde9198c87a465224e0e2bb62c4e716f5d198fc3a1dacc4895dbd1/frozenlist-1.5.0-cp313-cp313-manylinux_2_5_x86_64.manylinux1_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9b7dc0c4338e6b8b091e8faf0db3168a37101943e687f373dce00959583f7439", size = 267026 },
    { url = "https://files.pythonhosted.org/packages/2e/a4/3d24f88c527f08f8d44ade24eaee83b2627793fa62fa07cbb7ff7a2f7d42/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:45e0896250900b5aa25180f9aec243e84e92ac84bd4a74d9ad4138ef3f5c97de", size = 257690 },
    { url = "https://files.pythonhosted.org/packages/de/9a/d311d660420b2beeff3459b6626f2ab4fb236d07afbdac034a4371fe696e/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:561eb1c9579d495fddb6da8959fd2a1fca2c6d060d4113f5844b433fc02f2641", size = 253893 },
    { url = "https://files.pythonhosted.org/packages/c6/23/e491aadc25b56eabd0f18c53bb19f3cdc6de30b2129ee0bc39cd387cd560/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:df6e2f325bfee1f49f81aaac97d2aa757c7646534a06f8f577ce184afe2f0a9e", size = 267006 },
    { url = "https://files.pythonhosted.org/packages/08/c4/ab918ce636a35fb974d13d666dcbe03969592aeca6c3ab3835acff01f79c/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:140228863501b44b809fb39ec56b5d4071f4d0aa6d216c19cbb08b8c5a7eadb9", size = 276157 },
    { url = "https://files.pythonhosted.org/packages/c0/29/3b7a0bbbbe5a34833ba26f686aabfe982924adbdcafdc294a7a129c31688/frozenlist-1.5.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:7707a25d6a77f5d27ea7dc7d1fc608aa0a478193823f88511ef5e6b8a48f9d03", size = 264642 },
    { url = "https://files.pythonhosted.org/packages/ab/42/0595b3dbffc2e82d7fe658c12d5a5bafcd7516c6bf2d1d1feb5387caa9c1/frozenlist-1.5.0-cp313-cp313-win32.whl", hash = "sha256:31a9ac2b38ab9b5a8933b693db4939764ad3f299fcaa931a3e605bc3460e693c", size = 44914 },
    { url = "https://files.pythonhosted.org/packages/17/c4/b7db1206a3fea44bf3b838ca61deb6f74424a8a5db1dd53ecb21da669be6/frozenlist-1.5.0-cp313-cp313-win_amd64.whl", hash = "sha256:11aabdd62b8b9c4b84081a3c246506d1cddd2dd93ff0ad53ede5defec7886b28", size = 51167 },
    { url = "https://files.pythonhosted.org/packages/c6/c8/a5be5b7550c10858fcf9b0ea054baccab474da77d37f1e828ce043a3a5d4/frozenlist-1.5.0-py3-none-any.whl", hash = "sha256:d994863bba198a4a518b467bb971c56e1db3f180a25c6cf7bb1949c267f748c3", size = 11901 },
]

[[package]]
name = "id"
version = "1.5.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/22/11/102da08f88412d875fa2f1a9a469ff7ad4c874b0ca6fed0048fe385bdb3d/id-1.5.0.tar.gz", hash = "sha256:292cb8a49eacbbdbce97244f47a97b4c62540169c976552e497fd57df0734c1d", size = 15237 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9f/cb/18326d2d89ad3b0dd143da971e77afd1e6ca6674f1b1c3df4b6bec6279fc/id-1.5.0-py3-none-any.whl", hash = "sha256:f1434e1cef91f2cbb8a4ec64663d5a23b9ed43ef44c4c957d02583d61714c658", size = 13611 },
]

[[package]]
name = "identify"
version = "2.6.8"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f9/fa/5eb460539e6f5252a7c5a931b53426e49258cde17e3d50685031c300a8fd/identify-2.6.8.tar.gz", hash = "sha256:61491417ea2c0c5c670484fd8abbb34de34cdae1e5f39a73ee65e48e4bb663fc", size = 99249 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/78/8c/4bfcab2d8286473b8d83ea742716f4b79290172e75f91142bc1534b05b9a/identify-2.6.8-py2.py3-none-any.whl", hash = "sha256:83657f0f766a3c8d0eaea16d4ef42494b39b34629a4b3192a9d020d349b3e255", size = 99109 },
]

[[package]]
name = "idna"
version = "3.10"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/f1/70/7703c29685631f5a7590aa73f1f1d3fa9a380e654b86af429e0934a32f7d/idna-3.10.tar.gz", hash = "sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9", size = 190490 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c6/c88e154df9c4e1a2a66ccf0005a88dfb2650c1dffb6f5ce603dfbd452ce3/idna-3.10-py3-none-any.whl", hash = "sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3", size = 70442 },
]

[[package]]
name = "importlib-metadata"
version = "8.6.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "zipp" },
]
sdist = { url = "https://files.pythonhosted.org/packages/33/08/c1395a292bb23fd03bdf572a1357c5a733d3eecbab877641ceacab23db6e/importlib_metadata-8.6.1.tar.gz", hash = "sha256:310b41d755445d74569f993ccfc22838295d9fe005425094fad953d7f15c8580", size = 55767 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/79/9d/0fb148dc4d6fa4a7dd1d8378168d9b4cd8d4560a6fbf6f0121c5fc34eb68/importlib_metadata-8.6.1-py3-none-any.whl", hash = "sha256:02a89390c1e15fdfdc0d7c6b25cb3e62650d0494005c97d6f148bf5b9787525e", size = 26971 },
]

[[package]]
name = "iniconfig"
version = "2.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d7/4b/cbd8e699e64a6f16ca3a8220661b5f83792b3017d0f79807cb8708d33913/iniconfig-2.0.0.tar.gz", hash = "sha256:2d91e135bf72d31a410b17c16da610a82cb55f6b0477d1a902134b24a455b8b3", size = 4646 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ef/a6/62565a6e1cf69e10f5727360368e451d4b7f58beeac6173dc9db836a5b46/iniconfig-2.0.0-py3-none-any.whl", hash = "sha256:b6a85871a79d2e3b22d2d1b94ac2824226a63c6b741c88f7ae975f18b6778374", size = 5892 },
]

[[package]]
name = "isort"
version = "6.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1c/28/b382d1656ac0ee4cef4bf579b13f9c6c813bff8a5cb5996669592c8c75fa/isort-6.0.0.tar.gz", hash = "sha256:75d9d8a1438a9432a7d7b54f2d3b45cad9a4a0fdba43617d9873379704a8bdf1", size = 828356 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/76/c7/d6017f09ae5b1206fbe531f7af3b6dac1f67aedcbd2e79f3b386c27955d6/isort-6.0.0-py3-none-any.whl", hash = "sha256:567954102bb47bb12e0fae62606570faacddd441e45683968c8d1734fb1af892", size = 94053 },
]

[[package]]
name = "jaraco-classes"
version = "3.4.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "more-itertools" },
]
sdist = { url = "https://files.pythonhosted.org/packages/06/c0/ed4a27bc5571b99e3cff68f8a9fa5b56ff7df1c2251cc715a652ddd26402/jaraco.classes-3.4.0.tar.gz", hash = "sha256:47a024b51d0239c0dd8c8540c6c7f484be3b8fcf0b2d85c13825780d3b3f3acd", size = 11780 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7f/66/b15ce62552d84bbfcec9a4873ab79d993a1dd4edb922cbfccae192bd5b5f/jaraco.classes-3.4.0-py3-none-any.whl", hash = "sha256:f662826b6bed8cace05e7ff873ce0f9283b5c924470fe664fff1c2f00f581790", size = 6777 },
]

[[package]]
name = "jaraco-context"
version = "6.0.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "backports-tarfile", marker = "python_full_version < '3.12'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/df/ad/f3777b81bf0b6e7bc7514a1656d3e637b2e8e15fab2ce3235730b3e7a4e6/jaraco_context-6.0.1.tar.gz", hash = "sha256:9bae4ea555cf0b14938dc0aee7c9f32ed303aa20a3b73e7dc80111628792d1b3", size = 13912 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ff/db/0c52c4cf5e4bd9f5d7135ec7669a3a767af21b3a308e1ed3674881e52b62/jaraco.context-6.0.1-py3-none-any.whl", hash = "sha256:f797fc481b490edb305122c9181830a3a5b76d84ef6d1aef2fb9b47ab956f9e4", size = 6825 },
]

[[package]]
name = "jaraco-functools"
version = "4.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "more-itertools" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ab/23/9894b3df5d0a6eb44611c36aec777823fc2e07740dabbd0b810e19594013/jaraco_functools-4.1.0.tar.gz", hash = "sha256:70f7e0e2ae076498e212562325e805204fc092d7b4c17e0e86c959e249701a9d", size = 19159 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9f/4f/24b319316142c44283d7540e76c7b5a6dbd5db623abd86bb7b3491c21018/jaraco.functools-4.1.0-py3-none-any.whl", hash = "sha256:ad159f13428bc4acbf5541ad6dec511f91573b90fba04df61dafa2a1231cf649", size = 10187 },
]

[[package]]
name = "jeepney"
version = "0.8.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d6/f4/154cf374c2daf2020e05c3c6a03c91348d59b23c5366e968feb198306fdf/jeepney-0.8.0.tar.gz", hash = "sha256:5efe48d255973902f6badc3ce55e2aa6c5c3b3bc642059ef3a91247bcfcc5806", size = 106005 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ae/72/2a1e2290f1ab1e06f71f3d0f1646c9e4634e70e1d37491535e19266e8dc9/jeepney-0.8.0-py3-none-any.whl", hash = "sha256:c0a454ad016ca575060802ee4d590dd912e35c122fa04e70306de3d076cce755", size = 48435 },
]

[[package]]
name = "keyring"
version = "25.6.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "importlib-metadata", marker = "python_full_version < '3.12'" },
    { name = "jaraco-classes" },
    { name = "jaraco-context" },
    { name = "jaraco-functools" },
    { name = "jeepney", marker = "sys_platform == 'linux'" },
    { name = "pywin32-ctypes", marker = "sys_platform == 'win32'" },
    { name = "secretstorage", marker = "sys_platform == 'linux'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/70/09/d904a6e96f76ff214be59e7aa6ef7190008f52a0ab6689760a98de0bf37d/keyring-25.6.0.tar.gz", hash = "sha256:0b39998aa941431eb3d9b0d4b2460bc773b9df6fed7621c2dfb291a7e0187a66", size = 62750 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d3/32/da7f44bcb1105d3e88a0b74ebdca50c59121d2ddf71c9e34ba47df7f3a56/keyring-25.6.0-py3-none-any.whl", hash = "sha256:552a3f7af126ece7ed5c89753650eec89c7eaae8617d0aa4d9ad2b75111266bd", size = 39085 },
]

[[package]]
name = "loguru"
version = "0.7.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "win32-setctime", marker = "sys_platform == 'win32'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/3a/05/a1dae3dffd1116099471c643b8924f5aa6524411dc6c63fdae648c4f1aca/loguru-0.7.3.tar.gz", hash = "sha256:19480589e77d47b8d85b2c827ad95d49bf31b0dcde16593892eb51dd18706eb6", size = 63559 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/0c/29/0348de65b8cc732daa3e33e67806420b2ae89bdce2b04af740289c5c6c8c/loguru-0.7.3-py3-none-any.whl", hash = "sha256:31a33c10c8e1e10422bfd431aeb5d351c7cf7fa671e3c4df004162264b28220c", size = 61595 },
]

[[package]]
name = "markdown-it-py"
version = "3.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "mdurl" },
]
sdist = { url = "https://files.pythonhosted.org/packages/38/71/3b932df36c1a044d397a1f92d1cf91ee0a503d91e470cbd670aa66b07ed0/markdown-it-py-3.0.0.tar.gz", hash = "sha256:e3f60a94fa066dc52ec76661e37c851cb232d92f9886b15cb560aaada2df8feb", size = 74596 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/42/d7/1ec15b46af6af88f19b8e5ffea08fa375d433c998b8a7639e76935c14f1f/markdown_it_py-3.0.0-py3-none-any.whl", hash = "sha256:355216845c60bd96232cd8d8c40e8f9765cc86f46880e43a8fd22dc1a1a8cab1", size = 87528 },
]

[[package]]
name = "mdurl"
version = "0.1.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d6/54/cfe61301667036ec958cb99bd3efefba235e65cdeb9c84d24a8293ba1d90/mdurl-0.1.2.tar.gz", hash = "sha256:bb413d29f5eea38f31dd4754dd7377d4465116fb207585f97bf925588687c1ba", size = 8729 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b3/38/89ba8ad64ae25be8de66a6d463314cf1eb366222074cfda9ee839c56a4b4/mdurl-0.1.2-py3-none-any.whl", hash = "sha256:84008a41e51615a49fc9966191ff91509e3c40b939176e643fd50a5c2196b8f8", size = 9979 },
]

[[package]]
name = "more-itertools"
version = "10.6.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/88/3b/7fa1fe835e2e93fd6d7b52b2f95ae810cf5ba133e1845f726f5a992d62c2/more-itertools-10.6.0.tar.gz", hash = "sha256:2cd7fad1009c31cc9fb6a035108509e6547547a7a738374f10bd49a09eb3ee3b", size = 125009 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/23/62/0fe302c6d1be1c777cab0616e6302478251dfbf9055ad426f5d0def75c89/more_itertools-10.6.0-py3-none-any.whl", hash = "sha256:6eb054cb4b6db1473f6e15fcc676a08e4732548acd47c708f0e179c2c7c01e89", size = 63038 },
]

[[package]]
name = "multidict"
version = "6.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions", marker = "python_full_version < '3.11'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/d6/be/504b89a5e9ca731cd47487e91c469064f8ae5af93b7259758dcfc2b9c848/multidict-6.1.0.tar.gz", hash = "sha256:22ae2ebf9b0c69d206c003e2f6a914ea33f0a932d4aa16f236afc049d9958f4a", size = 64002 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/29/68/259dee7fd14cf56a17c554125e534f6274c2860159692a414d0b402b9a6d/multidict-6.1.0-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:3380252550e372e8511d49481bd836264c009adb826b23fefcc5dd3c69692f60", size = 48628 },
    { url = "https://files.pythonhosted.org/packages/50/79/53ba256069fe5386a4a9e80d4e12857ced9de295baf3e20c68cdda746e04/multidict-6.1.0-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:99f826cbf970077383d7de805c0681799491cb939c25450b9b5b3ced03ca99f1", size = 29327 },
    { url = "https://files.pythonhosted.org/packages/ff/10/71f1379b05b196dae749b5ac062e87273e3f11634f447ebac12a571d90ae/multidict-6.1.0-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:a114d03b938376557927ab23f1e950827c3b893ccb94b62fd95d430fd0e5cf53", size = 29689 },
    { url = "https://files.pythonhosted.org/packages/71/45/70bac4f87438ded36ad4793793c0095de6572d433d98575a5752629ef549/multidict-6.1.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b1c416351ee6271b2f49b56ad7f308072f6f44b37118d69c2cad94f3fa8a40d5", size = 126639 },
    { url = "https://files.pythonhosted.org/packages/80/cf/17f35b3b9509b4959303c05379c4bfb0d7dd05c3306039fc79cf035bbac0/multidict-6.1.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:6b5d83030255983181005e6cfbac1617ce9746b219bc2aad52201ad121226581", size = 134315 },
    { url = "https://files.pythonhosted.org/packages/ef/1f/652d70ab5effb33c031510a3503d4d6efc5ec93153562f1ee0acdc895a57/multidict-6.1.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:3e97b5e938051226dc025ec80980c285b053ffb1e25a3db2a3aa3bc046bf7f56", size = 129471 },
    { url = "https://files.pythonhosted.org/packages/a6/64/2dd6c4c681688c0165dea3975a6a4eab4944ea30f35000f8b8af1df3148c/multidict-6.1.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:d618649d4e70ac6efcbba75be98b26ef5078faad23592f9b51ca492953012429", size = 124585 },
    { url = "https://files.pythonhosted.org/packages/87/56/e6ee5459894c7e554b57ba88f7257dc3c3d2d379cb15baaa1e265b8c6165/multidict-6.1.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:10524ebd769727ac77ef2278390fb0068d83f3acb7773792a5080f2b0abf7748", size = 116957 },
    { url = "https://files.pythonhosted.org/packages/36/9e/616ce5e8d375c24b84f14fc263c7ef1d8d5e8ef529dbc0f1df8ce71bb5b8/multidict-6.1.0-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:ff3827aef427c89a25cc96ded1759271a93603aba9fb977a6d264648ebf989db", size = 128609 },
    { url = "https://files.pythonhosted.org/packages/8c/4f/4783e48a38495d000f2124020dc96bacc806a4340345211b1ab6175a6cb4/multidict-6.1.0-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:06809f4f0f7ab7ea2cabf9caca7d79c22c0758b58a71f9d32943ae13c7ace056", size = 123016 },
    { url = "https://files.pythonhosted.org/packages/3e/b3/4950551ab8fc39862ba5e9907dc821f896aa829b4524b4deefd3e12945ab/multidict-6.1.0-cp310-cp310-musllinux_1_2_ppc64le.whl", hash = "sha256:f179dee3b863ab1c59580ff60f9d99f632f34ccb38bf67a33ec6b3ecadd0fd76", size = 133542 },
    { url = "https://files.pythonhosted.org/packages/96/4d/f0ce6ac9914168a2a71df117935bb1f1781916acdecbb43285e225b484b8/multidict-6.1.0-cp310-cp310-musllinux_1_2_s390x.whl", hash = "sha256:aaed8b0562be4a0876ee3b6946f6869b7bcdb571a5d1496683505944e268b160", size = 130163 },
    { url = "https://files.pythonhosted.org/packages/be/72/17c9f67e7542a49dd252c5ae50248607dfb780bcc03035907dafefb067e3/multidict-6.1.0-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:3c8b88a2ccf5493b6c8da9076fb151ba106960a2df90c2633f342f120751a9e7", size = 126832 },
    { url = "https://files.pythonhosted.org/packages/71/9f/72d719e248cbd755c8736c6d14780533a1606ffb3fbb0fbd77da9f0372da/multidict-6.1.0-cp310-cp310-win32.whl", hash = "sha256:4a9cb68166a34117d6646c0023c7b759bf197bee5ad4272f420a0141d7eb03a0", size = 26402 },
    { url = "https://files.pythonhosted.org/packages/04/5a/d88cd5d00a184e1ddffc82aa2e6e915164a6d2641ed3606e766b5d2f275a/multidict-6.1.0-cp310-cp310-win_amd64.whl", hash = "sha256:20b9b5fbe0b88d0bdef2012ef7dee867f874b72528cf1d08f1d59b0e3850129d", size = 28800 },
    { url = "https://files.pythonhosted.org/packages/93/13/df3505a46d0cd08428e4c8169a196131d1b0c4b515c3649829258843dde6/multidict-6.1.0-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:3efe2c2cb5763f2f1b275ad2bf7a287d3f7ebbef35648a9726e3b69284a4f3d6", size = 48570 },
    { url = "https://files.pythonhosted.org/packages/f0/e1/a215908bfae1343cdb72f805366592bdd60487b4232d039c437fe8f5013d/multidict-6.1.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:c7053d3b0353a8b9de430a4f4b4268ac9a4fb3481af37dfe49825bf45ca24156", size = 29316 },
    { url = "https://files.pythonhosted.org/packages/70/0f/6dc70ddf5d442702ed74f298d69977f904960b82368532c88e854b79f72b/multidict-6.1.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:27e5fc84ccef8dfaabb09d82b7d179c7cf1a3fbc8a966f8274fcb4ab2eb4cadb", size = 29640 },
    { url = "https://files.pythonhosted.org/packages/d8/6d/9c87b73a13d1cdea30b321ef4b3824449866bd7f7127eceed066ccb9b9ff/multidict-6.1.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0e2b90b43e696f25c62656389d32236e049568b39320e2735d51f08fd362761b", size = 131067 },
    { url = "https://files.pythonhosted.org/packages/cc/1e/1b34154fef373371fd6c65125b3d42ff5f56c7ccc6bfff91b9b3c60ae9e0/multidict-6.1.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:d83a047959d38a7ff552ff94be767b7fd79b831ad1cd9920662db05fec24fe72", size = 138507 },
    { url = "https://files.pythonhosted.org/packages/fb/e0/0bc6b2bac6e461822b5f575eae85da6aae76d0e2a79b6665d6206b8e2e48/multidict-6.1.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:d1a9dd711d0877a1ece3d2e4fea11a8e75741ca21954c919406b44e7cf971304", size = 133905 },
    { url = "https://files.pythonhosted.org/packages/ba/af/73d13b918071ff9b2205fcf773d316e0f8fefb4ec65354bbcf0b10908cc6/multidict-6.1.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:ec2abea24d98246b94913b76a125e855eb5c434f7c46546046372fe60f666351", size = 129004 },
    { url = "https://files.pythonhosted.org/packages/74/21/23960627b00ed39643302d81bcda44c9444ebcdc04ee5bedd0757513f259/multidict-6.1.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:4867cafcbc6585e4b678876c489b9273b13e9fff9f6d6d66add5e15d11d926cb", size = 121308 },
    { url = "https://files.pythonhosted.org/packages/8b/5c/cf282263ffce4a596ed0bb2aa1a1dddfe1996d6a62d08842a8d4b33dca13/multidict-6.1.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:5b48204e8d955c47c55b72779802b219a39acc3ee3d0116d5080c388970b76e3", size = 132608 },
    { url = "https://files.pythonhosted.org/packages/d7/3e/97e778c041c72063f42b290888daff008d3ab1427f5b09b714f5a8eff294/multidict-6.1.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:d8fff389528cad1618fb4b26b95550327495462cd745d879a8c7c2115248e399", size = 127029 },
    { url = "https://files.pythonhosted.org/packages/47/ac/3efb7bfe2f3aefcf8d103e9a7162572f01936155ab2f7ebcc7c255a23212/multidict-6.1.0-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:a7a9541cd308eed5e30318430a9c74d2132e9a8cb46b901326272d780bf2d423", size = 137594 },
    { url = "https://files.pythonhosted.org/packages/42/9b/6c6e9e8dc4f915fc90a9b7798c44a30773dea2995fdcb619870e705afe2b/multidict-6.1.0-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:da1758c76f50c39a2efd5e9859ce7d776317eb1dd34317c8152ac9251fc574a3", size = 134556 },
    { url = "https://files.pythonhosted.org/packages/1d/10/8e881743b26aaf718379a14ac58572a240e8293a1c9d68e1418fb11c0f90/multidict-6.1.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:c943a53e9186688b45b323602298ab727d8865d8c9ee0b17f8d62d14b56f0753", size = 130993 },
    { url = "https://files.pythonhosted.org/packages/45/84/3eb91b4b557442802d058a7579e864b329968c8d0ea57d907e7023c677f2/multidict-6.1.0-cp311-cp311-win32.whl", hash = "sha256:90f8717cb649eea3504091e640a1b8568faad18bd4b9fcd692853a04475a4b80", size = 26405 },
    { url = "https://files.pythonhosted.org/packages/9f/0b/ad879847ecbf6d27e90a6eabb7eff6b62c129eefe617ea45eae7c1f0aead/multidict-6.1.0-cp311-cp311-win_amd64.whl", hash = "sha256:82176036e65644a6cc5bd619f65f6f19781e8ec2e5330f51aa9ada7504cc1926", size = 28795 },
    { url = "https://files.pythonhosted.org/packages/fd/16/92057c74ba3b96d5e211b553895cd6dc7cc4d1e43d9ab8fafc727681ef71/multidict-6.1.0-cp312-cp312-macosx_10_9_universal2.whl", hash = "sha256:b04772ed465fa3cc947db808fa306d79b43e896beb677a56fb2347ca1a49c1fa", size = 48713 },
    { url = "https://files.pythonhosted.org/packages/94/3d/37d1b8893ae79716179540b89fc6a0ee56b4a65fcc0d63535c6f5d96f217/multidict-6.1.0-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:6180c0ae073bddeb5a97a38c03f30c233e0a4d39cd86166251617d1bbd0af436", size = 29516 },
    { url = "https://files.pythonhosted.org/packages/a2/12/adb6b3200c363062f805275b4c1e656be2b3681aada66c80129932ff0bae/multidict-6.1.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:071120490b47aa997cca00666923a83f02c7fbb44f71cf7f136df753f7fa8761", size = 29557 },
    { url = "https://files.pythonhosted.org/packages/47/e9/604bb05e6e5bce1e6a5cf80a474e0f072e80d8ac105f1b994a53e0b28c42/multidict-6.1.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:50b3a2710631848991d0bf7de077502e8994c804bb805aeb2925a981de58ec2e", size = 130170 },
    { url = "https://files.pythonhosted.org/packages/7e/13/9efa50801785eccbf7086b3c83b71a4fb501a4d43549c2f2f80b8787d69f/multidict-6.1.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:b58c621844d55e71c1b7f7c498ce5aa6985d743a1a59034c57a905b3f153c1ef", size = 134836 },
    { url = "https://files.pythonhosted.org/packages/bf/0f/93808b765192780d117814a6dfcc2e75de6dcc610009ad408b8814dca3ba/multidict-6.1.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:55b6d90641869892caa9ca42ff913f7ff1c5ece06474fbd32fb2cf6834726c95", size = 133475 },
    { url = "https://files.pythonhosted.org/packages/d3/c8/529101d7176fe7dfe1d99604e48d69c5dfdcadb4f06561f465c8ef12b4df/multidict-6.1.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4b820514bfc0b98a30e3d85462084779900347e4d49267f747ff54060cc33925", size = 131049 },
    { url = "https://files.pythonhosted.org/packages/ca/0c/fc85b439014d5a58063e19c3a158a889deec399d47b5269a0f3b6a2e28bc/multidict-6.1.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:10a9b09aba0c5b48c53761b7c720aaaf7cf236d5fe394cd399c7ba662d5f9966", size = 120370 },
    { url = "https://files.pythonhosted.org/packages/db/46/d4416eb20176492d2258fbd47b4abe729ff3b6e9c829ea4236f93c865089/multidict-6.1.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:1e16bf3e5fc9f44632affb159d30a437bfe286ce9e02754759be5536b169b305", size = 125178 },
    { url = "https://files.pythonhosted.org/packages/5b/46/73697ad7ec521df7de5531a32780bbfd908ded0643cbe457f981a701457c/multidict-6.1.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:76f364861c3bfc98cbbcbd402d83454ed9e01a5224bb3a28bf70002a230f73e2", size = 119567 },
    { url = "https://files.pythonhosted.org/packages/cd/ed/51f060e2cb0e7635329fa6ff930aa5cffa17f4c7f5c6c3ddc3500708e2f2/multidict-6.1.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:820c661588bd01a0aa62a1283f20d2be4281b086f80dad9e955e690c75fb54a2", size = 129822 },
    { url = "https://files.pythonhosted.org/packages/df/9e/ee7d1954b1331da3eddea0c4e08d9142da5f14b1321c7301f5014f49d492/multidict-6.1.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:0e5f362e895bc5b9e67fe6e4ded2492d8124bdf817827f33c5b46c2fe3ffaca6", size = 128656 },
    { url = "https://files.pythonhosted.org/packages/77/00/8538f11e3356b5d95fa4b024aa566cde7a38aa7a5f08f4912b32a037c5dc/multidict-6.1.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:3ec660d19bbc671e3a6443325f07263be452c453ac9e512f5eb935e7d4ac28b3", size = 125360 },
    { url = "https://files.pythonhosted.org/packages/be/05/5d334c1f2462d43fec2363cd00b1c44c93a78c3925d952e9a71caf662e96/multidict-6.1.0-cp312-cp312-win32.whl", hash = "sha256:58130ecf8f7b8112cdb841486404f1282b9c86ccb30d3519faf301b2e5659133", size = 26382 },
    { url = "https://files.pythonhosted.org/packages/a3/bf/f332a13486b1ed0496d624bcc7e8357bb8053823e8cd4b9a18edc1d97e73/multidict-6.1.0-cp312-cp312-win_amd64.whl", hash = "sha256:188215fc0aafb8e03341995e7c4797860181562380f81ed0a87ff455b70bf1f1", size = 28529 },
    { url = "https://files.pythonhosted.org/packages/22/67/1c7c0f39fe069aa4e5d794f323be24bf4d33d62d2a348acdb7991f8f30db/multidict-6.1.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:d569388c381b24671589335a3be6e1d45546c2988c2ebe30fdcada8457a31008", size = 48771 },
    { url = "https://files.pythonhosted.org/packages/3c/25/c186ee7b212bdf0df2519eacfb1981a017bda34392c67542c274651daf23/multidict-6.1.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:052e10d2d37810b99cc170b785945421141bf7bb7d2f8799d431e7db229c385f", size = 29533 },
    { url = "https://files.pythonhosted.org/packages/67/5e/04575fd837e0958e324ca035b339cea174554f6f641d3fb2b4f2e7ff44a2/multidict-6.1.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:f90c822a402cb865e396a504f9fc8173ef34212a342d92e362ca498cad308e28", size = 29595 },
    { url = "https://files.pythonhosted.org/packages/d3/b2/e56388f86663810c07cfe4a3c3d87227f3811eeb2d08450b9e5d19d78876/multidict-6.1.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b225d95519a5bf73860323e633a664b0d85ad3d5bede6d30d95b35d4dfe8805b", size = 130094 },
    { url = "https://files.pythonhosted.org/packages/6c/ee/30ae9b4186a644d284543d55d491fbd4239b015d36b23fea43b4c94f7052/multidict-6.1.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:23bfd518810af7de1116313ebd9092cb9aa629beb12f6ed631ad53356ed6b86c", size = 134876 },
    { url = "https://files.pythonhosted.org/packages/84/c7/70461c13ba8ce3c779503c70ec9d0345ae84de04521c1f45a04d5f48943d/multidict-6.1.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5c09fcfdccdd0b57867577b719c69e347a436b86cd83747f179dbf0cc0d4c1f3", size = 133500 },
    { url = "https://files.pythonhosted.org/packages/4a/9f/002af221253f10f99959561123fae676148dd730e2daa2cd053846a58507/multidict-6.1.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bf6bea52ec97e95560af5ae576bdac3aa3aae0b6758c6efa115236d9e07dae44", size = 131099 },
    { url = "https://files.pythonhosted.org/packages/82/42/d1c7a7301d52af79d88548a97e297f9d99c961ad76bbe6f67442bb77f097/multidict-6.1.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:57feec87371dbb3520da6192213c7d6fc892d5589a93db548331954de8248fd2", size = 120403 },
    { url = "https://files.pythonhosted.org/packages/68/f3/471985c2c7ac707547553e8f37cff5158030d36bdec4414cb825fbaa5327/multidict-6.1.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:0c3f390dc53279cbc8ba976e5f8035eab997829066756d811616b652b00a23a3", size = 125348 },
    { url = "https://files.pythonhosted.org/packages/67/2c/e6df05c77e0e433c214ec1d21ddd203d9a4770a1f2866a8ca40a545869a0/multidict-6.1.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:59bfeae4b25ec05b34f1956eaa1cb38032282cd4dfabc5056d0a1ec4d696d3aa", size = 119673 },
    { url = "https://files.pythonhosted.org/packages/c5/cd/bc8608fff06239c9fb333f9db7743a1b2eafe98c2666c9a196e867a3a0a4/multidict-6.1.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:b2f59caeaf7632cc633b5cf6fc449372b83bbdf0da4ae04d5be36118e46cc0aa", size = 129927 },
    { url = "https://files.pythonhosted.org/packages/44/8e/281b69b7bc84fc963a44dc6e0bbcc7150e517b91df368a27834299a526ac/multidict-6.1.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:37bb93b2178e02b7b618893990941900fd25b6b9ac0fa49931a40aecdf083fe4", size = 128711 },
    { url = "https://files.pythonhosted.org/packages/12/a4/63e7cd38ed29dd9f1881d5119f272c898ca92536cdb53ffe0843197f6c85/multidict-6.1.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4e9f48f58c2c523d5a06faea47866cd35b32655c46b443f163d08c6d0ddb17d6", size = 125519 },
    { url = "https://files.pythonhosted.org/packages/38/e0/4f5855037a72cd8a7a2f60a3952d9aa45feedb37ae7831642102604e8a37/multidict-6.1.0-cp313-cp313-win32.whl", hash = "sha256:3a37ffb35399029b45c6cc33640a92bef403c9fd388acce75cdc88f58bd19a81", size = 26426 },
    { url = "https://files.pythonhosted.org/packages/7e/a5/17ee3a4db1e310b7405f5d25834460073a8ccd86198ce044dfaf69eac073/multidict-6.1.0-cp313-cp313-win_amd64.whl", hash = "sha256:e9aa71e15d9d9beaad2c6b9319edcdc0a49a43ef5c0a4c8265ca9ee7d6c67774", size = 28531 },
    { url = "https://files.pythonhosted.org/packages/99/b7/b9e70fde2c0f0c9af4cc5277782a89b66d35948ea3369ec9f598358c3ac5/multidict-6.1.0-py3-none-any.whl", hash = "sha256:48e171e52d1c4d33888e529b999e5900356b9ae588c2f09a52dcefb158b27506", size = 10051 },
]

[[package]]
name = "mypy"
version = "1.15.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "mypy-extensions" },
    { name = "tomli", marker = "python_full_version < '3.11'" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ce/43/d5e49a86afa64bd3839ea0d5b9c7103487007d728e1293f52525d6d5486a/mypy-1.15.0.tar.gz", hash = "sha256:404534629d51d3efea5c800ee7c42b72a6554d6c400e6a79eafe15d11341fd43", size = 3239717 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/68/f8/65a7ce8d0e09b6329ad0c8d40330d100ea343bd4dd04c4f8ae26462d0a17/mypy-1.15.0-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:979e4e1a006511dacf628e36fadfecbcc0160a8af6ca7dad2f5025529e082c13", size = 10738433 },
    { url = "https://files.pythonhosted.org/packages/b4/95/9c0ecb8eacfe048583706249439ff52105b3f552ea9c4024166c03224270/mypy-1.15.0-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:c4bb0e1bd29f7d34efcccd71cf733580191e9a264a2202b0239da95984c5b559", size = 9861472 },
    { url = "https://files.pythonhosted.org/packages/84/09/9ec95e982e282e20c0d5407bc65031dfd0f0f8ecc66b69538296e06fcbee/mypy-1.15.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:be68172e9fd9ad8fb876c6389f16d1c1b5f100ffa779f77b1fb2176fcc9ab95b", size = 11611424 },
    { url = "https://files.pythonhosted.org/packages/78/13/f7d14e55865036a1e6a0a69580c240f43bc1f37407fe9235c0d4ef25ffb0/mypy-1.15.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:c7be1e46525adfa0d97681432ee9fcd61a3964c2446795714699a998d193f1a3", size = 12365450 },
    { url = "https://files.pythonhosted.org/packages/48/e1/301a73852d40c241e915ac6d7bcd7fedd47d519246db2d7b86b9d7e7a0cb/mypy-1.15.0-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:2e2c2e6d3593f6451b18588848e66260ff62ccca522dd231cd4dd59b0160668b", size = 12551765 },
    { url = "https://files.pythonhosted.org/packages/77/ba/c37bc323ae5fe7f3f15a28e06ab012cd0b7552886118943e90b15af31195/mypy-1.15.0-cp310-cp310-win_amd64.whl", hash = "sha256:6983aae8b2f653e098edb77f893f7b6aca69f6cffb19b2cc7443f23cce5f4828", size = 9274701 },
    { url = "https://files.pythonhosted.org/packages/03/bc/f6339726c627bd7ca1ce0fa56c9ae2d0144604a319e0e339bdadafbbb599/mypy-1.15.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:2922d42e16d6de288022e5ca321cd0618b238cfc5570e0263e5ba0a77dbef56f", size = 10662338 },
    { url = "https://files.pythonhosted.org/packages/e2/90/8dcf506ca1a09b0d17555cc00cd69aee402c203911410136cd716559efe7/mypy-1.15.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:2ee2d57e01a7c35de00f4634ba1bbf015185b219e4dc5909e281016df43f5ee5", size = 9787540 },
    { url = "https://files.pythonhosted.org/packages/05/05/a10f9479681e5da09ef2f9426f650d7b550d4bafbef683b69aad1ba87457/mypy-1.15.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:973500e0774b85d9689715feeffcc980193086551110fd678ebe1f4342fb7c5e", size = 11538051 },
    { url = "https://files.pythonhosted.org/packages/e9/9a/1f7d18b30edd57441a6411fcbc0c6869448d1a4bacbaee60656ac0fc29c8/mypy-1.15.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:5a95fb17c13e29d2d5195869262f8125dfdb5c134dc8d9a9d0aecf7525b10c2c", size = 12286751 },
    { url = "https://files.pythonhosted.org/packages/72/af/19ff499b6f1dafcaf56f9881f7a965ac2f474f69f6f618b5175b044299f5/mypy-1.15.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:1905f494bfd7d85a23a88c5d97840888a7bd516545fc5aaedff0267e0bb54e2f", size = 12421783 },
    { url = "https://files.pythonhosted.org/packages/96/39/11b57431a1f686c1aed54bf794870efe0f6aeca11aca281a0bd87a5ad42c/mypy-1.15.0-cp311-cp311-win_amd64.whl", hash = "sha256:c9817fa23833ff189db061e6d2eff49b2f3b6ed9856b4a0a73046e41932d744f", size = 9265618 },
    { url = "https://files.pythonhosted.org/packages/98/3a/03c74331c5eb8bd025734e04c9840532226775c47a2c39b56a0c8d4f128d/mypy-1.15.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:aea39e0583d05124836ea645f412e88a5c7d0fd77a6d694b60d9b6b2d9f184fd", size = 10793981 },
    { url = "https://files.pythonhosted.org/packages/f0/1a/41759b18f2cfd568848a37c89030aeb03534411eef981df621d8fad08a1d/mypy-1.15.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:2f2147ab812b75e5b5499b01ade1f4a81489a147c01585cda36019102538615f", size = 9749175 },
    { url = "https://files.pythonhosted.org/packages/12/7e/873481abf1ef112c582db832740f4c11b2bfa510e829d6da29b0ab8c3f9c/mypy-1.15.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:ce436f4c6d218a070048ed6a44c0bbb10cd2cc5e272b29e7845f6a2f57ee4464", size = 11455675 },
    { url = "https://files.pythonhosted.org/packages/b3/d0/92ae4cde706923a2d3f2d6c39629134063ff64b9dedca9c1388363da072d/mypy-1.15.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:8023ff13985661b50a5928fc7a5ca15f3d1affb41e5f0a9952cb68ef090b31ee", size = 12410020 },
    { url = "https://files.pythonhosted.org/packages/46/8b/df49974b337cce35f828ba6fda228152d6db45fed4c86ba56ffe442434fd/mypy-1.15.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:1124a18bc11a6a62887e3e137f37f53fbae476dc36c185d549d4f837a2a6a14e", size = 12498582 },
    { url = "https://files.pythonhosted.org/packages/13/50/da5203fcf6c53044a0b699939f31075c45ae8a4cadf538a9069b165c1050/mypy-1.15.0-cp312-cp312-win_amd64.whl", hash = "sha256:171a9ca9a40cd1843abeca0e405bc1940cd9b305eaeea2dda769ba096932bb22", size = 9366614 },
    { url = "https://files.pythonhosted.org/packages/6a/9b/fd2e05d6ffff24d912f150b87db9e364fa8282045c875654ce7e32fffa66/mypy-1.15.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:93faf3fdb04768d44bf28693293f3904bbb555d076b781ad2530214ee53e3445", size = 10788592 },
    { url = "https://files.pythonhosted.org/packages/74/37/b246d711c28a03ead1fd906bbc7106659aed7c089d55fe40dd58db812628/mypy-1.15.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:811aeccadfb730024c5d3e326b2fbe9249bb7413553f15499a4050f7c30e801d", size = 9753611 },
    { url = "https://files.pythonhosted.org/packages/a6/ac/395808a92e10cfdac8003c3de9a2ab6dc7cde6c0d2a4df3df1b815ffd067/mypy-1.15.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.manylinux_2_28_aarch64.whl", hash = "sha256:98b7b9b9aedb65fe628c62a6dc57f6d5088ef2dfca37903a7d9ee374d03acca5", size = 11438443 },
    { url = "https://files.pythonhosted.org/packages/d2/8b/801aa06445d2de3895f59e476f38f3f8d610ef5d6908245f07d002676cbf/mypy-1.15.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl", hash = "sha256:c43a7682e24b4f576d93072216bf56eeff70d9140241f9edec0c104d0c515036", size = 12402541 },
    { url = "https://files.pythonhosted.org/packages/c7/67/5a4268782eb77344cc613a4cf23540928e41f018a9a1ec4c6882baf20ab8/mypy-1.15.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:baefc32840a9f00babd83251560e0ae1573e2f9d1b067719479bfb0e987c6357", size = 12494348 },
    { url = "https://files.pythonhosted.org/packages/83/3e/57bb447f7bbbfaabf1712d96f9df142624a386d98fb026a761532526057e/mypy-1.15.0-cp313-cp313-win_amd64.whl", hash = "sha256:b9378e2c00146c44793c98b8d5a61039a048e31f429fb0eb546d93f4b000bedf", size = 9373648 },
    { url = "https://files.pythonhosted.org/packages/09/4e/a7d65c7322c510de2c409ff3828b03354a7c43f5a8ed458a7a131b41c7b9/mypy-1.15.0-py3-none-any.whl", hash = "sha256:5469affef548bd1895d86d3bf10ce2b44e33d86923c29e4d675b3e323437ea3e", size = 2221777 },
]

[[package]]
name = "mypy-extensions"
version = "1.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/98/a4/1ab47638b92648243faf97a5aeb6ea83059cc3624972ab6b8d2316078d3f/mypy_extensions-1.0.0.tar.gz", hash = "sha256:75dbf8955dc00442a438fc4d0666508a9a97b6bd41aa2f0ffe9d2f2725af0782", size = 4433 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/2a/e2/5d3f6ada4297caebe1a2add3b126fe800c96f56dbe5d1988a2cbe0b267aa/mypy_extensions-1.0.0-py3-none-any.whl", hash = "sha256:4392f6c0eb8a5668a69e23d168ffa70f0be9ccfd32b5cc2d26a34ae5b844552d", size = 4695 },
]

[[package]]
name = "nh3"
version = "0.2.20"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/46/f2/eb781d94c7855e9129cbbdd3ab09a470441e4176a82a396ae1df270a7333/nh3-0.2.20.tar.gz", hash = "sha256:9705c42d7ff88a0bea546c82d7fe5e59135e3d3f057e485394f491248a1f8ed5", size = 17489 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3c/65/d31d93b6d1e5fe80d0cc18f0b96eaa561edfa0a15a6ef6b0fce50202a931/nh3-0.2.20-cp313-cp313t-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl", hash = "sha256:e1061a4ab6681f6bdf72b110eea0c4e1379d57c9de937db3be4202f7ad6043db", size = 1202187 },
    { url = "https://files.pythonhosted.org/packages/b4/ae/5b03bf198e06921454012e4b9a51e676d26fd37d9fdc1f29371a0b380487/nh3-0.2.20-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:eb4254b1dac4a1ee49919a5b3f1caf9803ea8dada1816d9e8289e63d3cd0dd9a", size = 737822 },
    { url = "https://files.pythonhosted.org/packages/0a/53/a12dffb6ee3772deba82eb5997667fc835afd2e813d1f4080d8738f29eec/nh3-0.2.20-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:0ae9cbd713524cdb81e64663d0d6aae26f678db9f2cd9db0bf162606f1f9f20c", size = 756643 },
    { url = "https://files.pythonhosted.org/packages/d0/0c/6cd2c5ac3e6e31f2a28721e8e2a924cb6b05ad054bf787bd1816ffd40b96/nh3-0.2.20-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:e1f7370b4e14cc03f5ae141ef30a1caf81fa5787711f80be9081418dd9eb79d2", size = 923415 },
    { url = "https://files.pythonhosted.org/packages/64/f0/229a6c8b81b86ba22d8e7f27ade62cb2fcfb987e570f49944fdd8490a76a/nh3-0.2.20-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:ac4d27dc836a476efffc6eb661994426b8b805c951b29c9cf2ff36bc9ad58bc5", size = 994959 },
    { url = "https://files.pythonhosted.org/packages/75/e3/62ae3d3b658739ee15b129356fe6d4c4bc8ab235d7bf2e0d2794d64f7bc6/nh3-0.2.20-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:4fd2e9248725ebcedac3997a8d3da0d90a12a28c9179c6ba51f1658938ac30d0", size = 915777 },
    { url = "https://files.pythonhosted.org/packages/45/bd/8405d03371e335f02eb72e09dcf73307f8fd3095e4165cec6836346fe3db/nh3-0.2.20-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:f7d564871833ddbe54df3aa59053b1110729d3a800cb7628ae8f42adb3d75208", size = 908614 },
    { url = "https://files.pythonhosted.org/packages/ee/f8/5d977f09cf82c1f22a864375f471db111530fc79c88efdf0659fe6d3d6bc/nh3-0.2.20-cp313-cp313t-win32.whl", hash = "sha256:d2a176fd4306b6f0f178a3f67fac91bd97a3a8d8fafb771c9b9ef675ba5c8886", size = 540482 },
    { url = "https://files.pythonhosted.org/packages/c5/f4/e34afe5fd8bed1920eac2974c9c853f548b4b65c139444285ffd2a68495d/nh3-0.2.20-cp313-cp313t-win_amd64.whl", hash = "sha256:6ed834c68452a600f517dd3e1534dbfaff1f67f98899fecf139a055a25d99150", size = 541302 },
    { url = "https://files.pythonhosted.org/packages/92/08/5e3b61eed1bc0efeb330ddc5cf5194f28a0b7be7943aa20bd44cfe14650b/nh3-0.2.20-cp38-abi3-macosx_10_12_x86_64.macosx_11_0_arm64.macosx_10_12_universal2.whl", hash = "sha256:76e2f603b30c02ff6456b233a83fc377dedab6a50947b04e960a6b905637b776", size = 1202141 },
    { url = "https://files.pythonhosted.org/packages/29/d2/3377f8006c71e95e007b07b5bfcac22c9de4744ca3efb23b396d3deb9581/nh3-0.2.20-cp38-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:181063c581defe683bd4bb78188ac9936d208aebbc74c7f7c16b6a32ae2ebb38", size = 760699 },
    { url = "https://files.pythonhosted.org/packages/37/d7/7077f925d7d680d53dcb6e18a4af13d1a7da59761c06c193bfa249a7470a/nh3-0.2.20-cp38-abi3-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:231addb7643c952cd6d71f1c8702d703f8fe34afcb20becb3efb319a501a12d7", size = 747353 },
    { url = "https://files.pythonhosted.org/packages/cb/59/6b2f32af477aae81f1454a7f6ef490ebc3c22dd9e1370e73fcfe243dc07a/nh3-0.2.20-cp38-abi3-manylinux_2_17_ppc64.manylinux2014_ppc64.whl", hash = "sha256:1b9a8340a0aab991c68a5ca938d35ef4a8a3f4bf1b455da8855a40bee1fa0ace", size = 854125 },
    { url = "https://files.pythonhosted.org/packages/5b/f2/c3d2f7b801477b8b387b51fbefd16dc7ade888aeac547f18ba0558fd6f48/nh3-0.2.20-cp38-abi3-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:10317cd96fe4bbd4eb6b95f3920b71c902157ad44fed103fdcde43e3b8ee8be6", size = 817453 },
    { url = "https://files.pythonhosted.org/packages/42/4d/f7e3a35506a0eba6eedafc21ad52773985511eb838812e9f96354831ad3c/nh3-0.2.20-cp38-abi3-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8698db4c04b140800d1a1cd3067fda399e36e1e2b8fc1fe04292a907350a3e9b", size = 891694 },
    { url = "https://files.pythonhosted.org/packages/e6/0e/c499453c296fb40366e3069cd68fde77a10f0a30a17b9d3b491eb3ebc5bf/nh3-0.2.20-cp38-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3eb04b9c3deb13c3a375ea39fd4a3c00d1f92e8fb2349f25f1e3e4506751774b", size = 744388 },
    { url = "https://files.pythonhosted.org/packages/18/67/c3de8022ba2719bdbbdd3704d1e32dbc7d3f8ac8646247711645fc90d051/nh3-0.2.20-cp38-abi3-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:92f3f1c4f47a2c6f3ca7317b1d5ced05bd29556a75d3a4e2715652ae9d15c05d", size = 764831 },
    { url = "https://files.pythonhosted.org/packages/f0/14/a4ea40e2439717d11c3104fc2dc0ac412301b7aeb81d6a3d0e6505c77e7d/nh3-0.2.20-cp38-abi3-musllinux_1_2_aarch64.whl", hash = "sha256:ddefa9fd6794a87e37d05827d299d4b53a3ec6f23258101907b96029bfef138a", size = 923334 },
    { url = "https://files.pythonhosted.org/packages/ed/ae/e8ee8afaf67903dd304f390056d1ea620327524e2ad66127a331b14d5d98/nh3-0.2.20-cp38-abi3-musllinux_1_2_armv7l.whl", hash = "sha256:ce3731c8f217685d33d9268362e5b4f770914e922bba94d368ab244a59a6c397", size = 994873 },
    { url = "https://files.pythonhosted.org/packages/20/b5/02122cfe3b36cf0ba0fcd73a04fd462e1f7a9d91b456f6e0b70e46df21c7/nh3-0.2.20-cp38-abi3-musllinux_1_2_i686.whl", hash = "sha256:09f037c02fc2c43b211ff1523de32801dcfb0918648d8e651c36ef890f1731ec", size = 915707 },
    { url = "https://files.pythonhosted.org/packages/47/d3/5df43cc3570cdc9eb1dc79a39191f89fedf8bcefd8d30a161ff1dffb146c/nh3-0.2.20-cp38-abi3-musllinux_1_2_x86_64.whl", hash = "sha256:813f1c8012dd64c990514b795508abb90789334f76a561fa0fd4ca32d2275330", size = 908539 },
    { url = "https://files.pythonhosted.org/packages/4f/fd/aa000f6c76a832c488eac26f20d2e8a221ba2b965efce692f14ebc4290bf/nh3-0.2.20-cp38-abi3-win32.whl", hash = "sha256:47b2946c0e13057855209daeffb45dc910bd0c55daf10190bb0b4b60e2999784", size = 540439 },
    { url = "https://files.pythonhosted.org/packages/19/31/d65594efd3b42b1de2335d576eb77525691fc320dbf8617948ee05c008e5/nh3-0.2.20-cp38-abi3-win_amd64.whl", hash = "sha256:da87573f03084edae8eb87cfe811ec338606288f81d333c07d2a9a0b9b976c0b", size = 541249 },
]

[[package]]
name = "njord"
version = "0.0.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "psutil" },
    { name = "python-dotenv" },
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ac/80/8deda3f1efb3408003f02607e584f8e4ace59f76ad08d2318a0559a732b3/njord-0.0.2.tar.gz", hash = "sha256:7ede33eba5972e8051bbd497d2959c514c7bd96f36d86a1e0be15a32ec7a32b6", size = 6974 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/08/70/a7bc4de0ac86baf6ae23636dded78e82ab9983c81447932fa7846f1e9e48/njord-0.0.2-py3-none-any.whl", hash = "sha256:5665c474ee85eb8ea99e2c9e5e75ab9c74cb3406b13897fc84749fbd0ac34ed4", size = 8023 },
]

[[package]]
name = "nodeenv"
version = "1.9.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/43/16/fc88b08840de0e0a72a2f9d8c6bae36be573e475a6326ae854bcc549fc45/nodeenv-1.9.1.tar.gz", hash = "sha256:6ec12890a2dab7946721edbfbcd91f3319c6ccc9aec47be7c7e6b7011ee6645f", size = 47437 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d2/1d/1b658dbd2b9fa9c4c9f32accbfc0205d532c8c6194dc0f2a4c0428e7128a/nodeenv-1.9.1-py2.py3-none-any.whl", hash = "sha256:ba11c9782d29c27c70ffbdda2d7415098754709be8a7056d79a737cd901155c9", size = 22314 },
]

[[package]]
name = "nyord-vpn"
version = "0.1.0"
source = { editable = "." }
dependencies = [
    { name = "aiohttp" },
    { name = "backoff" },
    { name = "black" },
    { name = "bleach" },
    { name = "build" },
    { name = "certifi" },
    { name = "charset-normalizer" },
    { name = "click" },
    { name = "cryptography" },
    { name = "docutils" },
    { name = "fire" },
    { name = "idna" },
    { name = "importlib-metadata" },
    { name = "jaraco-classes" },
    { name = "keyring" },
    { name = "loguru" },
    { name = "markdown-it-py" },
    { name = "mdurl" },
    { name = "more-itertools" },
    { name = "mypy-extensions" },
    { name = "njord" },
    { name = "packaging" },
    { name = "pathspec" },
    { name = "pkginfo" },
    { name = "platformdirs" },
    { name = "psutil" },
    { name = "pycountry" },
    { name = "pydantic" },
    { name = "pydantic-settings" },
    { name = "pygments" },
    { name = "pyproject-hooks" },
    { name = "python-dotenv" },
    { name = "readme-renderer" },
    { name = "requests" },
    { name = "requests-toolbelt" },
    { name = "rfc3986" },
    { name = "rich" },
    { name = "six" },
    { name = "tenacity" },
    { name = "tomli" },
    { name = "twine" },
    { name = "typing-extensions" },
    { name = "urllib3" },
    { name = "vulture" },
    { name = "webencodings" },
    { name = "zipp" },
]

[package.optional-dependencies]
dev = [
    { name = "autoflake" },
    { name = "isort" },
    { name = "mypy" },
    { name = "pre-commit" },
    { name = "pyupgrade" },
    { name = "ruff" },
]
test = [
    { name = "pytest" },
    { name = "pytest-asyncio" },
    { name = "pytest-cov" },
    { name = "pytest-mock" },
    { name = "pytest-timeout" },
    { name = "pytest-xdist" },
]

[package.metadata]
requires-dist = [
    { name = "aiohttp", specifier = ">=3.11.0" },
    { name = "autoflake", marker = "extra == 'dev'", specifier = ">=2.0.0" },
    { name = "backoff", specifier = ">=2.0.0" },
    { name = "black", specifier = ">=23.7.0" },
    { name = "bleach", specifier = ">=6.0.0" },
    { name = "build", specifier = ">=0.10.0" },
    { name = "certifi", specifier = ">=2023.5.7" },
    { name = "charset-normalizer", specifier = ">=3.2.0" },
    { name = "click", specifier = ">=8.1.5" },
    { name = "cryptography", specifier = ">=42.0.0" },
    { name = "docutils", specifier = ">=0.20.1" },
    { name = "fire", specifier = ">=0.7.0" },
    { name = "idna", specifier = ">=3.4" },
    { name = "importlib-metadata", specifier = ">=6.8.0" },
    { name = "isort", marker = "extra == 'dev'", specifier = ">=5.10.1" },
    { name = "jaraco-classes", specifier = ">=3.3.0" },
    { name = "keyring", specifier = ">=24.2.0" },
    { name = "loguru", specifier = ">=0.7.3" },
    { name = "markdown-it-py", specifier = ">=3.0.0" },
    { name = "mdurl", specifier = ">=0.1.2" },
    { name = "more-itertools", specifier = ">=9.1.0" },
    { name = "mypy", marker = "extra == 'dev'", specifier = ">=1.0.0" },
    { name = "mypy-extensions", specifier = ">=1.0.0" },
    { name = "njord", specifier = ">=0.0.1" },
    { name = "packaging", specifier = ">=23.1" },
    { name = "pathspec", specifier = ">=0.11.1" },
    { name = "pkginfo", specifier = ">=1.9.6" },
    { name = "platformdirs", specifier = ">=3.9.1" },
    { name = "pre-commit", marker = "extra == 'dev'", specifier = ">=3.6.0" },
    { name = "psutil", specifier = ">=5.9.5" },
    { name = "pycountry", specifier = ">=24.6.1" },
    { name = "pydantic", specifier = ">=2.10.6" },
    { name = "pydantic-settings", specifier = ">=2.8.0" },
    { name = "pygments", specifier = ">=2.15.1" },
    { name = "pyproject-hooks", specifier = ">=1.0.0" },
    { name = "pytest", marker = "extra == 'test'", specifier = ">=7.0.0" },
    { name = "pytest-asyncio", marker = "extra == 'test'", specifier = ">=0.25.0" },
    { name = "pytest-cov", marker = "extra == 'test'", specifier = ">=4.0.0" },
    { name = "pytest-mock", marker = "extra == 'test'", specifier = ">=3.12.0" },
    { name = "pytest-timeout", marker = "extra == 'test'", specifier = ">=2.3.0" },
    { name = "pytest-xdist", marker = "extra == 'test'", specifier = ">=3.5.0" },
    { name = "python-dotenv", specifier = ">=1.0.0" },
    { name = "pyupgrade", marker = "extra == 'dev'", specifier = ">=3.19.0" },
    { name = "readme-renderer", specifier = ">=40.0" },
    { name = "requests", specifier = ">=2.31.0" },
    { name = "requests-toolbelt", specifier = ">=1.0.0" },
    { name = "rfc3986", specifier = ">=2.0.0" },
    { name = "rich", specifier = ">=13.4.2" },
    { name = "ruff", marker = "extra == 'dev'", specifier = ">=0.9.7" },
    { name = "six", specifier = ">=1.16.0" },
    { name = "tenacity", specifier = ">=8.0.0" },
    { name = "tomli", specifier = ">=2.0.1" },
    { name = "twine", specifier = ">=4.0.2" },
    { name = "typing-extensions", specifier = ">=4.7.1" },
    { name = "urllib3", specifier = ">=2.0.3" },
    { name = "vulture", specifier = ">=2.14" },
    { name = "webencodings", specifier = ">=0.5.1" },
    { name = "zipp", specifier = ">=3.16.2" },
]
provides-extras = ["dev", "test"]

[[package]]
name = "packaging"
version = "24.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/d0/63/68dbb6eb2de9cb10ee4c9c14a0148804425e13c4fb20d61cce69f53106da/packaging-24.2.tar.gz", hash = "sha256:c228a6dc5e932d346bc5739379109d49e8853dd8223571c7c5b55260edc0b97f", size = 163950 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/88/ef/eb23f262cca3c0c4eb7ab1933c3b1f03d021f2c48f54763065b6f0e321be/packaging-24.2-py3-none-any.whl", hash = "sha256:09abb1bccd265c01f4a3aa3f7a7db064b36514d2cba19a2f694fe6150451a759", size = 65451 },
]

[[package]]
name = "pathspec"
version = "0.12.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/ca/bc/f35b8446f4531a7cb215605d100cd88b7ac6f44ab3fc94870c120ab3adbf/pathspec-0.12.1.tar.gz", hash = "sha256:a482d51503a1ab33b1c67a6c3813a26953dbdc71c31dacaef9a838c4e29f5712", size = 51043 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/cc/20/ff623b09d963f88bfde16306a54e12ee5ea43e9b597108672ff3a408aad6/pathspec-0.12.1-py3-none-any.whl", hash = "sha256:a0d503e138a4c123b27490a4f7beda6a01c6f288df0e4a8b79c7eb0dc7b4cc08", size = 31191 },
]

[[package]]
name = "pkginfo"
version = "1.12.1.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/24/03/e26bf3d6453b7fda5bd2b84029a426553bb373d6277ef6b5ac8863421f87/pkginfo-1.12.1.2.tar.gz", hash = "sha256:5cd957824ac36f140260964eba3c6be6442a8359b8c48f4adf90210f33a04b7b", size = 451828 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/fa/3d/f4f2ba829efb54b6cd2d91349c7463316a9cc55a43fc980447416c88540f/pkginfo-1.12.1.2-py3-none-any.whl", hash = "sha256:c783ac885519cab2c34927ccfa6bf64b5a704d7c69afaea583dd9b7afe969343", size = 32717 },
]

[[package]]
name = "platformdirs"
version = "4.3.6"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/13/fc/128cc9cb8f03208bdbf93d3aa862e16d376844a14f9a0ce5cf4507372de4/platformdirs-4.3.6.tar.gz", hash = "sha256:357fb2acbc885b0419afd3ce3ed34564c13c9b95c89360cd9563f73aa5e2b907", size = 21302 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3c/a6/bc1012356d8ece4d66dd75c4b9fc6c1f6650ddd5991e421177d9f8f671be/platformdirs-4.3.6-py3-none-any.whl", hash = "sha256:73e575e1408ab8103900836b97580d5307456908a03e92031bab39e4554cc3fb", size = 18439 },
]

[[package]]
name = "pluggy"
version = "1.5.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/96/2d/02d4312c973c6050a18b314a5ad0b3210edb65a906f868e31c111dede4a6/pluggy-1.5.0.tar.gz", hash = "sha256:2cffa88e94fdc978c4c574f15f9e59b7f4201d439195c3715ca9e2486f1d0cf1", size = 67955 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/88/5f/e351af9a41f866ac3f1fac4ca0613908d9a41741cfcf2228f4ad853b697d/pluggy-1.5.0-py3-none-any.whl", hash = "sha256:44e1ad92c8ca002de6377e165f3e0f1be63266ab4d554740532335b9d75ea669", size = 20556 },
]

[[package]]
name = "pre-commit"
version = "4.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cfgv" },
    { name = "identify" },
    { name = "nodeenv" },
    { name = "pyyaml" },
    { name = "virtualenv" },
]
sdist = { url = "https://files.pythonhosted.org/packages/2a/13/b62d075317d8686071eb843f0bb1f195eb332f48869d3c31a4c6f1e063ac/pre_commit-4.1.0.tar.gz", hash = "sha256:ae3f018575a588e30dfddfab9a05448bfbd6b73d78709617b5a2b853549716d4", size = 193330 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/43/b3/df14c580d82b9627d173ceea305ba898dca135feb360b6d84019d0803d3b/pre_commit-4.1.0-py2.py3-none-any.whl", hash = "sha256:d29e7cb346295bcc1cc75fc3e92e343495e3ea0196c9ec6ba53f49f10ab6ae7b", size = 220560 },
]

[[package]]
name = "propcache"
version = "0.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/92/76/f941e63d55c0293ff7829dd21e7cf1147e90a526756869a9070f287a68c9/propcache-0.3.0.tar.gz", hash = "sha256:a8fd93de4e1d278046345f49e2238cdb298589325849b2645d4a94c53faeffc5", size = 42722 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8d/f0/dc9ec44d2e63c13f816a16398c039329736712440ff82b682dd9a78d2258/propcache-0.3.0-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:efa44f64c37cc30c9f05932c740a8b40ce359f51882c70883cc95feac842da4d", size = 79574 },
    { url = "https://files.pythonhosted.org/packages/99/3a/33a207dfcb3ee1131ea23a2aeb726c3c4994f89546d7eadf8c50627c8b63/propcache-0.3.0-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:2383a17385d9800b6eb5855c2f05ee550f803878f344f58b6e194de08b96352c", size = 45898 },
    { url = "https://files.pythonhosted.org/packages/af/68/0bde765c9f5dc02b4466d2838600af38c81b184c26c6d3cd44643ac668e3/propcache-0.3.0-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:d3e7420211f5a65a54675fd860ea04173cde60a7cc20ccfbafcccd155225f8bc", size = 45418 },
    { url = "https://files.pythonhosted.org/packages/06/a6/c682669bae41199358e16cc7b1c818f91c5f9e925cc863dabd98ce32716a/propcache-0.3.0-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:3302c5287e504d23bb0e64d2a921d1eb4a03fb93a0a0aa3b53de059f5a5d737d", size = 205116 },
    { url = "https://files.pythonhosted.org/packages/fb/ae/82cfb50267d9a1baa0340728eb9e32245a68538fef929d7bb786d01c11a8/propcache-0.3.0-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:7e2e068a83552ddf7a39a99488bcba05ac13454fb205c847674da0352602082f", size = 219405 },
    { url = "https://files.pythonhosted.org/packages/ab/16/7b6b2bf8c207cfd0e5ca3d41aea397392de9899867ec024f88c94f9ae2ab/propcache-0.3.0-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:2d913d36bdaf368637b4f88d554fb9cb9d53d6920b9c5563846555938d5450bf", size = 217656 },
    { url = "https://files.pythonhosted.org/packages/f4/eb/41447de61eb5454891658d0fb9b1d7d35d49a4a5dd2e0c86f2c332e8b7e1/propcache-0.3.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8ee1983728964d6070ab443399c476de93d5d741f71e8f6e7880a065f878e0b9", size = 205414 },
    { url = "https://files.pythonhosted.org/packages/03/b6/9719878f8b5b20d37ee663a40f8dcbf888559e4d3be2ba2fe5c790fc28d2/propcache-0.3.0-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:36ca5e9a21822cc1746023e88f5c0af6fce3af3b85d4520efb1ce4221bed75cc", size = 195746 },
    { url = "https://files.pythonhosted.org/packages/bb/ec/b79c3210ba459800d1a8f1afeb81d7b503893555a7b79c24082ff26d3314/propcache-0.3.0-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:9ecde3671e62eeb99e977f5221abcf40c208f69b5eb986b061ccec317c82ebd0", size = 198651 },
    { url = "https://files.pythonhosted.org/packages/48/f6/2b0140bc47013e43575973068e72ad51ee9f22f2dad42e6d6e362d715125/propcache-0.3.0-cp310-cp310-musllinux_1_2_armv7l.whl", hash = "sha256:d383bf5e045d7f9d239b38e6acadd7b7fdf6c0087259a84ae3475d18e9a2ae8b", size = 195858 },
    { url = "https://files.pythonhosted.org/packages/97/3d/2fa19303d87aa21f9a42dcd870d6088a2a776ff5518e394d50412c3679a6/propcache-0.3.0-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:8cb625bcb5add899cb8ba7bf716ec1d3e8f7cdea9b0713fa99eadf73b6d4986f", size = 197181 },
    { url = "https://files.pythonhosted.org/packages/09/f3/a2170ffc9fa774c1dfd52294113c0fa6cdc5b71dbfd7129bb9378fdd8b42/propcache-0.3.0-cp310-cp310-musllinux_1_2_ppc64le.whl", hash = "sha256:5fa159dcee5dba00c1def3231c249cf261185189205073bde13797e57dd7540a", size = 207411 },
    { url = "https://files.pythonhosted.org/packages/d6/1e/cb8a6c82178efffa0b00dc463f36cd086f747345585140aeb95d5cb93666/propcache-0.3.0-cp310-cp310-musllinux_1_2_s390x.whl", hash = "sha256:a7080b0159ce05f179cfac592cda1a82898ca9cd097dacf8ea20ae33474fbb25", size = 210724 },
    { url = "https://files.pythonhosted.org/packages/2b/72/6e273543337a3e22cf462eb836f065a9830b4d41baeb1f58db2695c934f3/propcache-0.3.0-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:ed7161bccab7696a473fe7ddb619c1d75963732b37da4618ba12e60899fefe4f", size = 203511 },
    { url = "https://files.pythonhosted.org/packages/f3/ea/7412c79bcec06597c967d49789f5a1f7fd76a8654908feeaefafb7447c9a/propcache-0.3.0-cp310-cp310-win32.whl", hash = "sha256:bf0d9a171908f32d54f651648c7290397b8792f4303821c42a74e7805bfb813c", size = 40600 },
    { url = "https://files.pythonhosted.org/packages/a3/42/488c90190491f3e61bd2c2fb0b3d91c1c78778270dde2f0b6633fc9ff723/propcache-0.3.0-cp310-cp310-win_amd64.whl", hash = "sha256:42924dc0c9d73e49908e35bbdec87adedd651ea24c53c29cac103ede0ea1d340", size = 44714 },
    { url = "https://files.pythonhosted.org/packages/45/c9/cf09ff7e6d09f14149094f7cd50d2dec032b24e61af21fc4540da2b17bfb/propcache-0.3.0-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:9ddd49258610499aab83b4f5b61b32e11fce873586282a0e972e5ab3bcadee51", size = 79568 },
    { url = "https://files.pythonhosted.org/packages/c8/32/2424d89da88cd81b7d148e0d2b3131461b570a02aa9d84a2e567509adb0d/propcache-0.3.0-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:2578541776769b500bada3f8a4eeaf944530516b6e90c089aa368266ed70c49e", size = 45895 },
    { url = "https://files.pythonhosted.org/packages/f6/91/ee5b6aa7aa31754fefcf0c5180e09223cac380ef195c4ddc8c266eb641ea/propcache-0.3.0-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:d8074c5dd61c8a3e915fa8fc04754fa55cfa5978200d2daa1e2d4294c1f136aa", size = 45427 },
    { url = "https://files.pythonhosted.org/packages/bf/73/38f0128462b8b616181d8c53bd5d04eac41c50c449b07615c65d56ba0a9b/propcache-0.3.0-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:b58229a844931bca61b3a20efd2be2a2acb4ad1622fc026504309a6883686fbf", size = 232427 },
    { url = "https://files.pythonhosted.org/packages/59/82/f3d4e84f4539dcfc9c3d338282b9e915f5b63c921986ecfdf7af2d12f87c/propcache-0.3.0-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e45377d5d6fefe1677da2a2c07b024a6dac782088e37c0b1efea4cfe2b1be19b", size = 239985 },
    { url = "https://files.pythonhosted.org/packages/42/e8/029f58cccbae83c9969a7ee7a06558d5b83a93dfc54e0f4f70234bbaea1b/propcache-0.3.0-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:ec5060592d83454e8063e487696ac3783cc48c9a329498bafae0d972bc7816c9", size = 238827 },
    { url = "https://files.pythonhosted.org/packages/8b/a2/c373561777c0cb9b9e7b9b9a10b9b3a7b6bde75a2535b962231cecc8fdb8/propcache-0.3.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:15010f29fbed80e711db272909a074dc79858c6d28e2915704cfc487a8ac89c6", size = 231348 },
    { url = "https://files.pythonhosted.org/packages/d7/d2/4673f715beedf6038b485bcd976813149231d9df5bb6196cb69a09c185c9/propcache-0.3.0-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a254537b9b696ede293bfdbc0a65200e8e4507bc9f37831e2a0318a9b333c85c", size = 220426 },
    { url = "https://files.pythonhosted.org/packages/e0/f6/1da65f900927bafd4675a16e890618ec7643f2f922bf0e4d84bb38645618/propcache-0.3.0-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:2b975528998de037dfbc10144b8aed9b8dd5a99ec547f14d1cb7c5665a43f075", size = 220294 },
    { url = "https://files.pythonhosted.org/packages/ff/86/620451bdc02e91b1712cd71890c17077ee97e2a28493836a87e47b8e70ff/propcache-0.3.0-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:19d36bb351ad5554ff20f2ae75f88ce205b0748c38b146c75628577020351e3c", size = 212492 },
    { url = "https://files.pythonhosted.org/packages/6e/1b/e8f86921ed4016da80faf3b8f515f7829decabdbff106736bfff353bceba/propcache-0.3.0-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:6032231d4a5abd67c7f71168fd64a47b6b451fbcb91c8397c2f7610e67683810", size = 215113 },
    { url = "https://files.pythonhosted.org/packages/1a/95/a61d86cc49aa0945f6c06f3a4614fc543e311a50558c92861f5e9691a37c/propcache-0.3.0-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:6985a593417cdbc94c7f9c3403747335e450c1599da1647a5af76539672464d3", size = 228330 },
    { url = "https://files.pythonhosted.org/packages/8f/7d/10dbae48ff2bb189e92c2b3487a48f3229146a25941ad0d485934d1104d4/propcache-0.3.0-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:6a1948df1bb1d56b5e7b0553c0fa04fd0e320997ae99689488201f19fa90d2e7", size = 231942 },
    { url = "https://files.pythonhosted.org/packages/39/ce/82d16aec96c5513ae7db13ab901a65a1e54c915292fb5b2390e33275b61d/propcache-0.3.0-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:8319293e85feadbbfe2150a5659dbc2ebc4afdeaf7d98936fb9a2f2ba0d4c35c", size = 223077 },
    { url = "https://files.pythonhosted.org/packages/c8/e0/cb077e8e7a583c733df7f53327fcbdb92e42be59b976ce60bf1d904a0efe/propcache-0.3.0-cp311-cp311-win32.whl", hash = "sha256:63f26258a163c34542c24808f03d734b338da66ba91f410a703e505c8485791d", size = 40455 },
    { url = "https://files.pythonhosted.org/packages/d8/35/57abeb6146fe3c19081eeaf3d9d4cfea256f87f1e5101acf80d3332c1820/propcache-0.3.0-cp311-cp311-win_amd64.whl", hash = "sha256:cacea77ef7a2195f04f9279297684955e3d1ae4241092ff0cfcef532bb7a1c32", size = 44705 },
    { url = "https://files.pythonhosted.org/packages/8d/2c/921f15dc365796ec23975b322b0078eae72995c7b4d49eba554c6a308d70/propcache-0.3.0-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:e53d19c2bf7d0d1e6998a7e693c7e87300dd971808e6618964621ccd0e01fe4e", size = 79867 },
    { url = "https://files.pythonhosted.org/packages/11/a5/4a6cc1a559d1f2fb57ea22edc4245158cdffae92f7f92afcee2913f84417/propcache-0.3.0-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:a61a68d630e812b67b5bf097ab84e2cd79b48c792857dc10ba8a223f5b06a2af", size = 46109 },
    { url = "https://files.pythonhosted.org/packages/e1/6d/28bfd3af3a567ad7d667348e7f46a520bda958229c4d545ba138a044232f/propcache-0.3.0-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:fb91d20fa2d3b13deea98a690534697742029f4fb83673a3501ae6e3746508b5", size = 45635 },
    { url = "https://files.pythonhosted.org/packages/73/20/d75b42eaffe5075eac2f4e168f6393d21c664c91225288811d85451b2578/propcache-0.3.0-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:67054e47c01b7b349b94ed0840ccae075449503cf1fdd0a1fdd98ab5ddc2667b", size = 242159 },
    { url = "https://files.pythonhosted.org/packages/a5/fb/4b537dd92f9fd4be68042ec51c9d23885ca5fafe51ec24c58d9401034e5f/propcache-0.3.0-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:997e7b8f173a391987df40f3b52c423e5850be6f6df0dcfb5376365440b56667", size = 248163 },
    { url = "https://files.pythonhosted.org/packages/e7/af/8a9db04ac596d531ca0ef7dde518feaadfcdabef7b17d6a5ec59ee3effc2/propcache-0.3.0-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:8d663fd71491dde7dfdfc899d13a067a94198e90695b4321084c6e450743b8c7", size = 248794 },
    { url = "https://files.pythonhosted.org/packages/9d/c4/ecfc988879c0fd9db03228725b662d76cf484b6b46f7e92fee94e4b52490/propcache-0.3.0-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:8884ba1a0fe7210b775106b25850f5e5a9dc3c840d1ae9924ee6ea2eb3acbfe7", size = 243912 },
    { url = "https://files.pythonhosted.org/packages/04/a2/298dd27184faa8b7d91cc43488b578db218b3cc85b54d912ed27b8c5597a/propcache-0.3.0-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:aa806bbc13eac1ab6291ed21ecd2dd426063ca5417dd507e6be58de20e58dfcf", size = 229402 },
    { url = "https://files.pythonhosted.org/packages/be/0d/efe7fec316ca92dbf4bc4a9ba49ca889c43ca6d48ab1d6fa99fc94e5bb98/propcache-0.3.0-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:6f4d7a7c0aff92e8354cceca6fe223973ddf08401047920df0fcb24be2bd5138", size = 226896 },
    { url = "https://files.pythonhosted.org/packages/60/63/72404380ae1d9c96d96e165aa02c66c2aae6072d067fc4713da5cde96762/propcache-0.3.0-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:9be90eebc9842a93ef8335291f57b3b7488ac24f70df96a6034a13cb58e6ff86", size = 221447 },
    { url = "https://files.pythonhosted.org/packages/9d/18/b8392cab6e0964b67a30a8f4dadeaff64dc7022b5a34bb1d004ea99646f4/propcache-0.3.0-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:bf15fc0b45914d9d1b706f7c9c4f66f2b7b053e9517e40123e137e8ca8958b3d", size = 222440 },
    { url = "https://files.pythonhosted.org/packages/6f/be/105d9ceda0f97eff8c06bac1673448b2db2a497444de3646464d3f5dc881/propcache-0.3.0-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:5a16167118677d94bb48bfcd91e420088854eb0737b76ec374b91498fb77a70e", size = 234104 },
    { url = "https://files.pythonhosted.org/packages/cb/c9/f09a4ec394cfcce4053d8b2a04d622b5f22d21ba9bb70edd0cad061fa77b/propcache-0.3.0-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:41de3da5458edd5678b0f6ff66691507f9885f5fe6a0fb99a5d10d10c0fd2d64", size = 239086 },
    { url = "https://files.pythonhosted.org/packages/ea/aa/96f7f9ed6def82db67c972bdb7bd9f28b95d7d98f7e2abaf144c284bf609/propcache-0.3.0-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:728af36011bb5d344c4fe4af79cfe186729efb649d2f8b395d1572fb088a996c", size = 230991 },
    { url = "https://files.pythonhosted.org/packages/5a/11/bee5439de1307d06fad176f7143fec906e499c33d7aff863ea8428b8e98b/propcache-0.3.0-cp312-cp312-win32.whl", hash = "sha256:6b5b7fd6ee7b54e01759f2044f936dcf7dea6e7585f35490f7ca0420fe723c0d", size = 40337 },
    { url = "https://files.pythonhosted.org/packages/e4/17/e5789a54a0455a61cb9efc4ca6071829d992220c2998a27c59aeba749f6f/propcache-0.3.0-cp312-cp312-win_amd64.whl", hash = "sha256:2d15bc27163cd4df433e75f546b9ac31c1ba7b0b128bfb1b90df19082466ff57", size = 44404 },
    { url = "https://files.pythonhosted.org/packages/3a/0f/a79dd23a0efd6ee01ab0dc9750d8479b343bfd0c73560d59d271eb6a99d4/propcache-0.3.0-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:a2b9bf8c79b660d0ca1ad95e587818c30ccdb11f787657458d6f26a1ea18c568", size = 77287 },
    { url = "https://files.pythonhosted.org/packages/b8/51/76675703c90de38ac75adb8deceb3f3ad99b67ff02a0fa5d067757971ab8/propcache-0.3.0-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:b0c1a133d42c6fc1f5fbcf5c91331657a1ff822e87989bf4a6e2e39b818d0ee9", size = 44923 },
    { url = "https://files.pythonhosted.org/packages/01/9b/fd5ddbee66cf7686e73c516227c2fd9bf471dbfed0f48329d095ea1228d3/propcache-0.3.0-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:bb2f144c6d98bb5cbc94adeb0447cfd4c0f991341baa68eee3f3b0c9c0e83767", size = 44325 },
    { url = "https://files.pythonhosted.org/packages/13/1c/6961f11eb215a683b34b903b82bde486c606516c1466bf1fa67f26906d51/propcache-0.3.0-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d1323cd04d6e92150bcc79d0174ce347ed4b349d748b9358fd2e497b121e03c8", size = 225116 },
    { url = "https://files.pythonhosted.org/packages/ef/ea/f8410c40abcb2e40dffe9adeed017898c930974650a63e5c79b886aa9f73/propcache-0.3.0-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:3b812b3cb6caacd072276ac0492d249f210006c57726b6484a1e1805b3cfeea0", size = 229905 },
    { url = "https://files.pythonhosted.org/packages/ef/5a/a9bf90894001468bf8e6ea293bb00626cc9ef10f8eb7996e9ec29345c7ed/propcache-0.3.0-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:742840d1d0438eb7ea4280f3347598f507a199a35a08294afdcc560c3739989d", size = 233221 },
    { url = "https://files.pythonhosted.org/packages/dd/ce/fffdddd9725b690b01d345c1156b4c2cc6dca09ab5c23a6d07b8f37d6e2f/propcache-0.3.0-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:7c6e7e4f9167fddc438cd653d826f2222222564daed4116a02a184b464d3ef05", size = 227627 },
    { url = "https://files.pythonhosted.org/packages/58/ae/45c89a5994a334735a3032b48e8e4a98c05d9536ddee0719913dc27da548/propcache-0.3.0-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a94ffc66738da99232ddffcf7910e0f69e2bbe3a0802e54426dbf0714e1c2ffe", size = 214217 },
    { url = "https://files.pythonhosted.org/packages/01/84/bc60188c3290ff8f5f4a92b9ca2d93a62e449c8daf6fd11ad517ad136926/propcache-0.3.0-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:3c6ec957025bf32b15cbc6b67afe233c65b30005e4c55fe5768e4bb518d712f1", size = 212921 },
    { url = "https://files.pythonhosted.org/packages/14/b3/39d60224048feef7a96edabb8217dc3f75415457e5ebbef6814f8b2a27b5/propcache-0.3.0-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:549722908de62aa0b47a78b90531c022fa6e139f9166be634f667ff45632cc92", size = 208200 },
    { url = "https://files.pythonhosted.org/packages/9d/b3/0a6720b86791251273fff8a01bc8e628bc70903513bd456f86cde1e1ef84/propcache-0.3.0-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:5d62c4f6706bff5d8a52fd51fec6069bef69e7202ed481486c0bc3874912c787", size = 208400 },
    { url = "https://files.pythonhosted.org/packages/e9/4f/bb470f3e687790547e2e78105fb411f54e0cdde0d74106ccadd2521c6572/propcache-0.3.0-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:24c04f8fbf60094c531667b8207acbae54146661657a1b1be6d3ca7773b7a545", size = 218116 },
    { url = "https://files.pythonhosted.org/packages/34/71/277f7f9add469698ac9724c199bfe06f85b199542121a71f65a80423d62a/propcache-0.3.0-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:7c5f5290799a3f6539cc5e6f474c3e5c5fbeba74a5e1e5be75587746a940d51e", size = 222911 },
    { url = "https://files.pythonhosted.org/packages/92/e3/a7b9782aef5a2fc765b1d97da9ec7aed2f25a4e985703608e73232205e3f/propcache-0.3.0-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:4fa0e7c9c3cf7c276d4f6ab9af8adddc127d04e0fcabede315904d2ff76db626", size = 216563 },
    { url = "https://files.pythonhosted.org/packages/ab/76/0583ca2c551aa08ffcff87b2c6849c8f01c1f6fb815a5226f0c5c202173e/propcache-0.3.0-cp313-cp313-win32.whl", hash = "sha256:ee0bd3a7b2e184e88d25c9baa6a9dc609ba25b76daae942edfb14499ac7ec374", size = 39763 },
    { url = "https://files.pythonhosted.org/packages/80/ec/c6a84f9a36f608379b95f0e786c111d5465926f8c62f12be8cdadb02b15c/propcache-0.3.0-cp313-cp313-win_amd64.whl", hash = "sha256:1c8f7d896a16da9455f882870a507567d4f58c53504dc2d4b1e1d386dfe4588a", size = 43650 },
    { url = "https://files.pythonhosted.org/packages/ee/95/7d32e3560f5bf83fc2f2a4c1b0c181d327d53d5f85ebd045ab89d4d97763/propcache-0.3.0-cp313-cp313t-macosx_10_13_universal2.whl", hash = "sha256:e560fd75aaf3e5693b91bcaddd8b314f4d57e99aef8a6c6dc692f935cc1e6bbf", size = 82140 },
    { url = "https://files.pythonhosted.org/packages/86/89/752388f12e6027a5e63f5d075f15291ded48e2d8311314fff039da5a9b11/propcache-0.3.0-cp313-cp313t-macosx_10_13_x86_64.whl", hash = "sha256:65a37714b8ad9aba5780325228598a5b16c47ba0f8aeb3dc0514701e4413d7c0", size = 47296 },
    { url = "https://files.pythonhosted.org/packages/1b/4c/b55c98d586c69180d3048984a57a5ea238bdeeccf82dbfcd598e935e10bb/propcache-0.3.0-cp313-cp313t-macosx_11_0_arm64.whl", hash = "sha256:07700939b2cbd67bfb3b76a12e1412405d71019df00ca5697ce75e5ef789d829", size = 46724 },
    { url = "https://files.pythonhosted.org/packages/0f/b6/67451a437aed90c4e951e320b5b3d7eb584ade1d5592f6e5e8f678030989/propcache-0.3.0-cp313-cp313t-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7c0fdbdf6983526e269e5a8d53b7ae3622dd6998468821d660d0daf72779aefa", size = 291499 },
    { url = "https://files.pythonhosted.org/packages/ee/ff/e4179facd21515b24737e1e26e02615dfb5ed29416eed4cf5bc6ac5ce5fb/propcache-0.3.0-cp313-cp313t-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:794c3dd744fad478b6232289c866c25406ecdfc47e294618bdf1697e69bd64a6", size = 293911 },
    { url = "https://files.pythonhosted.org/packages/76/8d/94a8585992a064a23bd54f56c5e58c3b8bf0c0a06ae10e56f2353ae16c3d/propcache-0.3.0-cp313-cp313t-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:4544699674faf66fb6b4473a1518ae4999c1b614f0b8297b1cef96bac25381db", size = 293301 },
    { url = "https://files.pythonhosted.org/packages/b0/b8/2c860c92b4134f68c7716c6f30a0d723973f881c32a6d7a24c4ddca05fdf/propcache-0.3.0-cp313-cp313t-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:fddb8870bdb83456a489ab67c6b3040a8d5a55069aa6f72f9d872235fbc52f54", size = 281947 },
    { url = "https://files.pythonhosted.org/packages/cd/72/b564be7411b525d11757b713c757c21cd4dc13b6569c3b2b8f6d3c96fd5e/propcache-0.3.0-cp313-cp313t-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f857034dc68d5ceb30fb60afb6ff2103087aea10a01b613985610e007053a121", size = 268072 },
    { url = "https://files.pythonhosted.org/packages/37/68/d94649e399e8d7fc051e5a4f2334efc567993525af083db145a70690a121/propcache-0.3.0-cp313-cp313t-musllinux_1_2_aarch64.whl", hash = "sha256:02df07041e0820cacc8f739510078f2aadcfd3fc57eaeeb16d5ded85c872c89e", size = 275190 },
    { url = "https://files.pythonhosted.org/packages/d8/3c/446e125f5bbbc1922964dd67cb541c01cdb678d811297b79a4ff6accc843/propcache-0.3.0-cp313-cp313t-musllinux_1_2_armv7l.whl", hash = "sha256:f47d52fd9b2ac418c4890aad2f6d21a6b96183c98021f0a48497a904199f006e", size = 254145 },
    { url = "https://files.pythonhosted.org/packages/f4/80/fd3f741483dc8e59f7ba7e05eaa0f4e11677d7db2077522b92ff80117a2a/propcache-0.3.0-cp313-cp313t-musllinux_1_2_i686.whl", hash = "sha256:9ff4e9ecb6e4b363430edf2c6e50173a63e0820e549918adef70515f87ced19a", size = 257163 },
    { url = "https://files.pythonhosted.org/packages/dc/cf/6292b5ce6ed0017e6a89024a827292122cc41b6259b30ada0c6732288513/propcache-0.3.0-cp313-cp313t-musllinux_1_2_ppc64le.whl", hash = "sha256:ecc2920630283e0783c22e2ac94427f8cca29a04cfdf331467d4f661f4072dac", size = 280249 },
    { url = "https://files.pythonhosted.org/packages/e8/f0/fd9b8247b449fe02a4f96538b979997e229af516d7462b006392badc59a1/propcache-0.3.0-cp313-cp313t-musllinux_1_2_s390x.whl", hash = "sha256:c441c841e82c5ba7a85ad25986014be8d7849c3cfbdb6004541873505929a74e", size = 288741 },
    { url = "https://files.pythonhosted.org/packages/64/71/cf831fdc2617f86cfd7f414cfc487d018e722dac8acc098366ce9bba0941/propcache-0.3.0-cp313-cp313t-musllinux_1_2_x86_64.whl", hash = "sha256:6c929916cbdb540d3407c66f19f73387f43e7c12fa318a66f64ac99da601bcdf", size = 277061 },
    { url = "https://files.pythonhosted.org/packages/42/78/9432542a35d944abeca9e02927a0de38cd7a298466d8ffa171536e2381c3/propcache-0.3.0-cp313-cp313t-win32.whl", hash = "sha256:0c3e893c4464ebd751b44ae76c12c5f5c1e4f6cbd6fbf67e3783cd93ad221863", size = 42252 },
    { url = "https://files.pythonhosted.org/packages/6f/45/960365f4f8978f48ebb56b1127adf33a49f2e69ecd46ac1f46d6cf78a79d/propcache-0.3.0-cp313-cp313t-win_amd64.whl", hash = "sha256:75e872573220d1ee2305b35c9813626e620768248425f58798413e9c39741f46", size = 46425 },
    { url = "https://files.pythonhosted.org/packages/b5/35/6c4c6fc8774a9e3629cd750dc24a7a4fb090a25ccd5c3246d127b70f9e22/propcache-0.3.0-py3-none-any.whl", hash = "sha256:67dda3c7325691c2081510e92c561f465ba61b975f481735aefdfc845d2cd043", size = 12101 },
]

[[package]]
name = "psutil"
version = "7.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/2a/80/336820c1ad9286a4ded7e845b2eccfcb27851ab8ac6abece774a6ff4d3de/psutil-7.0.0.tar.gz", hash = "sha256:7be9c3eba38beccb6495ea33afd982a44074b78f28c434a1f51cc07fd315c456", size = 497003 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ed/e6/2d26234410f8b8abdbf891c9da62bee396583f713fb9f3325a4760875d22/psutil-7.0.0-cp36-abi3-macosx_10_9_x86_64.whl", hash = "sha256:101d71dc322e3cffd7cea0650b09b3d08b8e7c4109dd6809fe452dfd00e58b25", size = 238051 },
    { url = "https://files.pythonhosted.org/packages/04/8b/30f930733afe425e3cbfc0e1468a30a18942350c1a8816acfade80c005c4/psutil-7.0.0-cp36-abi3-macosx_11_0_arm64.whl", hash = "sha256:39db632f6bb862eeccf56660871433e111b6ea58f2caea825571951d4b6aa3da", size = 239535 },
    { url = "https://files.pythonhosted.org/packages/2a/ed/d362e84620dd22876b55389248e522338ed1bf134a5edd3b8231d7207f6d/psutil-7.0.0-cp36-abi3-manylinux_2_12_i686.manylinux2010_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:1fcee592b4c6f146991ca55919ea3d1f8926497a713ed7faaf8225e174581e91", size = 275004 },
    { url = "https://files.pythonhosted.org/packages/bf/b9/b0eb3f3cbcb734d930fdf839431606844a825b23eaf9a6ab371edac8162c/psutil-7.0.0-cp36-abi3-manylinux_2_12_x86_64.manylinux2010_x86_64.manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:4b1388a4f6875d7e2aff5c4ca1cc16c545ed41dd8bb596cefea80111db353a34", size = 277986 },
    { url = "https://files.pythonhosted.org/packages/eb/a2/709e0fe2f093556c17fbafda93ac032257242cabcc7ff3369e2cb76a97aa/psutil-7.0.0-cp36-abi3-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a5f098451abc2828f7dc6b58d44b532b22f2088f4999a937557b603ce72b1993", size = 279544 },
    { url = "https://files.pythonhosted.org/packages/50/e6/eecf58810b9d12e6427369784efe814a1eec0f492084ce8eb8f4d89d6d61/psutil-7.0.0-cp37-abi3-win32.whl", hash = "sha256:ba3fcef7523064a6c9da440fc4d6bd07da93ac726b5733c29027d7dc95b39d99", size = 241053 },
    { url = "https://files.pythonhosted.org/packages/50/1b/6921afe68c74868b4c9fa424dad3be35b095e16687989ebbb50ce4fceb7c/psutil-7.0.0-cp37-abi3-win_amd64.whl", hash = "sha256:4cf3d4eb1aa9b348dec30105c55cd9b7d4629285735a102beb4441e38db90553", size = 244885 },
]

[[package]]
name = "pycountry"
version = "24.6.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/76/57/c389fa68c50590881a75b7883eeb3dc15e9e73a0fdc001cdd45c13290c92/pycountry-24.6.1.tar.gz", hash = "sha256:b61b3faccea67f87d10c1f2b0fc0be714409e8fcdcc1315613174f6466c10221", size = 6043910 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b1/ec/1fb891d8a2660716aadb2143235481d15ed1cbfe3ad669194690b0604492/pycountry-24.6.1-py3-none-any.whl", hash = "sha256:f1a4fb391cd7214f8eefd39556d740adcc233c778a27f8942c8dca351d6ce06f", size = 6335189 },
]

[[package]]
name = "pycparser"
version = "2.22"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/1d/b2/31537cf4b1ca988837256c910a668b553fceb8f069bedc4b1c826024b52c/pycparser-2.22.tar.gz", hash = "sha256:491c8be9c040f5390f5bf44a5b07752bd07f56edf992381b05c701439eec10f6", size = 172736 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/13/a3/a812df4e2dd5696d1f351d58b8fe16a405b234ad2886a0dab9183fb78109/pycparser-2.22-py3-none-any.whl", hash = "sha256:c3702b6d3dd8c7abc1afa565d7e63d53a1d0bd86cdc24edd75470f4de499cfcc", size = 117552 },
]

[[package]]
name = "pydantic"
version = "2.10.6"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "annotated-types" },
    { name = "pydantic-core" },
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b7/ae/d5220c5c52b158b1de7ca89fc5edb72f304a70a4c540c84c8844bf4008de/pydantic-2.10.6.tar.gz", hash = "sha256:ca5daa827cce33de7a42be142548b0096bf05a7e7b365aebfa5f8eeec7128236", size = 761681 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f4/3c/8cc1cc84deffa6e25d2d0c688ebb80635dfdbf1dbea3e30c541c8cf4d860/pydantic-2.10.6-py3-none-any.whl", hash = "sha256:427d664bf0b8a2b34ff5dd0f5a18df00591adcee7198fbd71981054cef37b584", size = 431696 },
]

[[package]]
name = "pydantic-core"
version = "2.27.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "typing-extensions" },
]
sdist = { url = "https://files.pythonhosted.org/packages/fc/01/f3e5ac5e7c25833db5eb555f7b7ab24cd6f8c322d3a3ad2d67a952dc0abc/pydantic_core-2.27.2.tar.gz", hash = "sha256:eb026e5a4c1fee05726072337ff51d1efb6f59090b7da90d30ea58625b1ffb39", size = 413443 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3a/bc/fed5f74b5d802cf9a03e83f60f18864e90e3aed7223adaca5ffb7a8d8d64/pydantic_core-2.27.2-cp310-cp310-macosx_10_12_x86_64.whl", hash = "sha256:2d367ca20b2f14095a8f4fa1210f5a7b78b8a20009ecced6b12818f455b1e9fa", size = 1895938 },
    { url = "https://files.pythonhosted.org/packages/71/2a/185aff24ce844e39abb8dd680f4e959f0006944f4a8a0ea372d9f9ae2e53/pydantic_core-2.27.2-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:491a2b73db93fab69731eaee494f320faa4e093dbed776be1a829c2eb222c34c", size = 1815684 },
    { url = "https://files.pythonhosted.org/packages/c3/43/fafabd3d94d159d4f1ed62e383e264f146a17dd4d48453319fd782e7979e/pydantic_core-2.27.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:7969e133a6f183be60e9f6f56bfae753585680f3b7307a8e555a948d443cc05a", size = 1829169 },
    { url = "https://files.pythonhosted.org/packages/a2/d1/f2dfe1a2a637ce6800b799aa086d079998959f6f1215eb4497966efd2274/pydantic_core-2.27.2-cp310-cp310-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:3de9961f2a346257caf0aa508a4da705467f53778e9ef6fe744c038119737ef5", size = 1867227 },
    { url = "https://files.pythonhosted.org/packages/7d/39/e06fcbcc1c785daa3160ccf6c1c38fea31f5754b756e34b65f74e99780b5/pydantic_core-2.27.2-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e2bb4d3e5873c37bb3dd58714d4cd0b0e6238cebc4177ac8fe878f8b3aa8e74c", size = 2037695 },
    { url = "https://files.pythonhosted.org/packages/7a/67/61291ee98e07f0650eb756d44998214231f50751ba7e13f4f325d95249ab/pydantic_core-2.27.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:280d219beebb0752699480fe8f1dc61ab6615c2046d76b7ab7ee38858de0a4e7", size = 2741662 },
    { url = "https://files.pythonhosted.org/packages/32/90/3b15e31b88ca39e9e626630b4c4a1f5a0dfd09076366f4219429e6786076/pydantic_core-2.27.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:47956ae78b6422cbd46f772f1746799cbb862de838fd8d1fbd34a82e05b0983a", size = 1993370 },
    { url = "https://files.pythonhosted.org/packages/ff/83/c06d333ee3a67e2e13e07794995c1535565132940715931c1c43bfc85b11/pydantic_core-2.27.2-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:14d4a5c49d2f009d62a2a7140d3064f686d17a5d1a268bc641954ba181880236", size = 1996813 },
    { url = "https://files.pythonhosted.org/packages/7c/f7/89be1c8deb6e22618a74f0ca0d933fdcb8baa254753b26b25ad3acff8f74/pydantic_core-2.27.2-cp310-cp310-musllinux_1_1_aarch64.whl", hash = "sha256:337b443af21d488716f8d0b6164de833e788aa6bd7e3a39c005febc1284f4962", size = 2005287 },
    { url = "https://files.pythonhosted.org/packages/b7/7d/8eb3e23206c00ef7feee17b83a4ffa0a623eb1a9d382e56e4aa46fd15ff2/pydantic_core-2.27.2-cp310-cp310-musllinux_1_1_armv7l.whl", hash = "sha256:03d0f86ea3184a12f41a2d23f7ccb79cdb5a18e06993f8a45baa8dfec746f0e9", size = 2128414 },
    { url = "https://files.pythonhosted.org/packages/4e/99/fe80f3ff8dd71a3ea15763878d464476e6cb0a2db95ff1c5c554133b6b83/pydantic_core-2.27.2-cp310-cp310-musllinux_1_1_x86_64.whl", hash = "sha256:7041c36f5680c6e0f08d922aed302e98b3745d97fe1589db0a3eebf6624523af", size = 2155301 },
    { url = "https://files.pythonhosted.org/packages/2b/a3/e50460b9a5789ca1451b70d4f52546fa9e2b420ba3bfa6100105c0559238/pydantic_core-2.27.2-cp310-cp310-win32.whl", hash = "sha256:50a68f3e3819077be2c98110c1f9dcb3817e93f267ba80a2c05bb4f8799e2ff4", size = 1816685 },
    { url = "https://files.pythonhosted.org/packages/57/4c/a8838731cb0f2c2a39d3535376466de6049034d7b239c0202a64aaa05533/pydantic_core-2.27.2-cp310-cp310-win_amd64.whl", hash = "sha256:e0fd26b16394ead34a424eecf8a31a1f5137094cabe84a1bcb10fa6ba39d3d31", size = 1982876 },
    { url = "https://files.pythonhosted.org/packages/c2/89/f3450af9d09d44eea1f2c369f49e8f181d742f28220f88cc4dfaae91ea6e/pydantic_core-2.27.2-cp311-cp311-macosx_10_12_x86_64.whl", hash = "sha256:8e10c99ef58cfdf2a66fc15d66b16c4a04f62bca39db589ae8cba08bc55331bc", size = 1893421 },
    { url = "https://files.pythonhosted.org/packages/9e/e3/71fe85af2021f3f386da42d291412e5baf6ce7716bd7101ea49c810eda90/pydantic_core-2.27.2-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:26f32e0adf166a84d0cb63be85c562ca8a6fa8de28e5f0d92250c6b7e9e2aff7", size = 1814998 },
    { url = "https://files.pythonhosted.org/packages/a6/3c/724039e0d848fd69dbf5806894e26479577316c6f0f112bacaf67aa889ac/pydantic_core-2.27.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:8c19d1ea0673cd13cc2f872f6c9ab42acc4e4f492a7ca9d3795ce2b112dd7e15", size = 1826167 },
    { url = "https://files.pythonhosted.org/packages/2b/5b/1b29e8c1fb5f3199a9a57c1452004ff39f494bbe9bdbe9a81e18172e40d3/pydantic_core-2.27.2-cp311-cp311-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:5e68c4446fe0810e959cdff46ab0a41ce2f2c86d227d96dc3847af0ba7def306", size = 1865071 },
    { url = "https://files.pythonhosted.org/packages/89/6c/3985203863d76bb7d7266e36970d7e3b6385148c18a68cc8915fd8c84d57/pydantic_core-2.27.2-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:d9640b0059ff4f14d1f37321b94061c6db164fbe49b334b31643e0528d100d99", size = 2036244 },
    { url = "https://files.pythonhosted.org/packages/0e/41/f15316858a246b5d723f7d7f599f79e37493b2e84bfc789e58d88c209f8a/pydantic_core-2.27.2-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:40d02e7d45c9f8af700f3452f329ead92da4c5f4317ca9b896de7ce7199ea459", size = 2737470 },
    { url = "https://files.pythonhosted.org/packages/a8/7c/b860618c25678bbd6d1d99dbdfdf0510ccb50790099b963ff78a124b754f/pydantic_core-2.27.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:1c1fd185014191700554795c99b347d64f2bb637966c4cfc16998a0ca700d048", size = 1992291 },
    { url = "https://files.pythonhosted.org/packages/bf/73/42c3742a391eccbeab39f15213ecda3104ae8682ba3c0c28069fbcb8c10d/pydantic_core-2.27.2-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:d81d2068e1c1228a565af076598f9e7451712700b673de8f502f0334f281387d", size = 1994613 },
    { url = "https://files.pythonhosted.org/packages/94/7a/941e89096d1175d56f59340f3a8ebaf20762fef222c298ea96d36a6328c5/pydantic_core-2.27.2-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:1a4207639fb02ec2dbb76227d7c751a20b1a6b4bc52850568e52260cae64ca3b", size = 2002355 },
    { url = "https://files.pythonhosted.org/packages/6e/95/2359937a73d49e336a5a19848713555605d4d8d6940c3ec6c6c0ca4dcf25/pydantic_core-2.27.2-cp311-cp311-musllinux_1_1_armv7l.whl", hash = "sha256:3de3ce3c9ddc8bbd88f6e0e304dea0e66d843ec9de1b0042b0911c1663ffd474", size = 2126661 },
    { url = "https://files.pythonhosted.org/packages/2b/4c/ca02b7bdb6012a1adef21a50625b14f43ed4d11f1fc237f9d7490aa5078c/pydantic_core-2.27.2-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:30c5f68ded0c36466acede341551106821043e9afaad516adfb6e8fa80a4e6a6", size = 2153261 },
    { url = "https://files.pythonhosted.org/packages/72/9d/a241db83f973049a1092a079272ffe2e3e82e98561ef6214ab53fe53b1c7/pydantic_core-2.27.2-cp311-cp311-win32.whl", hash = "sha256:c70c26d2c99f78b125a3459f8afe1aed4d9687c24fd677c6a4436bc042e50d6c", size = 1812361 },
    { url = "https://files.pythonhosted.org/packages/e8/ef/013f07248041b74abd48a385e2110aa3a9bbfef0fbd97d4e6d07d2f5b89a/pydantic_core-2.27.2-cp311-cp311-win_amd64.whl", hash = "sha256:08e125dbdc505fa69ca7d9c499639ab6407cfa909214d500897d02afb816e7cc", size = 1982484 },
    { url = "https://files.pythonhosted.org/packages/10/1c/16b3a3e3398fd29dca77cea0a1d998d6bde3902fa2706985191e2313cc76/pydantic_core-2.27.2-cp311-cp311-win_arm64.whl", hash = "sha256:26f0d68d4b235a2bae0c3fc585c585b4ecc51382db0e3ba402a22cbc440915e4", size = 1867102 },
    { url = "https://files.pythonhosted.org/packages/d6/74/51c8a5482ca447871c93e142d9d4a92ead74de6c8dc5e66733e22c9bba89/pydantic_core-2.27.2-cp312-cp312-macosx_10_12_x86_64.whl", hash = "sha256:9e0c8cfefa0ef83b4da9588448b6d8d2a2bf1a53c3f1ae5fca39eb3061e2f0b0", size = 1893127 },
    { url = "https://files.pythonhosted.org/packages/d3/f3/c97e80721735868313c58b89d2de85fa80fe8dfeeed84dc51598b92a135e/pydantic_core-2.27.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:83097677b8e3bd7eaa6775720ec8e0405f1575015a463285a92bfdfe254529ef", size = 1811340 },
    { url = "https://files.pythonhosted.org/packages/9e/91/840ec1375e686dbae1bd80a9e46c26a1e0083e1186abc610efa3d9a36180/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:172fce187655fece0c90d90a678424b013f8fbb0ca8b036ac266749c09438cb7", size = 1822900 },
    { url = "https://files.pythonhosted.org/packages/f6/31/4240bc96025035500c18adc149aa6ffdf1a0062a4b525c932065ceb4d868/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:519f29f5213271eeeeb3093f662ba2fd512b91c5f188f3bb7b27bc5973816934", size = 1869177 },
    { url = "https://files.pythonhosted.org/packages/fa/20/02fbaadb7808be578317015c462655c317a77a7c8f0ef274bc016a784c54/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:05e3a55d124407fffba0dd6b0c0cd056d10e983ceb4e5dbd10dda135c31071d6", size = 2038046 },
    { url = "https://files.pythonhosted.org/packages/06/86/7f306b904e6c9eccf0668248b3f272090e49c275bc488a7b88b0823444a4/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9c3ed807c7b91de05e63930188f19e921d1fe90de6b4f5cd43ee7fcc3525cb8c", size = 2685386 },
    { url = "https://files.pythonhosted.org/packages/8d/f0/49129b27c43396581a635d8710dae54a791b17dfc50c70164866bbf865e3/pydantic_core-2.27.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6fb4aadc0b9a0c063206846d603b92030eb6f03069151a625667f982887153e2", size = 1997060 },
    { url = "https://files.pythonhosted.org/packages/0d/0f/943b4af7cd416c477fd40b187036c4f89b416a33d3cc0ab7b82708a667aa/pydantic_core-2.27.2-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:28ccb213807e037460326424ceb8b5245acb88f32f3d2777427476e1b32c48c4", size = 2004870 },
    { url = "https://files.pythonhosted.org/packages/35/40/aea70b5b1a63911c53a4c8117c0a828d6790483f858041f47bab0b779f44/pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:de3cd1899e2c279b140adde9357c4495ed9d47131b4a4eaff9052f23398076b3", size = 1999822 },
    { url = "https://files.pythonhosted.org/packages/f2/b3/807b94fd337d58effc5498fd1a7a4d9d59af4133e83e32ae39a96fddec9d/pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_armv7l.whl", hash = "sha256:220f892729375e2d736b97d0e51466252ad84c51857d4d15f5e9692f9ef12be4", size = 2130364 },
    { url = "https://files.pythonhosted.org/packages/fc/df/791c827cd4ee6efd59248dca9369fb35e80a9484462c33c6649a8d02b565/pydantic_core-2.27.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:a0fcd29cd6b4e74fe8ddd2c90330fd8edf2e30cb52acda47f06dd615ae72da57", size = 2158303 },
    { url = "https://files.pythonhosted.org/packages/9b/67/4e197c300976af185b7cef4c02203e175fb127e414125916bf1128b639a9/pydantic_core-2.27.2-cp312-cp312-win32.whl", hash = "sha256:1e2cb691ed9834cd6a8be61228471d0a503731abfb42f82458ff27be7b2186fc", size = 1834064 },
    { url = "https://files.pythonhosted.org/packages/1f/ea/cd7209a889163b8dcca139fe32b9687dd05249161a3edda62860430457a5/pydantic_core-2.27.2-cp312-cp312-win_amd64.whl", hash = "sha256:cc3f1a99a4f4f9dd1de4fe0312c114e740b5ddead65bb4102884b384c15d8bc9", size = 1989046 },
    { url = "https://files.pythonhosted.org/packages/bc/49/c54baab2f4658c26ac633d798dab66b4c3a9bbf47cff5284e9c182f4137a/pydantic_core-2.27.2-cp312-cp312-win_arm64.whl", hash = "sha256:3911ac9284cd8a1792d3cb26a2da18f3ca26c6908cc434a18f730dc0db7bfa3b", size = 1885092 },
    { url = "https://files.pythonhosted.org/packages/41/b1/9bc383f48f8002f99104e3acff6cba1231b29ef76cfa45d1506a5cad1f84/pydantic_core-2.27.2-cp313-cp313-macosx_10_12_x86_64.whl", hash = "sha256:7d14bd329640e63852364c306f4d23eb744e0f8193148d4044dd3dacdaacbd8b", size = 1892709 },
    { url = "https://files.pythonhosted.org/packages/10/6c/e62b8657b834f3eb2961b49ec8e301eb99946245e70bf42c8817350cbefc/pydantic_core-2.27.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:82f91663004eb8ed30ff478d77c4d1179b3563df6cdb15c0817cd1cdaf34d154", size = 1811273 },
    { url = "https://files.pythonhosted.org/packages/ba/15/52cfe49c8c986e081b863b102d6b859d9defc63446b642ccbbb3742bf371/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:71b24c7d61131bb83df10cc7e687433609963a944ccf45190cfc21e0887b08c9", size = 1823027 },
    { url = "https://files.pythonhosted.org/packages/b1/1c/b6f402cfc18ec0024120602bdbcebc7bdd5b856528c013bd4d13865ca473/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:fa8e459d4954f608fa26116118bb67f56b93b209c39b008277ace29937453dc9", size = 1868888 },
    { url = "https://files.pythonhosted.org/packages/bd/7b/8cb75b66ac37bc2975a3b7de99f3c6f355fcc4d89820b61dffa8f1e81677/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:ce8918cbebc8da707ba805b7fd0b382816858728ae7fe19a942080c24e5b7cd1", size = 2037738 },
    { url = "https://files.pythonhosted.org/packages/c8/f1/786d8fe78970a06f61df22cba58e365ce304bf9b9f46cc71c8c424e0c334/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:eda3f5c2a021bbc5d976107bb302e0131351c2ba54343f8a496dc8783d3d3a6a", size = 2685138 },
    { url = "https://files.pythonhosted.org/packages/a6/74/d12b2cd841d8724dc8ffb13fc5cef86566a53ed358103150209ecd5d1999/pydantic_core-2.27.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:bd8086fa684c4775c27f03f062cbb9eaa6e17f064307e86b21b9e0abc9c0f02e", size = 1997025 },
    { url = "https://files.pythonhosted.org/packages/a0/6e/940bcd631bc4d9a06c9539b51f070b66e8f370ed0933f392db6ff350d873/pydantic_core-2.27.2-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:8d9b3388db186ba0c099a6d20f0604a44eabdeef1777ddd94786cdae158729e4", size = 2004633 },
    { url = "https://files.pythonhosted.org/packages/50/cc/a46b34f1708d82498c227d5d80ce615b2dd502ddcfd8376fc14a36655af1/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:7a66efda2387de898c8f38c0cf7f14fca0b51a8ef0b24bfea5849f1b3c95af27", size = 1999404 },
    { url = "https://files.pythonhosted.org/packages/ca/2d/c365cfa930ed23bc58c41463bae347d1005537dc8db79e998af8ba28d35e/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_armv7l.whl", hash = "sha256:18a101c168e4e092ab40dbc2503bdc0f62010e95d292b27827871dc85450d7ee", size = 2130130 },
    { url = "https://files.pythonhosted.org/packages/f4/d7/eb64d015c350b7cdb371145b54d96c919d4db516817f31cd1c650cae3b21/pydantic_core-2.27.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:ba5dd002f88b78a4215ed2f8ddbdf85e8513382820ba15ad5ad8955ce0ca19a1", size = 2157946 },
    { url = "https://files.pythonhosted.org/packages/a4/99/bddde3ddde76c03b65dfd5a66ab436c4e58ffc42927d4ff1198ffbf96f5f/pydantic_core-2.27.2-cp313-cp313-win32.whl", hash = "sha256:1ebaf1d0481914d004a573394f4be3a7616334be70261007e47c2a6fe7e50130", size = 1834387 },
    { url = "https://files.pythonhosted.org/packages/71/47/82b5e846e01b26ac6f1893d3c5f9f3a2eb6ba79be26eef0b759b4fe72946/pydantic_core-2.27.2-cp313-cp313-win_amd64.whl", hash = "sha256:953101387ecf2f5652883208769a79e48db18c6df442568a0b5ccd8c2723abee", size = 1990453 },
    { url = "https://files.pythonhosted.org/packages/51/b2/b2b50d5ecf21acf870190ae5d093602d95f66c9c31f9d5de6062eb329ad1/pydantic_core-2.27.2-cp313-cp313-win_arm64.whl", hash = "sha256:ac4dbfd1691affb8f48c2c13241a2e3b60ff23247cbcf981759c768b6633cf8b", size = 1885186 },
    { url = "https://files.pythonhosted.org/packages/46/72/af70981a341500419e67d5cb45abe552a7c74b66326ac8877588488da1ac/pydantic_core-2.27.2-pp310-pypy310_pp73-macosx_10_12_x86_64.whl", hash = "sha256:2bf14caea37e91198329b828eae1618c068dfb8ef17bb33287a7ad4b61ac314e", size = 1891159 },
    { url = "https://files.pythonhosted.org/packages/ad/3d/c5913cccdef93e0a6a95c2d057d2c2cba347815c845cda79ddd3c0f5e17d/pydantic_core-2.27.2-pp310-pypy310_pp73-macosx_11_0_arm64.whl", hash = "sha256:b0cb791f5b45307caae8810c2023a184c74605ec3bcbb67d13846c28ff731ff8", size = 1768331 },
    { url = "https://files.pythonhosted.org/packages/f6/f0/a3ae8fbee269e4934f14e2e0e00928f9346c5943174f2811193113e58252/pydantic_core-2.27.2-pp310-pypy310_pp73-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:688d3fd9fcb71f41c4c015c023d12a79d1c4c0732ec9eb35d96e3388a120dcf3", size = 1822467 },
    { url = "https://files.pythonhosted.org/packages/d7/7a/7bbf241a04e9f9ea24cd5874354a83526d639b02674648af3f350554276c/pydantic_core-2.27.2-pp310-pypy310_pp73-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3d591580c34f4d731592f0e9fe40f9cc1b430d297eecc70b962e93c5c668f15f", size = 1979797 },
    { url = "https://files.pythonhosted.org/packages/4f/5f/4784c6107731f89e0005a92ecb8a2efeafdb55eb992b8e9d0a2be5199335/pydantic_core-2.27.2-pp310-pypy310_pp73-manylinux_2_5_i686.manylinux1_i686.whl", hash = "sha256:82f986faf4e644ffc189a7f1aafc86e46ef70372bb153e7001e8afccc6e54133", size = 1987839 },
    { url = "https://files.pythonhosted.org/packages/6d/a7/61246562b651dff00de86a5f01b6e4befb518df314c54dec187a78d81c84/pydantic_core-2.27.2-pp310-pypy310_pp73-musllinux_1_1_aarch64.whl", hash = "sha256:bec317a27290e2537f922639cafd54990551725fc844249e64c523301d0822fc", size = 1998861 },
    { url = "https://files.pythonhosted.org/packages/86/aa/837821ecf0c022bbb74ca132e117c358321e72e7f9702d1b6a03758545e2/pydantic_core-2.27.2-pp310-pypy310_pp73-musllinux_1_1_armv7l.whl", hash = "sha256:0296abcb83a797db256b773f45773da397da75a08f5fcaef41f2044adec05f50", size = 2116582 },
    { url = "https://files.pythonhosted.org/packages/81/b0/5e74656e95623cbaa0a6278d16cf15e10a51f6002e3ec126541e95c29ea3/pydantic_core-2.27.2-pp310-pypy310_pp73-musllinux_1_1_x86_64.whl", hash = "sha256:0d75070718e369e452075a6017fbf187f788e17ed67a3abd47fa934d001863d9", size = 2151985 },
    { url = "https://files.pythonhosted.org/packages/63/37/3e32eeb2a451fddaa3898e2163746b0cffbbdbb4740d38372db0490d67f3/pydantic_core-2.27.2-pp310-pypy310_pp73-win_amd64.whl", hash = "sha256:7e17b560be3c98a8e3aa66ce828bdebb9e9ac6ad5466fba92eb74c4c95cb1151", size = 2004715 },
]

[[package]]
name = "pydantic-settings"
version = "2.8.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pydantic" },
    { name = "python-dotenv" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ca/a2/ad2511ede77bb424f3939e5148a56d968cdc6b1462620d24b2a1f4ab65b4/pydantic_settings-2.8.0.tar.gz", hash = "sha256:88e2ca28f6e68ea102c99c3c401d6c9078e68a5df600e97b43891c34e089500a", size = 83347 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c1/a9/3b9642025174bbe67e900785fb99c9bfe91ea584b0b7126ff99945c24a0e/pydantic_settings-2.8.0-py3-none-any.whl", hash = "sha256:c782c7dc3fb40e97b238e713c25d26f64314aece2e91abcff592fcac15f71820", size = 30746 },
]

[[package]]
name = "pyflakes"
version = "3.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/57/f9/669d8c9c86613c9d568757c7f5824bd3197d7b1c6c27553bc5618a27cce2/pyflakes-3.2.0.tar.gz", hash = "sha256:1c61603ff154621fb2a9172037d84dca3500def8c8b630657d1701f026f8af3f", size = 63788 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d4/d7/f1b7db88d8e4417c5d47adad627a93547f44bdc9028372dbd2313f34a855/pyflakes-3.2.0-py2.py3-none-any.whl", hash = "sha256:84b5be138a2dfbb40689ca07e2152deb896a65c3a3e24c251c5c62489568074a", size = 62725 },
]

[[package]]
name = "pygments"
version = "2.19.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/7c/2d/c3338d48ea6cc0feb8446d8e6937e1408088a72a39937982cc6111d17f84/pygments-2.19.1.tar.gz", hash = "sha256:61c16d2a8576dc0649d9f39e089b5f02bcd27fba10d8fb4dcc28173f7a45151f", size = 4968581 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/8a/0b/9fcc47d19c48b59121088dd6da2488a49d5f72dacf8262e2790a1d2c7d15/pygments-2.19.1-py3-none-any.whl", hash = "sha256:9ea1544ad55cecf4b8242fab6dd35a93bbce657034b0611ee383099054ab6d8c", size = 1225293 },
]

[[package]]
name = "pyproject-hooks"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/e7/82/28175b2414effca1cdac8dc99f76d660e7a4fb0ceefa4b4ab8f5f6742925/pyproject_hooks-1.2.0.tar.gz", hash = "sha256:1e859bd5c40fae9448642dd871adf459e5e2084186e8d2c2a79a824c970da1f8", size = 19228 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/bd/24/12818598c362d7f300f18e74db45963dbcb85150324092410c8b49405e42/pyproject_hooks-1.2.0-py3-none-any.whl", hash = "sha256:9e5c6bfa8dcc30091c74b0cf803c81fdd29d94f01992a7707bc97babb1141913", size = 10216 },
]

[[package]]
name = "pytest"
version = "8.3.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "colorama", marker = "sys_platform == 'win32'" },
    { name = "exceptiongroup", marker = "python_full_version < '3.11'" },
    { name = "iniconfig" },
    { name = "packaging" },
    { name = "pluggy" },
    { name = "tomli", marker = "python_full_version < '3.11'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/05/35/30e0d83068951d90a01852cb1cef56e5d8a09d20c7f511634cc2f7e0372a/pytest-8.3.4.tar.gz", hash = "sha256:965370d062bce11e73868e0335abac31b4d3de0e82f4007408d242b4f8610761", size = 1445919 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/11/92/76a1c94d3afee238333bc0a42b82935dd8f9cf8ce9e336ff87ee14d9e1cf/pytest-8.3.4-py3-none-any.whl", hash = "sha256:50e16d954148559c9a74109af1eaf0c945ba2d8f30f0a3d3335edde19788b6f6", size = 343083 },
]

[[package]]
name = "pytest-asyncio"
version = "0.25.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f2/a8/ecbc8ede70921dd2f544ab1cadd3ff3bf842af27f87bbdea774c7baa1d38/pytest_asyncio-0.25.3.tar.gz", hash = "sha256:fc1da2cf9f125ada7e710b4ddad05518d4cee187ae9412e9ac9271003497f07a", size = 54239 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/67/17/3493c5624e48fd97156ebaec380dcaafee9506d7e2c46218ceebbb57d7de/pytest_asyncio-0.25.3-py3-none-any.whl", hash = "sha256:9e89518e0f9bd08928f97a3482fdc4e244df17529460bc038291ccaf8f85c7c3", size = 19467 },
]

[[package]]
name = "pytest-cov"
version = "6.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "coverage", extra = ["toml"] },
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/be/45/9b538de8cef30e17c7b45ef42f538a94889ed6a16f2387a6c89e73220651/pytest-cov-6.0.0.tar.gz", hash = "sha256:fde0b595ca248bb8e2d76f020b465f3b107c9632e6a1d1705f17834c89dcadc0", size = 66945 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/36/3b/48e79f2cd6a61dbbd4807b4ed46cb564b4fd50a76166b1c4ea5c1d9e2371/pytest_cov-6.0.0-py3-none-any.whl", hash = "sha256:eee6f1b9e61008bd34975a4d5bab25801eb31898b032dd55addc93e96fcaaa35", size = 22949 },
]

[[package]]
name = "pytest-mock"
version = "3.14.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c6/90/a955c3ab35ccd41ad4de556596fa86685bf4fc5ffcc62d22d856cfd4e29a/pytest-mock-3.14.0.tar.gz", hash = "sha256:2719255a1efeceadbc056d6bf3df3d1c5015530fb40cf347c0f9afac88410bd0", size = 32814 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f2/3b/b26f90f74e2986a82df6e7ac7e319b8ea7ccece1caec9f8ab6104dc70603/pytest_mock-3.14.0-py3-none-any.whl", hash = "sha256:0b72c38033392a5f4621342fe11e9219ac11ec9d375f8e2a0c164539e0d70f6f", size = 9863 },
]

[[package]]
name = "pytest-timeout"
version = "2.3.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/93/0d/04719abc7a4bdb3a7a1f968f24b0f5253d698c9cc94975330e9d3145befb/pytest-timeout-2.3.1.tar.gz", hash = "sha256:12397729125c6ecbdaca01035b9e5239d4db97352320af155b3f5de1ba5165d9", size = 17697 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/03/27/14af9ef8321f5edc7527e47def2a21d8118c6f329a9342cc61387a0c0599/pytest_timeout-2.3.1-py3-none-any.whl", hash = "sha256:68188cb703edfc6a18fad98dc25a3c61e9f24d644b0b70f33af545219fc7813e", size = 14148 },
]

[[package]]
name = "pytest-xdist"
version = "3.6.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "execnet" },
    { name = "pytest" },
]
sdist = { url = "https://files.pythonhosted.org/packages/41/c4/3c310a19bc1f1e9ef50075582652673ef2bfc8cd62afef9585683821902f/pytest_xdist-3.6.1.tar.gz", hash = "sha256:ead156a4db231eec769737f57668ef58a2084a34b2e55c4a8fa20d861107300d", size = 84060 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6d/82/1d96bf03ee4c0fdc3c0cbe61470070e659ca78dc0086fb88b66c185e2449/pytest_xdist-3.6.1-py3-none-any.whl", hash = "sha256:9ed4adfb68a016610848639bb7e02c9352d5d9f03d04809919e2dafc3be4cca7", size = 46108 },
]

[[package]]
name = "python-dotenv"
version = "1.0.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/bc/57/e84d88dfe0aec03b7a2d4327012c1627ab5f03652216c63d49846d7a6c58/python-dotenv-1.0.1.tar.gz", hash = "sha256:e324ee90a023d808f1959c46bcbc04446a10ced277783dc6ee09987c37ec10ca", size = 39115 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/6a/3e/b68c118422ec867fa7ab88444e1274aa40681c606d59ac27de5a5588f082/python_dotenv-1.0.1-py3-none-any.whl", hash = "sha256:f7b63ef50f1b690dddf550d03497b66d609393b40b564ed0d674909a68ebf16a", size = 19863 },
]

[[package]]
name = "pyupgrade"
version = "3.19.1"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "tokenize-rt" },
]
sdist = { url = "https://files.pythonhosted.org/packages/35/3a/efa8e75cf84d53f1b3f0113387ab120ef460396a4068e41b6cf18a3d216d/pyupgrade-3.19.1.tar.gz", hash = "sha256:d10e8c5f54b8327211828769e98d95d95e4715de632a3414f1eef3f51357b9e2", size = 45116 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/dd/43/c6c1ff945c7900613f6e6ef2a8688639a247d62eb0ffa9935c599f69c08e/pyupgrade-3.19.1-py2.py3-none-any.whl", hash = "sha256:8c5b0bfacae5ff30fa136a53eb7f22c34ba007450d4099e9da8089dabb9e67c9", size = 62412 },
]

[[package]]
name = "pywin32-ctypes"
version = "0.2.3"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/85/9f/01a1a99704853cb63f253eea009390c88e7131c67e66a0a02099a8c917cb/pywin32-ctypes-0.2.3.tar.gz", hash = "sha256:d162dc04946d704503b2edc4d55f3dba5c1d539ead017afa00142c38b9885755", size = 29471 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/de/3d/8161f7711c017e01ac9f008dfddd9410dff3674334c233bde66e7ba65bbf/pywin32_ctypes-0.2.3-py3-none-any.whl", hash = "sha256:8a1513379d709975552d202d942d9837758905c8d01eb82b8bcc30918929e7b8", size = 30756 },
]

[[package]]
name = "pyyaml"
version = "6.0.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/54/ed/79a089b6be93607fa5cdaedf301d7dfb23af5f25c398d5ead2525b063e17/pyyaml-6.0.2.tar.gz", hash = "sha256:d584d9ec91ad65861cc08d42e834324ef890a082e591037abe114850ff7bbc3e", size = 130631 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/9b/95/a3fac87cb7158e231b5a6012e438c647e1a87f09f8e0d123acec8ab8bf71/PyYAML-6.0.2-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:0a9a2848a5b7feac301353437eb7d5957887edbf81d56e903999a75a3d743086", size = 184199 },
    { url = "https://files.pythonhosted.org/packages/c7/7a/68bd47624dab8fd4afbfd3c48e3b79efe09098ae941de5b58abcbadff5cb/PyYAML-6.0.2-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:29717114e51c84ddfba879543fb232a6ed60086602313ca38cce623c1d62cfbf", size = 171758 },
    { url = "https://files.pythonhosted.org/packages/49/ee/14c54df452143b9ee9f0f29074d7ca5516a36edb0b4cc40c3f280131656f/PyYAML-6.0.2-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:8824b5a04a04a047e72eea5cec3bc266db09e35de6bdfe34c9436ac5ee27d237", size = 718463 },
    { url = "https://files.pythonhosted.org/packages/4d/61/de363a97476e766574650d742205be468921a7b532aa2499fcd886b62530/PyYAML-6.0.2-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:7c36280e6fb8385e520936c3cb3b8042851904eba0e58d277dca80a5cfed590b", size = 719280 },
    { url = "https://files.pythonhosted.org/packages/6b/4e/1523cb902fd98355e2e9ea5e5eb237cbc5f3ad5f3075fa65087aa0ecb669/PyYAML-6.0.2-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:ec031d5d2feb36d1d1a24380e4db6d43695f3748343d99434e6f5f9156aaa2ed", size = 751239 },
    { url = "https://files.pythonhosted.org/packages/b7/33/5504b3a9a4464893c32f118a9cc045190a91637b119a9c881da1cf6b7a72/PyYAML-6.0.2-cp310-cp310-musllinux_1_1_aarch64.whl", hash = "sha256:936d68689298c36b53b29f23c6dbb74de12b4ac12ca6cfe0e047bedceea56180", size = 695802 },
    { url = "https://files.pythonhosted.org/packages/5c/20/8347dcabd41ef3a3cdc4f7b7a2aff3d06598c8779faa189cdbf878b626a4/PyYAML-6.0.2-cp310-cp310-musllinux_1_1_x86_64.whl", hash = "sha256:23502f431948090f597378482b4812b0caae32c22213aecf3b55325e049a6c68", size = 720527 },
    { url = "https://files.pythonhosted.org/packages/be/aa/5afe99233fb360d0ff37377145a949ae258aaab831bde4792b32650a4378/PyYAML-6.0.2-cp310-cp310-win32.whl", hash = "sha256:2e99c6826ffa974fe6e27cdb5ed0021786b03fc98e5ee3c5bfe1fd5015f42b99", size = 144052 },
    { url = "https://files.pythonhosted.org/packages/b5/84/0fa4b06f6d6c958d207620fc60005e241ecedceee58931bb20138e1e5776/PyYAML-6.0.2-cp310-cp310-win_amd64.whl", hash = "sha256:a4d3091415f010369ae4ed1fc6b79def9416358877534caf6a0fdd2146c87a3e", size = 161774 },
    { url = "https://files.pythonhosted.org/packages/f8/aa/7af4e81f7acba21a4c6be026da38fd2b872ca46226673c89a758ebdc4fd2/PyYAML-6.0.2-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:cc1c1159b3d456576af7a3e4d1ba7e6924cb39de8f67111c735f6fc832082774", size = 184612 },
    { url = "https://files.pythonhosted.org/packages/8b/62/b9faa998fd185f65c1371643678e4d58254add437edb764a08c5a98fb986/PyYAML-6.0.2-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:1e2120ef853f59c7419231f3bf4e7021f1b936f6ebd222406c3b60212205d2ee", size = 172040 },
    { url = "https://files.pythonhosted.org/packages/ad/0c/c804f5f922a9a6563bab712d8dcc70251e8af811fce4524d57c2c0fd49a4/PyYAML-6.0.2-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:5d225db5a45f21e78dd9358e58a98702a0302f2659a3c6cd320564b75b86f47c", size = 736829 },
    { url = "https://files.pythonhosted.org/packages/51/16/6af8d6a6b210c8e54f1406a6b9481febf9c64a3109c541567e35a49aa2e7/PyYAML-6.0.2-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:5ac9328ec4831237bec75defaf839f7d4564be1e6b25ac710bd1a96321cc8317", size = 764167 },
    { url = "https://files.pythonhosted.org/packages/75/e4/2c27590dfc9992f73aabbeb9241ae20220bd9452df27483b6e56d3975cc5/PyYAML-6.0.2-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3ad2a3decf9aaba3d29c8f537ac4b243e36bef957511b4766cb0057d32b0be85", size = 762952 },
    { url = "https://files.pythonhosted.org/packages/9b/97/ecc1abf4a823f5ac61941a9c00fe501b02ac3ab0e373c3857f7d4b83e2b6/PyYAML-6.0.2-cp311-cp311-musllinux_1_1_aarch64.whl", hash = "sha256:ff3824dc5261f50c9b0dfb3be22b4567a6f938ccce4587b38952d85fd9e9afe4", size = 735301 },
    { url = "https://files.pythonhosted.org/packages/45/73/0f49dacd6e82c9430e46f4a027baa4ca205e8b0a9dce1397f44edc23559d/PyYAML-6.0.2-cp311-cp311-musllinux_1_1_x86_64.whl", hash = "sha256:797b4f722ffa07cc8d62053e4cff1486fa6dc094105d13fea7b1de7d8bf71c9e", size = 756638 },
    { url = "https://files.pythonhosted.org/packages/22/5f/956f0f9fc65223a58fbc14459bf34b4cc48dec52e00535c79b8db361aabd/PyYAML-6.0.2-cp311-cp311-win32.whl", hash = "sha256:11d8f3dd2b9c1207dcaf2ee0bbbfd5991f571186ec9cc78427ba5bd32afae4b5", size = 143850 },
    { url = "https://files.pythonhosted.org/packages/ed/23/8da0bbe2ab9dcdd11f4f4557ccaf95c10b9811b13ecced089d43ce59c3c8/PyYAML-6.0.2-cp311-cp311-win_amd64.whl", hash = "sha256:e10ce637b18caea04431ce14fabcf5c64a1c61ec9c56b071a4b7ca131ca52d44", size = 161980 },
    { url = "https://files.pythonhosted.org/packages/86/0c/c581167fc46d6d6d7ddcfb8c843a4de25bdd27e4466938109ca68492292c/PyYAML-6.0.2-cp312-cp312-macosx_10_9_x86_64.whl", hash = "sha256:c70c95198c015b85feafc136515252a261a84561b7b1d51e3384e0655ddf25ab", size = 183873 },
    { url = "https://files.pythonhosted.org/packages/a8/0c/38374f5bb272c051e2a69281d71cba6fdb983413e6758b84482905e29a5d/PyYAML-6.0.2-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:ce826d6ef20b1bc864f0a68340c8b3287705cae2f8b4b1d932177dcc76721725", size = 173302 },
    { url = "https://files.pythonhosted.org/packages/c3/93/9916574aa8c00aa06bbac729972eb1071d002b8e158bd0e83a3b9a20a1f7/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:1f71ea527786de97d1a0cc0eacd1defc0985dcf6b3f17bb77dcfc8c34bec4dc5", size = 739154 },
    { url = "https://files.pythonhosted.org/packages/95/0f/b8938f1cbd09739c6da569d172531567dbcc9789e0029aa070856f123984/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:9b22676e8097e9e22e36d6b7bda33190d0d400f345f23d4065d48f4ca7ae0425", size = 766223 },
    { url = "https://files.pythonhosted.org/packages/b9/2b/614b4752f2e127db5cc206abc23a8c19678e92b23c3db30fc86ab731d3bd/PyYAML-6.0.2-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:80bab7bfc629882493af4aa31a4cfa43a4c57c83813253626916b8c7ada83476", size = 767542 },
    { url = "https://files.pythonhosted.org/packages/d4/00/dd137d5bcc7efea1836d6264f049359861cf548469d18da90cd8216cf05f/PyYAML-6.0.2-cp312-cp312-musllinux_1_1_aarch64.whl", hash = "sha256:0833f8694549e586547b576dcfaba4a6b55b9e96098b36cdc7ebefe667dfed48", size = 731164 },
    { url = "https://files.pythonhosted.org/packages/c9/1f/4f998c900485e5c0ef43838363ba4a9723ac0ad73a9dc42068b12aaba4e4/PyYAML-6.0.2-cp312-cp312-musllinux_1_1_x86_64.whl", hash = "sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b", size = 756611 },
    { url = "https://files.pythonhosted.org/packages/df/d1/f5a275fdb252768b7a11ec63585bc38d0e87c9e05668a139fea92b80634c/PyYAML-6.0.2-cp312-cp312-win32.whl", hash = "sha256:ef6107725bd54b262d6dedcc2af448a266975032bc85ef0172c5f059da6325b4", size = 140591 },
    { url = "https://files.pythonhosted.org/packages/0c/e8/4f648c598b17c3d06e8753d7d13d57542b30d56e6c2dedf9c331ae56312e/PyYAML-6.0.2-cp312-cp312-win_amd64.whl", hash = "sha256:7e7401d0de89a9a855c839bc697c079a4af81cf878373abd7dc625847d25cbd8", size = 156338 },
    { url = "https://files.pythonhosted.org/packages/ef/e3/3af305b830494fa85d95f6d95ef7fa73f2ee1cc8ef5b495c7c3269fb835f/PyYAML-6.0.2-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:efdca5630322a10774e8e98e1af481aad470dd62c3170801852d752aa7a783ba", size = 181309 },
    { url = "https://files.pythonhosted.org/packages/45/9f/3b1c20a0b7a3200524eb0076cc027a970d320bd3a6592873c85c92a08731/PyYAML-6.0.2-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:50187695423ffe49e2deacb8cd10510bc361faac997de9efef88badc3bb9e2d1", size = 171679 },
    { url = "https://files.pythonhosted.org/packages/7c/9a/337322f27005c33bcb656c655fa78325b730324c78620e8328ae28b64d0c/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:0ffe8360bab4910ef1b9e87fb812d8bc0a308b0d0eef8c8f44e0254ab3b07133", size = 733428 },
    { url = "https://files.pythonhosted.org/packages/a3/69/864fbe19e6c18ea3cc196cbe5d392175b4cf3d5d0ac1403ec3f2d237ebb5/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:17e311b6c678207928d649faa7cb0d7b4c26a0ba73d41e99c4fff6b6c3276484", size = 763361 },
    { url = "https://files.pythonhosted.org/packages/04/24/b7721e4845c2f162d26f50521b825fb061bc0a5afcf9a386840f23ea19fa/PyYAML-6.0.2-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:70b189594dbe54f75ab3a1acec5f1e3faa7e8cf2f1e08d9b561cb41b845f69d5", size = 759523 },
    { url = "https://files.pythonhosted.org/packages/2b/b2/e3234f59ba06559c6ff63c4e10baea10e5e7df868092bf9ab40e5b9c56b6/PyYAML-6.0.2-cp313-cp313-musllinux_1_1_aarch64.whl", hash = "sha256:41e4e3953a79407c794916fa277a82531dd93aad34e29c2a514c2c0c5fe971cc", size = 726660 },
    { url = "https://files.pythonhosted.org/packages/fe/0f/25911a9f080464c59fab9027482f822b86bf0608957a5fcc6eaac85aa515/PyYAML-6.0.2-cp313-cp313-musllinux_1_1_x86_64.whl", hash = "sha256:68ccc6023a3400877818152ad9a1033e3db8625d899c72eacb5a668902e4d652", size = 751597 },
    { url = "https://files.pythonhosted.org/packages/14/0d/e2c3b43bbce3cf6bd97c840b46088a3031085179e596d4929729d8d68270/PyYAML-6.0.2-cp313-cp313-win32.whl", hash = "sha256:bc2fa7c6b47d6bc618dd7fb02ef6fdedb1090ec036abab80d4681424b84c1183", size = 140527 },
    { url = "https://files.pythonhosted.org/packages/fa/de/02b54f42487e3d3c6efb3f89428677074ca7bf43aae402517bc7cca949f3/PyYAML-6.0.2-cp313-cp313-win_amd64.whl", hash = "sha256:8388ee1976c416731879ac16da0aff3f63b286ffdd57cdeb95f3f2e085687563", size = 156446 },
]

[[package]]
name = "readme-renderer"
version = "44.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "docutils" },
    { name = "nh3" },
    { name = "pygments" },
]
sdist = { url = "https://files.pythonhosted.org/packages/5a/a9/104ec9234c8448c4379768221ea6df01260cd6c2ce13182d4eac531c8342/readme_renderer-44.0.tar.gz", hash = "sha256:8712034eabbfa6805cacf1402b4eeb2a73028f72d1166d6f5cb7f9c047c5d1e1", size = 32056 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e1/67/921ec3024056483db83953ae8e48079ad62b92db7880013ca77632921dd0/readme_renderer-44.0-py3-none-any.whl", hash = "sha256:2fbca89b81a08526aadf1357a8c2ae889ec05fb03f5da67f9769c9a592166151", size = 13310 },
]

[[package]]
name = "requests"
version = "2.32.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "certifi" },
    { name = "charset-normalizer" },
    { name = "idna" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/63/70/2bf7780ad2d390a8d301ad0b550f1581eadbd9a20f896afe06353c2a2913/requests-2.32.3.tar.gz", hash = "sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760", size = 131218 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f9/9b/335f9764261e915ed497fcdeb11df5dfd6f7bf257d4a6a2a686d80da4d54/requests-2.32.3-py3-none-any.whl", hash = "sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6", size = 64928 },
]

[[package]]
name = "requests-toolbelt"
version = "1.0.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "requests" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f3/61/d7545dafb7ac2230c70d38d31cbfe4cc64f7144dc41f6e4e4b78ecd9f5bb/requests-toolbelt-1.0.0.tar.gz", hash = "sha256:7681a0a3d047012b5bdc0ee37d7f8f07ebe76ab08caeccfc3921ce23c88d5bc6", size = 206888 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/3f/51/d4db610ef29373b879047326cbf6fa98b6c1969d6f6dc423279de2b1be2c/requests_toolbelt-1.0.0-py2.py3-none-any.whl", hash = "sha256:cccfdd665f0a24fcf4726e690f65639d272bb0637b9b92dfd91a5568ccf6bd06", size = 54481 },
]

[[package]]
name = "rfc3986"
version = "2.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/85/40/1520d68bfa07ab5a6f065a186815fb6610c86fe957bc065754e47f7b0840/rfc3986-2.0.0.tar.gz", hash = "sha256:97aacf9dbd4bfd829baad6e6309fa6573aaf1be3f6fa735c8ab05e46cecb261c", size = 49026 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/ff/9a/9afaade874b2fa6c752c36f1548f718b5b83af81ed9b76628329dab81c1b/rfc3986-2.0.0-py2.py3-none-any.whl", hash = "sha256:50b1502b60e289cb37883f3dfd34532b8873c7de9f49bb546641ce9cbd256ebd", size = 31326 },
]

[[package]]
name = "rich"
version = "13.9.4"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "markdown-it-py" },
    { name = "pygments" },
    { name = "typing-extensions", marker = "python_full_version < '3.11'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/ab/3a/0316b28d0761c6734d6bc14e770d85506c986c85ffb239e688eeaab2c2bc/rich-13.9.4.tar.gz", hash = "sha256:439594978a49a09530cff7ebc4b5c7103ef57baf48d5ea3184f21d9a2befa098", size = 223149 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/19/71/39c7c0d87f8d4e6c020a393182060eaefeeae6c01dab6a84ec346f2567df/rich-13.9.4-py3-none-any.whl", hash = "sha256:6049d5e6ec054bf2779ab3358186963bac2ea89175919d699e378b99738c2a90", size = 242424 },
]

[[package]]
name = "ruff"
version = "0.9.7"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/39/8b/a86c300359861b186f18359adf4437ac8e4c52e42daa9eedc731ef9d5b53/ruff-0.9.7.tar.gz", hash = "sha256:643757633417907510157b206e490c3aa11cab0c087c912f60e07fbafa87a4c6", size = 3669813 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b1/f3/3a1d22973291226df4b4e2ff70196b926b6f910c488479adb0eeb42a0d7f/ruff-0.9.7-py3-none-linux_armv6l.whl", hash = "sha256:99d50def47305fe6f233eb8dabfd60047578ca87c9dcb235c9723ab1175180f4", size = 11774588 },
    { url = "https://files.pythonhosted.org/packages/8e/c9/b881f4157b9b884f2994fd08ee92ae3663fb24e34b0372ac3af999aa7fc6/ruff-0.9.7-py3-none-macosx_10_12_x86_64.whl", hash = "sha256:d59105ae9c44152c3d40a9c40d6331a7acd1cdf5ef404fbe31178a77b174ea66", size = 11746848 },
    { url = "https://files.pythonhosted.org/packages/14/89/2f546c133f73886ed50a3d449e6bf4af27d92d2f960a43a93d89353f0945/ruff-0.9.7-py3-none-macosx_11_0_arm64.whl", hash = "sha256:f313b5800483770bd540cddac7c90fc46f895f427b7820f18fe1822697f1fec9", size = 11177525 },
    { url = "https://files.pythonhosted.org/packages/d7/93/6b98f2c12bf28ab9def59c50c9c49508519c5b5cfecca6de871cf01237f6/ruff-0.9.7-py3-none-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:042ae32b41343888f59c0a4148f103208bf6b21c90118d51dc93a68366f4e903", size = 11996580 },
    { url = "https://files.pythonhosted.org/packages/8e/3f/b3fcaf4f6d875e679ac2b71a72f6691a8128ea3cb7be07cbb249f477c061/ruff-0.9.7-py3-none-manylinux_2_17_armv7l.manylinux2014_armv7l.whl", hash = "sha256:87862589373b33cc484b10831004e5e5ec47dc10d2b41ba770e837d4f429d721", size = 11525674 },
    { url = "https://files.pythonhosted.org/packages/f0/48/33fbf18defb74d624535d5d22adcb09a64c9bbabfa755bc666189a6b2210/ruff-0.9.7-py3-none-manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:a17e1e01bee0926d351a1ee9bc15c445beae888f90069a6192a07a84af544b6b", size = 12739151 },
    { url = "https://files.pythonhosted.org/packages/63/b5/7e161080c5e19fa69495cbab7c00975ef8a90f3679caa6164921d7f52f4a/ruff-0.9.7-py3-none-manylinux_2_17_ppc64.manylinux2014_ppc64.whl", hash = "sha256:7c1f880ac5b2cbebd58b8ebde57069a374865c73f3bf41f05fe7a179c1c8ef22", size = 13416128 },
    { url = "https://files.pythonhosted.org/packages/4e/c8/b5e7d61fb1c1b26f271ac301ff6d9de5e4d9a9a63f67d732fa8f200f0c88/ruff-0.9.7-py3-none-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e63fc20143c291cab2841dbb8260e96bafbe1ba13fd3d60d28be2c71e312da49", size = 12870858 },
    { url = "https://files.pythonhosted.org/packages/da/cb/2a1a8e4e291a54d28259f8fc6a674cd5b8833e93852c7ef5de436d6ed729/ruff-0.9.7-py3-none-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:91ff963baed3e9a6a4eba2a02f4ca8eaa6eba1cc0521aec0987da8d62f53cbef", size = 14786046 },
    { url = "https://files.pythonhosted.org/packages/ca/6c/c8f8a313be1943f333f376d79724260da5701426c0905762e3ddb389e3f4/ruff-0.9.7-py3-none-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:88362e3227c82f63eaebf0b2eff5b88990280fb1ecf7105523883ba8c3aaf6fb", size = 12550834 },
    { url = "https://files.pythonhosted.org/packages/9d/ad/f70cf5e8e7c52a25e166bdc84c082163c9c6f82a073f654c321b4dff9660/ruff-0.9.7-py3-none-musllinux_1_2_aarch64.whl", hash = "sha256:0372c5a90349f00212270421fe91874b866fd3626eb3b397ede06cd385f6f7e0", size = 11961307 },
    { url = "https://files.pythonhosted.org/packages/52/d5/4f303ea94a5f4f454daf4d02671b1fbfe2a318b5fcd009f957466f936c50/ruff-0.9.7-py3-none-musllinux_1_2_armv7l.whl", hash = "sha256:d76b8ab60e99e6424cd9d3d923274a1324aefce04f8ea537136b8398bbae0a62", size = 11612039 },
    { url = "https://files.pythonhosted.org/packages/eb/c8/bd12a23a75603c704ce86723be0648ba3d4ecc2af07eecd2e9fa112f7e19/ruff-0.9.7-py3-none-musllinux_1_2_i686.whl", hash = "sha256:0c439bdfc8983e1336577f00e09a4e7a78944fe01e4ea7fe616d00c3ec69a3d0", size = 12168177 },
    { url = "https://files.pythonhosted.org/packages/cc/57/d648d4f73400fef047d62d464d1a14591f2e6b3d4a15e93e23a53c20705d/ruff-0.9.7-py3-none-musllinux_1_2_x86_64.whl", hash = "sha256:115d1f15e8fdd445a7b4dc9a30abae22de3f6bcabeb503964904471691ef7606", size = 12610122 },
    { url = "https://files.pythonhosted.org/packages/49/79/acbc1edd03ac0e2a04ae2593555dbc9990b34090a9729a0c4c0cf20fb595/ruff-0.9.7-py3-none-win32.whl", hash = "sha256:e9ece95b7de5923cbf38893f066ed2872be2f2f477ba94f826c8defdd6ec6b7d", size = 9988751 },
    { url = "https://files.pythonhosted.org/packages/6d/95/67153a838c6b6ba7a2401241fd8a00cd8c627a8e4a0491b8d853dedeffe0/ruff-0.9.7-py3-none-win_amd64.whl", hash = "sha256:3770fe52b9d691a15f0b87ada29c45324b2ace8f01200fb0c14845e499eb0c2c", size = 11002987 },
    { url = "https://files.pythonhosted.org/packages/63/6a/aca01554949f3a401991dc32fe22837baeaccb8a0d868256cbb26a029778/ruff-0.9.7-py3-none-win_arm64.whl", hash = "sha256:b075a700b2533feb7a01130ff656a4ec0d5f340bb540ad98759b8401c32c2037", size = 10177763 },
]

[[package]]
name = "secretstorage"
version = "3.3.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "cryptography" },
    { name = "jeepney" },
]
sdist = { url = "https://files.pythonhosted.org/packages/53/a4/f48c9d79cb507ed1373477dbceaba7401fd8a23af63b837fa61f1dcd3691/SecretStorage-3.3.3.tar.gz", hash = "sha256:2403533ef369eca6d2ba81718576c5e0f564d5cca1b58f73a8b23e7d4eeebd77", size = 19739 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/54/24/b4293291fa1dd830f353d2cb163295742fa87f179fcc8a20a306a81978b7/SecretStorage-3.3.3-py3-none-any.whl", hash = "sha256:f356e6628222568e3af06f2eba8df495efa13b3b63081dafd4f7d9a7b7bc9f99", size = 15221 },
]

[[package]]
name = "six"
version = "1.17.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/94/e7/b2c673351809dca68a0e064b6af791aa332cf192da575fd474ed7d6f16a2/six-1.17.0.tar.gz", hash = "sha256:ff70335d468e7eb6ec65b95b99d3a2836546063f63acc5171de367e834932a81", size = 34031 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/ce/149a00dd41f10bc29e5921b496af8b574d8413afcd5e30dfa0ed46c2cc5e/six-1.17.0-py2.py3-none-any.whl", hash = "sha256:4721f391ed90541fddacab5acf947aa0d3dc7d27b2e1e8eda2be8970586c3274", size = 11050 },
]

[[package]]
name = "tenacity"
version = "9.0.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/cd/94/91fccdb4b8110642462e653d5dcb27e7b674742ad68efd146367da7bdb10/tenacity-9.0.0.tar.gz", hash = "sha256:807f37ca97d62aa361264d497b0e31e92b8027044942bfa756160d908320d73b", size = 47421 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b6/cb/b86984bed139586d01532a587464b5805f12e397594f19f931c4c2fbfa61/tenacity-9.0.0-py3-none-any.whl", hash = "sha256:93de0c98785b27fcf659856aa9f54bfbd399e29969b0621bc7f762bd441b4539", size = 28169 },
]

[[package]]
name = "termcolor"
version = "2.5.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/37/72/88311445fd44c455c7d553e61f95412cf89054308a1aa2434ab835075fc5/termcolor-2.5.0.tar.gz", hash = "sha256:998d8d27da6d48442e8e1f016119076b690d962507531df4890fcd2db2ef8a6f", size = 13057 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7f/be/df630c387a0a054815d60be6a97eb4e8f17385d5d6fe660e1c02750062b4/termcolor-2.5.0-py3-none-any.whl", hash = "sha256:37b17b5fc1e604945c2642c872a3764b5d547a48009871aea3edd3afa180afb8", size = 7755 },
]

[[package]]
name = "tokenize-rt"
version = "6.1.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/6b/0a/5854d8ced8c1e00193d1353d13db82d7f813f99bd5dcb776ce3e2a4c0d19/tokenize_rt-6.1.0.tar.gz", hash = "sha256:e8ee836616c0877ab7c7b54776d2fefcc3bde714449a206762425ae114b53c86", size = 5506 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/87/ba/576aac29b10dfa49a6ce650001d1bb31f81e734660555eaf144bfe5b8995/tokenize_rt-6.1.0-py2.py3-none-any.whl", hash = "sha256:d706141cdec4aa5f358945abe36b911b8cbdc844545da99e811250c0cee9b6fc", size = 6015 },
]

[[package]]
name = "tomli"
version = "2.2.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/18/87/302344fed471e44a87289cf4967697d07e532f2421fdaf868a303cbae4ff/tomli-2.2.1.tar.gz", hash = "sha256:cd45e1dc79c835ce60f7404ec8119f2eb06d38b1deba146f07ced3bbc44505ff", size = 17175 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/43/ca/75707e6efa2b37c77dadb324ae7d9571cb424e61ea73fad7c56c2d14527f/tomli-2.2.1-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:678e4fa69e4575eb77d103de3df8a895e1591b48e740211bd1067378c69e8249", size = 131077 },
    { url = "https://files.pythonhosted.org/packages/c7/16/51ae563a8615d472fdbffc43a3f3d46588c264ac4f024f63f01283becfbb/tomli-2.2.1-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:023aa114dd824ade0100497eb2318602af309e5a55595f76b626d6d9f3b7b0a6", size = 123429 },
    { url = "https://files.pythonhosted.org/packages/f1/dd/4f6cd1e7b160041db83c694abc78e100473c15d54620083dbd5aae7b990e/tomli-2.2.1-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:ece47d672db52ac607a3d9599a9d48dcb2f2f735c6c2d1f34130085bb12b112a", size = 226067 },
    { url = "https://files.pythonhosted.org/packages/a9/6b/c54ede5dc70d648cc6361eaf429304b02f2871a345bbdd51e993d6cdf550/tomli-2.2.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:6972ca9c9cc9f0acaa56a8ca1ff51e7af152a9f87fb64623e31d5c83700080ee", size = 236030 },
    { url = "https://files.pythonhosted.org/packages/1f/47/999514fa49cfaf7a92c805a86c3c43f4215621855d151b61c602abb38091/tomli-2.2.1-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:c954d2250168d28797dd4e3ac5cf812a406cd5a92674ee4c8f123c889786aa8e", size = 240898 },
    { url = "https://files.pythonhosted.org/packages/73/41/0a01279a7ae09ee1573b423318e7934674ce06eb33f50936655071d81a24/tomli-2.2.1-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:8dd28b3e155b80f4d54beb40a441d366adcfe740969820caf156c019fb5c7ec4", size = 229894 },
    { url = "https://files.pythonhosted.org/packages/55/18/5d8bc5b0a0362311ce4d18830a5d28943667599a60d20118074ea1b01bb7/tomli-2.2.1-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:e59e304978767a54663af13c07b3d1af22ddee3bb2fb0618ca1593e4f593a106", size = 245319 },
    { url = "https://files.pythonhosted.org/packages/92/a3/7ade0576d17f3cdf5ff44d61390d4b3febb8a9fc2b480c75c47ea048c646/tomli-2.2.1-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:33580bccab0338d00994d7f16f4c4ec25b776af3ffaac1ed74e0b3fc95e885a8", size = 238273 },
    { url = "https://files.pythonhosted.org/packages/72/6f/fa64ef058ac1446a1e51110c375339b3ec6be245af9d14c87c4a6412dd32/tomli-2.2.1-cp311-cp311-win32.whl", hash = "sha256:465af0e0875402f1d226519c9904f37254b3045fc5084697cefb9bdde1ff99ff", size = 98310 },
    { url = "https://files.pythonhosted.org/packages/6a/1c/4a2dcde4a51b81be3530565e92eda625d94dafb46dbeb15069df4caffc34/tomli-2.2.1-cp311-cp311-win_amd64.whl", hash = "sha256:2d0f2fdd22b02c6d81637a3c95f8cd77f995846af7414c5c4b8d0545afa1bc4b", size = 108309 },
    { url = "https://files.pythonhosted.org/packages/52/e1/f8af4c2fcde17500422858155aeb0d7e93477a0d59a98e56cbfe75070fd0/tomli-2.2.1-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:4a8f6e44de52d5e6c657c9fe83b562f5f4256d8ebbfe4ff922c495620a7f6cea", size = 132762 },
    { url = "https://files.pythonhosted.org/packages/03/b8/152c68bb84fc00396b83e7bbddd5ec0bd3dd409db4195e2a9b3e398ad2e3/tomli-2.2.1-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:8d57ca8095a641b8237d5b079147646153d22552f1c637fd3ba7f4b0b29167a8", size = 123453 },
    { url = "https://files.pythonhosted.org/packages/c8/d6/fc9267af9166f79ac528ff7e8c55c8181ded34eb4b0e93daa767b8841573/tomli-2.2.1-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:4e340144ad7ae1533cb897d406382b4b6fede8890a03738ff1683af800d54192", size = 233486 },
    { url = "https://files.pythonhosted.org/packages/5c/51/51c3f2884d7bab89af25f678447ea7d297b53b5a3b5730a7cb2ef6069f07/tomli-2.2.1-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:db2b95f9de79181805df90bedc5a5ab4c165e6ec3fe99f970d0e302f384ad222", size = 242349 },
    { url = "https://files.pythonhosted.org/packages/ab/df/bfa89627d13a5cc22402e441e8a931ef2108403db390ff3345c05253935e/tomli-2.2.1-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:40741994320b232529c802f8bc86da4e1aa9f413db394617b9a256ae0f9a7f77", size = 252159 },
    { url = "https://files.pythonhosted.org/packages/9e/6e/fa2b916dced65763a5168c6ccb91066f7639bdc88b48adda990db10c8c0b/tomli-2.2.1-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:400e720fe168c0f8521520190686ef8ef033fb19fc493da09779e592861b78c6", size = 237243 },
    { url = "https://files.pythonhosted.org/packages/b4/04/885d3b1f650e1153cbb93a6a9782c58a972b94ea4483ae4ac5cedd5e4a09/tomli-2.2.1-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:02abe224de6ae62c19f090f68da4e27b10af2b93213d36cf44e6e1c5abd19fdd", size = 259645 },
    { url = "https://files.pythonhosted.org/packages/9c/de/6b432d66e986e501586da298e28ebeefd3edc2c780f3ad73d22566034239/tomli-2.2.1-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:b82ebccc8c8a36f2094e969560a1b836758481f3dc360ce9a3277c65f374285e", size = 244584 },
    { url = "https://files.pythonhosted.org/packages/1c/9a/47c0449b98e6e7d1be6cbac02f93dd79003234ddc4aaab6ba07a9a7482e2/tomli-2.2.1-cp312-cp312-win32.whl", hash = "sha256:889f80ef92701b9dbb224e49ec87c645ce5df3fa2cc548664eb8a25e03127a98", size = 98875 },
    { url = "https://files.pythonhosted.org/packages/ef/60/9b9638f081c6f1261e2688bd487625cd1e660d0a85bd469e91d8db969734/tomli-2.2.1-cp312-cp312-win_amd64.whl", hash = "sha256:7fc04e92e1d624a4a63c76474610238576942d6b8950a2d7f908a340494e67e4", size = 109418 },
    { url = "https://files.pythonhosted.org/packages/04/90/2ee5f2e0362cb8a0b6499dc44f4d7d48f8fff06d28ba46e6f1eaa61a1388/tomli-2.2.1-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:f4039b9cbc3048b2416cc57ab3bda989a6fcf9b36cf8937f01a6e731b64f80d7", size = 132708 },
    { url = "https://files.pythonhosted.org/packages/c0/ec/46b4108816de6b385141f082ba99e315501ccd0a2ea23db4a100dd3990ea/tomli-2.2.1-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:286f0ca2ffeeb5b9bd4fcc8d6c330534323ec51b2f52da063b11c502da16f30c", size = 123582 },
    { url = "https://files.pythonhosted.org/packages/a0/bd/b470466d0137b37b68d24556c38a0cc819e8febe392d5b199dcd7f578365/tomli-2.2.1-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:a92ef1a44547e894e2a17d24e7557a5e85a9e1d0048b0b5e7541f76c5032cb13", size = 232543 },
    { url = "https://files.pythonhosted.org/packages/d9/e5/82e80ff3b751373f7cead2815bcbe2d51c895b3c990686741a8e56ec42ab/tomli-2.2.1-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:9316dc65bed1684c9a98ee68759ceaed29d229e985297003e494aa825ebb0281", size = 241691 },
    { url = "https://files.pythonhosted.org/packages/05/7e/2a110bc2713557d6a1bfb06af23dd01e7dde52b6ee7dadc589868f9abfac/tomli-2.2.1-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e85e99945e688e32d5a35c1ff38ed0b3f41f43fad8df0bdf79f72b2ba7bc5272", size = 251170 },
    { url = "https://files.pythonhosted.org/packages/64/7b/22d713946efe00e0adbcdfd6d1aa119ae03fd0b60ebed51ebb3fa9f5a2e5/tomli-2.2.1-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:ac065718db92ca818f8d6141b5f66369833d4a80a9d74435a268c52bdfa73140", size = 236530 },
    { url = "https://files.pythonhosted.org/packages/38/31/3a76f67da4b0cf37b742ca76beaf819dca0ebef26d78fc794a576e08accf/tomli-2.2.1-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:d920f33822747519673ee656a4b6ac33e382eca9d331c87770faa3eef562aeb2", size = 258666 },
    { url = "https://files.pythonhosted.org/packages/07/10/5af1293da642aded87e8a988753945d0cf7e00a9452d3911dd3bb354c9e2/tomli-2.2.1-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:a198f10c4d1b1375d7687bc25294306e551bf1abfa4eace6650070a5c1ae2744", size = 243954 },
    { url = "https://files.pythonhosted.org/packages/5b/b9/1ed31d167be802da0fc95020d04cd27b7d7065cc6fbefdd2f9186f60d7bd/tomli-2.2.1-cp313-cp313-win32.whl", hash = "sha256:d3f5614314d758649ab2ab3a62d4f2004c825922f9e370b29416484086b264ec", size = 98724 },
    { url = "https://files.pythonhosted.org/packages/c7/32/b0963458706accd9afcfeb867c0f9175a741bf7b19cd424230714d722198/tomli-2.2.1-cp313-cp313-win_amd64.whl", hash = "sha256:a38aa0308e754b0e3c67e344754dff64999ff9b513e691d0e786265c93583c69", size = 109383 },
    { url = "https://files.pythonhosted.org/packages/6e/c2/61d3e0f47e2b74ef40a68b9e6ad5984f6241a942f7cd3bbfbdbd03861ea9/tomli-2.2.1-py3-none-any.whl", hash = "sha256:cb55c73c5f4408779d0cf3eef9f762b9c9f147a77de7b258bef0a5628adc85cc", size = 14257 },
]

[[package]]
name = "twine"
version = "6.1.0"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "id" },
    { name = "keyring", marker = "platform_machine != 'ppc64le' and platform_machine != 's390x'" },
    { name = "packaging" },
    { name = "readme-renderer" },
    { name = "requests" },
    { name = "requests-toolbelt" },
    { name = "rfc3986" },
    { name = "rich" },
    { name = "urllib3" },
]
sdist = { url = "https://files.pythonhosted.org/packages/c8/a2/6df94fc5c8e2170d21d7134a565c3a8fb84f9797c1dd65a5976aaf714418/twine-6.1.0.tar.gz", hash = "sha256:be324f6272eff91d07ee93f251edf232fc647935dd585ac003539b42404a8dbd", size = 168404 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/7c/b6/74e927715a285743351233f33ea3c684528a0d374d2e43ff9ce9585b73fe/twine-6.1.0-py3-none-any.whl", hash = "sha256:a47f973caf122930bf0fbbf17f80b83bc1602c9ce393c7845f289a3001dc5384", size = 40791 },
]

[[package]]
name = "typing-extensions"
version = "4.12.2"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/df/db/f35a00659bc03fec321ba8bce9420de607a1d37f8342eee1863174c69557/typing_extensions-4.12.2.tar.gz", hash = "sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8", size = 85321 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/26/9f/ad63fc0248c5379346306f8668cda6e2e2e9c95e01216d2b8ffd9ff037d0/typing_extensions-4.12.2-py3-none-any.whl", hash = "sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d", size = 37438 },
]

[[package]]
name = "urllib3"
version = "2.3.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/aa/63/e53da845320b757bf29ef6a9062f5c669fe997973f966045cb019c3f4b66/urllib3-2.3.0.tar.gz", hash = "sha256:f8c5449b3cf0861679ce7e0503c7b44b5ec981bec0d1d3795a07f1ba96f0204d", size = 307268 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/c8/19/4ec628951a74043532ca2cf5d97b7b14863931476d117c471e8e2b1eb39f/urllib3-2.3.0-py3-none-any.whl", hash = "sha256:1cee9ad369867bfdbbb48b7dd50374c0967a0bb7710050facf0dd6911440e3df", size = 128369 },
]

[[package]]
name = "virtualenv"
version = "20.29.2"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "distlib" },
    { name = "filelock" },
    { name = "platformdirs" },
]
sdist = { url = "https://files.pythonhosted.org/packages/f1/88/dacc875dd54a8acadb4bcbfd4e3e86df8be75527116c91d8f9784f5e9cab/virtualenv-20.29.2.tar.gz", hash = "sha256:fdaabebf6d03b5ba83ae0a02cfe96f48a716f4fae556461d180825866f75b728", size = 4320272 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/93/fa/849483d56773ae29740ae70043ad88e068f98a6401aa819b5d6bee604683/virtualenv-20.29.2-py3-none-any.whl", hash = "sha256:febddfc3d1ea571bdb1dc0f98d7b45d24def7428214d4fb73cc486c9568cce6a", size = 4301478 },
]

[[package]]
name = "vulture"
version = "2.14"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "tomli", marker = "python_full_version < '3.11'" },
]
sdist = { url = "https://files.pythonhosted.org/packages/8e/25/925f35db758a0f9199113aaf61d703de891676b082bd7cf73ea01d6000f7/vulture-2.14.tar.gz", hash = "sha256:cb8277902a1138deeab796ec5bef7076a6e0248ca3607a3f3dee0b6d9e9b8415", size = 58823 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/a0/56/0cc15b8ff2613c1d5c3dc1f3f576ede1c43868c1bc2e5ccaa2d4bcd7974d/vulture-2.14-py2.py3-none-any.whl", hash = "sha256:d9a90dba89607489548a49d557f8bac8112bd25d3cbc8aeef23e860811bd5ed9", size = 28915 },
]

[[package]]
name = "webencodings"
version = "0.5.1"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/0b/02/ae6ceac1baeda530866a85075641cec12989bd8d31af6d5ab4a3e8c92f47/webencodings-0.5.1.tar.gz", hash = "sha256:b36a1c245f2d304965eb4e0a82848379241dc04b865afcc4aab16748587e1923", size = 9721 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/f4/24/2a3e3df732393fed8b3ebf2ec078f05546de641fe1b667ee316ec1dcf3b7/webencodings-0.5.1-py2.py3-none-any.whl", hash = "sha256:a0af1213f3c2226497a97e2b3aa01a7e4bee4f403f95be16fc9acd2947514a78", size = 11774 },
]

[[package]]
name = "win32-setctime"
version = "1.2.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/b3/8f/705086c9d734d3b663af0e9bb3d4de6578d08f46b1b101c2442fd9aecaa2/win32_setctime-1.2.0.tar.gz", hash = "sha256:ae1fdf948f5640aae05c511ade119313fb6a30d7eabe25fef9764dca5873c4c0", size = 4867 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/e1/07/c6fe3ad3e685340704d314d765b7912993bcb8dc198f0e7a89382d37974b/win32_setctime-1.2.0-py3-none-any.whl", hash = "sha256:95d644c4e708aba81dc3704a116d8cbc974d70b3bdb8be1d150e36be6e9d1390", size = 4083 },
]

[[package]]
name = "yarl"
version = "1.18.3"
source = { registry = "https://pypi.org/simple" }
dependencies = [
    { name = "idna" },
    { name = "multidict" },
    { name = "propcache" },
]
sdist = { url = "https://files.pythonhosted.org/packages/b7/9d/4b94a8e6d2b51b599516a5cb88e5bc99b4d8d4583e468057eaa29d5f0918/yarl-1.18.3.tar.gz", hash = "sha256:ac1801c45cbf77b6c99242eeff4fffb5e4e73a800b5c4ad4fc0be5def634d2e1", size = 181062 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/d2/98/e005bc608765a8a5569f58e650961314873c8469c333616eb40bff19ae97/yarl-1.18.3-cp310-cp310-macosx_10_9_universal2.whl", hash = "sha256:7df647e8edd71f000a5208fe6ff8c382a1de8edfbccdbbfe649d263de07d8c34", size = 141458 },
    { url = "https://files.pythonhosted.org/packages/df/5d/f8106b263b8ae8a866b46d9be869ac01f9b3fb7f2325f3ecb3df8003f796/yarl-1.18.3-cp310-cp310-macosx_10_9_x86_64.whl", hash = "sha256:c69697d3adff5aa4f874b19c0e4ed65180ceed6318ec856ebc423aa5850d84f7", size = 94365 },
    { url = "https://files.pythonhosted.org/packages/56/3e/d8637ddb9ba69bf851f765a3ee288676f7cf64fb3be13760c18cbc9d10bd/yarl-1.18.3-cp310-cp310-macosx_11_0_arm64.whl", hash = "sha256:602d98f2c2d929f8e697ed274fbadc09902c4025c5a9963bf4e9edfc3ab6f7ed", size = 92181 },
    { url = "https://files.pythonhosted.org/packages/76/f9/d616a5c2daae281171de10fba41e1c0e2d8207166fc3547252f7d469b4e1/yarl-1.18.3-cp310-cp310-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:c654d5207c78e0bd6d749f6dae1dcbbfde3403ad3a4b11f3c5544d9906969dde", size = 315349 },
    { url = "https://files.pythonhosted.org/packages/bb/b4/3ea5e7b6f08f698b3769a06054783e434f6d59857181b5c4e145de83f59b/yarl-1.18.3-cp310-cp310-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:5094d9206c64181d0f6e76ebd8fb2f8fe274950a63890ee9e0ebfd58bf9d787b", size = 330494 },
    { url = "https://files.pythonhosted.org/packages/55/f1/e0fc810554877b1b67420568afff51b967baed5b53bcc983ab164eebf9c9/yarl-1.18.3-cp310-cp310-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:35098b24e0327fc4ebdc8ffe336cee0a87a700c24ffed13161af80124b7dc8e5", size = 326927 },
    { url = "https://files.pythonhosted.org/packages/a9/42/b1753949b327b36f210899f2dd0a0947c0c74e42a32de3f8eb5c7d93edca/yarl-1.18.3-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:3236da9272872443f81fedc389bace88408f64f89f75d1bdb2256069a8730ccc", size = 319703 },
    { url = "https://files.pythonhosted.org/packages/f0/6d/e87c62dc9635daefb064b56f5c97df55a2e9cc947a2b3afd4fd2f3b841c7/yarl-1.18.3-cp310-cp310-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:e2c08cc9b16f4f4bc522771d96734c7901e7ebef70c6c5c35dd0f10845270bcd", size = 310246 },
    { url = "https://files.pythonhosted.org/packages/e3/ef/e2e8d1785cdcbd986f7622d7f0098205f3644546da7919c24b95790ec65a/yarl-1.18.3-cp310-cp310-musllinux_1_2_aarch64.whl", hash = "sha256:80316a8bd5109320d38eef8833ccf5f89608c9107d02d2a7f985f98ed6876990", size = 319730 },
    { url = "https://files.pythonhosted.org/packages/fc/15/8723e22345bc160dfde68c4b3ae8b236e868f9963c74015f1bc8a614101c/yarl-1.18.3-cp310-cp310-musllinux_1_2_armv7l.whl", hash = "sha256:c1e1cc06da1491e6734f0ea1e6294ce00792193c463350626571c287c9a704db", size = 321681 },
    { url = "https://files.pythonhosted.org/packages/86/09/bf764e974f1516efa0ae2801494a5951e959f1610dd41edbfc07e5e0f978/yarl-1.18.3-cp310-cp310-musllinux_1_2_i686.whl", hash = "sha256:fea09ca13323376a2fdfb353a5fa2e59f90cd18d7ca4eaa1fd31f0a8b4f91e62", size = 324812 },
    { url = "https://files.pythonhosted.org/packages/f6/4c/20a0187e3b903c97d857cf0272d687c1b08b03438968ae8ffc50fe78b0d6/yarl-1.18.3-cp310-cp310-musllinux_1_2_ppc64le.whl", hash = "sha256:e3b9fd71836999aad54084906f8663dffcd2a7fb5cdafd6c37713b2e72be1760", size = 337011 },
    { url = "https://files.pythonhosted.org/packages/c9/71/6244599a6e1cc4c9f73254a627234e0dad3883ece40cc33dce6265977461/yarl-1.18.3-cp310-cp310-musllinux_1_2_s390x.whl", hash = "sha256:757e81cae69244257d125ff31663249b3013b5dc0a8520d73694aed497fb195b", size = 338132 },
    { url = "https://files.pythonhosted.org/packages/af/f5/e0c3efaf74566c4b4a41cb76d27097df424052a064216beccae8d303c90f/yarl-1.18.3-cp310-cp310-musllinux_1_2_x86_64.whl", hash = "sha256:b1771de9944d875f1b98a745bc547e684b863abf8f8287da8466cf470ef52690", size = 331849 },
    { url = "https://files.pythonhosted.org/packages/8a/b8/3d16209c2014c2f98a8f658850a57b716efb97930aebf1ca0d9325933731/yarl-1.18.3-cp310-cp310-win32.whl", hash = "sha256:8874027a53e3aea659a6d62751800cf6e63314c160fd607489ba5c2edd753cf6", size = 84309 },
    { url = "https://files.pythonhosted.org/packages/fd/b7/2e9a5b18eb0fe24c3a0e8bae994e812ed9852ab4fd067c0107fadde0d5f0/yarl-1.18.3-cp310-cp310-win_amd64.whl", hash = "sha256:93b2e109287f93db79210f86deb6b9bbb81ac32fc97236b16f7433db7fc437d8", size = 90484 },
    { url = "https://files.pythonhosted.org/packages/40/93/282b5f4898d8e8efaf0790ba6d10e2245d2c9f30e199d1a85cae9356098c/yarl-1.18.3-cp311-cp311-macosx_10_9_universal2.whl", hash = "sha256:8503ad47387b8ebd39cbbbdf0bf113e17330ffd339ba1144074da24c545f0069", size = 141555 },
    { url = "https://files.pythonhosted.org/packages/6d/9c/0a49af78df099c283ca3444560f10718fadb8a18dc8b3edf8c7bd9fd7d89/yarl-1.18.3-cp311-cp311-macosx_10_9_x86_64.whl", hash = "sha256:02ddb6756f8f4517a2d5e99d8b2f272488e18dd0bfbc802f31c16c6c20f22193", size = 94351 },
    { url = "https://files.pythonhosted.org/packages/5a/a1/205ab51e148fdcedad189ca8dd587794c6f119882437d04c33c01a75dece/yarl-1.18.3-cp311-cp311-macosx_11_0_arm64.whl", hash = "sha256:67a283dd2882ac98cc6318384f565bffc751ab564605959df4752d42483ad889", size = 92286 },
    { url = "https://files.pythonhosted.org/packages/ed/fe/88b690b30f3f59275fb674f5f93ddd4a3ae796c2b62e5bb9ece8a4914b83/yarl-1.18.3-cp311-cp311-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:d980e0325b6eddc81331d3f4551e2a333999fb176fd153e075c6d1c2530aa8a8", size = 340649 },
    { url = "https://files.pythonhosted.org/packages/07/eb/3b65499b568e01f36e847cebdc8d7ccb51fff716dbda1ae83c3cbb8ca1c9/yarl-1.18.3-cp311-cp311-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:b643562c12680b01e17239be267bc306bbc6aac1f34f6444d1bded0c5ce438ca", size = 356623 },
    { url = "https://files.pythonhosted.org/packages/33/46/f559dc184280b745fc76ec6b1954de2c55595f0ec0a7614238b9ebf69618/yarl-1.18.3-cp311-cp311-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:c017a3b6df3a1bd45b9fa49a0f54005e53fbcad16633870104b66fa1a30a29d8", size = 354007 },
    { url = "https://files.pythonhosted.org/packages/af/ba/1865d85212351ad160f19fb99808acf23aab9a0f8ff31c8c9f1b4d671fc9/yarl-1.18.3-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:75674776d96d7b851b6498f17824ba17849d790a44d282929c42dbb77d4f17ae", size = 344145 },
    { url = "https://files.pythonhosted.org/packages/94/cb/5c3e975d77755d7b3d5193e92056b19d83752ea2da7ab394e22260a7b824/yarl-1.18.3-cp311-cp311-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:ccaa3a4b521b780a7e771cc336a2dba389a0861592bbce09a476190bb0c8b4b3", size = 336133 },
    { url = "https://files.pythonhosted.org/packages/19/89/b77d3fd249ab52a5c40859815765d35c91425b6bb82e7427ab2f78f5ff55/yarl-1.18.3-cp311-cp311-musllinux_1_2_aarch64.whl", hash = "sha256:2d06d3005e668744e11ed80812e61efd77d70bb7f03e33c1598c301eea20efbb", size = 347967 },
    { url = "https://files.pythonhosted.org/packages/35/bd/f6b7630ba2cc06c319c3235634c582a6ab014d52311e7d7c22f9518189b5/yarl-1.18.3-cp311-cp311-musllinux_1_2_armv7l.whl", hash = "sha256:9d41beda9dc97ca9ab0b9888cb71f7539124bc05df02c0cff6e5acc5a19dcc6e", size = 346397 },
    { url = "https://files.pythonhosted.org/packages/18/1a/0b4e367d5a72d1f095318344848e93ea70da728118221f84f1bf6c1e39e7/yarl-1.18.3-cp311-cp311-musllinux_1_2_i686.whl", hash = "sha256:ba23302c0c61a9999784e73809427c9dbedd79f66a13d84ad1b1943802eaaf59", size = 350206 },
    { url = "https://files.pythonhosted.org/packages/b5/cf/320fff4367341fb77809a2d8d7fe75b5d323a8e1b35710aafe41fdbf327b/yarl-1.18.3-cp311-cp311-musllinux_1_2_ppc64le.whl", hash = "sha256:6748dbf9bfa5ba1afcc7556b71cda0d7ce5f24768043a02a58846e4a443d808d", size = 362089 },
    { url = "https://files.pythonhosted.org/packages/57/cf/aadba261d8b920253204085268bad5e8cdd86b50162fcb1b10c10834885a/yarl-1.18.3-cp311-cp311-musllinux_1_2_s390x.whl", hash = "sha256:0b0cad37311123211dc91eadcb322ef4d4a66008d3e1bdc404808992260e1a0e", size = 366267 },
    { url = "https://files.pythonhosted.org/packages/54/58/fb4cadd81acdee6dafe14abeb258f876e4dd410518099ae9a35c88d8097c/yarl-1.18.3-cp311-cp311-musllinux_1_2_x86_64.whl", hash = "sha256:0fb2171a4486bb075316ee754c6d8382ea6eb8b399d4ec62fde2b591f879778a", size = 359141 },
    { url = "https://files.pythonhosted.org/packages/9a/7a/4c571597589da4cd5c14ed2a0b17ac56ec9ee7ee615013f74653169e702d/yarl-1.18.3-cp311-cp311-win32.whl", hash = "sha256:61b1a825a13bef4a5f10b1885245377d3cd0bf87cba068e1d9a88c2ae36880e1", size = 84402 },
    { url = "https://files.pythonhosted.org/packages/ae/7b/8600250b3d89b625f1121d897062f629883c2f45339623b69b1747ec65fa/yarl-1.18.3-cp311-cp311-win_amd64.whl", hash = "sha256:b9d60031cf568c627d028239693fd718025719c02c9f55df0a53e587aab951b5", size = 91030 },
    { url = "https://files.pythonhosted.org/packages/33/85/bd2e2729752ff4c77338e0102914897512e92496375e079ce0150a6dc306/yarl-1.18.3-cp312-cp312-macosx_10_13_universal2.whl", hash = "sha256:1dd4bdd05407ced96fed3d7f25dbbf88d2ffb045a0db60dbc247f5b3c5c25d50", size = 142644 },
    { url = "https://files.pythonhosted.org/packages/ff/74/1178322cc0f10288d7eefa6e4a85d8d2e28187ccab13d5b844e8b5d7c88d/yarl-1.18.3-cp312-cp312-macosx_10_13_x86_64.whl", hash = "sha256:7c33dd1931a95e5d9a772d0ac5e44cac8957eaf58e3c8da8c1414de7dd27c576", size = 94962 },
    { url = "https://files.pythonhosted.org/packages/be/75/79c6acc0261e2c2ae8a1c41cf12265e91628c8c58ae91f5ff59e29c0787f/yarl-1.18.3-cp312-cp312-macosx_11_0_arm64.whl", hash = "sha256:25b411eddcfd56a2f0cd6a384e9f4f7aa3efee14b188de13048c25b5e91f1640", size = 92795 },
    { url = "https://files.pythonhosted.org/packages/6b/32/927b2d67a412c31199e83fefdce6e645247b4fb164aa1ecb35a0f9eb2058/yarl-1.18.3-cp312-cp312-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:436c4fc0a4d66b2badc6c5fc5ef4e47bb10e4fd9bf0c79524ac719a01f3607c2", size = 332368 },
    { url = "https://files.pythonhosted.org/packages/19/e5/859fca07169d6eceeaa4fde1997c91d8abde4e9a7c018e371640c2da2b71/yarl-1.18.3-cp312-cp312-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e35ef8683211db69ffe129a25d5634319a677570ab6b2eba4afa860f54eeaf75", size = 342314 },
    { url = "https://files.pythonhosted.org/packages/08/75/76b63ccd91c9e03ab213ef27ae6add2e3400e77e5cdddf8ed2dbc36e3f21/yarl-1.18.3-cp312-cp312-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:84b2deecba4a3f1a398df819151eb72d29bfeb3b69abb145a00ddc8d30094512", size = 341987 },
    { url = "https://files.pythonhosted.org/packages/1a/e1/a097d5755d3ea8479a42856f51d97eeff7a3a7160593332d98f2709b3580/yarl-1.18.3-cp312-cp312-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:00e5a1fea0fd4f5bfa7440a47eff01d9822a65b4488f7cff83155a0f31a2ecba", size = 336914 },
    { url = "https://files.pythonhosted.org/packages/0b/42/e1b4d0e396b7987feceebe565286c27bc085bf07d61a59508cdaf2d45e63/yarl-1.18.3-cp312-cp312-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:d0e883008013c0e4aef84dcfe2a0b172c4d23c2669412cf5b3371003941f72bb", size = 325765 },
    { url = "https://files.pythonhosted.org/packages/7e/18/03a5834ccc9177f97ca1bbb245b93c13e58e8225276f01eedc4cc98ab820/yarl-1.18.3-cp312-cp312-musllinux_1_2_aarch64.whl", hash = "sha256:5a3f356548e34a70b0172d8890006c37be92995f62d95a07b4a42e90fba54272", size = 344444 },
    { url = "https://files.pythonhosted.org/packages/c8/03/a713633bdde0640b0472aa197b5b86e90fbc4c5bc05b727b714cd8a40e6d/yarl-1.18.3-cp312-cp312-musllinux_1_2_armv7l.whl", hash = "sha256:ccd17349166b1bee6e529b4add61727d3f55edb7babbe4069b5764c9587a8cc6", size = 340760 },
    { url = "https://files.pythonhosted.org/packages/eb/99/f6567e3f3bbad8fd101886ea0276c68ecb86a2b58be0f64077396cd4b95e/yarl-1.18.3-cp312-cp312-musllinux_1_2_i686.whl", hash = "sha256:b958ddd075ddba5b09bb0be8a6d9906d2ce933aee81100db289badbeb966f54e", size = 346484 },
    { url = "https://files.pythonhosted.org/packages/8e/a9/84717c896b2fc6cb15bd4eecd64e34a2f0a9fd6669e69170c73a8b46795a/yarl-1.18.3-cp312-cp312-musllinux_1_2_ppc64le.whl", hash = "sha256:c7d79f7d9aabd6011004e33b22bc13056a3e3fb54794d138af57f5ee9d9032cb", size = 359864 },
    { url = "https://files.pythonhosted.org/packages/1e/2e/d0f5f1bef7ee93ed17e739ec8dbcb47794af891f7d165fa6014517b48169/yarl-1.18.3-cp312-cp312-musllinux_1_2_s390x.whl", hash = "sha256:4891ed92157e5430874dad17b15eb1fda57627710756c27422200c52d8a4e393", size = 364537 },
    { url = "https://files.pythonhosted.org/packages/97/8a/568d07c5d4964da5b02621a517532adb8ec5ba181ad1687191fffeda0ab6/yarl-1.18.3-cp312-cp312-musllinux_1_2_x86_64.whl", hash = "sha256:ce1af883b94304f493698b00d0f006d56aea98aeb49d75ec7d98cd4a777e9285", size = 357861 },
    { url = "https://files.pythonhosted.org/packages/7d/e3/924c3f64b6b3077889df9a1ece1ed8947e7b61b0a933f2ec93041990a677/yarl-1.18.3-cp312-cp312-win32.whl", hash = "sha256:f91c4803173928a25e1a55b943c81f55b8872f0018be83e3ad4938adffb77dd2", size = 84097 },
    { url = "https://files.pythonhosted.org/packages/34/45/0e055320daaabfc169b21ff6174567b2c910c45617b0d79c68d7ab349b02/yarl-1.18.3-cp312-cp312-win_amd64.whl", hash = "sha256:7e2ee16578af3b52ac2f334c3b1f92262f47e02cc6193c598502bd46f5cd1477", size = 90399 },
    { url = "https://files.pythonhosted.org/packages/30/c7/c790513d5328a8390be8f47be5d52e141f78b66c6c48f48d241ca6bd5265/yarl-1.18.3-cp313-cp313-macosx_10_13_universal2.whl", hash = "sha256:90adb47ad432332d4f0bc28f83a5963f426ce9a1a8809f5e584e704b82685dcb", size = 140789 },
    { url = "https://files.pythonhosted.org/packages/30/aa/a2f84e93554a578463e2edaaf2300faa61c8701f0898725842c704ba5444/yarl-1.18.3-cp313-cp313-macosx_10_13_x86_64.whl", hash = "sha256:913829534200eb0f789d45349e55203a091f45c37a2674678744ae52fae23efa", size = 94144 },
    { url = "https://files.pythonhosted.org/packages/c6/fc/d68d8f83714b221a85ce7866832cba36d7c04a68fa6a960b908c2c84f325/yarl-1.18.3-cp313-cp313-macosx_11_0_arm64.whl", hash = "sha256:ef9f7768395923c3039055c14334ba4d926f3baf7b776c923c93d80195624782", size = 91974 },
    { url = "https://files.pythonhosted.org/packages/56/4e/d2563d8323a7e9a414b5b25341b3942af5902a2263d36d20fb17c40411e2/yarl-1.18.3-cp313-cp313-manylinux_2_17_aarch64.manylinux2014_aarch64.whl", hash = "sha256:88a19f62ff30117e706ebc9090b8ecc79aeb77d0b1f5ec10d2d27a12bc9f66d0", size = 333587 },
    { url = "https://files.pythonhosted.org/packages/25/c9/cfec0bc0cac8d054be223e9f2c7909d3e8442a856af9dbce7e3442a8ec8d/yarl-1.18.3-cp313-cp313-manylinux_2_17_ppc64le.manylinux2014_ppc64le.whl", hash = "sha256:e17c9361d46a4d5addf777c6dd5eab0715a7684c2f11b88c67ac37edfba6c482", size = 344386 },
    { url = "https://files.pythonhosted.org/packages/ab/5d/4c532190113b25f1364d25f4c319322e86232d69175b91f27e3ebc2caf9a/yarl-1.18.3-cp313-cp313-manylinux_2_17_s390x.manylinux2014_s390x.whl", hash = "sha256:1a74a13a4c857a84a845505fd2d68e54826a2cd01935a96efb1e9d86c728e186", size = 345421 },
    { url = "https://files.pythonhosted.org/packages/23/d1/6cdd1632da013aa6ba18cee4d750d953104a5e7aac44e249d9410a972bf5/yarl-1.18.3-cp313-cp313-manylinux_2_17_x86_64.manylinux2014_x86_64.whl", hash = "sha256:41f7ce59d6ee7741af71d82020346af364949314ed3d87553763a2df1829cc58", size = 339384 },
    { url = "https://files.pythonhosted.org/packages/9a/c4/6b3c39bec352e441bd30f432cda6ba51681ab19bb8abe023f0d19777aad1/yarl-1.18.3-cp313-cp313-manylinux_2_5_i686.manylinux1_i686.manylinux_2_17_i686.manylinux2014_i686.whl", hash = "sha256:f52a265001d830bc425f82ca9eabda94a64a4d753b07d623a9f2863fde532b53", size = 326689 },
    { url = "https://files.pythonhosted.org/packages/23/30/07fb088f2eefdc0aa4fc1af4e3ca4eb1a3aadd1ce7d866d74c0f124e6a85/yarl-1.18.3-cp313-cp313-musllinux_1_2_aarch64.whl", hash = "sha256:82123d0c954dc58db301f5021a01854a85bf1f3bb7d12ae0c01afc414a882ca2", size = 345453 },
    { url = "https://files.pythonhosted.org/packages/63/09/d54befb48f9cd8eec43797f624ec37783a0266855f4930a91e3d5c7717f8/yarl-1.18.3-cp313-cp313-musllinux_1_2_armv7l.whl", hash = "sha256:2ec9bbba33b2d00999af4631a3397d1fd78290c48e2a3e52d8dd72db3a067ac8", size = 341872 },
    { url = "https://files.pythonhosted.org/packages/91/26/fd0ef9bf29dd906a84b59f0cd1281e65b0c3e08c6aa94b57f7d11f593518/yarl-1.18.3-cp313-cp313-musllinux_1_2_i686.whl", hash = "sha256:fbd6748e8ab9b41171bb95c6142faf068f5ef1511935a0aa07025438dd9a9bc1", size = 347497 },
    { url = "https://files.pythonhosted.org/packages/d9/b5/14ac7a256d0511b2ac168d50d4b7d744aea1c1aa20c79f620d1059aab8b2/yarl-1.18.3-cp313-cp313-musllinux_1_2_ppc64le.whl", hash = "sha256:877d209b6aebeb5b16c42cbb377f5f94d9e556626b1bfff66d7b0d115be88d0a", size = 359981 },
    { url = "https://files.pythonhosted.org/packages/ca/b3/d493221ad5cbd18bc07e642894030437e405e1413c4236dd5db6e46bcec9/yarl-1.18.3-cp313-cp313-musllinux_1_2_s390x.whl", hash = "sha256:b464c4ab4bfcb41e3bfd3f1c26600d038376c2de3297760dfe064d2cb7ea8e10", size = 366229 },
    { url = "https://files.pythonhosted.org/packages/04/56/6a3e2a5d9152c56c346df9b8fb8edd2c8888b1e03f96324d457e5cf06d34/yarl-1.18.3-cp313-cp313-musllinux_1_2_x86_64.whl", hash = "sha256:8d39d351e7faf01483cc7ff7c0213c412e38e5a340238826be7e0e4da450fdc8", size = 360383 },
    { url = "https://files.pythonhosted.org/packages/fd/b7/4b3c7c7913a278d445cc6284e59b2e62fa25e72758f888b7a7a39eb8423f/yarl-1.18.3-cp313-cp313-win32.whl", hash = "sha256:61ee62ead9b68b9123ec24bc866cbef297dd266175d53296e2db5e7f797f902d", size = 310152 },
    { url = "https://files.pythonhosted.org/packages/f5/d5/688db678e987c3e0fb17867970700b92603cadf36c56e5fb08f23e822a0c/yarl-1.18.3-cp313-cp313-win_amd64.whl", hash = "sha256:578e281c393af575879990861823ef19d66e2b1d0098414855dd367e234f5b3c", size = 315723 },
    { url = "https://files.pythonhosted.org/packages/f5/4b/a06e0ec3d155924f77835ed2d167ebd3b211a7b0853da1cf8d8414d784ef/yarl-1.18.3-py3-none-any.whl", hash = "sha256:b57f4f58099328dfb26c6a771d09fb20dbbae81d20cfb66141251ea063bd101b", size = 45109 },
]

[[package]]
name = "zipp"
version = "3.21.0"
source = { registry = "https://pypi.org/simple" }
sdist = { url = "https://files.pythonhosted.org/packages/3f/50/bad581df71744867e9468ebd0bcd6505de3b275e06f202c2cb016e3ff56f/zipp-3.21.0.tar.gz", hash = "sha256:2c9958f6430a2040341a52eb608ed6dd93ef4392e02ffe219417c1b28b5dd1f4", size = 24545 }
wheels = [
    { url = "https://files.pythonhosted.org/packages/b7/1a/7e4798e9339adc931158c9d69ecc34f5e6791489d469f5e50ec15e35f458/zipp-3.21.0-py3-none-any.whl", hash = "sha256:ac1bbe05fd2991f160ebce24ffbac5f6d11d83dc90891255885223d42b3cd931", size = 9630 },
]



================================================================
End of Codebase
================================================================
