2025-02-24 18:44:38 - 
=== Current Status ===
2025-02-24 18:44:38 - Error: LOG.md is missing
2025-02-24 18:44:38 - Error: .cursor/rules/0project.mdc is missing
2025-02-24 18:44:38 - [ 800]  .
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [8.6K]  filetree.mdc
│       └── [4.0K]  nyord-vpn.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 532]  .pre-commit-config.yaml
├── [ 128]  .specstory
│   └── [1.9K]  history
│       ├── [2.0K]  .what-is-this.md
│       ├── [452K]  2025-02-22_19-00-comparison-of-njord-and-nyord-vpn-implementations.md
│       ├── [ 913]  2025-02-22_19-00-fixing-logging-format-error-in-python.md
│       ├── [167K]  2025-02-22_20-24-managing-todos-and-development-tasks.md
│       ├── [8.3K]  2025-02-22_21-08-final-decision-and-todo-update.md
│       ├── [203K]  2025-02-22_21-21-git-management-and-todo-updates.md
│       ├── [ 39K]  2025-02-22_21-59-git-management-and-todo-updates.md
│       ├── [363K]  2025-02-22_22-27-git-management-and-todo-updates.md
│       ├── [ 52K]  2025-02-22_23-26-nordvpn-client-implementation-discussion.md
│       ├── [137K]  2025-02-22_23-35-task-management-and-project-update.md
│       ├── [ 58K]  2025-02-22_23-55-updating-todo-md-and-project-management.md
│       ├── [ 61K]  2025-02-23_00-02-task-management-and-collaboration-strategy.md
│       ├── [165K]  2025-02-23_00-09-updating-todo-md-and-task-prioritization.md
│       ├── [217K]  2025-02-23_01-01-codebase-analysis-and-optimization-discussion.md
│       ├── [101K]  2025-02-23_01-43-importerror-in-nyord-vpn-module.md
│       ├── [ 53K]  2025-02-23_01-55-understanding-vpn-cli-commands-and-issues.md
│       ├── [216K]  2025-02-23_02-15-python-virtual-environment-setup-and-testing.md
│       ├── [ 26K]  2025-02-23_02-34-vpn-connection-troubleshooting-with-python.md
│       ├── [189K]  2025-02-23_04-09-executing-python-vpn-connection-command.md
│       ├── [156K]  2025-02-23_04-56-vpn-connection-troubleshooting.md
│       ├── [ 44K]  2025-02-23_05-42-vpn-connection-status-troubleshooting.md
│       ├── [2.9K]  2025-02-23_05-54-comparing-vpn-management-tools-openpyn-vs-nyord.md
│       ├── [ 16K]  2025-02-23_06-04-untitled.md
│       ├── [ 16K]  2025-02-23_06-09-improving-nyord-vpn-server-selection-and-setup.md
│       ├── [ 76K]  2025-02-23_06-46-implementing-todo-items-in-project.md
│       ├── [156K]  2025-02-23_06-52-code-optimization-and-refactoring-discussion.md
│       ├── [227K]  2025-02-23_07-19-vpn-connection-troubleshooting-log.md
│       ├── [673K]  2025-02-23_07-30-vpn-connection-issues-and-server-selection-errors.md
│       ├── [432K]  2025-02-23_07-55-vpn-client-initialization-and-connection-logs.md
│       ├── [359K]  2025-02-23_08-03-nordvpn-client-initialization-logs.md
│       ├── [410K]  2025-02-23_08-18-vpn-client-frustrations-and-logs.md
│       ├── [6.0K]  2025-02-23_23-48-hierarchical-representation-of-codebase-structure.md
│       ├── [7.9K]  2025-02-23_23-48-nordvpn-client-codebase-organization.md
│       ├── [ 93K]  2025-02-24_00-09-code-analysis-and-docstring-enhancement.md
│       ├── [2.8K]  2025-02-24_01-16-vpn-configuration-file-retrieval-and-security.md
│       ├── [ 70K]  2025-02-24_01-29-improving-nyord-vpn-configuration-method.md
│       ├── [ 42K]  2025-02-24_01-47-openvpn-configuration-and-debugging.md
│       ├── [ 95K]  2025-02-24_02-10-vpn-connection-error-troubleshooting.md
│       ├── [ 58K]  2025-02-24_02-47-vpn-connection-troubleshooting-openvpn-auth-failure.md
│       ├── [ 12K]  2025-02-24_03-15-questioning-openvpn-command-location-in-code.md
│       ├── [ 20K]  2025-02-24_03-31-untitled.md
│       ├── [184K]  2025-02-24_03-36-zip-extraction-to-cache-directory.md
│       ├── [224K]  2025-02-24_04-13-vpn-connection-management-and-ip-tracking-issues.md
│       ├── [1.8M]  2025-02-24_04-43-vpn-connection-debugging-and-ip-verification.md
│       ├── [168K]  2025-02-24_05-02-optimizing-vpn-config-extraction-process.md
│       ├── [579K]  2025-02-24_05-33-vpn-connection-troubleshooting-and-debugging.md
│       ├── [287K]  2025-02-24_06-17-vpn-connection-management-with-nyord-vpn.md
│       ├── [210K]  2025-02-24_06-58-vpn-connection-troubleshooting.md
│       ├── [105K]  2025-02-24_07-15-vpn-connection-troubleshooting-and-improvements.md
│       ├── [6.2K]  2025-02-24_07-20-fixing-import-error-in-vpn-module.md
│       ├── [1006K]  2025-02-24_07-36-fixing-importerror-in-nyord-vpn-code.md
│       ├── [618K]  2025-02-24_07-57-vpn-server-connection-debugging.md
│       ├── [403K]  2025-02-24_08-01-vpn-server-selection-errors-and-debugging.md
│       ├── [245K]  2025-02-24_08-10-vpn-server-availability-issues.md
│       ├── [244K]  2025-02-24_17-19-vpn-country-resolution-issue.md
│       ├── [164K]  2025-02-24_17-43-vpn-connection-issue-no-servers-in-germany.md
│       ├── [ 20K]  2025-02-24_18-03-refining-api-documentation-and-structure.md
│       └── [ 25K]  2025-02-24_18-41-untitled.md
├── [ 160]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [5.5K]  README.md
├── [ 11K]  TODO.md
├── [ 12K]  cleanup.py
├── [  96]  dist
│   └── [   1]  .gitkeep
├── [ 426]  package.toml
├── [6.9K]  pyproject.toml
├── [ 160]  src
│   ├── [   0]  __init__.py
│   └── [ 448]  nyord_vpn
│       ├── [2.3K]  __init__.py
│       ├── [2.5K]  __main__.py
│       ├── [ 448]  api
│       │   ├── [7.7K]  api.py
│       │   ├── [ 27K]  v1_countries.json
│       │   ├── [4.9K]  v1_countries.py
│       │   ├── [5.2K]  v1_groups.json
│       │   ├── [3.9K]  v1_groups.py
│       │   ├── [ 67K]  v1_recommendations.json
│       │   ├── [6.6K]  v1_recommendations.py
│       │   ├── [4.2K]  v1_technologies.json
│       │   ├── [3.5K]  v1_technologies.py
│       │   ├── [ 97K]  v2_servers.json
│       │   └── [9.3K]  v2_servers.py
│       ├── [ 256]  core
│       │   ├── [ 178]  __init__.py
│       │   ├── [9.1K]  api.py
│       │   ├── [6.4K]  base.py
│       │   └── [ 15K]  client.py
│       ├── [ 192]  data
│       │   ├── [  96]  .specstory
│       │   │   └── [  96]  history
│       │   │       └── [2.0K]  .what-is-this.md
│       │   ├── [ 93K]  countries.json
│       │   └── [ 963]  country_ids.json
│       ├── [7.2K]  exceptions.py
│       ├── [ 288]  network
│       │   ├── [ 204]  __init__.py
│       │   ├── [1.0K]  country.py
│       │   ├── [ 36K]  server.py
│       │   ├── [ 47K]  vpn.py
│       │   └── [4.7K]  vpn_commands.py
│       ├── [ 192]  scripts
│       │   ├── [  37]  __init__.py
│       │   └── [3.0K]  update_countries.py
│       ├── [ 224]  storage
│       │   ├── [   0]  __init__.py
│       │   ├── [8.8K]  models.py
│       │   └── [4.0K]  state.py
│       └── [ 288]  utils
│           ├── [ 194]  __init__.py
│           ├── [3.8K]  connection.py
│           ├── [  64]  data
│           ├── [ 12K]  templates.py
│           └── [9.4K]  utils.py
├── [ 352]  tests
│   ├── [  40]  __init__.py
│   ├── [2.6K]  conftest.py
│   ├── [ 288]  integration
│   │   ├── [  39]  __init__.py
│   │   ├── [ 12K]  test_config_loading.py
│   │   ├── [2.9K]  test_connection.py
│   │   ├── [9.3K]  test_errors.py
│   │   └── [1.4K]  test_validation_integration.py
│   ├── [2.0K]  test_client.py
│   ├── [3.5K]  test_legacy_api.py
│   ├── [ 159]  test_package.py
│   └── [6.3K]  test_server_manager.py
└── [264K]  uv.lock

22 directories, 120 files

2025-02-24 18:44:38 - 
Project structure:
2025-02-24 18:44:38 - [ 800]  .
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [8.6K]  filetree.mdc
│       └── [4.0K]  nyord-vpn.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 532]  .pre-commit-config.yaml
├── [ 128]  .specstory
│   └── [1.9K]  history
│       ├── [2.0K]  .what-is-this.md
│       ├── [452K]  2025-02-22_19-00-comparison-of-njord-and-nyord-vpn-implementations.md
│       ├── [ 913]  2025-02-22_19-00-fixing-logging-format-error-in-python.md
│       ├── [167K]  2025-02-22_20-24-managing-todos-and-development-tasks.md
│       ├── [8.3K]  2025-02-22_21-08-final-decision-and-todo-update.md
│       ├── [203K]  2025-02-22_21-21-git-management-and-todo-updates.md
│       ├── [ 39K]  2025-02-22_21-59-git-management-and-todo-updates.md
│       ├── [363K]  2025-02-22_22-27-git-management-and-todo-updates.md
│       ├── [ 52K]  2025-02-22_23-26-nordvpn-client-implementation-discussion.md
│       ├── [137K]  2025-02-22_23-35-task-management-and-project-update.md
│       ├── [ 58K]  2025-02-22_23-55-updating-todo-md-and-project-management.md
│       ├── [ 61K]  2025-02-23_00-02-task-management-and-collaboration-strategy.md
│       ├── [165K]  2025-02-23_00-09-updating-todo-md-and-task-prioritization.md
│       ├── [217K]  2025-02-23_01-01-codebase-analysis-and-optimization-discussion.md
│       ├── [101K]  2025-02-23_01-43-importerror-in-nyord-vpn-module.md
│       ├── [ 53K]  2025-02-23_01-55-understanding-vpn-cli-commands-and-issues.md
│       ├── [216K]  2025-02-23_02-15-python-virtual-environment-setup-and-testing.md
│       ├── [ 26K]  2025-02-23_02-34-vpn-connection-troubleshooting-with-python.md
│       ├── [189K]  2025-02-23_04-09-executing-python-vpn-connection-command.md
│       ├── [156K]  2025-02-23_04-56-vpn-connection-troubleshooting.md
│       ├── [ 44K]  2025-02-23_05-42-vpn-connection-status-troubleshooting.md
│       ├── [2.9K]  2025-02-23_05-54-comparing-vpn-management-tools-openpyn-vs-nyord.md
│       ├── [ 16K]  2025-02-23_06-04-untitled.md
│       ├── [ 16K]  2025-02-23_06-09-improving-nyord-vpn-server-selection-and-setup.md
│       ├── [ 76K]  2025-02-23_06-46-implementing-todo-items-in-project.md
│       ├── [156K]  2025-02-23_06-52-code-optimization-and-refactoring-discussion.md
│       ├── [227K]  2025-02-23_07-19-vpn-connection-troubleshooting-log.md
│       ├── [673K]  2025-02-23_07-30-vpn-connection-issues-and-server-selection-errors.md
│       ├── [432K]  2025-02-23_07-55-vpn-client-initialization-and-connection-logs.md
│       ├── [359K]  2025-02-23_08-03-nordvpn-client-initialization-logs.md
│       ├── [410K]  2025-02-23_08-18-vpn-client-frustrations-and-logs.md
│       ├── [6.0K]  2025-02-23_23-48-hierarchical-representation-of-codebase-structure.md
│       ├── [7.9K]  2025-02-23_23-48-nordvpn-client-codebase-organization.md
│       ├── [ 93K]  2025-02-24_00-09-code-analysis-and-docstring-enhancement.md
│       ├── [2.8K]  2025-02-24_01-16-vpn-configuration-file-retrieval-and-security.md
│       ├── [ 70K]  2025-02-24_01-29-improving-nyord-vpn-configuration-method.md
│       ├── [ 42K]  2025-02-24_01-47-openvpn-configuration-and-debugging.md
│       ├── [ 95K]  2025-02-24_02-10-vpn-connection-error-troubleshooting.md
│       ├── [ 58K]  2025-02-24_02-47-vpn-connection-troubleshooting-openvpn-auth-failure.md
│       ├── [ 12K]  2025-02-24_03-15-questioning-openvpn-command-location-in-code.md
│       ├── [ 20K]  2025-02-24_03-31-untitled.md
│       ├── [184K]  2025-02-24_03-36-zip-extraction-to-cache-directory.md
│       ├── [224K]  2025-02-24_04-13-vpn-connection-management-and-ip-tracking-issues.md
│       ├── [1.8M]  2025-02-24_04-43-vpn-connection-debugging-and-ip-verification.md
│       ├── [168K]  2025-02-24_05-02-optimizing-vpn-config-extraction-process.md
│       ├── [579K]  2025-02-24_05-33-vpn-connection-troubleshooting-and-debugging.md
│       ├── [287K]  2025-02-24_06-17-vpn-connection-management-with-nyord-vpn.md
│       ├── [210K]  2025-02-24_06-58-vpn-connection-troubleshooting.md
│       ├── [105K]  2025-02-24_07-15-vpn-connection-troubleshooting-and-improvements.md
│       ├── [6.2K]  2025-02-24_07-20-fixing-import-error-in-vpn-module.md
│       ├── [1006K]  2025-02-24_07-36-fixing-importerror-in-nyord-vpn-code.md
│       ├── [618K]  2025-02-24_07-57-vpn-server-connection-debugging.md
│       ├── [403K]  2025-02-24_08-01-vpn-server-selection-errors-and-debugging.md
│       ├── [245K]  2025-02-24_08-10-vpn-server-availability-issues.md
│       ├── [244K]  2025-02-24_17-19-vpn-country-resolution-issue.md
│       ├── [164K]  2025-02-24_17-43-vpn-connection-issue-no-servers-in-germany.md
│       ├── [ 20K]  2025-02-24_18-03-refining-api-documentation-and-structure.md
│       └── [ 25K]  2025-02-24_18-41-untitled.md
├── [ 160]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [5.5K]  README.md
├── [ 11K]  TODO.md
├── [ 12K]  cleanup.py
├── [  96]  dist
│   └── [   1]  .gitkeep
├── [ 426]  package.toml
├── [6.9K]  pyproject.toml
├── [ 160]  src
│   ├── [   0]  __init__.py
│   └── [ 448]  nyord_vpn
│       ├── [2.3K]  __init__.py
│       ├── [2.5K]  __main__.py
│       ├── [ 448]  api
│       │   ├── [7.7K]  api.py
│       │   ├── [ 27K]  v1_countries.json
│       │   ├── [4.9K]  v1_countries.py
│       │   ├── [5.2K]  v1_groups.json
│       │   ├── [3.9K]  v1_groups.py
│       │   ├── [ 67K]  v1_recommendations.json
│       │   ├── [6.6K]  v1_recommendations.py
│       │   ├── [4.2K]  v1_technologies.json
│       │   ├── [3.5K]  v1_technologies.py
│       │   ├── [ 97K]  v2_servers.json
│       │   └── [9.3K]  v2_servers.py
│       ├── [ 256]  core
│       │   ├── [ 178]  __init__.py
│       │   ├── [9.1K]  api.py
│       │   ├── [6.4K]  base.py
│       │   └── [ 15K]  client.py
│       ├── [ 192]  data
│       │   ├── [  96]  .specstory
│       │   │   └── [  96]  history
│       │   │       └── [2.0K]  .what-is-this.md
│       │   ├── [ 93K]  countries.json
│       │   └── [ 963]  country_ids.json
│       ├── [7.2K]  exceptions.py
│       ├── [ 288]  network
│       │   ├── [ 204]  __init__.py
│       │   ├── [1.0K]  country.py
│       │   ├── [ 36K]  server.py
│       │   ├── [ 47K]  vpn.py
│       │   └── [4.7K]  vpn_commands.py
│       ├── [ 192]  scripts
│       │   ├── [  37]  __init__.py
│       │   └── [3.0K]  update_countries.py
│       ├── [ 224]  storage
│       │   ├── [   0]  __init__.py
│       │   ├── [8.8K]  models.py
│       │   └── [4.0K]  state.py
│       └── [ 288]  utils
│           ├── [ 194]  __init__.py
│           ├── [3.8K]  connection.py
│           ├── [  64]  data
│           ├── [ 12K]  templates.py
│           └── [9.4K]  utils.py
├── [ 352]  tests
│   ├── [  40]  __init__.py
│   ├── [2.6K]  conftest.py
│   ├── [ 288]  integration
│   │   ├── [  39]  __init__.py
│   │   ├── [ 12K]  test_config_loading.py
│   │   ├── [2.9K]  test_connection.py
│   │   ├── [9.3K]  test_errors.py
│   │   └── [1.4K]  test_validation_integration.py
│   ├── [2.0K]  test_client.py
│   ├── [3.5K]  test_legacy_api.py
│   ├── [ 159]  test_package.py
│   └── [6.3K]  test_server_manager.py
└── [264K]  uv.lock

22 directories, 120 files

2025-02-24 18:44:38 - On branch main
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .cursor/rules/filetree.mdc
	modified:   CLEANUP.txt
	deleted:    nyord_vpn.txt

no changes added to commit (use "git add" and/or "git commit -a")

2025-02-24 18:44:38 - On branch main
Your branch is ahead of 'origin/main' by 2 commits.
  (use "git push" to publish your local commits)

Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .cursor/rules/filetree.mdc
	modified:   CLEANUP.txt
	deleted:    nyord_vpn.txt

no changes added to commit (use "git add" and/or "git commit -a")

2025-02-24 18:44:38 - 
=== Environment Status ===
2025-02-24 18:44:38 - Setting up virtual environment
2025-02-24 18:44:38 - Virtual environment created and activated
2025-02-24 18:44:38 - Installing package with all extras
2025-02-24 18:44:38 - Setting up virtual environment
2025-02-24 18:44:38 - Virtual environment created and activated
2025-02-24 18:44:39 - Package installed successfully
2025-02-24 18:44:39 - >>>
>>> Running code fixes...
>>> TODO: Check the errors!
>>>
2025-02-24 18:44:39 - src/__init__.py:1:1: D104 Missing docstring in public package
src/nyord_vpn/__init__.py:80:5: A004 Import `ConnectionError` is shadowing a Python builtin
   |
78 | from nyord_vpn.core.client import Client
79 | from nyord_vpn.storage.models import (
80 |     ConnectionError,
   |     ^^^^^^^^^^^^^^^ A004
81 |     CredentialsError,
82 |     ServerError,
   |

src/nyord_vpn/__main__.py:23:24: FBT001 Boolean-typed positional argument in function definition
   |
21 |     """NordVPN CLI interface."""
22 |
23 |     def __init__(self, verbose: bool = False) -> None:
   |                        ^^^^^^^ FBT001
24 |         """Initialize CLI."""
25 |         try:
   |

src/nyord_vpn/__main__.py:23:24: FBT002 Boolean default positional argument in function definition
   |
21 |     """NordVPN CLI interface."""
22 |
23 |     def __init__(self, verbose: bool = False) -> None:
   |                        ^^^^^^^ FBT002
24 |         """Initialize CLI."""
25 |         try:
   |

src/nyord_vpn/__main__.py:79:5: D401 First line of docstring should be in imperative mood: "Main entry point."
   |
78 | def main() -> None:
79 |     """Main entry point."""
   |     ^^^^^^^^^^^^^^^^^^^^^^^ D401
80 |     try:
81 |         fire.Fire(CLI)
   |

src/nyord_vpn/api/api.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env -S uv run -s
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | # /// script
3 | # dependencies = ["pydantic", "requests", "loguru"]
  |

src/nyord_vpn/api/api.py:5:1: ERA001 Found commented-out code
  |
3 | # dependencies = ["pydantic", "requests", "loguru"]
4 | # ///
5 | # this_file: src/nyord_vpn/api/api.py
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 |
7 | """NordVPN API client.
  |
  = help: Remove commented-out code

src/nyord_vpn/api/api.py:68:15: FBT001 Boolean-typed positional argument in function definition
   |
67 |     def get_recommended_servers(
68 |         self, refresh: bool = False
   |               ^^^^^^^ FBT001
69 |     ) -> list[v1_recommendations.RecommendedServer]:
70 |         """Get recommended servers.
   |

src/nyord_vpn/api/api.py:68:15: FBT002 Boolean default positional argument in function definition
   |
67 |     def get_recommended_servers(
68 |         self, refresh: bool = False
   |               ^^^^^^^ FBT002
69 |     ) -> list[v1_recommendations.RecommendedServer]:
70 |         """Get recommended servers.
   |

src/nyord_vpn/api/api.py:84:15: FBT001 Boolean-typed positional argument in function definition
   |
83 |     def get_technologies(
84 |         self, refresh: bool = False
   |               ^^^^^^^ FBT001
85 |     ) -> list[v1_technologies.Technology]:
86 |         """Get available VPN technologies.
   |

src/nyord_vpn/api/api.py:84:15: FBT002 Boolean default positional argument in function definition
   |
83 |     def get_technologies(
84 |         self, refresh: bool = False
   |               ^^^^^^^ FBT002
85 |     ) -> list[v1_technologies.Technology]:
86 |         """Get available VPN technologies.
   |

src/nyord_vpn/api/api.py:99:26: FBT001 Boolean-typed positional argument in function definition
    |
 97 |         return self._technologies
 98 |
 99 |     def get_groups(self, refresh: bool = False) -> list[v1_groups.Group]:
    |                          ^^^^^^^ FBT001
100 |         """Get server groups.
    |

src/nyord_vpn/api/api.py:99:26: FBT002 Boolean default positional argument in function definition
    |
 97 |         return self._technologies
 98 |
 99 |     def get_groups(self, refresh: bool = False) -> list[v1_groups.Group]:
    |                          ^^^^^^^ FBT002
100 |         """Get server groups.
    |

src/nyord_vpn/api/api.py:113:29: FBT001 Boolean-typed positional argument in function definition
    |
111 |         return self._groups
112 |
113 |     def get_countries(self, refresh: bool = False) -> list[v1_countries.Country]:
    |                             ^^^^^^^ FBT001
114 |         """Get countries with server information.
    |

src/nyord_vpn/api/api.py:113:29: FBT002 Boolean default positional argument in function definition
    |
111 |         return self._groups
112 |
113 |     def get_countries(self, refresh: bool = False) -> list[v1_countries.Country]:
    |                             ^^^^^^^ FBT002
114 |         """Get countries with server information.
    |

src/nyord_vpn/api/api.py:127:27: FBT001 Boolean-typed positional argument in function definition
    |
125 |         return self._countries
126 |
127 |     def get_servers(self, refresh: bool = False) -> ServerTuple:
    |                           ^^^^^^^ FBT001
128 |         """Get detailed server information.
    |

src/nyord_vpn/api/api.py:127:27: FBT002 Boolean default positional argument in function definition
    |
125 |         return self._countries
126 |
127 |     def get_servers(self, refresh: bool = False) -> ServerTuple:
    |                           ^^^^^^^ FBT002
128 |         """Get detailed server information.
    |

src/nyord_vpn/api/api.py:176:19: TRY003 Avoid specifying long messages outside the exception class
    |
175 |           if not servers:
176 |               raise ValueError(
    |  ___________________^
177 | |                 f"No servers found matching criteria: "
178 | |                 f"country_code={country_code}, group_identifier={group_identifier}"
179 | |             )
    | |_____________^ TRY003
180 |
181 |           return min(servers, key=lambda s: s.load)
    |

src/nyord_vpn/api/v1_countries.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env -S uv run -s
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | # /// script
3 | # dependencies = ["pydantic", "requests", "loguru"]
  |

src/nyord_vpn/api/v1_countries.py:5:1: ERA001 Found commented-out code
  |
3 | # dependencies = ["pydantic", "requests", "loguru"]
4 | # ///
5 | # this_file: src/nyord_vpn/api/v1-countries.py
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 |
7 | """NordVPN API v1 countries client.
  |
  = help: Remove commented-out code

src/nyord_vpn/api/v1_countries.py:100:11: TRY003 Avoid specifying long messages outside the exception class
    |
 98 |         if country.code.upper() == country_code.upper():
 99 |             return country
100 |     raise ValueError(f"No country found with code: {country_code}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_countries.py:136:11: TRY003 Avoid specifying long messages outside the exception class
    |
134 |         if city.name.lower() == city_name.lower():
135 |             return city
136 |     raise ValueError(f"No city found with name '{city_name}' in {country.name}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_groups.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env -S uv run -s
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | # /// script
3 | # dependencies = ["pydantic", "requests", "loguru"]
  |

src/nyord_vpn/api/v1_groups.py:5:1: ERA001 Found commented-out code
  |
3 | # dependencies = ["pydantic", "requests", "loguru"]
4 | # ///
5 | # this_file: src/nyord_vpn/api/v1-groups.py
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 |
7 | """NordVPN API v1 server groups client.
  |
  = help: Remove commented-out code

src/nyord_vpn/api/v1_groups.py:114:11: TRY003 Avoid specifying long messages outside the exception class
    |
112 |         if group.identifier == identifier:
113 |             return group
114 |     raise ValueError(f"No group found with identifier: {identifier}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_recommendations.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env -S uv run -s
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | # /// script
3 | # dependencies = ["pydantic", "requests", "loguru"]
  |

src/nyord_vpn/api/v1_recommendations.py:5:1: ERA001 Found commented-out code
  |
3 | # dependencies = ["pydantic", "requests", "loguru"]
4 | # ///
5 | # this_file: src/nyord_vpn/api/v1-recommendations.py
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 |
7 | """NordVPN API v1 server recommendations client.
  |
  = help: Remove commented-out code

src/nyord_vpn/api/v1_technologies.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env -S uv run -s
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | # /// script
3 | # dependencies = ["pydantic", "requests", "loguru"]
  |

src/nyord_vpn/api/v1_technologies.py:5:1: ERA001 Found commented-out code
  |
3 | # dependencies = ["pydantic", "requests", "loguru"]
4 | # ///
5 | # this_file: src/nyord_vpn/api/v1-technologies.py
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 |
7 | """NordVPN API v1 technologies client.
  |
  = help: Remove commented-out code

src/nyord_vpn/api/v1_technologies.py:92:11: TRY003 Avoid specifying long messages outside the exception class
   |
90 |         if tech.identifier == identifier:
91 |             return tech
92 |     raise ValueError(f"No technology found with identifier: {identifier}")
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
   |

src/nyord_vpn/api/v2_servers.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env -S uv run -s
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | # /// script
3 | # dependencies = ["pydantic", "requests", "loguru"]
  |

src/nyord_vpn/api/v2_servers.py:5:1: ERA001 Found commented-out code
  |
3 | # dependencies = ["pydantic", "requests", "loguru"]
4 | # ///
5 | # this_file: src/nyord_vpn/api/v2-servers.py
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 |
7 | """NordVPN API v2 server information client.
  |
  = help: Remove commented-out code

src/nyord_vpn/api/v2_servers.py:227:43: E741 Ambiguous variable name: `l`
    |
225 |                 "groups": {g.id: g for g in parsed_data["groups"]},
226 |                 "services": {s.id: s for s in parsed_data["services"]},
227 |                 "locations": {l.id: l for l in parsed_data["locations"]},
    |                                           ^ E741
228 |             }
    |

src/nyord_vpn/core/api.py:74:54: FBT001 Boolean-typed positional argument in function definition
   |
72 |     BASE_API_V2_URL: str = f"{BASE_API_URL}/v2"
73 |
74 |     def __init__(self, username: str, password: str, verbose: bool = False) -> None:
   |                                                      ^^^^^^^ FBT001
75 |         """Initialize the NordVPN API client.
   |

src/nyord_vpn/core/api.py:74:54: FBT002 Boolean default positional argument in function definition
   |
72 |     BASE_API_V2_URL: str = f"{BASE_API_URL}/v2"
73 |
74 |     def __init__(self, username: str, password: str, verbose: bool = False) -> None:
   |                                                      ^^^^^^^ FBT002
75 |         """Initialize the NordVPN API client.
   |

src/nyord_vpn/core/api.py:99:30: FBT001 Boolean-typed positional argument in function definition
    |
 97 |         self.cache_file = CACHE_FILE
 98 |
 99 |     def list_countries(self, use_cache: bool = True) -> list[Country]:
    |                              ^^^^^^^^^ FBT001
100 |         """Fetch list of available server countries.
    |

src/nyord_vpn/core/api.py:99:30: FBT002 Boolean default positional argument in function definition
    |
 97 |         self.cache_file = CACHE_FILE
 98 |
 99 |     def list_countries(self, use_cache: bool = True) -> list[Country]:
    |                              ^^^^^^^^^ FBT002
100 |         """Fetch list of available server countries.
    |

src/nyord_vpn/core/api.py:99:30: ARG002 Unused method argument: `use_cache`
    |
 97 |         self.cache_file = CACHE_FILE
 98 |
 99 |     def list_countries(self, use_cache: bool = True) -> list[Country]:
    |                              ^^^^^^^^^ ARG002
100 |         """Fetch list of available server countries.
    |

src/nyord_vpn/core/api.py:136:13: TRY300 Consider moving this statement to an `else` block
    |
134 |             }
135 |             cache_countries(cache_data)
136 |             return countries
    |             ^^^^^^^^^^^^^^^^ TRY300
137 |
138 |         except RequestException as e:
    |

src/nyord_vpn/core/api.py:193:17: PERF401 Use `list.extend` to create a transformed list
    |
191 |             )
192 |             for city in sorted(country["cities"], key=lambda x: x["name"]):
193 |                 locations.append(f"  {city['name']} - {city['serverCount']} servers")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
194 |         return locations
    |
    = help: Replace for loop with list.extend

src/nyord_vpn/core/api.py:259:13: TRY300 Consider moving this statement to an `else` block
    |
257 |             )
258 |             response.raise_for_status()
259 |             return True
    |             ^^^^^^^^^^^ TRY300
260 |         except Exception as e:
261 |             if self.verbose:
    |

src/nyord_vpn/core/api.py:262:72: TRY401 Redundant exception object included in `logging.exception` call
    |
260 |         except Exception as e:
261 |             if self.verbose:
262 |                 self.logger.exception(f"API connectivity test failed: {e}")
    |                                                                        ^ TRY401
263 |             return False
    |

src/nyord_vpn/core/base.py:87:54: FBT001 Boolean-typed positional argument in function definition
   |
85 |     BASE_API_URL: str = "https://api.nordvpn.com/v1"
86 |
87 |     def __init__(self, username: str, password: str, verbose: bool = False) -> None:
   |                                                      ^^^^^^^ FBT001
88 |         """Initialize NordVPN client.
   |

src/nyord_vpn/core/base.py:87:54: FBT002 Boolean default positional argument in function definition
   |
85 |     BASE_API_URL: str = "https://api.nordvpn.com/v1"
86 |
87 |     def __init__(self, username: str, password: str, verbose: bool = False) -> None:
   |                                                      ^^^^^^^ FBT002
88 |         """Initialize NordVPN client.
   |

src/nyord_vpn/core/base.py:107:18: PTH123 `open()` should be replaced by `Path.open()`
    |
105 |         """Load countries from cache or fallback data."""
106 |         try:
107 |             with open(self.cache_file) as f:
    |                  ^^^^ PTH123
108 |                 cache_data: CountryCache = json.load(f)
109 |                 return cache_data["countries"]
    |

src/nyord_vpn/core/base.py:149:17: PERF401 Use `list.extend` to create a transformed list
    |
147 |             )
148 |             for city in sorted(country["cities"], key=lambda x: x["name"]):
149 |                 locations.append(f"  {city['name']} - {city['serverCount']} servers")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
150 |         return locations
    |
    = help: Replace for loop with list.extend

src/nyord_vpn/core/base.py:171:30: FBT001 Boolean-typed positional argument in function definition
    |
169 |         return sorted_cities[0] if sorted_cities else None
170 |
171 |     def list_countries(self, use_cache: bool = True) -> list[Country]:
    |                              ^^^^^^^^^ FBT001
172 |         """Fetch a list of all available server countries from the NordVPN API.
    |

src/nyord_vpn/core/base.py:171:30: FBT002 Boolean default positional argument in function definition
    |
169 |         return sorted_cities[0] if sorted_cities else None
170 |
171 |     def list_countries(self, use_cache: bool = True) -> list[Country]:
    |                              ^^^^^^^^^ FBT002
172 |         """Fetch a list of all available server countries from the NordVPN API.
    |

src/nyord_vpn/core/base.py:171:30: ARG002 Unused method argument: `use_cache`
    |
169 |         return sorted_cities[0] if sorted_cities else None
170 |
171 |     def list_countries(self, use_cache: bool = True) -> list[Country]:
    |                              ^^^^^^^^^ ARG002
172 |         """Fetch a list of all available server countries from the NordVPN API.
    |

src/nyord_vpn/core/base.py:194:13: TRY300 Consider moving this statement to an `else` block
    |
192 |             }
193 |             cache_countries(cache_data)
194 |             return countries
    |             ^^^^^^^^^^^^^^^^ TRY300
195 |
196 |         except requests.RequestException as e:
    |

src/nyord_vpn/core/client.py:45:5: A004 Import `ConnectionError` is shadowing a Python builtin
   |
44 | from nyord_vpn.storage.models import (
45 |     ConnectionError,
   |     ^^^^^^^^^^^^^^^ A004
46 |     VPNError,
47 | )
   |

src/nyord_vpn/core/client.py:187:9: FBT001 Boolean-typed positional argument in function definition
    |
185 |         username_str: str | None = None,
186 |         password_str: str | None = None,
187 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
188 |     ) -> None:
189 |         """Initialize NordVPN client.
    |

src/nyord_vpn/core/client.py:187:9: FBT002 Boolean default positional argument in function definition
    |
185 |         username_str: str | None = None,
186 |         password_str: str | None = None,
187 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
188 |     ) -> None:
189 |         """Initialize NordVPN client.
    |

src/nyord_vpn/core/client.py:216:19: TRY003 Avoid specifying long messages outside the exception class
    |
215 |           if not self.username or not self.password:
216 |               raise VPNError(
    |  ___________________^
217 | |                 "No VPN credentials available. Please set NORD_USER (or NORDVPN_LOGIN) and NORD_PASSWORD (or NORDVPN_PASSWORD) enviro…
218 | |             )
    | |_____________^ TRY003
219 |
220 |           # Initialize components in the correct order
    |

src/nyord_vpn/core/client.py:272:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
270 |               # First check if we're already connected
271 |               status = self.status()
272 | /             if status.get("connected", False):
273 | |                 # VPN manager will handle disconnection automatically
274 | |                 if self.verbose:
    | |________________________________^ SIM102
275 |                       self.logger.info(
276 |                           "Already connected, will disconnect before connecting to new server"
    |
    = help: Combine `if` statements using `and`

src/nyord_vpn/core/client.py:282:17: TRY301 Abstract `raise` to an inner function
    |
280 |             servers = self.server_manager.select_fastest_server(country_code)
281 |             if not servers:
282 |                 raise VPNError(f"No servers available in {country_code}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
283 |
284 |             # Take the first (fastest) server
    |

src/nyord_vpn/core/client.py:282:23: TRY003 Avoid specifying long messages outside the exception class
    |
280 |             servers = self.server_manager.select_fastest_server(country_code)
281 |             if not servers:
282 |                 raise VPNError(f"No servers available in {country_code}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
283 |
284 |             # Take the first (fastest) server
    |

src/nyord_vpn/core/client.py:288:17: TRY301 Abstract `raise` to an inner function
    |
286 |             hostname = server.get("hostname")
287 |             if not hostname:
288 |                 raise VPNError("Selected server has no hostname")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
289 |
290 |             if self.verbose:
    |

src/nyord_vpn/core/client.py:288:23: TRY003 Avoid specifying long messages outside the exception class
    |
286 |             hostname = server.get("hostname")
287 |             if not hostname:
288 |                 raise VPNError("Selected server has no hostname")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
289 |
290 |             if self.verbose:
    |

src/nyord_vpn/core/client.py:296:17: TRY301 Abstract `raise` to an inner function
    |
294 |             # Set up VPN configuration
295 |             if not self.username or not self.password:
296 |                 raise VPNError("Missing VPN credentials")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
297 |             self.vpn_manager.setup_connection(hostname, self.username, self.password)
    |

src/nyord_vpn/core/client.py:296:23: TRY003 Avoid specifying long messages outside the exception class
    |
294 |             # Set up VPN configuration
295 |             if not self.username or not self.password:
296 |                 raise VPNError("Missing VPN credentials")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
297 |             self.vpn_manager.setup_connection(hostname, self.username, self.password)
    |

src/nyord_vpn/core/client.py:315:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
314 |         except Exception as e:
315 |             raise VPNError(f"Failed to connect: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
316 |
317 |     def bye(self) -> None:
    |

src/nyord_vpn/core/client.py:315:19: TRY003 Avoid specifying long messages outside the exception class
    |
314 |         except Exception as e:
315 |             raise VPNError(f"Failed to connect: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
316 |
317 |     def bye(self) -> None:
    |

src/nyord_vpn/core/client.py:317:9: C901 `bye` is too complex (11 > 10)
    |
315 |             raise VPNError(f"Failed to connect: {e}")
316 |
317 |     def bye(self) -> None:
    |         ^^^ C901
318 |         """Disconnect from the VPN."""
319 |         if self.verbose:
    |

src/nyord_vpn/core/client.py:383:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
381 |                 console.print(f"Public IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
382 |         except Exception as e:
383 |             raise VPNError(f"Failed to get status: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
384 |
385 |     def init(self) -> None:
    |

src/nyord_vpn/core/client.py:383:19: TRY003 Avoid specifying long messages outside the exception class
    |
381 |                 console.print(f"Public IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
382 |         except Exception as e:
383 |             raise VPNError(f"Failed to get status: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
384 |
385 |     def init(self) -> None:
    |

src/nyord_vpn/core/client.py:418:17: TRY301 Abstract `raise` to an inner function
    |
416 |             # Test API connectivity
417 |             if not self.api_client.test_api_connectivity():
418 |                 raise ConnectionError("Failed to connect to NordVPN API")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
419 |             if self.verbose:
420 |                 self.logger.info("Successfully connected to NordVPN API")
    |

src/nyord_vpn/core/client.py:418:23: TRY003 Avoid specifying long messages outside the exception class
    |
416 |             # Test API connectivity
417 |             if not self.api_client.test_api_connectivity():
418 |                 raise ConnectionError("Failed to connect to NordVPN API")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
419 |             if self.verbose:
420 |                 self.logger.info("Successfully connected to NordVPN API")
    |

src/nyord_vpn/core/client.py:425:17: TRY301 Abstract `raise` to an inner function
    |
423 |             initial_ip = self.vpn_manager.get_current_ip()
424 |             if not initial_ip:
425 |                 raise ConnectionError("Failed to get initial IP")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
426 |             if self.verbose:
427 |                 self.logger.info(f"Initial IP: {initial_ip}")
    |

src/nyord_vpn/core/client.py:425:23: TRY003 Avoid specifying long messages outside the exception class
    |
423 |             initial_ip = self.vpn_manager.get_current_ip()
424 |             if not initial_ip:
425 |                 raise ConnectionError("Failed to get initial IP")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
426 |             if self.verbose:
427 |                 self.logger.info(f"Initial IP: {initial_ip}")
    |

src/nyord_vpn/core/client.py:433:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
432 |         except Exception as e:
433 |             raise ConnectionError(f"Failed to initialize client environment: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
434 |
435 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/core/client.py:433:19: TRY003 Avoid specifying long messages outside the exception class
    |
432 |         except Exception as e:
433 |             raise ConnectionError(f"Failed to initialize client environment: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
434 |
435 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/exceptions.py:39:9: D107 Missing docstring in `__init__`
   |
37 |     """
38 |
39 |     def __init__(
   |         ^^^^^^^^ D107
40 |         self,
41 |         message: str = "An error occurred in the NordVPN client",
   |

src/nyord_vpn/exceptions.py:67:9: D107 Missing docstring in `__init__`
   |
65 |     """
66 |
67 |     def __init__(
   |         ^^^^^^^^ D107
68 |         self,
69 |         message: str = "A VPN-related error occurred",
   |

src/nyord_vpn/exceptions.py:83:9: D107 Missing docstring in `__init__`
   |
81 |     """
82 |
83 |     def __init__(
   |         ^^^^^^^^ D107
84 |         self,
85 |         message: str = "Invalid or missing VPN credentials",
   |

src/nyord_vpn/exceptions.py:92:7: A001 Variable `ConnectionError` is shadowing a Python builtin
   |
92 | class ConnectionError(NyordVPNError):
   |       ^^^^^^^^^^^^^^^ A001
93 |     """Raised when connection to VPN server fails.
   |

src/nyord_vpn/exceptions.py:99:9: D107 Missing docstring in `__init__`
    |
 97 |     """
 98 |
 99 |     def __init__(
    |         ^^^^^^^^ D107
100 |         self,
101 |         message: str = "Failed to connect to VPN server",
    |

src/nyord_vpn/exceptions.py:115:9: D107 Missing docstring in `__init__`
    |
113 |     """
114 |
115 |     def __init__(
    |         ^^^^^^^^ D107
116 |         self,
117 |         message: str = "Failed to disconnect from VPN",
    |

src/nyord_vpn/exceptions.py:131:9: D107 Missing docstring in `__init__`
    |
129 |     """
130 |
131 |     def __init__(
    |         ^^^^^^^^ D107
132 |         self,
133 |         message: str = "VPN server not found",
    |

src/nyord_vpn/exceptions.py:147:9: D107 Missing docstring in `__init__`
    |
145 |     """
146 |
147 |     def __init__(
    |         ^^^^^^^^ D107
148 |         self,
149 |         message: str = "Invalid or missing OpenVPN configuration",
    |

src/nyord_vpn/exceptions.py:163:9: D107 Missing docstring in `__init__`
    |
161 |     """
162 |
163 |     def __init__(
    |         ^^^^^^^^ D107
164 |         self,
165 |         message: str = "VPN server error or unavailable",
    |

src/nyord_vpn/exceptions.py:179:9: D107 Missing docstring in `__init__`
    |
177 |     """
178 |
179 |     def __init__(
    |         ^^^^^^^^ D107
180 |         self,
181 |         message: str = "VPN authentication failed",
    |

src/nyord_vpn/exceptions.py:195:9: D107 Missing docstring in `__init__`
    |
193 |     """
194 |
195 |     def __init__(
    |         ^^^^^^^^ D107
196 |         self,
197 |         message: str = "VPN operation timed out",
    |

src/nyord_vpn/exceptions.py:211:9: D107 Missing docstring in `__init__`
    |
209 |     """
210 |
211 |     def __init__(
    |         ^^^^^^^^ D107
212 |         self,
213 |         message: str = "OpenVPN process error",
    |

src/nyord_vpn/exceptions.py:227:9: D107 Missing docstring in `__init__`
    |
225 |     """
226 |
227 |     def __init__(
    |         ^^^^^^^^ D107
228 |         self,
229 |         message: str = "Failed to establish VPN connection",
    |

src/nyord_vpn/exceptions.py:243:9: D107 Missing docstring in `__init__`
    |
241 |     """
242 |
243 |     def __init__(
    |         ^^^^^^^^ D107
244 |         self,
245 |         message: str = "Failed to disconnect from VPN",
    |

src/nyord_vpn/network/country.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/network/server.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/network/server.py:107:58: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
107 | def _safe_dict_get(d: dict[str, Any], key: str, default: Any = None) -> Any:
    |                                                          ^^^ ANN401
108 |     """Safely get a value from a dictionary."""
109 |     return d.get(key, default) if isinstance(d, dict) else default
    |

src/nyord_vpn/network/server.py:107:73: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_dict_get`
    |
107 | def _safe_dict_get(d: dict[str, Any], key: str, default: Any = None) -> Any:
    |                                                                         ^^^ ANN401
108 |     """Safely get a value from a dictionary."""
109 |     return d.get(key, default) if isinstance(d, dict) else default
    |

src/nyord_vpn/network/server.py:112:60: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
112 | def _safe_get(d: dict[str, Any] | None, key: str, default: Any = None) -> Any:
    |                                                            ^^^ ANN401
113 |     """Safely get a value from a dictionary that might be None."""
114 |     if d is None:
    |

src/nyord_vpn/network/server.py:112:75: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_get`
    |
112 | def _safe_get(d: dict[str, Any] | None, key: str, default: Any = None) -> Any:
    |                                                                           ^^^ ANN401
113 |     """Safely get a value from a dictionary that might be None."""
114 |     if d is None:
    |

src/nyord_vpn/network/server.py:119:53: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
119 | def _safe_str_get(s: str | None, key: str, default: Any = None) -> Any:
    |                                                     ^^^ ANN401
120 |     """Safely get a value from a string that might be None."""
121 |     if s is None:
    |

src/nyord_vpn/network/server.py:119:68: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_str_get`
    |
119 | def _safe_str_get(s: str | None, key: str, default: Any = None) -> Any:
    |                                                                    ^^^ ANN401
120 |     """Safely get a value from a string that might be None."""
121 |     if s is None:
    |

src/nyord_vpn/network/server.py:129:55: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_dict_access`
    |
129 | def _safe_dict_access(d: dict[str, Any], key: str) -> Any:
    |                                                       ^^^ ANN401
130 |     """Safely access a dictionary key that must exist."""
131 |     if not isinstance(d, dict) or key not in d:
    |

src/nyord_vpn/network/server.py:132:15: TRY003 Avoid specifying long messages outside the exception class
    |
130 |     """Safely access a dictionary key that must exist."""
131 |     if not isinstance(d, dict) or key not in d:
132 |         raise KeyError(f"Required key {key} not found in dictionary")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
133 |     return d[key]
    |

src/nyord_vpn/network/server.py:136:24: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `d`
    |
136 | def _safe_dict_cast(d: Any) -> dict[str, Any]:
    |                        ^^^ ANN401
137 |     """Cast a value to a dictionary if possible."""
138 |     if not isinstance(d, dict):
    |

src/nyord_vpn/network/server.py:204:33: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `timestamp`
    |
204 | def _parse_timestamp(timestamp: Any) -> float:
    |                                 ^^^ ANN401
205 |     """Parse a timestamp value into a float.
    |

src/nyord_vpn/network/server.py:257:9: TRY300 Consider moving this statement to an `else` block
    |
255 |         }
256 |
257 |         return cache_data
    |         ^^^^^^^^^^^^^^^^^ TRY300
258 |
259 |     except Exception as e:
    |

src/nyord_vpn/network/server.py:316:19: TRY003 Avoid specifying long messages outside the exception class
    |
314 |         normalized = country_code.upper()
315 |         if not isinstance(normalized, str) or len(normalized) != 2:
316 |             raise ServerError(f"Invalid country code format: {country_code}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
317 |
318 |         # Verify country exists in cache
    |

src/nyord_vpn/network/server.py:321:19: TRY003 Avoid specifying long messages outside the exception class
    |
319 |         cache = self.get_servers_cache()
320 |         if not cache:
321 |             raise ServerError("No server information available")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
322 |
323 |         for location in cache["locations"].values():
    |

src/nyord_vpn/network/server.py:336:15: TRY003 Avoid specifying long messages outside the exception class
    |
334 |           )
335 |
336 |           raise ServerError(
    |  _______________^
337 | |             f"Country code not found: {normalized}. "
338 | |             f"Available countries: {', '.join(available_countries)}"
339 | |         )
    | |_________^ TRY003
340 |
341 |       def fetch_server_info(self, country: str | None = None) -> tuple[str, str] | None:
    |

src/nyord_vpn/network/server.py:341:9: C901 `fetch_server_info` is too complex (18 > 10)
    |
339 |         )
340 |
341 |     def fetch_server_info(self, country: str | None = None) -> tuple[str, str] | None:
    |         ^^^^^^^^^^^^^^^^^ C901
342 |         """Fetch information about recommended servers supporting OpenVPN.
    |

src/nyord_vpn/network/server.py:341:9: PLR0912 Too many branches (17 > 12)
    |
339 |         )
340 |
341 |     def fetch_server_info(self, country: str | None = None) -> tuple[str, str] | None:
    |         ^^^^^^^^^^^^^^^^^ PLR0912
342 |         """Fetch information about recommended servers supporting OpenVPN.
    |

src/nyord_vpn/network/server.py:367:17: TRY301 Abstract `raise` to an inner function
    |
365 |             cache = self.get_servers_cache()
366 |             if not cache:
367 |                 raise ServerError("Failed to get server list")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
368 |
369 |             servers = cache["servers"]
    |

src/nyord_vpn/network/server.py:367:23: TRY003 Avoid specifying long messages outside the exception class
    |
365 |             cache = self.get_servers_cache()
366 |             if not cache:
367 |                 raise ServerError("Failed to get server list")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
368 |
369 |             servers = cache["servers"]
    |

src/nyord_vpn/network/server.py:428:17: TRY301 Abstract `raise` to an inner function
    |
426 |                         f"\nAvailable countries: {', '.join(available_countries)}"
427 |                     )
428 |                 raise ServerError(error_msg)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
429 |
430 |             # Sort by load and select the least loaded server
    |

src/nyord_vpn/network/server.py:434:17: TRY301 Abstract `raise` to an inner function
    |
432 |             hostname = server["hostname"]
433 |             if not hostname:
434 |                 raise ServerError("Invalid server data received")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
435 |
436 |             if self.api_client.verbose:
    |

src/nyord_vpn/network/server.py:434:23: TRY003 Avoid specifying long messages outside the exception class
    |
432 |             hostname = server["hostname"]
433 |             if not hostname:
434 |                 raise ServerError("Invalid server data received")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
435 |
436 |             if self.api_client.verbose:
    |

src/nyord_vpn/network/server.py:444:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
443 |         except Exception as e:
444 |             raise ServerError(f"Failed to fetch server info: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
445 |
446 |     def get_servers_cache(self) -> ServerCache | None:
    |

src/nyord_vpn/network/server.py:444:19: TRY003 Avoid specifying long messages outside the exception class
    |
443 |         except Exception as e:
444 |             raise ServerError(f"Failed to fetch server info: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
445 |
446 |     def get_servers_cache(self) -> ServerCache | None:
    |

src/nyord_vpn/network/server.py:446:9: C901 `get_servers_cache` is too complex (15 > 10)
    |
444 |             raise ServerError(f"Failed to fetch server info: {e}")
445 |
446 |     def get_servers_cache(self) -> ServerCache | None:
    |         ^^^^^^^^^^^^^^^^^ C901
447 |         """Get server information from cache or API.
    |

src/nyord_vpn/network/server.py:446:9: PLR0912 Too many branches (14 > 12)
    |
444 |             raise ServerError(f"Failed to fetch server info: {e}")
445 |
446 |     def get_servers_cache(self) -> ServerCache | None:
    |         ^^^^^^^^^^^^^^^^^ PLR0912
447 |         """Get server information from cache or API.
    |

src/nyord_vpn/network/server.py:551:13: TRY300 Consider moving this statement to an `else` block
    |
549 |             cache_servers(cast(dict[str, Any], new_cache))
550 |
551 |             return new_cache
    |             ^^^^^^^^^^^^^^^^ TRY300
552 |
553 |         except Exception as e:
    |

src/nyord_vpn/network/server.py:557:9: C901 `_ping_server` is too complex (23 > 10)
    |
555 |             return None
556 |
557 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ C901
558 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:557:9: PLR0912 Too many branches (23 > 12)
    |
555 |             return None
556 |
557 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ PLR0912
558 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:557:9: PLR0915 Too many statements (54 > 50)
    |
555 |             return None
556 |
557 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ PLR0915
558 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:583:22: S603 `subprocess` call: check for execution of untrusted input
    |
581 |                 self.logger.debug(f"Running ping command: {' '.join(cmd)}")
582 |
583 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
584 |                 cmd,
585 |                 capture_output=True,
    |

src/nyord_vpn/network/server.py:608:29: TRY300 Consider moving this statement to an `else` block
    |
606 |                                     f"Parsed min time from stats: {min_time}ms",
607 |                                 )
608 |                             return min_time
    |                             ^^^^^^^^^^^^^^^ TRY300
609 |                         except (IndexError, ValueError) as e:
610 |                             if self.api_client.verbose:
    |

src/nyord_vpn/network/server.py:665:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `server`
    |
663 |             return float("inf")
664 |
665 |     def _is_valid_server(self, server: Any) -> bool:
    |                                        ^^^ ANN401
666 |         """Basic server validation.
    |

src/nyord_vpn/network/server.py:666:9: D401 First line of docstring should be in imperative mood: "Basic server validation."
    |
665 |       def _is_valid_server(self, server: Any) -> bool:
666 | /         """Basic server validation.
667 | |
668 | |         Only checks:
669 | |         1. Has valid hostname
670 | |         2. Has OpenVPN TCP support
671 | |
672 | |         Args:
673 | |             server: Server data to validate
674 | |
675 | |         Returns:
676 | |             bool: True if server data is valid
677 | |
678 | |         """
    | |___________^ D401
679 |           if not isinstance(server, dict):
680 |               return False
    |

src/nyord_vpn/network/server.py:701:9: C901 `_test_server` is too complex (17 > 10)
    |
699 |         return has_openvpn_tcp
700 |
701 |     def _test_server(self, server: dict[str, Any]) -> tuple[dict[str, Any], float]:
    |         ^^^^^^^^^^^^ C901
702 |         """Test a server's response time using both ping and TCP connection.
    |

src/nyord_vpn/network/server.py:701:9: PLR0912 Too many branches (18 > 12)
    |
699 |         return has_openvpn_tcp
700 |
701 |     def _test_server(self, server: dict[str, Any]) -> tuple[dict[str, Any], float]:
    |         ^^^^^^^^^^^^ PLR0912
702 |         """Test a server's response time using both ping and TCP connection.
    |

src/nyord_vpn/network/server.py:701:9: PLR0915 Too many statements (52 > 50)
    |
699 |         return has_openvpn_tcp
700 |
701 |     def _test_server(self, server: dict[str, Any]) -> tuple[dict[str, Any], float]:
    |         ^^^^^^^^^^^^ PLR0915
702 |         """Test a server's response time using both ping and TCP connection.
    |

src/nyord_vpn/network/server.py:759:26: S603 `subprocess` call: check for execution of untrusted input
    |
757 |                     cmd = ["ping", "-c", "1", "-W", "1", hostname]
758 |
759 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
760 |                     cmd, capture_output=True, text=True, timeout=2, check=False
761 |                 )
    |

src/nyord_vpn/network/server.py:799:13: TRY300 Consider moving this statement to an `else` block
    |
797 |                 )
798 |
799 |             return server, score
    |             ^^^^^^^^^^^^^^^^^^^^ TRY300
800 |
801 |         except Exception as e:
    |

src/nyord_vpn/network/server.py:836:39: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
834 |         while len(selected) < count and region_names:
835 |             # Cycle through regions
836 |             region = region_names.pop(random.randrange(len(region_names)))
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
837 |             if region_servers := regions.get(region, []):
838 |                 # Select random server from region
    |

src/nyord_vpn/network/server.py:839:26: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
837 |             if region_servers := regions.get(region, []):
838 |                 # Select random server from region
839 |                 server = random.choice(region_servers)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
840 |                 selected.append(server)
    |

src/nyord_vpn/network/server.py:851:9: SIM102 Use a single `if` statement instead of nested `if` statements
    |
849 |                   selected.extend(remaining)
850 |
851 | /         if not selected:
852 | |             # Ensure we return at least one server if available
853 | |             if servers:
    | |_______________________^ SIM102
854 |                   selected.append(random.choice(servers))
    |
    = help: Combine `if` statements using `and`

src/nyord_vpn/network/server.py:854:33: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
852 |             # Ensure we return at least one server if available
853 |             if servers:
854 |                 selected.append(random.choice(servers))
    |                                 ^^^^^^^^^^^^^^^^^^^^^^ S311
855 |
856 |         return selected
    |

src/nyord_vpn/network/server.py:858:9: C901 `select_fastest_server` is too complex (14 > 10)
    |
856 |         return selected
857 |
858 |     def select_fastest_server(
    |         ^^^^^^^^^^^^^^^^^^^^^ C901
859 |         self, country_code: str | None = None
860 |     ) -> list[dict[str, Any]]:
    |

src/nyord_vpn/network/server.py:858:9: PLR0912 Too many branches (13 > 12)
    |
856 |         return selected
857 |
858 |     def select_fastest_server(
    |         ^^^^^^^^^^^^^^^^^^^^^ PLR0912
859 |         self, country_code: str | None = None
860 |     ) -> list[dict[str, Any]]:
    |

src/nyord_vpn/network/server.py:874:17: TRY301 Abstract `raise` to an inner function
    |
872 |             cache = self.get_servers_cache()
873 |             if not cache:
874 |                 raise ServerError("No servers available")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
875 |
876 |             servers = cache["servers"]
    |

src/nyord_vpn/network/server.py:874:23: TRY003 Avoid specifying long messages outside the exception class
    |
872 |             cache = self.get_servers_cache()
873 |             if not cache:
874 |                 raise ServerError("No servers available")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
875 |
876 |             servers = cache["servers"]
    |

src/nyord_vpn/network/server.py:880:17: TRY301 Abstract `raise` to an inner function
    |
879 |             if not servers:
880 |                 raise ServerError("No servers available")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
881 |
882 |             # Create location lookup by ID
    |

src/nyord_vpn/network/server.py:880:23: TRY003 Avoid specifying long messages outside the exception class
    |
879 |             if not servers:
880 |                 raise ServerError("No servers available")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
881 |
882 |             # Create location lookup by ID
    |

src/nyord_vpn/network/server.py:912:21: TRY301 Abstract `raise` to an inner function
    |
910 |                           }
911 |                       )
912 | /                     raise ServerError(
913 | |                         f"No servers available in {country_code}. "
914 | |                         f"Available countries: {', '.join(available_countries)}"
915 | |                     )
    | |_____________________^ TRY301
916 |
917 |               # Remove failed servers
    |

src/nyord_vpn/network/server.py:912:27: TRY003 Avoid specifying long messages outside the exception class
    |
910 |                           }
911 |                       )
912 |                       raise ServerError(
    |  ___________________________^
913 | |                         f"No servers available in {country_code}. "
914 | |                         f"Available countries: {', '.join(available_countries)}"
915 | |                     )
    | |_____________________^ TRY003
916 |
917 |               # Remove failed servers
    |

src/nyord_vpn/network/server.py:946:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
944 |             if isinstance(e, ServerError):
945 |                 raise
946 |             raise ServerError(f"Failed to select server: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
947 |
948 |     def _get_country_id(self, country_code: str) -> str:
    |

src/nyord_vpn/network/server.py:946:19: TRY003 Avoid specifying long messages outside the exception class
    |
944 |             if isinstance(e, ServerError):
945 |                 raise
946 |             raise ServerError(f"Failed to select server: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
947 |
948 |     def _get_country_id(self, country_code: str) -> str:
    |

src/nyord_vpn/network/server.py:992:17: TRY301 Abstract `raise` to an inner function
    |
990 |             cache = self.get_servers_cache()
991 |             if not cache:
992 |                 raise ServerError("No servers available")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
993 |
994 |             countries = {
    |

src/nyord_vpn/network/server.py:992:23: TRY003 Avoid specifying long messages outside the exception class
    |
990 |             cache = self.get_servers_cache()
991 |             if not cache:
992 |                 raise ServerError("No servers available")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
993 |
994 |             countries = {
    |

src/nyord_vpn/network/server.py:1000:17: TRY301 Abstract `raise` to an inner function
     |
 998 |             }
 999 |             if not countries:
1000 |                 raise ServerError("No countries found in server list")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
1001 |
1002 |             selected = random.choice(list(countries))
     |

src/nyord_vpn/network/server.py:1000:23: TRY003 Avoid specifying long messages outside the exception class
     |
 998 |             }
 999 |             if not countries:
1000 |                 raise ServerError("No countries found in server list")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1001 |
1002 |             selected = random.choice(list(countries))
     |

src/nyord_vpn/network/server.py:1002:24: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
     |
1000 |                 raise ServerError("No countries found in server list")
1001 |
1002 |             selected = random.choice(list(countries))
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S311
1003 |             if self.api_client.verbose:
1004 |                 self.logger.debug(f"Selected random country: {selected}")
     |

src/nyord_vpn/network/server.py:1005:13: TRY300 Consider moving this statement to an `else` block
     |
1003 |             if self.api_client.verbose:
1004 |                 self.logger.debug(f"Selected random country: {selected}")
1005 |             return selected
     |             ^^^^^^^^^^^^^^^ TRY300
1006 |
1007 |         except Exception as e:
     |

src/nyord_vpn/network/server.py:1044:13: TRY300 Consider moving this statement to an `else` block
     |
1042 |                     }
1043 |
1044 |             return None
     |             ^^^^^^^^^^^ TRY300
1045 |
1046 |         except Exception as e:
     |

src/nyord_vpn/network/vpn.py:75:1: F811 Redefinition of unused `OPENVPN_AUTH` from line 64
   |
74 | # Constants
75 | OPENVPN_AUTH = Path.home() / ".cache" / "nyord-vpn" / "openvpn.auth"
   | ^^^^^^^^^^^^ F811
76 | OPENVPN_LOG = Path.home() / ".cache" / "nyord-vpn" / "openvpn.log"
   |
   = help: Remove definition: `OPENVPN_AUTH`

src/nyord_vpn/network/vpn.py:76:1: F811 Redefinition of unused `OPENVPN_LOG` from line 65
   |
74 | # Constants
75 | OPENVPN_AUTH = Path.home() / ".cache" / "nyord-vpn" / "openvpn.auth"
76 | OPENVPN_LOG = Path.home() / ".cache" / "nyord-vpn" / "openvpn.log"
   | ^^^^^^^^^^^ F811
   |
   = help: Remove definition: `OPENVPN_LOG`

src/nyord_vpn/network/vpn.py:97:21: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`
   |
95 |     def __init__(
96 |         self,
97 |         api_client: Any,
   |                     ^^^ ANN401
98 |         server_manager: ServerManager,
99 |         vpn_manager: Any,
   |

src/nyord_vpn/network/vpn.py:99:22: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `vpn_manager`
    |
 97 |         api_client: Any,
 98 |         server_manager: ServerManager,
 99 |         vpn_manager: Any,
    |                      ^^^ ANN401
100 |         verbose: bool = False,
101 |     ) -> None:
    |

src/nyord_vpn/network/vpn.py:100:9: FBT001 Boolean-typed positional argument in function definition
    |
 98 |         server_manager: ServerManager,
 99 |         vpn_manager: Any,
100 |         verbose: bool = False,
    |         ^^^^^^^ FBT001
101 |     ) -> None:
102 |         """Initialize VPN connection manager.
    |

src/nyord_vpn/network/vpn.py:100:9: FBT002 Boolean default positional argument in function definition
    |
 98 |         server_manager: ServerManager,
 99 |         vpn_manager: Any,
100 |         verbose: bool = False,
    |         ^^^^^^^ FBT002
101 |     ) -> None:
102 |         """Initialize VPN connection manager.
    |

src/nyord_vpn/network/vpn.py:168:30: S603 `subprocess` call: check for execution of untrusted input
    |
166 |                 if Path(path).exists():
167 |                     # Verify we can run it
168 |                     result = subprocess.run(
    |                              ^^^^^^^^^^^^^^ S603
169 |                         [path, "--version"], capture_output=True, text=True, check=False
170 |                     )
    |

src/nyord_vpn/network/vpn.py:178:26: S603 `subprocess` call: check for execution of untrusted input
    |
176 |             # If not found in common paths, try which
177 |             try:
178 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
179 |                     ["which", "openvpn"], capture_output=True, text=True, check=True
180 |                 )
    |

src/nyord_vpn/network/vpn.py:179:21: S607 Starting a process with a partial executable path
    |
177 |             try:
178 |                 result = subprocess.run(
179 |                     ["which", "openvpn"], capture_output=True, text=True, check=True
    |                     ^^^^^^^^^^^^^^^^^^^^ S607
180 |                 )
181 |                 path = result.stdout.strip()
    |

src/nyord_vpn/network/vpn.py:189:13: TRY301 Abstract `raise` to an inner function
    |
187 |                   pass
188 |
189 | /             raise VPNError(
190 | |                 "OpenVPN not found. Please install OpenVPN:\n"
191 | |                 "  macOS: brew install openvpn\n"
192 | |                 "  Linux: sudo apt install openvpn  # or your distro's package manager"
193 | |             )
    | |_____________^ TRY301
194 |
195 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:189:19: TRY003 Avoid specifying long messages outside the exception class
    |
187 |                   pass
188 |
189 |               raise VPNError(
    |  ___________________^
190 | |                 "OpenVPN not found. Please install OpenVPN:\n"
191 | |                 "  macOS: brew install openvpn\n"
192 | |                 "  Linux: sudo apt install openvpn  # or your distro's package manager"
193 | |             )
    | |_____________^ TRY003
194 |
195 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:198:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
196 |             if isinstance(e, VPNError):
197 |                 raise
198 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
199 |
200 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |

src/nyord_vpn/network/vpn.py:198:19: TRY003 Avoid specifying long messages outside the exception class
    |
196 |             if isinstance(e, VPNError):
197 |                 raise
198 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
199 |
200 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |

src/nyord_vpn/network/vpn.py:200:9: C901 `setup_connection` is too complex (18 > 10)
    |
198 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
199 |
200 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |         ^^^^^^^^^^^^^^^^ C901
201 |         """Set up VPN connection configuration.
    |

src/nyord_vpn/network/vpn.py:200:9: PLR0912 Too many branches (17 > 12)
    |
198 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
199 |
200 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |         ^^^^^^^^^^^^^^^^ PLR0912
201 |         """Set up VPN connection configuration.
    |

src/nyord_vpn/network/vpn.py:200:32: ARG002 Unused method argument: `hostname`
    |
198 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
199 |
200 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |                                ^^^^^^^^ ARG002
201 |         """Set up VPN connection configuration.
    |

src/nyord_vpn/network/vpn.py:223:17: TRY301 Abstract `raise` to an inner function
    |
221 |             # Validate credentials
222 |             if not username or not isinstance(username, str):
223 |                 raise VPNAuthenticationError("Username must be a non-empty string")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
224 |             username = username.strip()
225 |             if not username:
    |

src/nyord_vpn/network/vpn.py:223:23: TRY003 Avoid specifying long messages outside the exception class
    |
221 |             # Validate credentials
222 |             if not username or not isinstance(username, str):
223 |                 raise VPNAuthenticationError("Username must be a non-empty string")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
224 |             username = username.strip()
225 |             if not username:
    |

src/nyord_vpn/network/vpn.py:226:17: TRY301 Abstract `raise` to an inner function
    |
224 |             username = username.strip()
225 |             if not username:
226 |                 raise VPNAuthenticationError("Username cannot be empty")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
227 |
228 |             if not password or not isinstance(password, str):
    |

src/nyord_vpn/network/vpn.py:226:23: TRY003 Avoid specifying long messages outside the exception class
    |
224 |             username = username.strip()
225 |             if not username:
226 |                 raise VPNAuthenticationError("Username cannot be empty")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
227 |
228 |             if not password or not isinstance(password, str):
    |

src/nyord_vpn/network/vpn.py:229:17: TRY301 Abstract `raise` to an inner function
    |
228 |             if not password or not isinstance(password, str):
229 |                 raise VPNAuthenticationError("Password must be a non-empty string")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
230 |             password = password.strip()
231 |             if not password:
    |

src/nyord_vpn/network/vpn.py:229:23: TRY003 Avoid specifying long messages outside the exception class
    |
228 |             if not password or not isinstance(password, str):
229 |                 raise VPNAuthenticationError("Password must be a non-empty string")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
230 |             password = password.strip()
231 |             if not password:
    |

src/nyord_vpn/network/vpn.py:232:17: TRY301 Abstract `raise` to an inner function
    |
230 |             password = password.strip()
231 |             if not password:
232 |                 raise VPNAuthenticationError("Password cannot be empty")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
233 |             if len(password) < 8:
234 |                 raise VPNAuthenticationError("Password must be at least 8 characters")
    |

src/nyord_vpn/network/vpn.py:232:23: TRY003 Avoid specifying long messages outside the exception class
    |
230 |             password = password.strip()
231 |             if not password:
232 |                 raise VPNAuthenticationError("Password cannot be empty")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
233 |             if len(password) < 8:
234 |                 raise VPNAuthenticationError("Password must be at least 8 characters")
    |

src/nyord_vpn/network/vpn.py:234:17: TRY301 Abstract `raise` to an inner function
    |
232 |                 raise VPNAuthenticationError("Password cannot be empty")
233 |             if len(password) < 8:
234 |                 raise VPNAuthenticationError("Password must be at least 8 characters")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
235 |
236 |             # Ensure cache directory exists with secure permissions
    |

src/nyord_vpn/network/vpn.py:234:23: TRY003 Avoid specifying long messages outside the exception class
    |
232 |                 raise VPNAuthenticationError("Password cannot be empty")
233 |             if len(password) < 8:
234 |                 raise VPNAuthenticationError("Password must be at least 8 characters")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
235 |
236 |             # Ensure cache directory exists with secure permissions
    |

src/nyord_vpn/network/vpn.py:258:17: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
256 |                       if temp_auth.exists():
257 |                           temp_auth.unlink()
258 | /                 except Exception:
259 | |                     pass
    | |________________________^ S110
260 |                   raise VPNAuthenticationError(
261 |                       f"Failed to create auth file: {e}. "
    |

src/nyord_vpn/network/vpn.py:260:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
258 |                   except Exception:
259 |                       pass
260 | /                 raise VPNAuthenticationError(
261 | |                     f"Failed to create auth file: {e}. "
262 | |                     "Please check file permissions and disk space."
263 | |                 )
    | |_________________^ B904
264 |
265 |               # Verify auth file permissions and contents
    |

src/nyord_vpn/network/vpn.py:260:23: TRY003 Avoid specifying long messages outside the exception class
    |
258 |                   except Exception:
259 |                       pass
260 |                   raise VPNAuthenticationError(
    |  _______________________^
261 | |                     f"Failed to create auth file: {e}. "
262 | |                     "Please check file permissions and disk space."
263 | |                 )
    | |_________________^ TRY003
264 |
265 |               # Verify auth file permissions and contents
    |

src/nyord_vpn/network/vpn.py:276:21: TRY301 Abstract `raise` to an inner function
    |
274 |                   lines = OPENVPN_AUTH.read_text().strip().split("\n")
275 |                   if len(lines) != 2:
276 | /                     raise VPNAuthenticationError(
277 | |                         "Auth file is corrupted - please run setup again"
278 | |                     )
    | |_____________________^ TRY301
279 |                   if lines[0].strip() != username or lines[1].strip() != password:
280 |                       raise VPNAuthenticationError(
    |

src/nyord_vpn/network/vpn.py:276:27: TRY003 Avoid specifying long messages outside the exception class
    |
274 |                   lines = OPENVPN_AUTH.read_text().strip().split("\n")
275 |                   if len(lines) != 2:
276 |                       raise VPNAuthenticationError(
    |  ___________________________^
277 | |                         "Auth file is corrupted - please run setup again"
278 | |                     )
    | |_____________________^ TRY003
279 |                   if lines[0].strip() != username or lines[1].strip() != password:
280 |                       raise VPNAuthenticationError(
    |

src/nyord_vpn/network/vpn.py:280:21: TRY301 Abstract `raise` to an inner function
    |
278 |                       )
279 |                   if lines[0].strip() != username or lines[1].strip() != password:
280 | /                     raise VPNAuthenticationError(
281 | |                         "Auth file contents don't match - please run setup again"
282 | |                     )
    | |_____________________^ TRY301
283 |
284 |               except Exception as e:
    |

src/nyord_vpn/network/vpn.py:280:27: TRY003 Avoid specifying long messages outside the exception class
    |
278 |                       )
279 |                   if lines[0].strip() != username or lines[1].strip() != password:
280 |                       raise VPNAuthenticationError(
    |  ___________________________^
281 | |                         "Auth file contents don't match - please run setup again"
282 | |                     )
    | |_____________________^ TRY003
283 |
284 |               except Exception as e:
    |

src/nyord_vpn/network/vpn.py:287:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
285 |                   if isinstance(e, VPNAuthenticationError):
286 |                       raise
287 | /                 raise VPNAuthenticationError(
288 | |                     f"Failed to verify auth file: {e}. "
289 | |                     "Please check file permissions and try again."
290 | |                 )
    | |_________________^ B904
291 |
292 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:287:23: TRY003 Avoid specifying long messages outside the exception class
    |
285 |                   if isinstance(e, VPNAuthenticationError):
286 |                       raise
287 |                   raise VPNAuthenticationError(
    |  _______________________^
288 | |                     f"Failed to verify auth file: {e}. "
289 | |                     "Please check file permissions and try again."
290 | |                 )
    | |_________________^ TRY003
291 |
292 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:295:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
293 |             if isinstance(e, VPNAuthenticationError):
294 |                 raise
295 |             raise VPNAuthenticationError(str(e))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
296 |
297 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/network/vpn.py:297:9: C901 `get_current_ip` is too complex (24 > 10)
    |
295 |             raise VPNAuthenticationError(str(e))
296 |
297 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ C901
298 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:297:9: PLR0912 Too many branches (20 > 12)
    |
295 |             raise VPNAuthenticationError(str(e))
296 |
297 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ PLR0912
298 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:297:9: PLR0915 Too many statements (51 > 50)
    |
295 |             raise VPNAuthenticationError(str(e))
296 |
297 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ PLR0915
298 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:333:13: PERF203 `try`-`except` within a loop incurs performance overhead
    |
331 |                           self.logger.debug(f"Got valid IP {ip} from api.ipify.org")
332 |                       return ip
333 | /             except Exception as e:
334 | |                 if self.verbose:
335 | |                     self.logger.debug(
336 | |                         f"Primary IP check failed (attempt {attempt + 1}): {e}"
337 | |                     )
338 | |                 if attempt < 1:  # Only sleep between attempts
339 | |                     time.sleep(0.5)
    | |___________________________________^ PERF203
340 |
341 |           # Try backup service (up to 2 attempts)
    |

src/nyord_vpn/network/vpn.py:356:13: PERF203 `try`-`except` within a loop incurs performance overhead
    |
354 |                           self.logger.debug(f"Got valid IP {ip} from ip-api.com")
355 |                       return ip
356 | /             except Exception as e:
357 | |                 if self.verbose:
358 | |                     self.logger.debug(
359 | |                         f"Backup IP check failed (attempt {attempt + 1}): {e}"
360 | |                     )
361 | |                 if attempt < 1:  # Only sleep between attempts
362 | |                     time.sleep(0.5)
    | |___________________________________^ PERF203
363 |
364 |           # Try one last service as final fallback
    |

src/nyord_vpn/network/vpn.py:403:9: C901 `connect` is too complex (81 > 10)
    |
401 |             )
402 |
403 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |         ^^^^^^^ C901
404 |         """Connect to a VPN server, trying servers from the list on failure.
    |

src/nyord_vpn/network/vpn.py:403:9: PLR0912 Too many branches (81 > 12)
    |
401 |             )
402 |
403 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |         ^^^^^^^ PLR0912
404 |         """Connect to a VPN server, trying servers from the list on failure.
    |

src/nyord_vpn/network/vpn.py:403:9: PLR0915 Too many statements (203 > 50)
    |
401 |             )
402 |
403 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |         ^^^^^^^ PLR0915
404 |         """Connect to a VPN server, trying servers from the list on failure.
    |

src/nyord_vpn/network/vpn.py:419:21: TRY301 Abstract `raise` to an inner function
    |
417 |                 hostname = server.get("hostname")
418 |                 if not hostname:
419 |                     raise VPNError("Invalid server info - missing hostname")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
420 |
421 |                 # Force cleanup of any existing connections
    |

src/nyord_vpn/network/vpn.py:419:27: TRY003 Avoid specifying long messages outside the exception class
    |
417 |                 hostname = server.get("hostname")
418 |                 if not hostname:
419 |                     raise VPNError("Invalid server info - missing hostname")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
420 |
421 |                 # Force cleanup of any existing connections
    |

src/nyord_vpn/network/vpn.py:439:37: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
437 |                                           os.kill(proc.info["pid"], signal.SIGKILL)
438 |                                           time.sleep(0.1)  # Brief pause after kill
439 | /                                     except Exception:
440 | |                                         pass
    | |____________________________________________^ S110
441 |                           except (psutil.NoSuchProcess, psutil.AccessDenied):
442 |                               continue
    |

src/nyord_vpn/network/vpn.py:441:25: PERF203 `try`-`except` within a loop incurs performance overhead
    |
439 |                                       except Exception:
440 |                                           pass
441 | /                         except (psutil.NoSuchProcess, psutil.AccessDenied):
442 | |                             continue
    | |____________________________________^ PERF203
443 |
444 |                   # Store server info
    |

src/nyord_vpn/network/vpn.py:474:21: TRY301 Abstract `raise` to an inner function
    |
472 |                 config_path = get_config_path(hostname)
473 |                 if not config_path:
474 |                     raise VPNConfigError(f"Failed to get OpenVPN config for {hostname}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
475 |
476 |                 # Log config file contents for debugging
    |

src/nyord_vpn/network/vpn.py:474:27: TRY003 Avoid specifying long messages outside the exception class
    |
472 |                 config_path = get_config_path(hostname)
473 |                 if not config_path:
474 |                     raise VPNConfigError(f"Failed to get OpenVPN config for {hostname}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
475 |
476 |                 # Log config file contents for debugging
    |

src/nyord_vpn/network/vpn.py:489:21: TRY301 Abstract `raise` to an inner function
    |
487 |                 # Verify auth file exists and has correct format
488 |                 if not OPENVPN_AUTH.exists():
489 |                     raise VPNError("Auth file not found - please run setup first")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
490 |                 try:
491 |                     auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
    |

src/nyord_vpn/network/vpn.py:489:27: TRY003 Avoid specifying long messages outside the exception class
    |
487 |                 # Verify auth file exists and has correct format
488 |                 if not OPENVPN_AUTH.exists():
489 |                     raise VPNError("Auth file not found - please run setup first")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
490 |                 try:
491 |                     auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
    |

src/nyord_vpn/network/vpn.py:493:25: TRY301 Abstract `raise` to an inner function
    |
491 |                       auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
492 |                       if len(auth_content) != 2:
493 | /                         raise VPNError(
494 | |                             "Auth file is corrupted - please run setup again"
495 | |                         )
    | |_________________________^ TRY301
496 |                       if not auth_content[0] or not auth_content[1]:
497 |                           raise VPNError(
    |

src/nyord_vpn/network/vpn.py:493:31: TRY003 Avoid specifying long messages outside the exception class
    |
491 |                       auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
492 |                       if len(auth_content) != 2:
493 |                           raise VPNError(
    |  _______________________________^
494 | |                             "Auth file is corrupted - please run setup again"
495 | |                         )
    | |_________________________^ TRY003
496 |                       if not auth_content[0] or not auth_content[1]:
497 |                           raise VPNError(
    |

src/nyord_vpn/network/vpn.py:497:25: TRY301 Abstract `raise` to an inner function
    |
495 |                           )
496 |                       if not auth_content[0] or not auth_content[1]:
497 | /                         raise VPNError(
498 | |                             "Auth file contains empty username or password - please run setup again"
499 | |                         )
    | |_________________________^ TRY301
500 |                       if self.verbose:
501 |                           self.logger.debug("Auth file exists and has correct format")
    |

src/nyord_vpn/network/vpn.py:497:31: TRY003 Avoid specifying long messages outside the exception class
    |
495 |                           )
496 |                       if not auth_content[0] or not auth_content[1]:
497 |                           raise VPNError(
    |  _______________________________^
498 | |                             "Auth file contains empty username or password - please run setup again"
499 | |                         )
    | |_________________________^ TRY003
500 |                       if self.verbose:
501 |                           self.logger.debug("Auth file exists and has correct format")
    |

src/nyord_vpn/network/vpn.py:505:21: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
503 |                     if isinstance(e, VPNError):
504 |                         raise
505 |                     raise VPNError(f"Failed to read auth file: {e}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
506 |
507 |                 # Start OpenVPN process
    |

src/nyord_vpn/network/vpn.py:505:27: TRY003 Avoid specifying long messages outside the exception class
    |
503 |                     if isinstance(e, VPNError):
504 |                         raise
505 |                     raise VPNError(f"Failed to read auth file: {e}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
506 |
507 |                 # Start OpenVPN process
    |

src/nyord_vpn/network/vpn.py:525:36: S603 `subprocess` call: check for execution of untrusted input
    |
524 |                     # Start OpenVPN process
525 |                     self.process = subprocess.Popen(
    |                                    ^^^^^^^^^^^^^^^^ S603
526 |                         cmd,
527 |                         stdout=subprocess.PIPE,
    |

src/nyord_vpn/network/vpn.py:539:31: TRY003 Avoid specifying long messages outside the exception class
    |
537 |                       if self.process.poll() is not None:
538 |                           stdout, stderr = self.process.communicate()
539 |                           raise VPNError(
    |  _______________________________^
540 | |                             f"OpenVPN process failed to start:\n"
541 | |                             f"Exit code: {self.process.returncode}\n"
542 | |                             f"Output: {stdout}\n"
543 | |                             f"Error: {stderr}"
544 | |                         )
    | |_________________________^ TRY003
545 |
546 |                   except subprocess.SubprocessError as e:
    |

src/nyord_vpn/network/vpn.py:547:21: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
546 |                 except subprocess.SubprocessError as e:
547 |                     raise VPNError(f"Failed to start OpenVPN process: {e}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
548 |
549 |                 # Monitor OpenVPN output
    |

src/nyord_vpn/network/vpn.py:547:27: TRY003 Avoid specifying long messages outside the exception class
    |
546 |                 except subprocess.SubprocessError as e:
547 |                     raise VPNError(f"Failed to start OpenVPN process: {e}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
548 |
549 |                 # Monitor OpenVPN output
    |

src/nyord_vpn/network/vpn.py:697:25: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
695 |                               if self.process.poll() is None:
696 |                                   self.process.kill()
697 | /                         except Exception:
698 | |                             pass
    | |________________________________^ S110
699 |
700 |                       if error_msg:
    |

src/nyord_vpn/network/vpn.py:739:17: TRY300 Consider moving this statement to an `else` block
    |
737 |                 if self.verbose:
738 |                     self.logger.info(f"Connected to {hostname}")
739 |                 return  # Success!
    |                 ^^^^^^ TRY300
740 |
741 |             except Exception as e:
    |

src/nyord_vpn/network/vpn.py:749:21: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
747 |                           if self.process.poll() is None:
748 |                               self.process.kill()
749 | /                     except Exception:
750 | |                         pass
    | |____________________________^ S110
751 |
752 |                   # Reset state
    |

src/nyord_vpn/network/vpn.py:763:17: ERA001 Found commented-out code
    |
761 |                     # raise # No, we try other servers
762 |                     continue  # Yes, try other servers
763 |                 # raise VPNError(f"Failed to connect to VPN: {e}") # No, we try other servers
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
764 |                 continue
    |
    = help: Remove commented-out code

src/nyord_vpn/network/vpn.py:771:9: C901 `disconnect` is too complex (30 > 10)
    |
769 |         )
770 |
771 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ C901
772 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:771:9: PLR0912 Too many branches (30 > 12)
    |
769 |         )
770 |
771 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ PLR0912
772 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:771:9: PLR0915 Too many statements (70 > 50)
    |
769 |         )
770 |
771 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ PLR0915
772 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:814:29: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
812 |                                   os.kill(proc.info["pid"], signal.SIGTERM)
813 |                                   time.sleep(0.1)  # Brief pause
814 | /                             except Exception:
815 | |                                 pass
    | |____________________________________^ S110
816 |
817 |                               # Force kill if still running
    |

src/nyord_vpn/network/vpn.py:831:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
829 |                                       )
830 |
831 | /                 except (psutil.NoSuchProcess, psutil.AccessDenied):
832 | |                     continue
    | |____________________________^ PERF203
833 |
834 |               # Verify no OpenVPN processes are left
    |

src/nyord_vpn/network/vpn.py:842:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
840 |                           if any("nordvpn.com" in arg for arg in cmdline):
841 |                               remaining.append(proc.info["pid"])
842 | /                 except (psutil.NoSuchProcess, psutil.AccessDenied):
843 | |                     continue
    | |____________________________^ PERF203
844 |
845 |               if remaining:
    |

src/nyord_vpn/network/vpn.py:846:17: TRY301 Abstract `raise` to an inner function
    |
845 |               if remaining:
846 | /                 raise VPNError(
847 | |                     f"Failed to kill all OpenVPN processes. Remaining: {remaining}"
848 | |                 )
    | |_________________^ TRY301
849 |
850 |               # Clean up OpenVPN log file
    |

src/nyord_vpn/network/vpn.py:846:23: TRY003 Avoid specifying long messages outside the exception class
    |
845 |               if remaining:
846 |                   raise VPNError(
    |  _______________________^
847 | |                     f"Failed to kill all OpenVPN processes. Remaining: {remaining}"
848 | |                 )
    | |_________________^ TRY003
849 |
850 |               # Clean up OpenVPN log file
    |

src/nyord_vpn/network/vpn.py:895:19: TRY003 Avoid specifying long messages outside the exception class
    |
893 |                   )
894 |
895 |               raise VPNError(
    |  ___________________^
896 | |                 f"Failed to disconnect from VPN: {'; '.join(error_details)}"
897 | |             ) from e
    | |_____________^ TRY003
898 |
899 |       def is_connected(self) -> bool:
    |

src/nyord_vpn/network/vpn.py:903:9: C901 `verify_connection` is too complex (23 > 10)
    |
901 |         return self.process is not None and self.process.poll() is None
902 |
903 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ C901
904 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:903:9: PLR0911 Too many return statements (11 > 6)
    |
901 |         return self.process is not None and self.process.poll() is None
902 |
903 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ PLR0911
904 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:903:9: PLR0912 Too many branches (22 > 12)
    |
901 |         return self.process is not None and self.process.poll() is None
902 |
903 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ PLR0912
904 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:926:30: S603 `subprocess` call: check for execution of untrusted input
    |
924 |             if sys.platform == "darwin":  # macOS
925 |                 try:
926 |                     output = subprocess.check_output(["ifconfig"], text=True)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ S603
927 |                     if not any(
928 |                         line.startswith("utun") and "UP" in line
    |

src/nyord_vpn/network/vpn.py:926:54: S607 Starting a process with a partial executable path
    |
924 |             if sys.platform == "darwin":  # macOS
925 |                 try:
926 |                     output = subprocess.check_output(["ifconfig"], text=True)
    |                                                      ^^^^^^^^^^^^ S607
927 |                     if not any(
928 |                         line.startswith("utun") and "UP" in line
    |

src/nyord_vpn/network/vpn.py:940:30: S603 `subprocess` call: check for execution of untrusted input
    |
938 |             elif sys.platform == "linux":
939 |                 try:
940 |                     output = subprocess.check_output(
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ S603
941 |                         ["ip", "link", "show", "tun0"], text=True
942 |                     )
    |

src/nyord_vpn/network/vpn.py:941:25: S607 Starting a process with a partial executable path
    |
939 |                 try:
940 |                     output = subprocess.check_output(
941 |                         ["ip", "link", "show", "tun0"], text=True
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
942 |                     )
943 |                     if "UP" not in output:
    |

src/nyord_vpn/network/vpn.py:982:13: TRY300 Consider moving this statement to an `else` block
    |
980 |                 return False
981 |
982 |             return True
    |             ^^^^^^^^^^^ TRY300
983 |
984 |         except Exception as e:
    |

src/nyord_vpn/network/vpn.py:989:9: C901 `status` is too complex (11 > 10)
    |
987 |             return False
988 |
989 |     def status(self) -> dict[str, Any]:
    |         ^^^^^^ C901
990 |         """Get current VPN connection status.
    |

src/nyord_vpn/network/vpn.py:1057:13: TRY300 Consider moving this statement to an `else` block
     |
1055 |         try:
1056 |             os.kill(process_id, 0)
1057 |             return True
     |             ^^^^^^^^^^^ TRY300
1058 |         except OSError:
1059 |             return False
     |

src/nyord_vpn/network/vpn.py:1065:9: C901 `check_connection_state` is too complex (11 > 10)
     |
1063 |             return False
1064 |
1065 |     def check_connection_state(self) -> bool:
     |         ^^^^^^^^^^^^^^^^^^^^^^ C901
1066 |         """Check current VPN connection state.
     |

src/nyord_vpn/network/vpn.py:1101:13: TRY300 Consider moving this statement to an `else` block
     |
1099 |                         self.logger.debug(f"Failed to read OpenVPN log: {e}")
1100 |
1101 |             return False
     |             ^^^^^^^^^^^^ TRY300
1102 |
1103 |         except Exception as e:
     |

src/nyord_vpn/network/vpn.py:1105:75: TRY401 Redundant exception object included in `logging.exception` call
     |
1103 |         except Exception as e:
1104 |             if self.verbose:
1105 |                 self.logger.exception(f"Error checking connection state: {e}")
     |                                                                           ^ TRY401
1106 |             return False
     |

src/nyord_vpn/network/vpn.py:1118:9: C901 `go` is too complex (14 > 10)
     |
1116 |             self.logger.debug("IP cache invalidated")
1117 |
1118 |     def go(self, country_code: str) -> None:
     |         ^^ C901
1119 |         """Connect to VPN in specified country.
     |

src/nyord_vpn/network/vpn.py:1118:9: PLR0912 Too many branches (13 > 12)
     |
1116 |             self.logger.debug("IP cache invalidated")
1117 |
1118 |     def go(self, country_code: str) -> None:
     |         ^^ PLR0912
1119 |         """Connect to VPN in specified country.
     |

src/nyord_vpn/network/vpn.py:1146:17: TRY301 Abstract `raise` to an inner function
     |
1144 |             servers = self.server_manager.select_fastest_server(country_code)
1145 |             if not servers:
1146 |                 raise VPNError(f"No servers available in {country_code}")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
1147 |
1148 |             if self.verbose:
     |

src/nyord_vpn/network/vpn.py:1146:23: TRY003 Avoid specifying long messages outside the exception class
     |
1144 |             servers = self.server_manager.select_fastest_server(country_code)
1145 |             if not servers:
1146 |                 raise VPNError(f"No servers available in {country_code}")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1147 |
1148 |             if self.verbose:
     |

src/nyord_vpn/network/vpn.py:1179:21: TRY300 Consider moving this statement to an `else` block
     |
1177 |                     if self.verbose:
1178 |                         self.logger.info(f"Successfully connected to {hostname}")
1179 |                     return
     |                     ^^^^^^ TRY300
1180 |
1181 |                 except Exception as e:
     |

src/nyord_vpn/network/vpn.py:1191:13: TRY301 Abstract `raise` to an inner function
     |
1190 |               # If we get here, all servers failed
1191 | /             raise VPNError(
1192 | |                 f"Failed to connect to any server in {country_code}:\n"
1193 | |                 + "\n".join(f"- {e}" for e in errors)
1194 | |             )
     | |_____________^ TRY301
1195 |
1196 |           except Exception as e:
     |

src/nyord_vpn/network/vpn.py:1197:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1196 |         except Exception as e:
1197 |             raise VPNError(f"Failed to connect: {e}")
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
     |

src/nyord_vpn/network/vpn.py:1197:19: TRY003 Avoid specifying long messages outside the exception class
     |
1196 |         except Exception as e:
1197 |             raise VPNError(f"Failed to connect: {e}")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
     |

src/nyord_vpn/network/vpn_commands.py:16:5: PLR0913 Too many arguments in function definition (8 > 5)
   |
16 | def get_openvpn_command(
   |     ^^^^^^^^^^^^^^^^^^^ PLR0913
17 |     config_path: Path,
18 |     auth_path: Path,
   |

src/nyord_vpn/network/vpn_commands.py:55:15: TRY003 Avoid specifying long messages outside the exception class
   |
53 |     # Validate required files
54 |     if not config_path.exists():
55 |         raise VPNConfigError(f"OpenVPN config file not found: {config_path}")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
56 |     if not auth_path.exists():
57 |         raise VPNConfigError(f"OpenVPN auth file not found: {auth_path}")
   |

src/nyord_vpn/network/vpn_commands.py:57:15: TRY003 Avoid specifying long messages outside the exception class
   |
55 |         raise VPNConfigError(f"OpenVPN config file not found: {config_path}")
56 |     if not auth_path.exists():
57 |         raise VPNConfigError(f"OpenVPN auth file not found: {auth_path}")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
58 |
59 |     # Validate file permissions (should be readable)
   |

src/nyord_vpn/network/vpn_commands.py:64:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
62 |         auth_path.read_bytes()
63 |     except (PermissionError, OSError) as e:
64 |         raise VPNConfigError(f"Cannot read OpenVPN files: {e}")
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
65 |
66 |     # Create log directory if needed
   |

src/nyord_vpn/network/vpn_commands.py:64:15: TRY003 Avoid specifying long messages outside the exception class
   |
62 |         auth_path.read_bytes()
63 |     except (PermissionError, OSError) as e:
64 |         raise VPNConfigError(f"Cannot read OpenVPN files: {e}")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
65 |
66 |     # Create log directory if needed
   |

src/nyord_vpn/network/vpn_commands.py:72:15: TRY003 Avoid specifying long messages outside the exception class
   |
70 |     # Validate verbosity level
71 |     if not 1 <= verbosity <= 6:
72 |         raise VPNConfigError(f"Invalid verbosity level: {verbosity} (must be 1-6)")
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
73 |
74 |     # Base command with common options
   |

src/nyord_vpn/storage/__init__.py:1:1: D104 Missing docstring in public package
src/nyord_vpn/storage/models.py:170:7: A001 Variable `ConnectionError` is shadowing a Python builtin
    |
170 | class ConnectionError(VPNError):
    |       ^^^^^^^^^^^^^^^ A001
171 |     """Exception for VPN connection establishment failures.
    |

src/nyord_vpn/storage/state.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/utils/connection.py:69:5: FBT001 Boolean-typed positional argument in function definition
   |
67 |     initial_ip: str | None,
68 |     connected_ip: str | None,
69 |     openvpn_running: bool,
   |     ^^^^^^^^^^^^^^^ FBT001
70 |     nord_status: bool | None = None,
71 | ) -> bool:
   |

src/nyord_vpn/utils/templates.py:62:9: TRY300 Consider moving this statement to an `else` block
   |
60 |     try:
61 |         actual_hash = calculate_sha256(path.read_bytes())
62 |         return actual_hash == expected_hash
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
63 |     except Exception as e:
64 |         log_debug("Failed to verify file integrity: {}", e)
   |

src/nyord_vpn/utils/templates.py:73:17: DTZ006 `datetime.datetime.fromtimestamp()` called without a `tz` argument
   |
71 |         if not CONFIG_ZIP.exists():
72 |             return None
73 |         mtime = datetime.fromtimestamp(CONFIG_ZIP.stat().st_mtime)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ006
74 |         return datetime.now() - mtime
75 |     except Exception as e:
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/nyord_vpn/utils/templates.py:74:16: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
72 |             return None
73 |         mtime = datetime.fromtimestamp(CONFIG_ZIP.stat().st_mtime)
74 |         return datetime.now() - mtime
   |                ^^^^^^^^^^^^^^ DTZ005
75 |     except Exception as e:
76 |         log_debug("Failed to get ZIP file age: {}", e)
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/nyord_vpn/utils/templates.py:102:17: S603 `subprocess` call: check for execution of untrusted input
    |
100 |         except PermissionError:
101 |             try:
102 |                 subprocess.run(
    |                 ^^^^^^^^^^^^^^ S603
103 |                     ["sudo", "chown", f"{user_id}:{group_id}", str(path)],
104 |                     check=True,
    |

src/nyord_vpn/utils/templates.py:103:21: S607 Starting a process with a partial executable path
    |
101 |             try:
102 |                 subprocess.run(
103 |                     ["sudo", "chown", f"{user_id}:{group_id}", str(path)],
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
104 |                     check=True,
105 |                     capture_output=True,
    |

src/nyord_vpn/utils/templates.py:108:23: TRY003 Avoid specifying long messages outside the exception class
    |
106 |                   )
107 |               except subprocess.CalledProcessError as e:
108 |                   raise VPNConfigError(
    |  _______________________^
109 | |                     f"Failed to set ownership with sudo: {e.stderr.decode()}"
110 | |                 ) from e
    | |_________________^ TRY003
111 |           log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
112 |       except Exception as e:
    |

src/nyord_vpn/utils/templates.py:113:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
111 |         log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
112 |     except Exception as e:
113 |         raise VPNConfigError(f"Failed to secure directory {path}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/utils/templates.py:113:15: TRY003 Avoid specifying long messages outside the exception class
    |
111 |         log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
112 |     except Exception as e:
113 |         raise VPNConfigError(f"Failed to secure directory {path}: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:127:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
125 |                       config.unlink()
126 |                       log_debug("Removed old config: {}", config)
127 | /                 except Exception as e:
128 | |                     log_debug("Failed to remove old config {}: {}", config, e)
    | |______________________________________________________________________________^ PERF203
129 |       except Exception as e:
130 |           log_debug("Failed to cleanup old configs: {}", e)
    |

src/nyord_vpn/utils/templates.py:143:26: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
141 |         try:
142 |             if attempt > 0:
143 |                 jitter = random.uniform(0, 0.1) * delay
    |                          ^^^^^^^^^^^^^^^^^^^^^^ S311
144 |                 sleep_time = delay + jitter
145 |                 log_debug(
    |

src/nyord_vpn/utils/templates.py:154:13: TRY300 Consider moving this statement to an `else` block
    |
152 |             content = response.content
153 |             content_hash = calculate_sha256(content)
154 |             return content, content_hash
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
155 |
156 |         except requests.RequestException as e:
    |

src/nyord_vpn/utils/templates.py:156:9: PERF203 `try`-`except` within a loop incurs performance overhead
    |
154 |               return content, content_hash
155 |
156 | /         except requests.RequestException as e:
157 | |             last_error = e
158 | |             if isinstance(e, requests.HTTPError) and (
159 | |                 400 <= e.response.status_code < 500 and e.response.status_code != 429
160 | |             ):
161 | |                 raise VPNConfigError(
162 | |                     f"Failed to download (HTTP {e.response.status_code}): {e}"
163 | |                 ) from e
164 | |             delay = min(delay * 2, MAX_RETRY_DELAY)
165 | |             log_debug(
166 | |                 "Download failed (attempt {}/{}): {}", attempt + 1, MAX_RETRIES, str(e)
167 | |             )
    | |_____________^ PERF203
168 |
169 |       if isinstance(last_error, requests.HTTPError):
    |

src/nyord_vpn/utils/templates.py:161:23: TRY003 Avoid specifying long messages outside the exception class
    |
159 |                   400 <= e.response.status_code < 500 and e.response.status_code != 429
160 |               ):
161 |                   raise VPNConfigError(
    |  _______________________^
162 | |                     f"Failed to download (HTTP {e.response.status_code}): {e}"
163 | |                 ) from e
    | |_________________^ TRY003
164 |               delay = min(delay * 2, MAX_RETRY_DELAY)
165 |               log_debug(
    |

src/nyord_vpn/utils/templates.py:170:15: TRY003 Avoid specifying long messages outside the exception class
    |
169 |       if isinstance(last_error, requests.HTTPError):
170 |           raise VPNConfigError(
    |  _______________^
171 | |             f"Failed to download after {MAX_RETRIES} retries "
172 | |             f"(HTTP {last_error.response.status_code}): {last_error}"
173 | |         ) from last_error
    | |_________^ TRY003
174 |       raise VPNConfigError(
175 |           f"Failed to download after {MAX_RETRIES} retries: {last_error}"
    |

src/nyord_vpn/utils/templates.py:174:11: TRY003 Avoid specifying long messages outside the exception class
    |
172 |               f"(HTTP {last_error.response.status_code}): {last_error}"
173 |           ) from last_error
174 |       raise VPNConfigError(
    |  ___________^
175 | |         f"Failed to download after {MAX_RETRIES} retries: {last_error}"
176 | |     ) from last_error
    | |_____^ TRY003
    |

src/nyord_vpn/utils/templates.py:197:31: TRY003 Avoid specifying long messages outside the exception class
    |
195 |                     extracted_path = CONFIG_DIR / zip_path
196 |                     if not verify_file_integrity(extracted_path, file_hash):
197 |                         raise VPNConfigError("Extracted file is corrupted")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
198 |                 except KeyError:
199 |                     tcp_configs = [
    |

src/nyord_vpn/utils/templates.py:207:21: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
205 |                       if tcp_configs:
206 |                           log_debug("Sample configs: {}", tcp_configs[:5])
207 | /                     raise VPNConfigError(
208 | |                         f"Config file {zip_path} not found in ZIP. "
209 | |                         f"ZIP contains {len(tcp_configs)} TCP configs."
210 | |                     )
    | |_____________________^ B904
211 |           except zipfile.BadZipFile as e:
212 |               with contextlib.suppress(Exception):
    |

src/nyord_vpn/utils/templates.py:207:27: TRY003 Avoid specifying long messages outside the exception class
    |
205 |                       if tcp_configs:
206 |                           log_debug("Sample configs: {}", tcp_configs[:5])
207 |                       raise VPNConfigError(
    |  ___________________________^
208 | |                         f"Config file {zip_path} not found in ZIP. "
209 | |                         f"ZIP contains {len(tcp_configs)} TCP configs."
210 | |                     )
    | |_____________________^ TRY003
211 |           except zipfile.BadZipFile as e:
212 |               with contextlib.suppress(Exception):
    |

src/nyord_vpn/utils/templates.py:214:19: TRY003 Avoid specifying long messages outside the exception class
    |
212 |             with contextlib.suppress(Exception):
213 |                 CONFIG_ZIP.unlink()
214 |             raise VPNConfigError(f"Corrupted ZIP file: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
215 |
216 |         extracted_path = CONFIG_DIR / zip_path
    |

src/nyord_vpn/utils/templates.py:220:17: TRY301 Abstract `raise` to an inner function
    |
218 |             extracted_path.rename(config_path)
219 |             if not verify_file_integrity(config_path, file_hash):
220 |                 raise VPNConfigError("Config file corrupted during move")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
221 |         except Exception as e:
222 |             raise VPNConfigError(f"Failed to move config file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:220:23: TRY003 Avoid specifying long messages outside the exception class
    |
218 |             extracted_path.rename(config_path)
219 |             if not verify_file_integrity(config_path, file_hash):
220 |                 raise VPNConfigError("Config file corrupted during move")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
221 |         except Exception as e:
222 |             raise VPNConfigError(f"Failed to move config file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:222:19: TRY003 Avoid specifying long messages outside the exception class
    |
220 |                 raise VPNConfigError("Config file corrupted during move")
221 |         except Exception as e:
222 |             raise VPNConfigError(f"Failed to move config file: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
223 |
224 |         with contextlib.suppress(FileNotFoundError, OSError):
    |

src/nyord_vpn/utils/templates.py:231:19: TRY003 Avoid specifying long messages outside the exception class
    |
229 |             log_debug("Set permissions on {}", config_path)
230 |         except Exception as e:
231 |             raise VPNConfigError(f"Failed to set config file permissions: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
232 |
233 |         return config_path
    |

src/nyord_vpn/utils/templates.py:233:9: TRY300 Consider moving this statement to an `else` block
    |
231 |             raise VPNConfigError(f"Failed to set config file permissions: {e}") from e
232 |
233 |         return config_path
    |         ^^^^^^^^^^^^^^^^^^ TRY300
234 |
235 |     except VPNConfigError:
    |

src/nyord_vpn/utils/templates.py:238:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
236 |         raise
237 |     except Exception as e:
238 |         raise VPNConfigError(f"Failed to extract configuration: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/utils/templates.py:238:15: TRY003 Avoid specifying long messages outside the exception class
    |
236 |         raise
237 |     except Exception as e:
238 |         raise VPNConfigError(f"Failed to extract configuration: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:241:5: C901 `download_config_zip` is too complex (12 > 10)
    |
241 | def download_config_zip() -> None:
    |     ^^^^^^^^^^^^^^^^^^^ C901
242 |     """Download and cache the OpenVPN configuration ZIP file."""
243 |     try:
    |

src/nyord_vpn/utils/templates.py:254:21: TRY301 Abstract `raise` to an inner function
    |
252 |                 temp_zip.chmod(0o600)
253 |                 if not verify_file_integrity(temp_zip, content_hash):
254 |                     raise VPNConfigError("Downloaded file corrupted during write")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
255 |             except Exception as e:
256 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:254:27: TRY003 Avoid specifying long messages outside the exception class
    |
252 |                 temp_zip.chmod(0o600)
253 |                 if not verify_file_integrity(temp_zip, content_hash):
254 |                     raise VPNConfigError("Downloaded file corrupted during write")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
255 |             except Exception as e:
256 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:256:23: TRY003 Avoid specifying long messages outside the exception class
    |
254 |                     raise VPNConfigError("Downloaded file corrupted during write")
255 |             except Exception as e:
256 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
257 |
258 |             try:
    |

src/nyord_vpn/utils/templates.py:266:31: TRY003 Avoid specifying long messages outside the exception class
    |
264 |                       ]
265 |                       if not tcp_configs:
266 |                           raise VPNConfigError(
    |  _______________________________^
267 | |                             "Downloaded ZIP contains no TCP configurations"
268 | |                         )
    | |_________________________^ TRY003
269 |                       log_debug("ZIP contains {} TCP configs", len(tcp_configs))
270 |               except zipfile.BadZipFile as e:
    |

src/nyord_vpn/utils/templates.py:271:23: TRY003 Avoid specifying long messages outside the exception class
    |
269 |                     log_debug("ZIP contains {} TCP configs", len(tcp_configs))
270 |             except zipfile.BadZipFile as e:
271 |                 raise VPNConfigError("Downloaded file is not a valid ZIP") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
272 |
273 |             try:
    |

src/nyord_vpn/utils/templates.py:276:21: TRY301 Abstract `raise` to an inner function
    |
274 |                 temp_zip.replace(CONFIG_ZIP)
275 |                 if not verify_file_integrity(CONFIG_ZIP, content_hash):
276 |                     raise VPNConfigError("ZIP file corrupted during move")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
277 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
278 |             except Exception as e:
    |

src/nyord_vpn/utils/templates.py:276:27: TRY003 Avoid specifying long messages outside the exception class
    |
274 |                 temp_zip.replace(CONFIG_ZIP)
275 |                 if not verify_file_integrity(CONFIG_ZIP, content_hash):
276 |                     raise VPNConfigError("ZIP file corrupted during move")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
277 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
278 |             except Exception as e:
    |

src/nyord_vpn/utils/templates.py:279:23: TRY003 Avoid specifying long messages outside the exception class
    |
277 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
278 |             except Exception as e:
279 |                 raise VPNConfigError(f"Failed to save ZIP file: {e}") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
280 |
281 |         except Exception:
    |

src/nyord_vpn/utils/templates.py:285:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
283 |                   if temp_zip.exists():
284 |                       temp_zip.unlink()
285 | /             except Exception:
286 | |                 pass
    | |____________________^ S110
287 |               raise
    |

src/nyord_vpn/utils/templates.py:292:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
290 |         raise
291 |     except Exception as e:
292 |         raise VPNConfigError(f"Failed to download/cache configurations: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/utils/templates.py:292:15: TRY003 Avoid specifying long messages outside the exception class
    |
290 |         raise
291 |     except Exception as e:
292 |         raise VPNConfigError(f"Failed to download/cache configurations: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:327:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
325 |             log_debug("Fixed config file permissions for {}", config_path)
326 |     except Exception as e:
327 |         raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
328 |
329 |     return config_path
    |

src/nyord_vpn/utils/templates.py:327:15: TRY003 Avoid specifying long messages outside the exception class
    |
325 |             log_debug("Fixed config file permissions for {}", config_path)
326 |     except Exception as e:
327 |         raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
328 |
329 |     return config_path
    |

src/nyord_vpn/utils/utils.py:138:34: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
136 |             # If in virtualenv, use nyord-vpn from virtualenv bin
137 |             if os.environ.get("VIRTUAL_ENV"):
138 |                 nyord_vpn_path = os.path.join(
    |                                  ^^^^^^^^^^^^ PTH118
139 |                     os.environ["VIRTUAL_ENV"], "bin", "nyord-vpn"
140 |                 )
    |

src/nyord_vpn/utils/utils.py:141:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
139 |                     os.environ["VIRTUAL_ENV"], "bin", "nyord-vpn"
140 |                 )
141 |                 if os.path.exists(nyord_vpn_path):
    |                    ^^^^^^^^^^^^^^ PTH110
142 |                     args = ["sudo", "-E", nyord_vpn_path, *cmd[1:]]
143 |                 else:
    |

src/nyord_vpn/utils/utils.py:160:13: S603 `subprocess` call: check for execution of untrusted input
    |
158 |                 logger.debug(f"Running command: {' '.join(args)}")
159 |
160 |             subprocess.run(args, env=env, check=True)
    |             ^^^^^^^^^^^^^^ S603
161 |             sys.exit(0)
162 |         except subprocess.CalledProcessError as e:
    |

src/nyord_vpn/utils/utils.py:183:9: TRY300 Consider moving this statement to an `else` block
    |
181 |     try:
182 |         os.kill(process_id, 0)
183 |         return True
    |         ^^^^^^^^^^^ TRY300
184 |     except OSError:
185 |         return False
    |

src/nyord_vpn/utils/utils.py:201:10: PTH123 `open()` should be replaced by `Path.open()`
    |
199 | # Load country ID mappings with fallback data
200 | try:
201 |     with open(COUNTRY_IDS_FILE) as f:
    |          ^^^^ PTH123
202 |         NORDVPN_COUNTRY_IDS: dict[str, str] = json.load(f)
203 | except (FileNotFoundError, json.JSONDecodeError):
    |

tests/conftest.py:12:26: ANN001 Missing type annotation for function argument `monkeypatch`
   |
11 | @pytest.fixture
12 | def mock_env_credentials(monkeypatch) -> None:
   |                          ^^^^^^^^^^^ ANN001
13 |     """Mock environment variables for testing."""
14 |     monkeypatch.setenv("NORD_USER", "test_user")
   |

tests/conftest.py:19:5: ANN201 Missing return type annotation for public function `mock_openvpn`
   |
18 | @pytest.fixture
19 | def mock_openvpn():
   |     ^^^^^^^^^^^^ ANN201
20 |     """Mock OpenVPN command."""
21 |     with patch("subprocess.run") as mock_run:
   |
   = help: Add return type annotation

tests/conftest.py:27:5: ANN201 Missing return type annotation for public function `mock_requests`
   |
26 | @pytest.fixture
27 | def mock_requests():
   |     ^^^^^^^^^^^^^ ANN201
28 |     """Mock requests for API calls."""
29 |     with patch("requests.get") as mock_get:
   |
   = help: Add return type annotation

tests/conftest.py:39:5: ANN201 Missing return type annotation for public function `mock_process`
   |
38 | @pytest.fixture
39 | def mock_process():
   |     ^^^^^^^^^^^^ ANN201
40 |     """Mock subprocess for OpenVPN."""
41 |     with patch("subprocess.Popen") as mock_popen:
   |
   = help: Add return type annotation

tests/conftest.py:48:5: ANN201 Missing return type annotation for public function `mock_client`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |     ^^^^^^^^^^^ ANN201
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |
   = help: Add return type annotation

tests/conftest.py:48:17: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                 ^^^^^^^^^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:39: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                       ^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:53: ANN001 Missing type annotation for function argument `mock_requests`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                                     ^^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:68: ANN001 Missing type annotation for function argument `mock_process`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                                                    ^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:71:5: ANN201 Missing return type annotation for public function `temp_config_file`
   |
70 | @pytest.fixture
71 | def temp_config_file(tmp_path):
   |     ^^^^^^^^^^^^^^^^ ANN201
72 |     """Create a temporary config file."""
73 |     config = {
   |
   = help: Add return type annotation

tests/conftest.py:71:22: ANN001 Missing type annotation for function argument `tmp_path`
   |
70 | @pytest.fixture
71 | def temp_config_file(tmp_path):
   |                      ^^^^^^^^ ANN001
72 |     """Create a temporary config file."""
73 |     config = {
   |

tests/conftest.py:86:5: ANN201 Missing return type annotation for public function `mock_ip_info`
   |
85 | @pytest.fixture
86 | def mock_ip_info():
   |     ^^^^^^^^^^^^ ANN201
87 |     """Mock IP info response."""
88 |     with patch("requests.get") as mock_get:
   |
   = help: Add return type annotation

tests/integration/test_config_loading.py:13:29: ANN001 Missing type annotation for function argument `temp_dir`
   |
12 | @pytest.mark.integration
13 | async def test_file_loading(temp_dir) -> None:
   |                             ^^^^^^^^ ANN001
14 |     """Test configuration loading from file."""
15 |     # Create config file with all options
   |

tests/integration/test_config_loading.py:50:47: ANN001 Missing type annotation for function argument `monkeypatch`
   |
49 | @pytest.mark.integration
50 | async def test_environment_loading_unprefixed(monkeypatch) -> None:
   |                                               ^^^^^^^^^^^ ANN001
51 |     """Test configuration loading from unprefixed environment variables."""
52 |     # Set environment variables
   |

tests/integration/test_config_loading.py:67:45: ANN001 Missing type annotation for function argument `monkeypatch`
   |
66 | @pytest.mark.integration
67 | async def test_environment_loading_prefixed(monkeypatch) -> None:
   |                                             ^^^^^^^^^^^ ANN001
68 |     """Test configuration loading from prefixed environment variables."""
69 |     # Set environment variables
   |

tests/integration/test_config_loading.py:84:47: ANN001 Missing type annotation for function argument `monkeypatch`
   |
83 | @pytest.mark.integration
84 | async def test_environment_loading_precedence(monkeypatch) -> None:
   |                                               ^^^^^^^^^^^ ANN001
85 |     """Test precedence between prefixed and unprefixed environment variables."""
86 |     # Set both prefixed and unprefixed variables
   |

tests/integration/test_config_loading.py:102:41: S106 Possible hardcoded password assigned to argument: "password"
    |
100 |     """Test configuration default values."""
101 |     # Test with minimal configuration
102 |     config = VPNConfig(username="test", password="test")
    |                                         ^^^^^^^^^^^^^^^ S106
103 |     assert config.username == "test"
104 |     assert config.password.get_secret_value() == "test"
    |

tests/integration/test_config_loading.py:112:41: S106 Possible hardcoded password assigned to argument: "password"
    |
111 |     # Test with VPNClient
112 |     client = VPNClient(username="test", password="test")
    |                                         ^^^^^^^^^^^^^^^ S106
113 |     assert client.config.username == "test"
114 |     assert client.config.password.get_secret_value() == "test"
    |

tests/integration/test_config_loading.py:123:39: ANN001 Missing type annotation for function argument `temp_dir`
    |
122 | @pytest.mark.integration
123 | async def test_config_file_precedence(temp_dir, monkeypatch) -> None:
    |                                       ^^^^^^^^ ANN001
124 |     """Test configuration loading precedence between file and environment."""
125 |     # Create config file
    |

tests/integration/test_config_loading.py:123:49: ANN001 Missing type annotation for function argument `monkeypatch`
    |
122 | @pytest.mark.integration
123 | async def test_config_file_precedence(temp_dir, monkeypatch) -> None:
    |                                                 ^^^^^^^^^^^ ANN001
124 |     """Test configuration loading precedence between file and environment."""
125 |     # Create config file
    |

tests/integration/test_config_loading.py:169:34: ANN001 Missing type annotation for function argument `temp_dir`
    |
168 | @pytest.mark.integration
169 | async def test_config_validation(temp_dir) -> None:
    |                                  ^^^^^^^^ ANN001
170 |     """Test configuration validation."""
171 |     # Test invalid retry attempts
    |

tests/integration/test_config_loading.py:242:24: ANN001 Missing type annotation for function argument `monkeypatch`
    |
242 | def test_load_from_env(monkeypatch) -> None:
    |                        ^^^^^^^^^^^ ANN001
243 |     """Test loading configuration from environment variables."""
244 |     # Set environment variables
    |

tests/integration/test_config_loading.py:299:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
297 |     empty_path = tmp_path / "empty.json"
298 |     empty_path.write_text("{}")
299 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
300 |         VPNConfig.from_file(empty_path)
    |

tests/integration/test_config_loading.py:303:30: ANN001 Missing type annotation for function argument `monkeypatch`
    |
303 | def test_invalid_environment(monkeypatch) -> None:
    |                              ^^^^^^^^^^^ ANN001
304 |     """Test handling of invalid environment variables."""
305 |     # Test missing required variables
    |

tests/integration/test_config_loading.py:306:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
304 |     """Test handling of invalid environment variables."""
305 |     # Test missing required variables
306 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
307 |         VPNConfig.from_env()
    |

tests/integration/test_config_loading.py:313:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
311 |     monkeypatch.setenv("NORDVPN_PASSWORD", TEST_PASSWORD.get_secret_value())
312 |     monkeypatch.setenv("NORDVPN_API_TIMEOUT", "invalid")
313 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
314 |         VPNConfig.from_env()
    |

tests/integration/test_connection.py:12:5: ANN001 Missing type annotation for function argument `mock_client`
   |
10 | @pytest.mark.asyncio
11 | async def test_connection_success(
12 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
13 |     mock_aiohttp_session,
14 |     mock_subprocess,
   |

tests/integration/test_connection.py:13:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
11 | async def test_connection_success(
12 |     mock_client,
13 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
14 |     mock_subprocess,
15 |     mock_pycountry,
   |

tests/integration/test_connection.py:14:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
12 |     mock_client,
13 |     mock_aiohttp_session,
14 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
15 |     mock_pycountry,
16 |     mock_env_credentials,
   |

tests/integration/test_connection.py:15:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
13 |     mock_aiohttp_session,
14 |     mock_subprocess,
15 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
16 |     mock_env_credentials,
17 | ) -> None:
   |

tests/integration/test_connection.py:16:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
14 |     mock_subprocess,
15 |     mock_pycountry,
16 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
17 | ) -> None:
18 |     """Test successful VPN connection."""
   |

tests/integration/test_connection.py:42:5: ANN001 Missing type annotation for function argument `mock_client`
   |
40 | @pytest.mark.asyncio
41 | async def test_connection_failure(
42 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
43 |     mock_aiohttp_session,
44 |     mock_subprocess,
   |

tests/integration/test_connection.py:43:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
41 | async def test_connection_failure(
42 |     mock_client,
43 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
44 |     mock_subprocess,
45 |     mock_pycountry,
   |

tests/integration/test_connection.py:44:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
42 |     mock_client,
43 |     mock_aiohttp_session,
44 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
45 |     mock_pycountry,
46 |     mock_env_credentials,
   |

tests/integration/test_connection.py:45:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
43 |     mock_aiohttp_session,
44 |     mock_subprocess,
45 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
46 |     mock_env_credentials,
47 | ) -> None:
   |

tests/integration/test_connection.py:46:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
44 |     mock_subprocess,
45 |     mock_pycountry,
46 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
47 | ) -> None:
48 |     """Test VPN connection failure handling."""
   |

tests/integration/test_connection.py:73:5: ANN001 Missing type annotation for function argument `mock_client`
   |
71 | @pytest.mark.asyncio
72 | async def test_country_selection(
73 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
74 |     mock_aiohttp_session,
75 |     mock_subprocess,
   |

tests/integration/test_connection.py:74:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
72 | async def test_country_selection(
73 |     mock_client,
74 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
75 |     mock_subprocess,
76 |     mock_pycountry,
   |

tests/integration/test_connection.py:75:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
73 |     mock_client,
74 |     mock_aiohttp_session,
75 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
76 |     mock_pycountry,
77 |     mock_env_credentials,
   |

tests/integration/test_connection.py:76:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
74 |     mock_aiohttp_session,
75 |     mock_subprocess,
76 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
77 |     mock_env_credentials,
78 | ) -> None:
   |

tests/integration/test_connection.py:77:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
75 |     mock_subprocess,
76 |     mock_pycountry,
77 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
78 | ) -> None:
79 |     """Test VPN country selection."""
   |

tests/integration/test_errors.py:18:5: ANN001 Missing type annotation for function argument `mock_client`
   |
16 | @pytest.mark.asyncio
17 | async def test_network_errors(
18 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
19 |     mock_aiohttp_session,
20 |     mock_subprocess,
   |

tests/integration/test_errors.py:19:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
17 | async def test_network_errors(
18 |     mock_client,
19 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
20 |     mock_subprocess,
21 |     mock_pycountry,
   |

tests/integration/test_errors.py:20:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
18 |     mock_client,
19 |     mock_aiohttp_session,
20 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
21 |     mock_pycountry,
22 |     mock_env_credentials,
   |

tests/integration/test_errors.py:21:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
19 |     mock_aiohttp_session,
20 |     mock_subprocess,
21 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
22 |     mock_env_credentials,
23 | ) -> None:
   |

tests/integration/test_errors.py:22:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
20 |     mock_subprocess,
21 |     mock_pycountry,
22 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
23 | ) -> None:
24 |     """Test handling of network-related errors."""
   |

tests/integration/test_errors.py:53:5: ANN001 Missing type annotation for function argument `mock_client`
   |
51 | @pytest.mark.asyncio
52 | async def test_subprocess_errors(
53 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
54 |     mock_aiohttp_session,
55 |     mock_subprocess,
   |

tests/integration/test_errors.py:54:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
52 | async def test_subprocess_errors(
53 |     mock_client,
54 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
55 |     mock_subprocess,
56 |     mock_pycountry,
   |

tests/integration/test_errors.py:55:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
53 |     mock_client,
54 |     mock_aiohttp_session,
55 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
56 |     mock_pycountry,
57 |     mock_env_credentials,
   |

tests/integration/test_errors.py:56:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
54 |     mock_aiohttp_session,
55 |     mock_subprocess,
56 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
57 |     mock_env_credentials,
58 | ) -> None:
   |

tests/integration/test_errors.py:57:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
55 |     mock_subprocess,
56 |     mock_pycountry,
57 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
58 | ) -> None:
59 |     """Test handling of subprocess-related errors."""
   |

tests/integration/test_errors.py:76:5: ANN001 Missing type annotation for function argument `mock_client`
   |
74 | @pytest.mark.asyncio
75 | async def test_configuration_errors(
76 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
77 |     mock_aiohttp_session,
78 |     mock_subprocess,
   |

tests/integration/test_errors.py:77:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
75 | async def test_configuration_errors(
76 |     mock_client,
77 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
78 |     mock_subprocess,
79 |     mock_pycountry,
   |

tests/integration/test_errors.py:78:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
76 |     mock_client,
77 |     mock_aiohttp_session,
78 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
79 |     mock_pycountry,
80 |     temp_dir,
   |

tests/integration/test_errors.py:79:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
77 |     mock_aiohttp_session,
78 |     mock_subprocess,
79 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
80 |     temp_dir,
81 | ) -> None:
   |

tests/integration/test_errors.py:80:5: ANN001 Missing type annotation for function argument `temp_dir`
   |
78 |     mock_subprocess,
79 |     mock_pycountry,
80 |     temp_dir,
   |     ^^^^^^^^ ANN001
81 | ) -> None:
82 |     """Test handling of configuration-related errors."""
   |

tests/integration/test_errors.py:113:5: ANN001 Missing type annotation for function argument `mock_client`
    |
111 | @pytest.mark.asyncio
112 | async def test_api_errors(
113 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
114 |     mock_aiohttp_session,
115 |     mock_subprocess,
    |

tests/integration/test_errors.py:114:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
112 | async def test_api_errors(
113 |     mock_client,
114 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
115 |     mock_subprocess,
116 |     mock_pycountry,
    |

tests/integration/test_errors.py:115:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
113 |     mock_client,
114 |     mock_aiohttp_session,
115 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
116 |     mock_pycountry,
117 |     mock_env_credentials,
    |

tests/integration/test_errors.py:116:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
114 |     mock_aiohttp_session,
115 |     mock_subprocess,
116 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
117 |     mock_env_credentials,
118 | ) -> None:
    |

tests/integration/test_errors.py:117:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
115 |     mock_subprocess,
116 |     mock_pycountry,
117 |     mock_env_credentials,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
118 | ) -> None:
119 |     """Test handling of API-related errors."""
    |

tests/integration/test_errors.py:140:5: ANN001 Missing type annotation for function argument `mock_client`
    |
138 | @pytest.mark.asyncio
139 | async def test_error_recovery(
140 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
141 |     mock_aiohttp_session,
142 |     mock_subprocess,
    |

tests/integration/test_errors.py:141:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
139 | async def test_error_recovery(
140 |     mock_client,
141 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
142 |     mock_subprocess,
143 |     mock_pycountry,
    |

tests/integration/test_errors.py:142:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
140 |     mock_client,
141 |     mock_aiohttp_session,
142 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
143 |     mock_pycountry,
144 | ) -> None:
    |

tests/integration/test_errors.py:143:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
141 |     mock_aiohttp_session,
142 |     mock_subprocess,
143 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
144 | ) -> None:
145 |     """Test error recovery behavior."""
    |

tests/integration/test_errors.py:196:11: F811 Redefinition of unused `test_network_errors` from line 17
    |
195 | @pytest.mark.asyncio
196 | async def test_network_errors() -> None:
    |           ^^^^^^^^^^^^^^^^^^^ F811
197 |     """Test handling of network errors."""
198 |     client = VPNClient(
    |
    = help: Remove definition: `test_network_errors`

tests/integration/test_errors.py:300:5: ANN001 Missing type annotation for function argument `mock_client`
    |
298 | @pytest.mark.asyncio
299 | async def test_cleanup_after_error(
300 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
301 |     mock_aiohttp_session,
302 |     mock_subprocess,
    |

tests/integration/test_errors.py:301:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
299 | async def test_cleanup_after_error(
300 |     mock_client,
301 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
302 |     mock_subprocess,
303 |     mock_pycountry,
    |

tests/integration/test_errors.py:302:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
300 |     mock_client,
301 |     mock_aiohttp_session,
302 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
303 |     mock_pycountry,
304 |     mock_env_credentials,
    |

tests/integration/test_errors.py:303:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
301 |     mock_aiohttp_session,
302 |     mock_subprocess,
303 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
304 |     mock_env_credentials,
305 | ) -> None:
    |

tests/integration/test_errors.py:304:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
302 |     mock_subprocess,
303 |     mock_pycountry,
304 |     mock_env_credentials,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
305 | ) -> None:
306 |     """Test cleanup after errors."""
    |

tests/integration/test_validation_integration.py:12:5: ANN201 Missing return type annotation for public function `clear_env`
   |
11 | @pytest.fixture(autouse=True)
12 | def clear_env():
   |     ^^^^^^^^^ ANN201
13 |     """Clear environment variables before each test."""
14 |     os.environ.pop("NORD_USER", None)
   |
   = help: Add return type annotation

tests/integration/test_validation_integration.py:36:35: S105 Possible hardcoded password assigned to: "NORD_PASSWORD"
   |
34 |     """Test invalid country with Njord API."""
35 |     os.environ["NORD_USER"] = "test_user"
36 |     os.environ["NORD_PASSWORD"] = "test_pass"
   |                                   ^^^^^^^^^^^ S105
37 |     with pytest.raises(VPNError):
38 |         client = NjordVPNClient()
   |

tests/integration/test_validation_integration.py:37:5: PT012 `pytest.raises()` block should contain a single simple statement
   |
35 |       os.environ["NORD_USER"] = "test_user"
36 |       os.environ["NORD_PASSWORD"] = "test_pass"
37 | /     with pytest.raises(VPNError):
38 | |         client = NjordVPNClient()
39 | |         client.connect("Invalid Country")
   | |_________________________________________^ PT012
   |

tests/integration/test_validation_integration.py:45:35: S105 Possible hardcoded password assigned to: "NORD_PASSWORD"
   |
43 |     """Test invalid country with Legacy API."""
44 |     os.environ["NORD_USER"] = "test_user"
45 |     os.environ["NORD_PASSWORD"] = "test_pass"
   |                                   ^^^^^^^^^^^ S105
46 |     with pytest.raises(VPNError):
47 |         client = LegacyVPNClient()
   |

tests/integration/test_validation_integration.py:46:5: PT012 `pytest.raises()` block should contain a single simple statement
   |
44 |       os.environ["NORD_USER"] = "test_user"
45 |       os.environ["NORD_PASSWORD"] = "test_pass"
46 | /     with pytest.raises(VPNError):
47 | |         client = LegacyVPNClient()
48 | |         client.connect("Invalid Country")
   | |_________________________________________^ PT012
   |

tests/test_client.py:8:25: ANN001 Missing type annotation for function argument `mock_client`
   |
 8 | def test_client_connect(mock_client) -> None:
   |                         ^^^^^^^^^^^ ANN001
 9 |     """Test VPN client connect."""
10 |     # Test successful connection
   |

tests/test_client.py:22:28: ANN001 Missing type annotation for function argument `mock_client`
   |
22 | def test_client_disconnect(mock_client) -> None:
   |                            ^^^^^^^^^^^ ANN001
23 |     """Test VPN client disconnect."""
24 |     # Connect first
   |

tests/test_client.py:36:32: ANN001 Missing type annotation for function argument `mock_client`
   |
36 | def test_client_list_countries(mock_client) -> None:
   |                                ^^^^^^^^^^^ ANN001
37 |     """Test VPN client country listing."""
38 |     countries = mock_client.list_countries()
   |

tests/test_client.py:45:32: ANN001 Missing type annotation for function argument `mock_client`
   |
45 | def test_client_error_handling(mock_client, mocker) -> None:
   |                                ^^^^^^^^^^^ ANN001
46 |     """Test VPN client error handling."""
47 |     # Mock API to raise error
   |

tests/test_client.py:45:45: ANN001 Missing type annotation for function argument `mocker`
   |
45 | def test_client_error_handling(mock_client, mocker) -> None:
   |                                             ^^^^^^ ANN001
46 |     """Test VPN client error handling."""
47 |     # Mock API to raise error
   |

tests/test_client.py:49:9: SLF001 Private member accessed: `_connect`
   |
47 |     # Mock API to raise error
48 |     mocker.patch.object(
49 |         mock_client._connect,
   |         ^^^^^^^^^^^^^^^^^^^^ SLF001
50 |         "__call__",
51 |         side_effect=VPNError("Test error"),
   |

tests/test_client.py:60:39: ANN001 Missing type annotation for function argument `mock_client`
   |
59 | @pytest.mark.asyncio
60 | async def test_client_context_manager(mock_client) -> None:
   |                                       ^^^^^^^^^^^ ANN001
61 |     """Test VPN client context manager."""
62 |     async with mock_client as client:
   |

tests/test_legacy_api.py:12:15: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
12 | def test_init(mock_env_credentials, mock_openvpn) -> None:
   |               ^^^^^^^^^^^^^^^^^^^^ ANN001
13 |     """Test LegacyVPNClient initialization."""
14 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:12:37: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
12 | def test_init(mock_env_credentials, mock_openvpn) -> None:
   |                                     ^^^^^^^^^^^^ ANN001
13 |     """Test LegacyVPNClient initialization."""
14 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:21:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
20 | def test_connect_success(
21 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
22 |     mock_openvpn,
23 |     mock_requests,
   |

tests/test_legacy_api.py:22:5: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
20 | def test_connect_success(
21 |     mock_env_credentials,
22 |     mock_openvpn,
   |     ^^^^^^^^^^^^ ANN001
23 |     mock_requests,
24 |     mock_process,
   |

tests/test_legacy_api.py:23:5: ANN001 Missing type annotation for function argument `mock_requests`
   |
21 |     mock_env_credentials,
22 |     mock_openvpn,
23 |     mock_requests,
   |     ^^^^^^^^^^^^^ ANN001
24 |     mock_process,
25 |     mock_ip_info,
   |

tests/test_legacy_api.py:24:5: ANN001 Missing type annotation for function argument `mock_process`
   |
22 |     mock_openvpn,
23 |     mock_requests,
24 |     mock_process,
   |     ^^^^^^^^^^^^ ANN001
25 |     mock_ip_info,
26 | ) -> None:
   |

tests/test_legacy_api.py:25:5: ANN001 Missing type annotation for function argument `mock_ip_info`
   |
23 |     mock_requests,
24 |     mock_process,
25 |     mock_ip_info,
   |     ^^^^^^^^^^^^ ANN001
26 | ) -> None:
27 |     """Test successful connection."""
   |

tests/test_legacy_api.py:33:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
32 | def test_connect_failure(
33 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
34 |     mock_openvpn,
35 |     mock_requests,
   |

tests/test_legacy_api.py:34:5: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
32 | def test_connect_failure(
33 |     mock_env_credentials,
34 |     mock_openvpn,
   |     ^^^^^^^^^^^^ ANN001
35 |     mock_requests,
36 |     mock_process,
   |

tests/test_legacy_api.py:35:5: ANN001 Missing type annotation for function argument `mock_requests`
   |
33 |     mock_env_credentials,
34 |     mock_openvpn,
35 |     mock_requests,
   |     ^^^^^^^^^^^^^ ANN001
36 |     mock_process,
37 | ) -> None:
   |

tests/test_legacy_api.py:36:5: ANN001 Missing type annotation for function argument `mock_process`
   |
34 |     mock_openvpn,
35 |     mock_requests,
36 |     mock_process,
   |     ^^^^^^^^^^^^ ANN001
37 | ) -> None:
38 |     """Test connection failure."""
   |

tests/test_legacy_api.py:45:29: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
45 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                             ^^^^^^^^^^^^^^^^^^^^ ANN001
46 |     """Test successful disconnection."""
47 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:45:51: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
45 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                                                   ^^^^^^^^^^^^ ANN001
46 |     """Test successful disconnection."""
47 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:45:65: ANN001 Missing type annotation for function argument `mock_process`
   |
45 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                                                                 ^^^^^^^^^^^^ ANN001
46 |     """Test successful disconnection."""
47 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:51:27: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
51 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                           ^^^^^^^^^^^^^^^^^^^^ ANN001
52 |     """Test status when connected."""
53 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:51:49: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
51 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                                                 ^^^^^^^^^^^^ ANN001
52 |     """Test status when connected."""
53 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:51:63: ANN001 Missing type annotation for function argument `mock_ip_info`
   |
51 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                                                               ^^^^^^^^^^^^ ANN001
52 |     """Test status when connected."""
53 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:61:25: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
61 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                         ^^^^^^^^^^^^^^^^^^^^ ANN001
62 |     """Test listing available countries."""
63 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:61:47: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
61 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                               ^^^^^^^^^^^^ ANN001
62 |     """Test listing available countries."""
63 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:61:61: ANN001 Missing type annotation for function argument `mock_requests`
   |
61 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                             ^^^^^^^^^^^^^ ANN001
62 |     """Test listing available countries."""
63 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:76:28: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
76 | def test_openvpn_not_found(mock_env_credentials) -> None:
   |                            ^^^^^^^^^^^^^^^^^^^^ ANN001
77 |     """Test OpenVPN not found error."""
78 |     with pytest.raises(VPNError, match="OpenVPN not found"):
   |

tests/test_legacy_api.py:82:27: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
82 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                           ^^^^^^^^^^^^^^^^^^^^ ANN001
83 |     """Test server not found error."""
84 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:82:49: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
82 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                 ^^^^^^^^^^^^ ANN001
83 |     """Test server not found error."""
84 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:82:63: ANN001 Missing type annotation for function argument `mock_requests`
   |
82 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                               ^^^^^^^^^^^^^ ANN001
83 |     """Test server not found error."""
84 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:91:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
90 | def test_config_download_error(
91 |     mock_env_credentials, mock_openvpn, mock_requests
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
92 | ) -> None:
93 |     """Test config download error."""
   |

tests/test_legacy_api.py:91:27: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
90 | def test_config_download_error(
91 |     mock_env_credentials, mock_openvpn, mock_requests
   |                           ^^^^^^^^^^^^ ANN001
92 | ) -> None:
93 |     """Test config download error."""
   |

tests/test_legacy_api.py:91:41: ANN001 Missing type annotation for function argument `mock_requests`
   |
90 | def test_config_download_error(
91 |     mock_env_credentials, mock_openvpn, mock_requests
   |                                         ^^^^^^^^^^^^^ ANN001
92 | ) -> None:
93 |     """Test config download error."""
   |

tests/test_legacy_api.py:101:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
100 | def test_process_error(
101 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
102 | ) -> None:
103 |     """Test process error handling."""
    |

tests/test_legacy_api.py:101:27: ANN001 Missing type annotation for function argument `mock_openvpn`
    |
100 | def test_process_error(
101 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                           ^^^^^^^^^^^^ ANN001
102 | ) -> None:
103 |     """Test process error handling."""
    |

tests/test_legacy_api.py:101:41: ANN001 Missing type annotation for function argument `mock_requests`
    |
100 | def test_process_error(
101 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                                         ^^^^^^^^^^^^^ ANN001
102 | ) -> None:
103 |     """Test process error handling."""
    |

tests/test_legacy_api.py:101:56: ANN001 Missing type annotation for function argument `mock_process`
    |
100 | def test_process_error(
101 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                                                        ^^^^^^^^^^^^ ANN001
102 | ) -> None:
103 |     """Test process error handling."""
    |

tests/test_server_manager.py:1:1: EXE001 Shebang is present but file is not executable
  |
1 | #!/usr/bin/env -S uv run -s
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^ EXE001
2 | # /// script
3 | # dependencies = ["pytest"]
  |

tests/test_server_manager.py:5:1: ERA001 Found commented-out code
  |
3 | # dependencies = ["pytest"]
4 | # ///
5 | # this_file: tests/test_server_manager.py
  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ ERA001
6 |
7 | """Tests for server manager functionality."""
  |
  = help: Remove commented-out code

tests/test_server_manager.py:17:5: ANN201 Missing return type annotation for public function `mock_api_client`
   |
16 | @pytest.fixture
17 | def mock_api_client():
   |     ^^^^^^^^^^^^^^^ ANN201
18 |     """Create a mock API client."""
19 |     client = MagicMock(spec=NordVPNAPIClient)
   |
   = help: Add return type annotation

tests/test_server_manager.py:26:5: ANN201 Missing return type annotation for public function `server_manager`
   |
25 | @pytest.fixture
26 | def server_manager(mock_api_client):
   |     ^^^^^^^^^^^^^^ ANN201
27 |     """Create a server manager instance."""
28 |     return ServerManager(mock_api_client)
   |
   = help: Add return type annotation

tests/test_server_manager.py:26:20: ANN001 Missing type annotation for function argument `mock_api_client`
   |
25 | @pytest.fixture
26 | def server_manager(mock_api_client):
   |                    ^^^^^^^^^^^^^^^ ANN001
27 |     """Create a server manager instance."""
28 |     return ServerManager(mock_api_client)
   |

tests/test_server_manager.py:31:33: ANN001 Missing type annotation for function argument `server_manager`
   |
31 | def test_openvpn_tcp_validation(server_manager) -> None:
   |                                 ^^^^^^^^^^^^^^ ANN001
32 |     """Test OpenVPN TCP technology validation."""
33 |     # Test regular OpenVPN TCP
   |

tests/test_server_manager.py:43:12: SLF001 Private member accessed: `_is_valid_server`
   |
41 |         ],
42 |     }
43 |     assert server_manager._is_valid_server(server) is True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
44 |
45 |     # Test OpenVPN TCP Dedicated
   |

tests/test_server_manager.py:55:12: SLF001 Private member accessed: `_is_valid_server`
   |
53 |         ],
54 |     }
55 |     assert server_manager._is_valid_server(server) is True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
56 |
57 |     # Test server without OpenVPN TCP
   |

tests/test_server_manager.py:68:12: SLF001 Private member accessed: `_is_valid_server`
   |
66 |         ],
67 |     }
68 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
69 |
70 |     # Test server with invalid technology format
   |

tests/test_server_manager.py:82:12: SLF001 Private member accessed: `_is_valid_server`
   |
80 |         ],
81 |     }
82 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
83 |
84 |     # Test server with empty technologies
   |

tests/test_server_manager.py:92:12: SLF001 Private member accessed: `_is_valid_server`
   |
90 |         "technologies": [],
91 |     }
92 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
93 |
94 |     # Test server with invalid hostname
   |

tests/test_server_manager.py:104:12: SLF001 Private member accessed: `_is_valid_server`
    |
102 |         ],
103 |     }
104 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
105 |
106 |     # Test server with invalid status
    |

tests/test_server_manager.py:116:12: SLF001 Private member accessed: `_is_valid_server`
    |
114 |         ],
115 |     }
116 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
117 |
118 |     # Test server with invalid load
    |

tests/test_server_manager.py:128:12: SLF001 Private member accessed: `_is_valid_server`
    |
126 |         ],
127 |     }
128 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
129 |
130 |     # Test server with invalid country code
    |

tests/test_server_manager.py:140:12: SLF001 Private member accessed: `_is_valid_server`
    |
138 |         ],
139 |     }
140 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
    |

tests/test_server_manager.py:143:27: ANN001 Missing type annotation for function argument `server_manager`
    |
143 | def test_server_filtering(server_manager, mock_api_client) -> None:
    |                           ^^^^^^^^^^^^^^ ANN001
144 |     """Test server filtering in get_servers_cache."""
145 |     # Mock API response with various server types
    |

tests/test_server_manager.py:143:43: ANN001 Missing type annotation for function argument `mock_api_client`
    |
143 | def test_server_filtering(server_manager, mock_api_client) -> None:
    |                                           ^^^^^^^^^^^^^^^ ANN001
144 |     """Test server filtering in get_servers_cache."""
145 |     # Mock API response with various server types
    |

Found 429 errors.

2025-02-24 18:44:39 - 39 files left unchanged

2025-02-24 18:44:39 - >>>
>>> Running type checks...
>>> TODO: Check the errors!
>>>
2025-02-24 18:44:39 - >>>
>>> Checking for _potentially_ unused code...
>>> TODO: Check the errors!
>>>
2025-02-24 18:44:39 - src/nyord_vpn/__main__.py:68: unused method 'update' (60% confidence)
src/nyord_vpn/api/api.py:83: unused method 'get_technologies' (60% confidence)
src/nyord_vpn/api/v1_countries.py:31: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/api/v1_groups.py:29: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_groups.py:39: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:32: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:49: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:62: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:75: unused variable 'technology_id' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:76: unused variable 'server_id' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:87: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:88: unused variable 'metadata' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:89: unused variable 'pivot' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:97: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:107: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:134: unused variable 'version' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:142: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:143: unused variable 'server_id' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:144: unused variable 'ip_id' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:154: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:156: unused variable 'station' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:157: unused variable 'ipv6_station' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:165: unused variable 'specifications' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:166: unused variable 'ips' (60% confidence)
src/nyord_vpn/api/v1_technologies.py:32: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:47: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:49: unused variable 'metadata' (60% confidence)
src/nyord_vpn/api/v2_servers.py:57: unused variable 'version' (60% confidence)
src/nyord_vpn/api/v2_servers.py:65: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:66: unused variable 'server_id' (60% confidence)
src/nyord_vpn/api/v2_servers.py:67: unused variable 'ip_id' (60% confidence)
src/nyord_vpn/api/v2_servers.py:93: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:103: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:116: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:127: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/api/v2_servers.py:144: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:159: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:161: unused variable 'station' (60% confidence)
src/nyord_vpn/api/v2_servers.py:162: unused variable 'ipv6_station' (60% confidence)
src/nyord_vpn/api/v2_servers.py:166: unused variable 'ips' (60% confidence)
src/nyord_vpn/api/v2_servers.py:167: unused variable 'specifications' (60% confidence)
src/nyord_vpn/core/api.py:71: unused variable 'BASE_API_V1_URL' (60% confidence)
src/nyord_vpn/core/api.py:99: unused variable 'use_cache' (100% confidence)
src/nyord_vpn/core/api.py:176: unused method 'get_country_by_name' (60% confidence)
src/nyord_vpn/core/api.py:184: unused method 'get_available_locations' (60% confidence)
src/nyord_vpn/core/api.py:196: unused method 'get_best_city' (60% confidence)
src/nyord_vpn/core/base.py:82: unused class 'NordVPNClient' (60% confidence)
src/nyord_vpn/core/base.py:127: unused method 'get_country_by_name' (60% confidence)
src/nyord_vpn/core/base.py:140: unused method 'get_available_locations' (60% confidence)
src/nyord_vpn/core/base.py:152: unused method 'get_best_city' (60% confidence)
src/nyord_vpn/core/base.py:171: unused variable 'use_cache' (100% confidence)
src/nyord_vpn/core/client.py:86: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/core/client.py:91: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/core/client.py:101: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/core/client.py:385: unused method 'init' (60% confidence)
src/nyord_vpn/core/client.py:439: unused method '_save_state' (60% confidence)
src/nyord_vpn/exceptions.py:108: unused class 'DisconnectionError' (60% confidence)
src/nyord_vpn/exceptions.py:124: unused class 'ServerNotFoundError' (60% confidence)
src/nyord_vpn/exceptions.py:156: unused class 'VPNServerError' (60% confidence)
src/nyord_vpn/exceptions.py:188: unused class 'VPNTimeoutError' (60% confidence)
src/nyord_vpn/exceptions.py:204: unused class 'VPNProcessError' (60% confidence)
src/nyord_vpn/exceptions.py:220: unused class 'VPNConnectionError' (60% confidence)
src/nyord_vpn/exceptions.py:236: unused class 'VPNDisconnectionError' (60% confidence)
src/nyord_vpn/network/server.py:81: unused variable 'metadata' (60% confidence)
src/nyord_vpn/network/server.py:112: unused function '_safe_get' (60% confidence)
src/nyord_vpn/network/server.py:119: unused function '_safe_str_get' (60% confidence)
src/nyord_vpn/network/server.py:129: unused function '_safe_dict_access' (60% confidence)
src/nyord_vpn/network/server.py:136: unused function '_safe_dict_cast' (60% confidence)
src/nyord_vpn/network/server.py:143: unused function '_safe_dict_get_str' (60% confidence)
src/nyord_vpn/network/server.py:149: unused function '_safe_dict_get_int' (60% confidence)
src/nyord_vpn/network/server.py:341: unused method 'fetch_server_info' (60% confidence)
src/nyord_vpn/network/server.py:557: unused method '_ping_server' (60% confidence)
src/nyord_vpn/network/server.py:665: unused method '_is_valid_server' (60% confidence)
src/nyord_vpn/network/server.py:722: unused attribute 'check_hostname' (60% confidence)
src/nyord_vpn/network/server.py:723: unused attribute 'verify_mode' (60% confidence)
src/nyord_vpn/network/server.py:806: unused method '_select_diverse_servers' (60% confidence)
src/nyord_vpn/network/server.py:948: unused method '_get_country_id' (60% confidence)
src/nyord_vpn/network/server.py:979: unused method 'get_random_country' (60% confidence)
src/nyord_vpn/network/server.py:1011: unused method 'get_country_info' (60% confidence)
src/nyord_vpn/network/vpn.py:126: unused attribute '_cached_ip' (60% confidence)
src/nyord_vpn/network/vpn.py:127: unused attribute '_cached_ip_time' (60% confidence)
src/nyord_vpn/network/vpn.py:128: unused attribute '_ip_cache_ttl' (60% confidence)
src/nyord_vpn/network/vpn.py:383: unused method '_save_state' (60% confidence)
src/nyord_vpn/network/vpn.py:1065: unused method 'check_connection_state' (60% confidence)
src/nyord_vpn/network/vpn.py:1113: unused attribute '_cached_ip' (60% confidence)
src/nyord_vpn/network/vpn.py:1114: unused attribute '_cached_ip_time' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:23: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:28: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:38: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/storage/models.py:63: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/storage/models.py:68: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/storage/models.py:96: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/storage/models.py:197: unused class 'AuthenticationError' (60% confidence)
src/nyord_vpn/storage/models.py:256: unused class 'StateError' (60% confidence)
src/nyord_vpn/storage/models.py:283: unused class 'CacheError' (60% confidence)
src/nyord_vpn/utils/connection.py:41: unused function 'is_openvpn_running' (60% confidence)
src/nyord_vpn/utils/connection.py:65: unused function 'compute_connection_status' (60% confidence)
src/nyord_vpn/utils/utils.py:91: unused variable 'OPENVPN_CONFIG' (60% confidence)
src/nyord_vpn/utils/utils.py:171: unused function 'is_process_running' (60% confidence)
src/nyord_vpn/utils/utils.py:202: unused variable 'NORDVPN_COUNTRY_IDS' (60% confidence)
src/nyord_vpn/utils/utils.py:205: unused variable 'NORDVPN_COUNTRY_IDS' (60% confidence)

2025-02-24 18:44:39 - >>>
>>> Running tests...
>>> TODO: Try to fix the problems, always think whether the test actually makes sense, then adjust the implementation or the test!
>>>
2025-02-24 18:44:41 - >>>
>>> Running repomix analysis...
>>> TODO: Check the output!
>>>
2025-02-24 18:44:43 - 
📦 Repomix v0.2.29

No custom config found at repomix.config.json or global config at /Users/adam/.config/repomix/repomix.config.json.
You can add a config file for additional settings. Please check https://github.com/yamadashy/repomix for more information.
⠙ Collecting files...
[2K[1A[2K[G⠹ Collect file... (42/52) tests/test_legacy_api.py
[2K[1A[2K[G⠸ Running security check... (19/50) src/nyord_vpn/network/vpn_commands.py
[2K[1A[2K[G⠼ Processing files...
[2K[1A[2K[G⠴ Processing file... (23/50) src/nyord_vpn/storage/models.py
[2K[1A[2K[G⠦ Calculating metrics...
[2K[1A[2K[G⠧ Calculating metrics...
[2K[1A[2K[G⠇ Calculating metrics...
[2K[1A[2K[G⠏ Calculating metrics...
[2K[1A[2K[G✔ Packing completed successfully!

📈 Top 5 Files by Character Count and Token Count:
──────────────────────────────────────────────────
1.  src/nyord_vpn/network/vpn.py (12,932 chars, 2,421 tokens)
2.  src/nyord_vpn/network/server.py (11,504 chars, 2,371 tokens)
3.  TODO.md (10,952 chars, 2,436 tokens)
4.  .cursor/rules/filetree.mdc (7,235 chars, 3,268 tokens)
5.  pyproject.toml (7,099 chars, 2,437 tokens)

🔎 Security Check:
──────────────────
✔ No suspicious files detected.

📊 Pack Summary:
────────────────
  Total Files: 50 files
  Total Chars: 132,133 chars
 Total Tokens: 31,924 tokens
       Output: nyord_vpn.txt
     Security: ✔ No suspicious files detected

🎉 All Done!
Your repository has been successfully packed.

💡 Repomix is now available in your browser! Try it at https://repomix.com

2025-02-24 18:44:43 - All checks completed
2025-02-24 18:44:43 - 
=== TODO.md ===
2025-02-24 18:44:43 - # TODO

Do it! Remember, keep it simple, effective, eyes on the goal!

### 0.1. Enhanced Server Selection

- [ ] Switch to v2/servers API for better efficiency:
  ```python
  def get_servers_cache() -> dict:
      """Fetch and cache full server list from v2/servers:
      1. Single API call to get all servers
      2. Cache for hour
      3. Local filtering by country/load/features
      """
  ```
- [ ] Implement fast server selection:
  ```python
  def select_fastest_server(country_code: str, servers: dict) -> str:
      """Select fastest server:
      1. Filter cached servers by country
      2. Take top 5 by load
      3. Parallel ping test
      4. Return fastest responding server
      """
  ```

### 0.2. Simplified Setup
- [ ] Create one-command initialization:
  ```bash
  nyord init  # Sets up everything needed
  ```
  - Validate OpenVPN installation
  - Create config directories
  - Set up credential storage
  - Test API connectivity
  - Generate initial config

### 0.3. API Usage Optimization
- [ ] Switch to https://api.nordvpn.com/v2/servers for server data fetching (the local "cached" file should be made compatible with the v2 format)
- [ ] Retire both https://api.nordvpn.com/v1/servers/countries and https://api.nordvpn.com/v1/servers/recommendations — the v2 API is better because we don't want a list of all countries in the world, just the ones that have servers :) 
  - Single API call instead of multiple v1 endpoints
  - Local filtering instead of multiple API requests
  - Simpler error handling (only one endpoint)

Keep it focused on these core improvements that directly enhance user experience.

### 0.4. Retry, switch gears

- [ ] Make sure that if the country is not specified, we choose the country randomly
- [ ] Implement a bool parameter "random" that chooses a random server (rather than "the fasterst") from the country 
- [ ] When we're connecting, we should retry connection once and if that's not successful, we should try another random server from the same country. See below for some ideas. 



### 0.5. ANALYSIS FOR "RETRY, SWITCH GEARS"

Out‐of‐the‐box, both re‑engage and tenacity are designed to re‑invoke your function with the same arguments on each attempt. They don’t automatically “step through” a list of alternative parameter values. 

That said, with tenacity you can customize the retry behavior by using callback hooks (such as the “after” hook) to modify the function’s keyword arguments between attempts. For example, you can write a small helper like this:

```python
from tenacity import retry, stop_after_attempt, RetryCallState

def update_B(new_value):
    def after_callback(retry_state: RetryCallState):
        # Update the value for the parameter "B" for the next attempt
        retry_state.kwargs['B'] = new_value
    return after_callback

# First, try with B=5 (the default).
# After two failures, update B to 7.
@retry(stop=stop_after_attempt(2), after=update_B(7))
def func(A, B=5):
    print(f"Attempt with B={B}")
    # Example failure condition
    if B < 11:
        raise Exception("Not high enough!")
    return f"Success with B={B}"

try:
    result = func("some_value")
except Exception as e:
    # You might even chain another retry that sets B to 11 after another round
    print("Initial retry block failed:", e)
    # You can re‑decorate or call a wrapper that uses the next parameter value.
    # For example, you could write a loop that tries B from a list [5,7,11]
    for new_B in [7, 11]:
        try:
            result = func("some_value", B=new_B)
            break
        except Exception:
            continue
    else:
        result = None

print("Result:", result)
```

In this example, the tenacity decorator’s “after” hook is used to modify the value of B for the next attempt. (A similar idea was discussed on Stack Overflow, where an answer demonstrated using an after‑callback to change a parameter dynamically.) citeturn0search0

If you need a more complex sequence (like “try with B=5, if that fails twice then use B=7, then 11”), you might either chain multiple decorators or, more simply, write a custom wrapper that iterates over your list of values and calls your function accordingly.

In summary, while neither library provides a one‑line decorator that automatically “steps” through alternative argument values, tenacity’s flexible callback hooks let you implement that behavior with a bit of extra code.

Both the **Re-Engage** and **Tenacity** libraries provide decorators for retrying functions until success or failure, but they do not natively support the specific use case of trying different arguments upon failure. However, you can implement this functionality using a combination of decorators and custom logic.

## 1. Overview of Libraries

### 1.1. Re-Engage
- **Re-Engage** is a fork of the original backoff library, designed for retrying function calls with decorators like `@backoff.on_exception` and `@backoff.on_predicate`. These decorators allow you to specify conditions under which to retry a function based on exceptions or return values[1].

### 1.2. Tenacity
- **Tenacity** is a general-purpose retrying library that simplifies adding retry behavior to functions. It allows for extensive customization through decorators like `@retry`, which can be configured with various parameters such as maximum attempts, delay between retries, and conditions for retrying[2].

## 2. Implementing Dynamic Argument Retrying

To achieve the desired behavior of trying different arguments after failures, you can create a custom decorator that wraps your function and manages the argument variations. Here’s an example implementation:

```python
from tenacity import retry, stop_after_attempt

def dynamic_retry(args_list):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for args in args_list:
                try:
                    return func(*args, **kwargs)
                except Exception as e:
                    print(f"Failed with args {args}: {e}")
            raise Exception("All attempts failed.")
        return wrapper
    return decorator

@dynamic_retry([(5,), (7,), (11,)])  # List of argument tuples
def my_function(b):
    # Simulate a function that may fail
    if b != 11:  # Let's say it fails unless b is 11
        raise ValueError("Failed!")
    return "Success!"

# Usage
result = my_function(5)  # This will try 5, then 7, then 11.
print(result)  # Outputs: Success!
```

### 2.1. Explanation:
- The `dynamic_retry` decorator takes a list of argument tuples.
- The `wrapper` function iterates over these arguments, attempting to call the target function.
- If an exception occurs, it catches the error, logs it, and moves on to the next set of arguments.
- If all attempts fail, it raises an exception.

## 3. Conclusion

While neither Re-Engage nor Tenacity directly supports dynamically changing function arguments upon failure out-of-the-box, you can implement this functionality using custom decorators. This approach allows you to maintain flexibility in your retry logic while leveraging the robust features provided by existing libraries.

Based on the search results and your specific question about retrying with different arguments, I'll provide a comprehensive answer about implementing such functionality.

Let me break this down step by step:

### 3.1. Current State of Retry Libraries

The common retry libraries like `tenacity` and `re-engage` focus primarily on retrying with the same arguments. While they're powerful for basic retry scenarios, they don't directly support changing arguments between retries [0].

### 3.2. Custom Solution Implementation

Here's a custom decorator implementation that allows retrying with different arguments:

```python
from functools import wraps
from typing import List, Any, Callable
import time

def retry_with_different_args(arg_sequences: List[Any], delay: int = 1):
    """
    Retry decorator that attempts the function with different argument values.
    
    Args:
        arg_sequences: List of values to try for the decorated function's first argument
        delay: Delay between retries in seconds
    """
    def decorator(func: Callable):
        @wraps(func)
        def wrapper(*args, **kwargs):
            last_exception = None
            
            # Replace the first argument with each value in the sequence
            for arg_value in arg_sequences:
                try:
                    new_args = (arg_value,) + args[1:]
                    return func(*new_args, **kwargs)
                except Exception as e:
                    last_exception = e
                    print(f"Attempt with value {arg_value} failed: {str(e)}")
                    time.sleep(delay)
            
            # If we get here, all attempts failed
            raise last_exception or Exception("All retry attempts failed")
            
        return wrapper
    return decorator
```

Example usage:

```python
# Example using the decorator
@retry_with_different_args([5, 7, 11])
def divide_number(divisor: int, number: int = 100):
    if divisor == 7:
        raise ValueError("Don't like 7")
    return number / divisor

# This will try with divisor=5, then 7, then 11
try:
    result = divide_number(5, number=100)
    print(f"Success: {result}")
except Exception as e:
    print(f"Final failure: {e}")
```

### 3.3. Key Points to Consider

1. **Flexibility**: This implementation allows you to specify a sequence of values to try for a specific argument [0].

2. **Error Handling**: Each attempt is wrapped in a try-except block, allowing you to catch and handle specific exceptions [0].

3. **Delay Control**: You can specify delays between attempts to prevent overwhelming systems [0].

### 3.4. Best Practices

1. **Specific Exceptions**: Always catch specific exceptions rather than using a broad Exception catch.

2. **Logging**: Include proper logging to track retry attempts and failures.

3. **Timeout Consideration**: Consider implementing an overall timeout mechanism.

4. **State Management**: Be careful with stateful operations when retrying with different arguments.

### 3.5. Alternative Approach Using Tenacity

While tenacity doesn't directly support changing arguments, you can achieve similar functionality by combining it with a custom retry strategy:

```python
from tenacity import retry, stop_after_attempt
from functools import partial

def retry_sequence(func, arg_sequences):
    for arg in arg_sequences:
        try:
            return func(arg)
        except Exception:
            continue
    raise Exception("All attempts failed")

# Usage example
@retry(stop=stop_after_attempt(1))
def wrapped_function(x):
    return retry_sequence(some_function, [5, 7, 11])
```

This solution provides a way to work with existing retry libraries while adding the functionality to try different arguments, though it's not as elegant as the custom decorator approach.
2025-02-24 18:44:43 -  M .cursor/rules/filetree.mdc
 M CLEANUP.txt
 M nyord_vpn.txt

2025-02-24 18:44:43 - Changes detected in repository
