2025-03-04 07:18:12 - 
=== Current Status ===
2025-03-04 07:18:12 - Error: LOG.md is missing
2025-03-04 07:18:12 - Error: .cursor/rules/0project.mdc is missing
2025-03-04 07:18:13 - [ 928]  .
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [9.6K]  filetree.mdc
│       └── [4.0K]  nyord-vpn.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 500]  .pre-commit-config.yaml
├── [ 128]  .specstory
│   └── [2.2K]  history
│       ├── [2.0K]  .what-is-this.md
│       ├── [452K]  2025-02-22_19-00-comparison-of-njord-and-nyord-vpn-implementations.md
│       ├── [ 913]  2025-02-22_19-00-fixing-logging-format-error-in-python.md
│       ├── [167K]  2025-02-22_20-24-managing-todos-and-development-tasks.md
│       ├── [8.3K]  2025-02-22_21-08-final-decision-and-todo-update.md
│       ├── [203K]  2025-02-22_21-21-git-management-and-todo-updates.md
│       ├── [ 39K]  2025-02-22_21-59-git-management-and-todo-updates.md
│       ├── [363K]  2025-02-22_22-27-git-management-and-todo-updates.md
│       ├── [ 52K]  2025-02-22_23-26-nordvpn-client-implementation-discussion.md
│       ├── [137K]  2025-02-22_23-35-task-management-and-project-update.md
│       ├── [ 58K]  2025-02-22_23-55-updating-todo-md-and-project-management.md
│       ├── [ 61K]  2025-02-23_00-02-task-management-and-collaboration-strategy.md
│       ├── [165K]  2025-02-23_00-09-updating-todo-md-and-task-prioritization.md
│       ├── [217K]  2025-02-23_01-01-codebase-analysis-and-optimization-discussion.md
│       ├── [101K]  2025-02-23_01-43-importerror-in-nyord-vpn-module.md
│       ├── [ 53K]  2025-02-23_01-55-understanding-vpn-cli-commands-and-issues.md
│       ├── [216K]  2025-02-23_02-15-python-virtual-environment-setup-and-testing.md
│       ├── [ 26K]  2025-02-23_02-34-vpn-connection-troubleshooting-with-python.md
│       ├── [189K]  2025-02-23_04-09-executing-python-vpn-connection-command.md
│       ├── [156K]  2025-02-23_04-56-vpn-connection-troubleshooting.md
│       ├── [ 44K]  2025-02-23_05-42-vpn-connection-status-troubleshooting.md
│       ├── [2.9K]  2025-02-23_05-54-comparing-vpn-management-tools-openpyn-vs-nyord.md
│       ├── [ 16K]  2025-02-23_06-04-untitled.md
│       ├── [ 16K]  2025-02-23_06-09-improving-nyord-vpn-server-selection-and-setup.md
│       ├── [ 76K]  2025-02-23_06-46-implementing-todo-items-in-project.md
│       ├── [156K]  2025-02-23_06-52-code-optimization-and-refactoring-discussion.md
│       ├── [227K]  2025-02-23_07-19-vpn-connection-troubleshooting-log.md
│       ├── [673K]  2025-02-23_07-30-vpn-connection-issues-and-server-selection-errors.md
│       ├── [432K]  2025-02-23_07-55-vpn-client-initialization-and-connection-logs.md
│       ├── [359K]  2025-02-23_08-03-nordvpn-client-initialization-logs.md
│       ├── [410K]  2025-02-23_08-18-vpn-client-frustrations-and-logs.md
│       ├── [6.0K]  2025-02-23_23-48-hierarchical-representation-of-codebase-structure.md
│       ├── [7.9K]  2025-02-23_23-48-nordvpn-client-codebase-organization.md
│       ├── [ 93K]  2025-02-24_00-09-code-analysis-and-docstring-enhancement.md
│       ├── [2.8K]  2025-02-24_01-16-vpn-configuration-file-retrieval-and-security.md
│       ├── [ 70K]  2025-02-24_01-29-improving-nyord-vpn-configuration-method.md
│       ├── [ 42K]  2025-02-24_01-47-openvpn-configuration-and-debugging.md
│       ├── [ 95K]  2025-02-24_02-10-vpn-connection-error-troubleshooting.md
│       ├── [ 58K]  2025-02-24_02-47-vpn-connection-troubleshooting-openvpn-auth-failure.md
│       ├── [ 12K]  2025-02-24_03-15-questioning-openvpn-command-location-in-code.md
│       ├── [ 20K]  2025-02-24_03-31-untitled.md
│       ├── [184K]  2025-02-24_03-36-zip-extraction-to-cache-directory.md
│       ├── [224K]  2025-02-24_04-13-vpn-connection-management-and-ip-tracking-issues.md
│       ├── [1.8M]  2025-02-24_04-43-vpn-connection-debugging-and-ip-verification.md
│       ├── [168K]  2025-02-24_05-02-optimizing-vpn-config-extraction-process.md
│       ├── [579K]  2025-02-24_05-33-vpn-connection-troubleshooting-and-debugging.md
│       ├── [287K]  2025-02-24_06-17-vpn-connection-management-with-nyord-vpn.md
│       ├── [210K]  2025-02-24_06-58-vpn-connection-troubleshooting.md
│       ├── [105K]  2025-02-24_07-15-vpn-connection-troubleshooting-and-improvements.md
│       ├── [6.2K]  2025-02-24_07-20-fixing-import-error-in-vpn-module.md
│       ├── [1006K]  2025-02-24_07-36-fixing-importerror-in-nyord-vpn-code.md
│       ├── [618K]  2025-02-24_07-57-vpn-server-connection-debugging.md
│       ├── [403K]  2025-02-24_08-01-vpn-server-selection-errors-and-debugging.md
│       ├── [245K]  2025-02-24_08-10-vpn-server-availability-issues.md
│       ├── [244K]  2025-02-24_17-19-vpn-country-resolution-issue.md
│       ├── [164K]  2025-02-24_17-43-vpn-connection-issue-no-servers-in-germany.md
│       ├── [ 20K]  2025-02-24_18-03-refining-api-documentation-and-structure.md
│       ├── [ 25K]  2025-02-24_18-41-script-modification-for-repomix-command.md
│       ├── [148K]  2025-02-24_19-08-tracking-todo-and-progress-updates.md
│       ├── [ 39K]  2025-02-24_19-49-review-and-update-project-documentation.md
│       ├── [ 59K]  2025-02-24_20-10-task-management-for-nyord-vpn-project.md
│       ├── [ 47K]  2025-02-24_20-54-placeholder-message.md
│       ├── [ 64K]  2025-02-24_21-51-codebase-review-and-task-prioritization.md
│       ├── [ 54K]  2025-02-24_22-08-reviewing-progress-and-todo-for-codebase-tasks.md
│       ├── [271K]  2025-02-24_23-18-updating-todo-and-progress-for-codebase.md
│       ├── [108K]  2025-02-25_00-29-codebase-todo-and-progress-update.md
│       ├── [128K]  2025-02-25_01-03-analyzing-nyord-vpn-cli-issues.md
│       ├── [582K]  2025-02-25_01-30-nyord-vpn-connection-and-validation-errors.md
│       └── [ 36K]  2025-02-25_01-56-minimizing-vpn-command-output-logs.md
├── [ 160]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [ 11K]  PROGRESS.md
├── [5.5K]  README.md
├── [ 17K]  TODO.md
├── [4.5K]  VIBE.txt
├── [ 13K]  cleanup.py
├── [  96]  dist
│   └── [   1]  .gitkeep
├── [151K]  nyord_vpn.txt
├── [ 426]  package.toml
├── [7.1K]  pyproject.toml
├── [ 192]  src
│   ├── [   0]  __init__.py
│   └── [ 448]  nyord_vpn
│       ├── [2.4K]  __init__.py
│       ├── [2.7K]  __main__.py
│       ├── [ 512]  api
│       │   ├── [ 327]  __init__.py
│       │   ├── [ 17K]  api.py
│       │   ├── [ 27K]  v1_countries.json
│       │   ├── [5.4K]  v1_countries.py
│       │   ├── [5.2K]  v1_groups.json
│       │   ├── [5.0K]  v1_groups.py
│       │   ├── [ 67K]  v1_recommendations.json
│       │   ├── [7.0K]  v1_recommendations.py
│       │   ├── [4.2K]  v1_technologies.json
│       │   ├── [3.9K]  v1_technologies.py
│       │   ├── [ 97K]  v2_servers.json
│       │   └── [ 11K]  v2_servers.py
│       ├── [ 256]  core
│       │   ├── [ 178]  __init__.py
│       │   ├── [ 12K]  api.py
│       │   ├── [8.2K]  base.py
│       │   └── [ 16K]  client.py
│       ├── [ 192]  data
│       │   ├── [  96]  .specstory
│       │   │   └── [  96]  history
│       │   │       └── [2.0K]  .what-is-this.md
│       │   ├── [ 93K]  countries.json
│       │   └── [ 963]  country_ids.json
│       ├── [6.8K]  exceptions.py
│       ├── [ 288]  network
│       │   ├── [ 204]  __init__.py
│       │   ├── [1.0K]  country.py
│       │   ├── [ 45K]  server.py
│       │   ├── [ 34K]  vpn.py
│       │   └── [ 14K]  vpn_commands.py
│       ├── [ 192]  scripts
│       │   ├── [  37]  __init__.py
│       │   └── [3.0K]  update_countries.py
│       ├── [ 224]  storage
│       │   ├── [ 212]  __init__.py
│       │   ├── [8.0K]  models.py
│       │   └── [4.0K]  state.py
│       └── [ 288]  utils
│           ├── [ 194]  __init__.py
│           ├── [3.8K]  connection.py
│           ├── [  64]  data
│           ├── [ 16K]  templates.py
│           └── [9.4K]  utils.py
├── [ 544]  tests
│   ├── [  40]  __init__.py
│   ├── [2.6K]  conftest.py
│   ├── [ 288]  integration
│   │   ├── [  39]  __init__.py
│   │   ├── [ 12K]  test_config_loading.py
│   │   ├── [2.9K]  test_connection.py
│   │   ├── [9.3K]  test_errors.py
│   │   └── [1.4K]  test_validation_integration.py
│   ├── [6.5K]  test_api.py
│   ├── [2.0K]  test_client.py
│   ├── [3.5K]  test_legacy_api.py
│   ├── [ 159]  test_package.py
│   ├── [6.4K]  test_server_manager.py
│   ├── [4.3K]  test_v1_countries.py
│   ├── [4.7K]  test_v1_groups.py
│   ├── [5.7K]  test_v1_recommendations.py
│   ├── [3.2K]  test_v1_technologies.py
│   └── [8.6K]  test_v2_servers.py
└── [266K]  uv.lock

22 directories, 141 files

2025-03-04 07:18:13 - 
Project structure:
2025-03-04 07:18:13 - [ 928]  .
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [9.6K]  filetree.mdc
│       └── [4.0K]  nyord-vpn.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 500]  .pre-commit-config.yaml
├── [ 128]  .specstory
│   └── [2.2K]  history
│       ├── [2.0K]  .what-is-this.md
│       ├── [452K]  2025-02-22_19-00-comparison-of-njord-and-nyord-vpn-implementations.md
│       ├── [ 913]  2025-02-22_19-00-fixing-logging-format-error-in-python.md
│       ├── [167K]  2025-02-22_20-24-managing-todos-and-development-tasks.md
│       ├── [8.3K]  2025-02-22_21-08-final-decision-and-todo-update.md
│       ├── [203K]  2025-02-22_21-21-git-management-and-todo-updates.md
│       ├── [ 39K]  2025-02-22_21-59-git-management-and-todo-updates.md
│       ├── [363K]  2025-02-22_22-27-git-management-and-todo-updates.md
│       ├── [ 52K]  2025-02-22_23-26-nordvpn-client-implementation-discussion.md
│       ├── [137K]  2025-02-22_23-35-task-management-and-project-update.md
│       ├── [ 58K]  2025-02-22_23-55-updating-todo-md-and-project-management.md
│       ├── [ 61K]  2025-02-23_00-02-task-management-and-collaboration-strategy.md
│       ├── [165K]  2025-02-23_00-09-updating-todo-md-and-task-prioritization.md
│       ├── [217K]  2025-02-23_01-01-codebase-analysis-and-optimization-discussion.md
│       ├── [101K]  2025-02-23_01-43-importerror-in-nyord-vpn-module.md
│       ├── [ 53K]  2025-02-23_01-55-understanding-vpn-cli-commands-and-issues.md
│       ├── [216K]  2025-02-23_02-15-python-virtual-environment-setup-and-testing.md
│       ├── [ 26K]  2025-02-23_02-34-vpn-connection-troubleshooting-with-python.md
│       ├── [189K]  2025-02-23_04-09-executing-python-vpn-connection-command.md
│       ├── [156K]  2025-02-23_04-56-vpn-connection-troubleshooting.md
│       ├── [ 44K]  2025-02-23_05-42-vpn-connection-status-troubleshooting.md
│       ├── [2.9K]  2025-02-23_05-54-comparing-vpn-management-tools-openpyn-vs-nyord.md
│       ├── [ 16K]  2025-02-23_06-04-untitled.md
│       ├── [ 16K]  2025-02-23_06-09-improving-nyord-vpn-server-selection-and-setup.md
│       ├── [ 76K]  2025-02-23_06-46-implementing-todo-items-in-project.md
│       ├── [156K]  2025-02-23_06-52-code-optimization-and-refactoring-discussion.md
│       ├── [227K]  2025-02-23_07-19-vpn-connection-troubleshooting-log.md
│       ├── [673K]  2025-02-23_07-30-vpn-connection-issues-and-server-selection-errors.md
│       ├── [432K]  2025-02-23_07-55-vpn-client-initialization-and-connection-logs.md
│       ├── [359K]  2025-02-23_08-03-nordvpn-client-initialization-logs.md
│       ├── [410K]  2025-02-23_08-18-vpn-client-frustrations-and-logs.md
│       ├── [6.0K]  2025-02-23_23-48-hierarchical-representation-of-codebase-structure.md
│       ├── [7.9K]  2025-02-23_23-48-nordvpn-client-codebase-organization.md
│       ├── [ 93K]  2025-02-24_00-09-code-analysis-and-docstring-enhancement.md
│       ├── [2.8K]  2025-02-24_01-16-vpn-configuration-file-retrieval-and-security.md
│       ├── [ 70K]  2025-02-24_01-29-improving-nyord-vpn-configuration-method.md
│       ├── [ 42K]  2025-02-24_01-47-openvpn-configuration-and-debugging.md
│       ├── [ 95K]  2025-02-24_02-10-vpn-connection-error-troubleshooting.md
│       ├── [ 58K]  2025-02-24_02-47-vpn-connection-troubleshooting-openvpn-auth-failure.md
│       ├── [ 12K]  2025-02-24_03-15-questioning-openvpn-command-location-in-code.md
│       ├── [ 20K]  2025-02-24_03-31-untitled.md
│       ├── [184K]  2025-02-24_03-36-zip-extraction-to-cache-directory.md
│       ├── [224K]  2025-02-24_04-13-vpn-connection-management-and-ip-tracking-issues.md
│       ├── [1.8M]  2025-02-24_04-43-vpn-connection-debugging-and-ip-verification.md
│       ├── [168K]  2025-02-24_05-02-optimizing-vpn-config-extraction-process.md
│       ├── [579K]  2025-02-24_05-33-vpn-connection-troubleshooting-and-debugging.md
│       ├── [287K]  2025-02-24_06-17-vpn-connection-management-with-nyord-vpn.md
│       ├── [210K]  2025-02-24_06-58-vpn-connection-troubleshooting.md
│       ├── [105K]  2025-02-24_07-15-vpn-connection-troubleshooting-and-improvements.md
│       ├── [6.2K]  2025-02-24_07-20-fixing-import-error-in-vpn-module.md
│       ├── [1006K]  2025-02-24_07-36-fixing-importerror-in-nyord-vpn-code.md
│       ├── [618K]  2025-02-24_07-57-vpn-server-connection-debugging.md
│       ├── [403K]  2025-02-24_08-01-vpn-server-selection-errors-and-debugging.md
│       ├── [245K]  2025-02-24_08-10-vpn-server-availability-issues.md
│       ├── [244K]  2025-02-24_17-19-vpn-country-resolution-issue.md
│       ├── [164K]  2025-02-24_17-43-vpn-connection-issue-no-servers-in-germany.md
│       ├── [ 20K]  2025-02-24_18-03-refining-api-documentation-and-structure.md
│       ├── [ 25K]  2025-02-24_18-41-script-modification-for-repomix-command.md
│       ├── [148K]  2025-02-24_19-08-tracking-todo-and-progress-updates.md
│       ├── [ 39K]  2025-02-24_19-49-review-and-update-project-documentation.md
│       ├── [ 59K]  2025-02-24_20-10-task-management-for-nyord-vpn-project.md
│       ├── [ 47K]  2025-02-24_20-54-placeholder-message.md
│       ├── [ 64K]  2025-02-24_21-51-codebase-review-and-task-prioritization.md
│       ├── [ 54K]  2025-02-24_22-08-reviewing-progress-and-todo-for-codebase-tasks.md
│       ├── [271K]  2025-02-24_23-18-updating-todo-and-progress-for-codebase.md
│       ├── [108K]  2025-02-25_00-29-codebase-todo-and-progress-update.md
│       ├── [128K]  2025-02-25_01-03-analyzing-nyord-vpn-cli-issues.md
│       ├── [582K]  2025-02-25_01-30-nyord-vpn-connection-and-validation-errors.md
│       └── [ 36K]  2025-02-25_01-56-minimizing-vpn-command-output-logs.md
├── [ 160]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [ 11K]  PROGRESS.md
├── [5.5K]  README.md
├── [ 17K]  TODO.md
├── [4.5K]  VIBE.txt
├── [ 13K]  cleanup.py
├── [  96]  dist
│   └── [   1]  .gitkeep
├── [151K]  nyord_vpn.txt
├── [ 426]  package.toml
├── [7.1K]  pyproject.toml
├── [ 192]  src
│   ├── [   0]  __init__.py
│   └── [ 448]  nyord_vpn
│       ├── [2.4K]  __init__.py
│       ├── [2.7K]  __main__.py
│       ├── [ 512]  api
│       │   ├── [ 327]  __init__.py
│       │   ├── [ 17K]  api.py
│       │   ├── [ 27K]  v1_countries.json
│       │   ├── [5.4K]  v1_countries.py
│       │   ├── [5.2K]  v1_groups.json
│       │   ├── [5.0K]  v1_groups.py
│       │   ├── [ 67K]  v1_recommendations.json
│       │   ├── [7.0K]  v1_recommendations.py
│       │   ├── [4.2K]  v1_technologies.json
│       │   ├── [3.9K]  v1_technologies.py
│       │   ├── [ 97K]  v2_servers.json
│       │   └── [ 11K]  v2_servers.py
│       ├── [ 256]  core
│       │   ├── [ 178]  __init__.py
│       │   ├── [ 12K]  api.py
│       │   ├── [8.2K]  base.py
│       │   └── [ 16K]  client.py
│       ├── [ 192]  data
│       │   ├── [  96]  .specstory
│       │   │   └── [  96]  history
│       │   │       └── [2.0K]  .what-is-this.md
│       │   ├── [ 93K]  countries.json
│       │   └── [ 963]  country_ids.json
│       ├── [6.8K]  exceptions.py
│       ├── [ 288]  network
│       │   ├── [ 204]  __init__.py
│       │   ├── [1.0K]  country.py
│       │   ├── [ 45K]  server.py
│       │   ├── [ 34K]  vpn.py
│       │   └── [ 14K]  vpn_commands.py
│       ├── [ 192]  scripts
│       │   ├── [  37]  __init__.py
│       │   └── [3.0K]  update_countries.py
│       ├── [ 224]  storage
│       │   ├── [ 212]  __init__.py
│       │   ├── [8.0K]  models.py
│       │   └── [4.0K]  state.py
│       └── [ 288]  utils
│           ├── [ 194]  __init__.py
│           ├── [3.8K]  connection.py
│           ├── [  64]  data
│           ├── [ 16K]  templates.py
│           └── [9.4K]  utils.py
├── [ 544]  tests
│   ├── [  40]  __init__.py
│   ├── [2.6K]  conftest.py
│   ├── [ 288]  integration
│   │   ├── [  39]  __init__.py
│   │   ├── [ 12K]  test_config_loading.py
│   │   ├── [2.9K]  test_connection.py
│   │   ├── [9.3K]  test_errors.py
│   │   └── [1.4K]  test_validation_integration.py
│   ├── [6.5K]  test_api.py
│   ├── [2.0K]  test_client.py
│   ├── [3.5K]  test_legacy_api.py
│   ├── [ 159]  test_package.py
│   ├── [6.4K]  test_server_manager.py
│   ├── [4.3K]  test_v1_countries.py
│   ├── [4.7K]  test_v1_groups.py
│   ├── [5.7K]  test_v1_recommendations.py
│   ├── [3.2K]  test_v1_technologies.py
│   └── [8.6K]  test_v2_servers.py
└── [266K]  uv.lock

22 directories, 141 files

2025-03-04 07:18:13 - On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .cursor/rules/filetree.mdc
	modified:   .pre-commit-config.yaml
	modified:   CLEANUP.txt
	modified:   cleanup.py

no changes added to commit (use "git add" and/or "git commit -a")

2025-03-04 07:18:13 - On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .cursor/rules/filetree.mdc
	modified:   .pre-commit-config.yaml
	modified:   CLEANUP.txt
	modified:   cleanup.py

no changes added to commit (use "git add" and/or "git commit -a")

2025-03-04 07:18:13 - 
=== Environment Status ===
2025-03-04 07:18:13 - Setting up virtual environment
2025-03-04 07:18:20 - Virtual environment created and activated
2025-03-04 07:18:20 - Installing package with all extras
2025-03-04 07:18:20 - Setting up virtual environment
2025-03-04 07:18:20 - Virtual environment created and activated
2025-03-04 07:18:34 - Package installed successfully
2025-03-04 07:18:34 - Running code quality checks
2025-03-04 07:18:34 - >>> Running code fixes...
2025-03-04 07:18:35 - src/__init__.py:1:1: D104 Missing docstring in public package
src/nyord_vpn/__main__.py:23:24: FBT001 Boolean-typed positional argument in function definition
   |
21 |     """NordVPN CLI interface."""
22 |
23 |     def __init__(self, verbose: bool = False) -> None:
   |                        ^^^^^^^ FBT001
24 |         """Initialize CLI.
   |

src/nyord_vpn/__main__.py:23:24: FBT002 Boolean default positional argument in function definition
   |
21 |     """NordVPN CLI interface."""
22 |
23 |     def __init__(self, verbose: bool = False) -> None:
   |                        ^^^^^^^ FBT002
24 |         """Initialize CLI.
   |

src/nyord_vpn/__main__.py:87:5: D401 First line of docstring should be in imperative mood: "Main entry point."
   |
86 | def main() -> None:
87 |     """Main entry point."""
   |     ^^^^^^^^^^^^^^^^^^^^^^^ D401
88 |     try:
89 |         fire.Fire(CLI)
   |

src/nyord_vpn/api/api.py:123:27: TRY003 Avoid specifying long messages outside the exception class
    |
121 |                   if self._recommended_servers is None:
122 |                       # Only raise if we don't have cached data
123 |                       raise VPNAPIError(
    |  ___________________________^
124 | |                         f"Failed to fetch recommended servers: {e}"
125 | |                     ) from e
    | |_____________________^ TRY003
126 |
127 |           return self._recommended_servers
    |

src/nyord_vpn/api/api.py:158:27: TRY003 Avoid specifying long messages outside the exception class
    |
156 |                 if self._technologies is None:
157 |                     # Only raise if we don't have cached data
158 |                     raise VPNAPIError(f"Failed to fetch technologies: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
159 |
160 |         return self._technologies
    |

src/nyord_vpn/api/api.py:189:27: TRY003 Avoid specifying long messages outside the exception class
    |
187 |                 if self._groups is None:
188 |                     # Only raise if we don't have cached data
189 |                     raise VPNAPIError(f"Failed to fetch groups: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
190 |
191 |         return self._groups
    |

src/nyord_vpn/api/api.py:220:27: TRY003 Avoid specifying long messages outside the exception class
    |
218 |                 if self._countries is None:
219 |                     # Only raise if we don't have cached data
220 |                     raise VPNAPIError(f"Failed to fetch countries: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
221 |
222 |         return self._countries
    |

src/nyord_vpn/api/api.py:248:27: TRY003 Avoid specifying long messages outside the exception class
    |
246 |                 if self._servers is None:
247 |                     # Only raise if we don't have cached data
248 |                     raise VPNAPIError(f"Failed to fetch servers: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
249 |
250 |         return self._servers
    |

src/nyord_vpn/api/api.py:252:9: C901 `find_best_server` is too complex (12 > 10)
    |
250 |         return self._servers
251 |
252 |     def find_best_server(
    |         ^^^^^^^^^^^^^^^^ C901
253 |         self,
254 |         country_code: str | None = None,
    |

src/nyord_vpn/api/api.py:368:23: TRY003 Avoid specifying long messages outside the exception class
    |
367 |               if not filtered_servers:
368 |                   raise ValueError(
    |  _______________________^
369 | |                     f"No servers found matching criteria: "
370 | |                     f"country_code={country_code}, group_identifier={group_identifier}, "
371 | |                     f"technology_identifier={technology_identifier}"
372 | |                 )
    | |_________________^ TRY003
373 |
374 |               return min(filtered_servers, key=lambda s: s.load)
    |

src/nyord_vpn/api/api.py:377:19: TRY003 Avoid specifying long messages outside the exception class
    |
376 |           except (requests.exceptions.RequestException, VPNAPIError) as e:
377 |               raise VPNAPIError(
    |  ___________________^
378 | |                 f"Failed to find best server using both v1 and v2 APIs: {e}"
379 | |             ) from e
    | |_____________^ TRY003
380 |
381 |       def get_server_stats(self) -> dict[str, Any]:
    |

src/nyord_vpn/api/api.py:460:23: TRY003 Avoid specifying long messages outside the exception class
    |
458 |                   }
459 |               except (VPNAPIError, requests.exceptions.RequestException) as e2:
460 |                   raise VPNAPIError(
    |  _______________________^
461 | |                     f"Failed to generate server statistics using both v1 and v2 APIs: {e2}"
462 | |                 ) from e2
    | |_________________^ TRY003
    |

src/nyord_vpn/api/v1_countries.py:102:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
100 |           except requests.exceptions.RequestException as e:
101 |               logger.error(f"Failed to fetch NordVPN countries: {e}")
102 | /             raise VPNAPIError(
103 | |                 "Failed to fetch countries from v1 API",
104 | |                 details=str(e),
105 | |                 cause=e,
106 | |             )
    | |_____________^ B904
107 |           except (ValueError, TypeError) as e:
108 |               logger.error(f"Failed to parse NordVPN countries: {e}")
    |

src/nyord_vpn/api/v1_countries.py:102:19: TRY003 Avoid specifying long messages outside the exception class
    |
100 |           except requests.exceptions.RequestException as e:
101 |               logger.error(f"Failed to fetch NordVPN countries: {e}")
102 |               raise VPNAPIError(
    |  ___________________^
103 | |                 "Failed to fetch countries from v1 API",
104 | |                 details=str(e),
105 | |                 cause=e,
106 | |             )
    | |_____________^ TRY003
107 |           except (ValueError, TypeError) as e:
108 |               logger.error(f"Failed to parse NordVPN countries: {e}")
    |

src/nyord_vpn/api/v1_countries.py:109:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
107 |           except (ValueError, TypeError) as e:
108 |               logger.error(f"Failed to parse NordVPN countries: {e}")
109 | /             raise VPNAPIError(
110 | |                 "Failed to parse countries from v1 API",
111 | |                 details=str(e),
112 | |                 cause=e,
113 | |             )
    | |_____________^ B904
    |

src/nyord_vpn/api/v1_countries.py:109:19: TRY003 Avoid specifying long messages outside the exception class
    |
107 |           except (ValueError, TypeError) as e:
108 |               logger.error(f"Failed to parse NordVPN countries: {e}")
109 |               raise VPNAPIError(
    |  ___________________^
110 | |                 "Failed to parse countries from v1 API",
111 | |                 details=str(e),
112 | |                 cause=e,
113 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/api/v1_countries.py:142:11: TRY003 Avoid specifying long messages outside the exception class
    |
140 |         if country.code.upper() == country_code.upper():
141 |             return country
142 |     raise ValueError(f"No country found with code: {country_code}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_countries.py:196:11: TRY003 Avoid specifying long messages outside the exception class
    |
194 |         if city.name.lower() == city_name.lower():
195 |             return city
196 |     raise ValueError(f"No city found with name '{city_name}' in {country.name}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_groups.py:115:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
113 |           except requests.exceptions.RequestException as e:
114 |               logger.error(f"Failed to fetch NordVPN server groups: {e}")
115 | /             raise VPNAPIError(
116 | |                 "Failed to fetch server groups from v1 API",
117 | |                 details=str(e),
118 | |                 cause=e,
119 | |             )
    | |_____________^ B904
120 |           except (ValueError, TypeError) as e:
121 |               logger.error(f"Failed to parse NordVPN server groups: {e}")
    |

src/nyord_vpn/api/v1_groups.py:115:19: TRY003 Avoid specifying long messages outside the exception class
    |
113 |           except requests.exceptions.RequestException as e:
114 |               logger.error(f"Failed to fetch NordVPN server groups: {e}")
115 |               raise VPNAPIError(
    |  ___________________^
116 | |                 "Failed to fetch server groups from v1 API",
117 | |                 details=str(e),
118 | |                 cause=e,
119 | |             )
    | |_____________^ TRY003
120 |           except (ValueError, TypeError) as e:
121 |               logger.error(f"Failed to parse NordVPN server groups: {e}")
    |

src/nyord_vpn/api/v1_groups.py:122:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
120 |           except (ValueError, TypeError) as e:
121 |               logger.error(f"Failed to parse NordVPN server groups: {e}")
122 | /             raise VPNAPIError(
123 | |                 "Failed to parse server groups from v1 API",
124 | |                 details=str(e),
125 | |                 cause=e,
126 | |             )
    | |_____________^ B904
    |

src/nyord_vpn/api/v1_groups.py:122:19: TRY003 Avoid specifying long messages outside the exception class
    |
120 |           except (ValueError, TypeError) as e:
121 |               logger.error(f"Failed to parse NordVPN server groups: {e}")
122 |               raise VPNAPIError(
    |  ___________________^
123 | |                 "Failed to parse server groups from v1 API",
124 | |                 details=str(e),
125 | |                 cause=e,
126 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/api/v1_groups.py:178:11: TRY003 Avoid specifying long messages outside the exception class
    |
176 |         if group.identifier == identifier:
177 |             return group
178 |     raise ValueError(f"No group found with identifier: {identifier}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_recommendations.py:227:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
225 |           except requests.exceptions.RequestException as e:
226 |               logger.error(f"Failed to fetch NordVPN server recommendations: {e}")
227 | /             raise VPNAPIError(
228 | |                 "Failed to fetch recommended servers from v1 API",
229 | |                 details=str(e),
230 | |                 cause=e,
231 | |             )
    | |_____________^ B904
232 |           except (ValueError, TypeError) as e:
233 |               logger.error(f"Failed to parse NordVPN server recommendations: {e}")
    |

src/nyord_vpn/api/v1_recommendations.py:227:19: TRY003 Avoid specifying long messages outside the exception class
    |
225 |           except requests.exceptions.RequestException as e:
226 |               logger.error(f"Failed to fetch NordVPN server recommendations: {e}")
227 |               raise VPNAPIError(
    |  ___________________^
228 | |                 "Failed to fetch recommended servers from v1 API",
229 | |                 details=str(e),
230 | |                 cause=e,
231 | |             )
    | |_____________^ TRY003
232 |           except (ValueError, TypeError) as e:
233 |               logger.error(f"Failed to parse NordVPN server recommendations: {e}")
    |

src/nyord_vpn/api/v1_recommendations.py:234:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
232 |           except (ValueError, TypeError) as e:
233 |               logger.error(f"Failed to parse NordVPN server recommendations: {e}")
234 | /             raise VPNAPIError(
235 | |                 "Failed to parse recommended servers from v1 API",
236 | |                 details=str(e),
237 | |                 cause=e,
238 | |             )
    | |_____________^ B904
    |

src/nyord_vpn/api/v1_recommendations.py:234:19: TRY003 Avoid specifying long messages outside the exception class
    |
232 |           except (ValueError, TypeError) as e:
233 |               logger.error(f"Failed to parse NordVPN server recommendations: {e}")
234 |               raise VPNAPIError(
    |  ___________________^
235 | |                 "Failed to parse recommended servers from v1 API",
236 | |                 details=str(e),
237 | |                 cause=e,
238 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/api/v1_technologies.py:93:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
91 |           except requests.exceptions.RequestException as e:
92 |               logger.error(f"Failed to fetch NordVPN technologies: {e}")
93 | /             raise VPNAPIError(
94 | |                 "Failed to fetch technologies from v1 API",
95 | |                 details=str(e),
96 | |                 cause=e,
97 | |             )
   | |_____________^ B904
98 |           except (ValueError, TypeError) as e:
99 |               logger.error(f"Failed to parse NordVPN technologies: {e}")
   |

src/nyord_vpn/api/v1_technologies.py:93:19: TRY003 Avoid specifying long messages outside the exception class
   |
91 |           except requests.exceptions.RequestException as e:
92 |               logger.error(f"Failed to fetch NordVPN technologies: {e}")
93 |               raise VPNAPIError(
   |  ___________________^
94 | |                 "Failed to fetch technologies from v1 API",
95 | |                 details=str(e),
96 | |                 cause=e,
97 | |             )
   | |_____________^ TRY003
98 |           except (ValueError, TypeError) as e:
99 |               logger.error(f"Failed to parse NordVPN technologies: {e}")
   |

src/nyord_vpn/api/v1_technologies.py:100:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
 98 |           except (ValueError, TypeError) as e:
 99 |               logger.error(f"Failed to parse NordVPN technologies: {e}")
100 | /             raise VPNAPIError(
101 | |                 "Failed to parse technologies from v1 API",
102 | |                 details=str(e),
103 | |                 cause=e,
104 | |             )
    | |_____________^ B904
    |

src/nyord_vpn/api/v1_technologies.py:100:19: TRY003 Avoid specifying long messages outside the exception class
    |
 98 |           except (ValueError, TypeError) as e:
 99 |               logger.error(f"Failed to parse NordVPN technologies: {e}")
100 |               raise VPNAPIError(
    |  ___________________^
101 | |                 "Failed to parse technologies from v1 API",
102 | |                 details=str(e),
103 | |                 cause=e,
104 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/api/v1_technologies.py:135:11: TRY003 Avoid specifying long messages outside the exception class
    |
133 |         if tech.identifier == identifier:
134 |             return tech
135 |     raise ValueError(f"No technology found with identifier: {identifier}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v2_servers.py:272:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
270 |                   try:
271 |                       parsed_data[key] = adapter.validate_python(data[key])
272 | /                 except (KeyError, ValueError, TypeError) as err:
273 | |                     logger.error(f"Failed to parse {key} data: {err}")
274 | |                     raise VPNAPIError(
275 | |                         f"Failed to parse {key} data from v2 API",
276 | |                         details=str(err),
277 | |                         cause=err,
278 | |                     ) from err
    | |______________________________^ PERF203
279 |
280 |               # Create lookup maps for efficient linking
    |

src/nyord_vpn/api/v2_servers.py:274:27: TRY003 Avoid specifying long messages outside the exception class
    |
272 |                   except (KeyError, ValueError, TypeError) as err:
273 |                       logger.error(f"Failed to parse {key} data: {err}")
274 |                       raise VPNAPIError(
    |  ___________________________^
275 | |                         f"Failed to parse {key} data from v2 API",
276 | |                         details=str(err),
277 | |                         cause=err,
278 | |                     ) from err
    | |_____________________^ TRY003
279 |
280 |               # Create lookup maps for efficient linking
    |

src/nyord_vpn/api/v2_servers.py:305:19: TRY003 Avoid specifying long messages outside the exception class
    |
303 |           except requests.exceptions.RequestException as error:
304 |               logger.error(f"Failed to fetch NordVPN server data: {error}")
305 |               raise VPNAPIError(
    |  ___________________^
306 | |                 "Failed to fetch server data from v2 API",
307 | |                 details=str(error),
308 | |                 cause=error,
309 | |             ) from error
    | |_____________^ TRY003
310 |
311 |       def _link_server_relations(
    |

src/nyord_vpn/core/api.py:103:33: ARG002 Unused method argument: `use_cache`
    |
101 |         self.logger = logger
102 |
103 |     def list_countries(self, *, use_cache: bool = True) -> list[Country]:
    |                                 ^^^^^^^^^ ARG002
104 |         """Fetch list of available server countries.
    |

src/nyord_vpn/core/api.py:149:13: TRY300 Consider moving this statement to an `else` block
    |
147 |             }
148 |             cache_countries(cache_data)
149 |             return countries
    |             ^^^^^^^^^^^^^^^^ TRY300
150 |
151 |         except RequestException as e:
    |

src/nyord_vpn/core/api.py:246:17: PERF401 Use `list.extend` to create a transformed list
    |
244 |             )
245 |             for city in sorted(country["cities"], key=lambda x: x["name"]):
246 |                 locations.append(f"  {city['name']} - {city['serverCount']} servers")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
247 |         return locations
    |
    = help: Replace for loop with list.extend

src/nyord_vpn/core/api.py:250:37: ARG002 Unused method argument: `use_cache`
    |
249 |     def get_best_city(
250 |         self, country_code: str, *, use_cache: bool = True
    |                                     ^^^^^^^^^ ARG002
251 |     ) -> City | None:
252 |         """Get the best city in a country for VPN connection.
    |

src/nyord_vpn/core/api.py:308:48: ARG002 Unused method argument: `use_cache`
    |
306 |         return self.list_countries(use_cache=True)
307 |
308 |     def get_cities(self, country_code: str, *, use_cache: bool = True) -> list[City]:
    |                                                ^^^^^^^^^ ARG002
309 |         """Get cities in a specific country.
    |

src/nyord_vpn/core/api.py:368:13: TRY300 Consider moving this statement to an `else` block
    |
366 |             )
367 |             response.raise_for_status()
368 |             return True
    |             ^^^^^^^^^^^ TRY300
369 |         except Exception as e:
370 |             if self.verbose:
    |

src/nyord_vpn/core/api.py:371:72: TRY401 Redundant exception object included in `logging.exception` call
    |
369 |         except Exception as e:
370 |             if self.verbose:
371 |                 self.logger.exception(f"API connectivity test failed: {e}")
    |                                                                        ^ TRY401
372 |             return False
    |

src/nyord_vpn/core/base.py:250:30: ANN003 Missing type annotation for `**kwargs`
    |
248 |         return sorted_cities[0] if sorted_cities else None
249 |
250 |     def list_countries(self, **kwargs) -> list[Country]:
    |                              ^^^^^^^^ ANN003
251 |         """List all countries with server information.
    |

src/nyord_vpn/core/base.py:250:32: ARG002 Unused method argument: `kwargs`
    |
248 |         return sorted_cities[0] if sorted_cities else None
249 |
250 |     def list_countries(self, **kwargs) -> list[Country]:
    |                                ^^^^^^ ARG002
251 |         """List all countries with server information.
    |

src/nyord_vpn/core/client.py:55:23: FBT001 Boolean-typed positional argument in function definition
   |
54 | # Update logger configuration to respect verbose flag
55 | def configure_logging(verbose: bool = False) -> None:
   |                       ^^^^^^^ FBT001
56 |     """Configure logging based on verbose mode."""
57 |     # Set default level to WARNING when not in verbose mode
   |

src/nyord_vpn/core/client.py:55:23: FBT002 Boolean default positional argument in function definition
   |
54 | # Update logger configuration to respect verbose flag
55 | def configure_logging(verbose: bool = False) -> None:
   |                       ^^^^^^^ FBT002
56 |     """Configure logging based on verbose mode."""
57 |     # Set default level to WARNING when not in verbose mode
   |

src/nyord_vpn/core/client.py:229:19: TRY003 Avoid specifying long messages outside the exception class
    |
228 |           if not self.username or not self.password:
229 |               raise VPNError(
    |  ___________________^
230 | |                 "Missing VPN credentials. "
231 | |                 "Please provide username and password or set NORD_USER and NORD_PASSWORD environment variables."
232 | |             )
    | |_____________^ TRY003
233 |
234 |           # Initialize components in the correct order
    |

src/nyord_vpn/core/client.py:286:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
284 |               # First check if we're already connected
285 |               status = self.status()
286 | /             if status.get("connected", False):
287 | |                 # VPN manager will handle disconnection automatically
288 | |                 if self.verbose:
    | |________________________________^ SIM102
289 |                       self.logger.info(
290 |                           "Already connected, will disconnect before connecting to new server"
    |
    = help: Combine `if` statements using `and`

src/nyord_vpn/core/client.py:296:17: TRY301 Abstract `raise` to an inner function
    |
294 |             servers = self.server_manager.select_fastest_server(country_code)
295 |             if not servers:
296 |                 raise VPNError(f"No servers available in {country_code}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
297 |
298 |             # Take the first (fastest) server
    |

src/nyord_vpn/core/client.py:296:23: TRY003 Avoid specifying long messages outside the exception class
    |
294 |             servers = self.server_manager.select_fastest_server(country_code)
295 |             if not servers:
296 |                 raise VPNError(f"No servers available in {country_code}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
297 |
298 |             # Take the first (fastest) server
    |

src/nyord_vpn/core/client.py:302:17: TRY301 Abstract `raise` to an inner function
    |
300 |             hostname = server.get("hostname")
301 |             if not hostname:
302 |                 raise VPNError("Selected server has no hostname")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
303 |
304 |             if self.verbose:
    |

src/nyord_vpn/core/client.py:302:23: TRY003 Avoid specifying long messages outside the exception class
    |
300 |             hostname = server.get("hostname")
301 |             if not hostname:
302 |                 raise VPNError("Selected server has no hostname")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
303 |
304 |             if self.verbose:
    |

src/nyord_vpn/core/client.py:310:17: TRY301 Abstract `raise` to an inner function
    |
308 |             # Set up VPN configuration
309 |             if not self.username or not self.password:
310 |                 raise VPNError("Missing VPN credentials")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
311 |             self.vpn_manager.setup_connection(hostname, self.username, self.password)
    |

src/nyord_vpn/core/client.py:310:23: TRY003 Avoid specifying long messages outside the exception class
    |
308 |             # Set up VPN configuration
309 |             if not self.username or not self.password:
310 |                 raise VPNError("Missing VPN credentials")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
311 |             self.vpn_manager.setup_connection(hostname, self.username, self.password)
    |

src/nyord_vpn/core/client.py:334:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
333 |         except Exception as e:
334 |             raise VPNError(f"Failed to connect: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
335 |
336 |     def bye(self) -> None:
    |

src/nyord_vpn/core/client.py:334:19: TRY003 Avoid specifying long messages outside the exception class
    |
333 |         except Exception as e:
334 |             raise VPNError(f"Failed to connect: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
335 |
336 |     def bye(self) -> None:
    |

src/nyord_vpn/core/client.py:336:9: C901 `bye` is too complex (13 > 10)
    |
334 |             raise VPNError(f"Failed to connect: {e}")
335 |
336 |     def bye(self) -> None:
    |         ^^^ C901
337 |         """Disconnect from the VPN."""
338 |         if self.verbose:
    |

src/nyord_vpn/core/client.py:336:9: PLR0912 Too many branches (14 > 12)
    |
334 |             raise VPNError(f"Failed to connect: {e}")
335 |
336 |     def bye(self) -> None:
    |         ^^^ PLR0912
337 |         """Disconnect from the VPN."""
338 |         if self.verbose:
    |

src/nyord_vpn/core/client.py:410:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
408 |                 console.print(self._format_minimal_output(status))
409 |         except Exception as e:
410 |             raise VPNError(f"Failed to get status: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
411 |
412 |     def init(self) -> None:
    |

src/nyord_vpn/core/client.py:410:19: TRY003 Avoid specifying long messages outside the exception class
    |
408 |                 console.print(self._format_minimal_output(status))
409 |         except Exception as e:
410 |             raise VPNError(f"Failed to get status: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
411 |
412 |     def init(self) -> None:
    |

src/nyord_vpn/core/client.py:440:23: TRY003 Avoid specifying long messages outside the exception class
    |
438 |                 self.api_client.get_countries()
439 |             except Exception as e:
440 |                 raise VPNConnectionError("Failed to connect to NordVPN API") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
441 |
442 |             # Get initial IP for comparison
    |

src/nyord_vpn/core/client.py:446:23: TRY003 Avoid specifying long messages outside the exception class
    |
444 |                 self.get_current_ip()
445 |             except Exception as e:
446 |                 raise VPNConnectionError("Failed to get initial IP") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
447 |
448 |         except Exception as e:
    |

src/nyord_vpn/core/client.py:451:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
449 |             if isinstance(e, VPNConnectionError):
450 |                 raise
451 |             raise VPNConnectionError(f"Failed to initialize client environment: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
452 |
453 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/core/client.py:451:19: TRY003 Avoid specifying long messages outside the exception class
    |
449 |             if isinstance(e, VPNConnectionError):
450 |                 raise
451 |             raise VPNConnectionError(f"Failed to initialize client environment: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
452 |
453 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/exceptions.py:38:9: D107 Missing docstring in `__init__`
   |
36 |     """
37 |
38 |     def __init__(
   |         ^^^^^^^^ D107
39 |         self,
40 |         message: str = "An error occurred in the NordVPN client",
   |

src/nyord_vpn/exceptions.py:66:9: D107 Missing docstring in `__init__`
   |
64 |     """
65 |
66 |     def __init__(
   |         ^^^^^^^^ D107
67 |         self,
68 |         message: str = "A VPN-related error occurred",
   |

src/nyord_vpn/exceptions.py:82:9: D107 Missing docstring in `__init__`
   |
80 |     """
81 |
82 |     def __init__(
   |         ^^^^^^^^ D107
83 |         self,
84 |         message: str = "Invalid or missing VPN credentials",
   |

src/nyord_vpn/exceptions.py:98:9: D107 Missing docstring in `__init__`
    |
 96 |     """
 97 |
 98 |     def __init__(
    |         ^^^^^^^^ D107
 99 |         self,
100 |         message: str = "VPN server not found",
    |

src/nyord_vpn/exceptions.py:114:9: D107 Missing docstring in `__init__`
    |
112 |     """
113 |
114 |     def __init__(
    |         ^^^^^^^^ D107
115 |         self,
116 |         message: str = "Invalid or missing OpenVPN configuration",
    |

src/nyord_vpn/exceptions.py:130:9: D107 Missing docstring in `__init__`
    |
128 |     """
129 |
130 |     def __init__(
    |         ^^^^^^^^ D107
131 |         self,
132 |         message: str = "VPN server error or unavailable",
    |

src/nyord_vpn/exceptions.py:146:9: D107 Missing docstring in `__init__`
    |
144 |     """
145 |
146 |     def __init__(
    |         ^^^^^^^^ D107
147 |         self,
148 |         message: str = "VPN authentication failed",
    |

src/nyord_vpn/exceptions.py:162:9: D107 Missing docstring in `__init__`
    |
160 |     """
161 |
162 |     def __init__(
    |         ^^^^^^^^ D107
163 |         self,
164 |         message: str = "VPN operation timed out",
    |

src/nyord_vpn/exceptions.py:178:9: D107 Missing docstring in `__init__`
    |
176 |     """
177 |
178 |     def __init__(
    |         ^^^^^^^^ D107
179 |         self,
180 |         message: str = "OpenVPN process error",
    |

src/nyord_vpn/exceptions.py:194:9: D107 Missing docstring in `__init__`
    |
192 |     """
193 |
194 |     def __init__(
    |         ^^^^^^^^ D107
195 |         self,
196 |         message: str = "Failed to establish VPN connection",
    |

src/nyord_vpn/exceptions.py:210:9: D107 Missing docstring in `__init__`
    |
208 |     """
209 |
210 |     def __init__(
    |         ^^^^^^^^ D107
211 |         self,
212 |         message: str = "Failed to disconnect from VPN",
    |

src/nyord_vpn/exceptions.py:227:9: D107 Missing docstring in `__init__`
    |
225 |     """
226 |
227 |     def __init__(
    |         ^^^^^^^^ D107
228 |         self,
229 |         message: str = "Failed to communicate with NordVPN API",
    |

src/nyord_vpn/network/country.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/network/server.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/network/server.py:120:58: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
120 | def _safe_dict_get(d: dict[str, Any], key: str, default: Any = None) -> Any:
    |                                                          ^^^ ANN401
121 |     """Safely get a value from a dictionary."""
122 |     return d.get(key, default) if isinstance(d, dict) else default
    |

src/nyord_vpn/network/server.py:120:73: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_dict_get`
    |
120 | def _safe_dict_get(d: dict[str, Any], key: str, default: Any = None) -> Any:
    |                                                                         ^^^ ANN401
121 |     """Safely get a value from a dictionary."""
122 |     return d.get(key, default) if isinstance(d, dict) else default
    |

src/nyord_vpn/network/server.py:125:60: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
125 | def _safe_get(d: dict[str, Any] | None, key: str, default: Any = None) -> Any:
    |                                                            ^^^ ANN401
126 |     """Safely get a value from a dictionary that might be None."""
127 |     if d is None:
    |

src/nyord_vpn/network/server.py:125:75: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_get`
    |
125 | def _safe_get(d: dict[str, Any] | None, key: str, default: Any = None) -> Any:
    |                                                                           ^^^ ANN401
126 |     """Safely get a value from a dictionary that might be None."""
127 |     if d is None:
    |

src/nyord_vpn/network/server.py:132:53: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
132 | def _safe_str_get(s: str | None, key: str, default: Any = None) -> Any:
    |                                                     ^^^ ANN401
133 |     """Safely get a value from a string that might be None."""
134 |     if s is None:
    |

src/nyord_vpn/network/server.py:132:68: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_str_get`
    |
132 | def _safe_str_get(s: str | None, key: str, default: Any = None) -> Any:
    |                                                                    ^^^ ANN401
133 |     """Safely get a value from a string that might be None."""
134 |     if s is None:
    |

src/nyord_vpn/network/server.py:142:55: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_dict_access`
    |
142 | def _safe_dict_access(d: dict[str, Any], key: str) -> Any:
    |                                                       ^^^ ANN401
143 |     """Safely access a dictionary key that must exist."""
144 |     if not isinstance(d, dict) or key not in d:
    |

src/nyord_vpn/network/server.py:145:15: TRY003 Avoid specifying long messages outside the exception class
    |
143 |     """Safely access a dictionary key that must exist."""
144 |     if not isinstance(d, dict) or key not in d:
145 |         raise KeyError(f"Required key {key} not found in dictionary")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
146 |     return d[key]
    |

src/nyord_vpn/network/server.py:149:24: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `d`
    |
149 | def _safe_dict_cast(d: Any) -> dict[str, Any]:
    |                        ^^^ ANN401
150 |     """Cast a value to a dictionary if possible."""
151 |     if not isinstance(d, dict):
    |

src/nyord_vpn/network/server.py:217:33: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `timestamp`
    |
217 | def _parse_timestamp(timestamp: Any) -> float:
    |                                 ^^^ ANN401
218 |     """Parse a timestamp value into a float.
    |

src/nyord_vpn/network/server.py:270:9: TRY300 Consider moving this statement to an `else` block
    |
268 |         }
269 |
270 |         return cache_data
    |         ^^^^^^^^^^^^^^^^^ TRY300
271 |
272 |     except (OSError, json.JSONDecodeError) as e:
    |

src/nyord_vpn/network/server.py:345:19: TRY003 Avoid specifying long messages outside the exception class
    |
343 |         normalized = country_code.upper()
344 |         if not isinstance(normalized, str) or len(normalized) != 2:
345 |             raise ServerError(f"Invalid country code format: {country_code}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
346 |
347 |         # Get servers from the new API
    |

src/nyord_vpn/network/server.py:365:13: TRY301 Abstract `raise` to an inner function
    |
363 |               )
364 |
365 | /             raise ServerError(
366 | |                 f"Country code not found: {normalized}. "
367 | |                 f"Available countries: {', '.join(available_countries)}"
368 | |             )
    | |_____________^ TRY301
369 |
370 |           except Exception:
    |

src/nyord_vpn/network/server.py:365:19: TRY003 Avoid specifying long messages outside the exception class
    |
363 |               )
364 |
365 |               raise ServerError(
    |  ___________________^
366 | |                 f"Country code not found: {normalized}. "
367 | |                 f"Available countries: {', '.join(available_countries)}"
368 | |             )
    | |_____________^ TRY003
369 |
370 |           except Exception:
    |

src/nyord_vpn/network/server.py:374:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
372 |             cache = self.get_servers_cache()
373 |             if not cache:
374 |                 raise ServerError("No server information available")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
375 |
376 |             for location in cache["locations"].values():
    |

src/nyord_vpn/network/server.py:374:23: TRY003 Avoid specifying long messages outside the exception class
    |
372 |             cache = self.get_servers_cache()
373 |             if not cache:
374 |                 raise ServerError("No server information available")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
375 |
376 |             for location in cache["locations"].values():
    |

src/nyord_vpn/network/server.py:389:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
387 |               )
388 |
389 | /             raise ServerError(
390 | |                 f"Country code not found: {normalized}. "
391 | |                 f"Available countries: {', '.join(available_countries)}"
392 | |             )
    | |_____________^ B904
393 |
394 |       def fetch_server_info(self, country: str | None = None) -> tuple[str, str] | None:
    |

src/nyord_vpn/network/server.py:389:19: TRY003 Avoid specifying long messages outside the exception class
    |
387 |               )
388 |
389 |               raise ServerError(
    |  ___________________^
390 | |                 f"Country code not found: {normalized}. "
391 | |                 f"Available countries: {', '.join(available_countries)}"
392 | |             )
    | |_____________^ TRY003
393 |
394 |       def fetch_server_info(self, country: str | None = None) -> tuple[str, str] | None:
    |

src/nyord_vpn/network/server.py:430:17: TRY301 Abstract `raise` to an inner function
    |
428 |             hostname = getattr(best_server, "hostname", None)
429 |             if not hostname:
430 |                 raise ServerError("Best server has no hostname")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
431 |
432 |             # Extract station (if available)
    |

src/nyord_vpn/network/server.py:430:23: TRY003 Avoid specifying long messages outside the exception class
    |
428 |             hostname = getattr(best_server, "hostname", None)
429 |             if not hostname:
430 |                 raise ServerError("Best server has no hostname")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
431 |
432 |             # Extract station (if available)
    |

src/nyord_vpn/network/server.py:435:13: TRY300 Consider moving this statement to an `else` block
    |
433 |             station = getattr(best_server, "station", "")
434 |
435 |             return hostname, station
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
436 |
437 |         except Exception as e:
    |

src/nyord_vpn/network/server.py:440:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
438 |             if isinstance(e, ServerError):
439 |                 raise
440 |             raise ServerError(f"Failed to fetch server information: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
441 |
442 |     def get_servers_cache(self) -> ServerCache | None:
    |

src/nyord_vpn/network/server.py:440:19: TRY003 Avoid specifying long messages outside the exception class
    |
438 |             if isinstance(e, ServerError):
439 |                 raise
440 |             raise ServerError(f"Failed to fetch server information: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
441 |
442 |     def get_servers_cache(self) -> ServerCache | None:
    |

src/nyord_vpn/network/server.py:442:9: C901 `get_servers_cache` is too complex (22 > 10)
    |
440 |             raise ServerError(f"Failed to fetch server information: {e}")
441 |
442 |     def get_servers_cache(self) -> ServerCache | None:
    |         ^^^^^^^^^^^^^^^^^ C901
443 |         """Get server information from cache or API.
    |

src/nyord_vpn/network/server.py:442:9: PLR0912 Too many branches (21 > 12)
    |
440 |             raise ServerError(f"Failed to fetch server information: {e}")
441 |
442 |     def get_servers_cache(self) -> ServerCache | None:
    |         ^^^^^^^^^^^^^^^^^ PLR0912
443 |         """Get server information from cache or API.
    |

src/nyord_vpn/network/server.py:442:9: PLR0915 Too many statements (65 > 50)
    |
440 |             raise ServerError(f"Failed to fetch server information: {e}")
441 |
442 |     def get_servers_cache(self) -> ServerCache | None:
    |         ^^^^^^^^^^^^^^^^^ PLR0915
443 |         """Get server information from cache or API.
    |

src/nyord_vpn/network/server.py:526:17: TRY300 Consider moving this statement to an `else` block
    |
524 |                 cache_servers(cast(dict[str, Any], new_cache))
525 |
526 |                 return new_cache
    |                 ^^^^^^^^^^^^^^^^ TRY300
527 |
528 |             except Exception as e:
    |

src/nyord_vpn/network/server.py:666:9: C901 `_ping_server` is too complex (25 > 10)
    |
664 |         return True
665 |
666 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ C901
667 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:666:9: PLR0911 Too many return statements (9 > 6)
    |
664 |         return True
665 |
666 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ PLR0911
667 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:666:9: PLR0912 Too many branches (25 > 12)
    |
664 |         return True
665 |
666 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ PLR0912
667 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:666:9: PLR0915 Too many statements (58 > 50)
    |
664 |         return True
665 |
666 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ PLR0915
667 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:714:22: S603 `subprocess` call: check for execution of untrusted input
    |
713 |             # Execute the command securely with resource limitations
714 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
715 |                 cmd,
716 |                 capture_output=True,
    |

src/nyord_vpn/network/server.py:740:29: TRY300 Consider moving this statement to an `else` block
    |
738 |                                     f"Parsed min time from stats: {min_time}ms",
739 |                                 )
740 |                             return min_time
    |                             ^^^^^^^^^^^^^^^ TRY300
741 |                         except (IndexError, ValueError) as e:
742 |                             if self.verbose:
    |

src/nyord_vpn/network/server.py:793:9: C901 `_check_for_ping_command` is too complex (12 > 10)
    |
791 |             return self._fallback_ping(hostname)
792 |
793 |     def _check_for_ping_command(self) -> str:
    |         ^^^^^^^^^^^^^^^^^^^^^^^ C901
794 |         """Check if ping command is available and return its path if found.
    |

src/nyord_vpn/network/server.py:817:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
815 |             # Find 'which' command
816 |             for path in which_paths:
817 |                 if os.path.exists(path) and os.access(path, os.X_OK):
    |                    ^^^^^^^^^^^^^^ PTH110
818 |                     which_cmd = path
819 |                     break
    |

src/nyord_vpn/network/server.py:824:30: S603 `subprocess` call: check for execution of untrusted input
    |
822 |             if which_cmd:
823 |                 try:
824 |                     result = subprocess.run(
    |                              ^^^^^^^^^^^^^^ S603
825 |                         [which_cmd, "ping"],
826 |                         capture_output=True,
    |

src/nyord_vpn/network/server.py:837:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
835 |             # Check common locations
836 |             for path in common_paths:
837 |                 if os.path.exists(path) and os.access(path, os.X_OK):
    |                    ^^^^^^^^^^^^^^ PTH110
838 |                     return path
    |

src/nyord_vpn/network/server.py:847:24: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
845 |                 ]
846 |                 for path in windows_paths:
847 |                     if os.path.exists(path) and os.access(path, os.X_OK):
    |                        ^^^^^^^^^^^^^^ PTH110
848 |                         return path
    |

src/nyord_vpn/network/server.py:850:13: TRY300 Consider moving this statement to an `else` block
    |
848 |                         return path
849 |
850 |             return ""
    |             ^^^^^^^^^ TRY300
851 |         except Exception as e:
852 |             self.logger.warning(f"Error checking for ping command: {e}")
    |

src/nyord_vpn/network/server.py:856:9: D205 1 blank line required between summary line and description
    |
855 |       def _fallback_ping(self, hostname: str) -> float:
856 | /         """Fallback method when ping command is not available.
857 | |         Uses socket connection to estimate latency.
858 | |
859 | |         Args:
860 | |             hostname: Server hostname to ping
861 | |
862 | |         Returns:
863 | |             float: Estimated ping time in milliseconds, or float('inf') if failed
864 | |
865 | |         """
    | |___________^ D205
866 |           try:
867 |               if self.verbose:
    |
    = help: Insert single blank line

src/nyord_vpn/network/server.py:894:34: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
892 |                         # Add a small random factor to the time to differentiate servers
893 |                         # This ensures we don't get the same exact time for multiple servers
894 |                         jitter = random.uniform(0, 0.5)  # Up to 0.5ms jitter
    |                                  ^^^^^^^^^^^^^^^^^^^^^^ S311
895 |                         time_ms = connection_time + jitter
    |

src/nyord_vpn/network/server.py:943:13: TRY300 Consider moving this statement to an `else` block
    |
941 |                 self.logger.debug(f"Socket connection to {hostname}:{port} took {time_ms:.2f}ms")
942 |
943 |             return time_ms
    |             ^^^^^^^^^^^^^^ TRY300
944 |
945 |         except (TimeoutError, OSError) as e:
    |

src/nyord_vpn/network/server.py:954:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `server`
    |
952 |                 s.close()
953 |
954 |     def _is_valid_server(self, server: Any) -> bool:
    |                                        ^^^ ANN401
955 |         """Check if a server is valid and usable.
    |

src/nyord_vpn/network/server.py:1021:36: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `server`
     |
1019 |         return has_openvpn_tcp
1020 |
1021 |     def _test_server(self, server: Any) -> tuple[Any, float]:
     |                                    ^^^ ANN401
1022 |         """Test server response time and load.
     |

src/nyord_vpn/network/server.py:1110:9: C901 `select_fastest_server` is too complex (17 > 10)
     |
1108 |         return result
1109 |
1110 |     def select_fastest_server(
     |         ^^^^^^^^^^^^^^^^^^^^^ C901
1111 |         self, country_code: str | None = None
1112 |     ) -> list[dict[str, Any]]:
     |

src/nyord_vpn/network/server.py:1110:9: PLR0912 Too many branches (16 > 12)
     |
1108 |         return result
1109 |
1110 |     def select_fastest_server(
     |         ^^^^^^^^^^^^^^^^^^^^^ PLR0912
1111 |         self, country_code: str | None = None
1112 |     ) -> list[dict[str, Any]]:
     |

src/nyord_vpn/network/server.py:1150:17: TRY300 Consider moving this statement to an `else` block
     |
1148 |                     server_dict["ping_time"] = ping_time
1149 |
1150 |                 return [server_dict]
     |                 ^^^^^^^^^^^^^^^^^^^^ TRY300
1151 |
1152 |             except Exception as e:
     |

src/nyord_vpn/network/server.py:1161:17: TRY301 Abstract `raise` to an inner function
     |
1159 |             cache = self.get_servers_cache()
1160 |             if not cache:
1161 |                 raise ServerError("No servers available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
1162 |
1163 |             servers = cache["servers"]
     |

src/nyord_vpn/network/server.py:1161:23: TRY003 Avoid specifying long messages outside the exception class
     |
1159 |             cache = self.get_servers_cache()
1160 |             if not cache:
1161 |                 raise ServerError("No servers available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1162 |
1163 |             servers = cache["servers"]
     |

src/nyord_vpn/network/server.py:1167:17: TRY301 Abstract `raise` to an inner function
     |
1166 |             if not servers:
1167 |                 raise ServerError("No servers available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
1168 |
1169 |             # Create location lookup by ID
     |

src/nyord_vpn/network/server.py:1167:23: TRY003 Avoid specifying long messages outside the exception class
     |
1166 |             if not servers:
1167 |                 raise ServerError("No servers available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1168 |
1169 |             # Create location lookup by ID
     |

src/nyord_vpn/network/server.py:1199:21: TRY301 Abstract `raise` to an inner function
     |
1197 |                           }
1198 |                       )
1199 | /                     raise ServerError(
1200 | |                         f"No servers available in {country_code}. "
1201 | |                         f"Available countries: {', '.join(available_countries)}"
1202 | |                     )
     | |_____________________^ TRY301
1203 |
1204 |               # Remove failed servers
     |

src/nyord_vpn/network/server.py:1199:27: TRY003 Avoid specifying long messages outside the exception class
     |
1197 |                           }
1198 |                       )
1199 |                       raise ServerError(
     |  ___________________________^
1200 | |                         f"No servers available in {country_code}. "
1201 | |                         f"Available countries: {', '.join(available_countries)}"
1202 | |                     )
     | |_____________________^ TRY003
1203 |
1204 |               # Remove failed servers
     |

src/nyord_vpn/network/server.py:1232:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1230 |             if isinstance(e, ServerError):
1231 |                 raise
1232 |             raise ServerError(f"Failed to select server: {e}")
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1233 |
1234 |     def get_country_info(self, country_code: str) -> dict[str, Any]:
     |

src/nyord_vpn/network/server.py:1232:19: TRY003 Avoid specifying long messages outside the exception class
     |
1230 |             if isinstance(e, ServerError):
1231 |                 raise
1232 |             raise ServerError(f"Failed to select server: {e}")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1233 |
1234 |     def get_country_info(self, country_code: str) -> dict[str, Any]:
     |

src/nyord_vpn/network/server.py:1250:19: TRY003 Avoid specifying long messages outside the exception class
     |
1248 |         normalized_code = self._validate_country_code(country_code)
1249 |         if not normalized_code:
1250 |             raise ServerError(f"Invalid country code: {country_code}")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1251 |
1252 |         # Try to use the new API first
     |

src/nyord_vpn/network/server.py:1269:13: TRY301 Abstract `raise` to an inner function
     |
1267 |                     }
1268 |
1269 |             raise ServerError(f"Country not found: {normalized_code}")
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
1270 |
1271 |         except Exception as e:
     |

src/nyord_vpn/network/server.py:1269:19: TRY003 Avoid specifying long messages outside the exception class
     |
1267 |                     }
1268 |
1269 |             raise ServerError(f"Country not found: {normalized_code}")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1270 |
1271 |         except Exception as e:
     |

src/nyord_vpn/network/server.py:1282:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1280 |             cache = self.get_servers_cache()
1281 |             if not cache:
1282 |                 raise ServerError("No server information available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1283 |
1284 |             # Find the country in locations
     |

src/nyord_vpn/network/server.py:1282:23: TRY003 Avoid specifying long messages outside the exception class
     |
1280 |             cache = self.get_servers_cache()
1281 |             if not cache:
1282 |                 raise ServerError("No server information available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1283 |
1284 |             # Find the country in locations
     |

src/nyord_vpn/network/server.py:1290:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1288 |                 return country_dict
1289 |
1290 |             raise ServerError(f"Country not found: {normalized_code}")
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1291 |
1292 |     def get_random_country(self) -> str:
     |

src/nyord_vpn/network/server.py:1290:19: TRY003 Avoid specifying long messages outside the exception class
     |
1288 |                 return country_dict
1289 |
1290 |             raise ServerError(f"Country not found: {normalized_code}")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1291 |
1292 |     def get_random_country(self) -> str:
     |

src/nyord_vpn/network/server.py:1315:17: TRY301 Abstract `raise` to an inner function
     |
1314 |             if not country_codes:
1315 |                 raise ServerError("No countries available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
1316 |
1317 |             # Select a random country using cryptographically secure random
     |

src/nyord_vpn/network/server.py:1315:23: TRY003 Avoid specifying long messages outside the exception class
     |
1314 |             if not country_codes:
1315 |                 raise ServerError("No countries available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1316 |
1317 |             # Select a random country using cryptographically secure random
     |

src/nyord_vpn/network/server.py:1328:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1326 |             cache = self.get_servers_cache()
1327 |             if not cache:
1328 |                 raise ServerError("No server information available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1329 |
1330 |             # Extract country codes
     |

src/nyord_vpn/network/server.py:1328:23: TRY003 Avoid specifying long messages outside the exception class
     |
1326 |             cache = self.get_servers_cache()
1327 |             if not cache:
1328 |                 raise ServerError("No server information available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1329 |
1330 |             # Extract country codes
     |

src/nyord_vpn/network/server.py:1340:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1339 |             if not country_codes:
1340 |                 raise ServerError("No countries available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1341 |
1342 |             # Select a random country using cryptographically secure random
     |

src/nyord_vpn/network/server.py:1340:23: TRY003 Avoid specifying long messages outside the exception class
     |
1339 |             if not country_codes:
1340 |                 raise ServerError("No countries available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1341 |
1342 |             # Select a random country using cryptographically secure random
     |

src/nyord_vpn/network/vpn.py:66:1: F811 Redefinition of unused `OPENVPN_AUTH` from line 60
   |
65 | # Constants
66 | OPENVPN_AUTH = Path.home() / ".cache" / "nyord-vpn" / "openvpn.auth"
   | ^^^^^^^^^^^^ F811
67 | OPENVPN_LOG = Path.home() / ".cache" / "nyord-vpn" / "openvpn.log"
   |
   = help: Remove definition: `OPENVPN_AUTH`

src/nyord_vpn/network/vpn.py:67:1: F811 Redefinition of unused `OPENVPN_LOG` from line 60
   |
65 | # Constants
66 | OPENVPN_AUTH = Path.home() / ".cache" / "nyord-vpn" / "openvpn.auth"
67 | OPENVPN_LOG = Path.home() / ".cache" / "nyord-vpn" / "openvpn.log"
   | ^^^^^^^^^^^ F811
68 |
69 | # Default retry wait time in seconds
   |
   = help: Remove definition: `OPENVPN_LOG`

src/nyord_vpn/network/vpn.py:94:21: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`
   |
92 |     def __init__(
93 |         self,
94 |         api_client: Any,
   |                     ^^^ ANN401
95 |         server_manager: ServerManager,
96 |         vpn_manager: Any,
   |

src/nyord_vpn/network/vpn.py:96:22: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `vpn_manager`
   |
94 |         api_client: Any,
95 |         server_manager: ServerManager,
96 |         vpn_manager: Any,
   |                      ^^^ ANN401
97 |         *,
98 |         verbose: bool = False,
   |

src/nyord_vpn/network/vpn.py:173:30: S603 `subprocess` call: check for execution of untrusted input
    |
171 |                 if Path(path).exists():
172 |                     # Verify we can run it
173 |                     result = subprocess.run(
    |                              ^^^^^^^^^^^^^^ S603
174 |                         [path, "--version"], capture_output=True, text=True, check=False
175 |                     )
    |

src/nyord_vpn/network/vpn.py:183:26: S603 `subprocess` call: check for execution of untrusted input
    |
181 |             # If not found in common paths, try which
182 |             try:
183 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
184 |                     ["which", "openvpn"], capture_output=True, text=True, check=True
185 |                 )
    |

src/nyord_vpn/network/vpn.py:184:21: S607 Starting a process with a partial executable path
    |
182 |             try:
183 |                 result = subprocess.run(
184 |                     ["which", "openvpn"], capture_output=True, text=True, check=True
    |                     ^^^^^^^^^^^^^^^^^^^^ S607
185 |                 )
186 |                 path = result.stdout.strip()
    |

src/nyord_vpn/network/vpn.py:194:13: TRY301 Abstract `raise` to an inner function
    |
192 |                   pass
193 |
194 | /             raise VPNError(
195 | |                 "OpenVPN not found. Please install OpenVPN:\n"
196 | |                 "  macOS: brew install openvpn\n"
197 | |                 "  Linux: sudo apt install openvpn  # or your distro's package manager"
198 | |             )
    | |_____________^ TRY301
199 |
200 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:194:19: TRY003 Avoid specifying long messages outside the exception class
    |
192 |                   pass
193 |
194 |               raise VPNError(
    |  ___________________^
195 | |                 "OpenVPN not found. Please install OpenVPN:\n"
196 | |                 "  macOS: brew install openvpn\n"
197 | |                 "  Linux: sudo apt install openvpn  # or your distro's package manager"
198 | |             )
    | |_____________^ TRY003
199 |
200 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:203:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
201 |             if isinstance(e, VPNError):
202 |                 raise
203 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
204 |
205 |     def setup_connection(self, server_hostname: str, username: str, password: str) -> None:
    |

src/nyord_vpn/network/vpn.py:203:19: TRY003 Avoid specifying long messages outside the exception class
    |
201 |             if isinstance(e, VPNError):
202 |                 raise
203 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
204 |
205 |     def setup_connection(self, server_hostname: str, username: str, password: str) -> None:
    |

src/nyord_vpn/network/vpn.py:206:9: D401 First line of docstring should be in imperative mood: "Setup the OpenVPN connection."
    |
205 |       def setup_connection(self, server_hostname: str, username: str, password: str) -> None:
206 | /         """Setup the OpenVPN connection.
207 | |
208 | |         Args:
209 | |             server_hostname: Server hostname
210 | |             username: VPN username
211 | |             password: VPN password
212 | |
213 | |         Raises:
214 | |             VPNError: If unable to setup the connection
215 | |
216 | |         """
    | |___________^ D401
217 |           # Save hostname for state management
218 |           self.hostname = server_hostname
    |

src/nyord_vpn/network/vpn.py:224:32: PTH111 `os.path.expanduser()` should be replaced by `Path.expanduser()`
    |
222 |         if config_path is None:
223 |             # Fallback path in case config doesn't exist
224 |             config_path = Path(os.path.expanduser(f"~/.cache/nyord-vpn/configs/{server_hostname}.ovpn"))
    |                                ^^^^^^^^^^^^^^^^^^ PTH111
225 |             if not config_path.exists():
226 |                 raise VPNConfigError(f"Configuration file not found for server {server_hostname}")
    |

src/nyord_vpn/network/vpn.py:226:23: TRY003 Avoid specifying long messages outside the exception class
    |
224 |             config_path = Path(os.path.expanduser(f"~/.cache/nyord-vpn/configs/{server_hostname}.ovpn"))
225 |             if not config_path.exists():
226 |                 raise VPNConfigError(f"Configuration file not found for server {server_hostname}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
227 |
228 |         # Set the config path so it's available throughout the session
    |

src/nyord_vpn/network/vpn.py:235:17: SIM105 Use `contextlib.suppress(Exception)` instead of `try`-`except`-`pass`
    |
233 |               # Decode password if it appears to be URL encoded
234 |               if "%" in password:
235 | /                 try:
236 | |                     password = urllib.parse.unquote(password)
237 | |                 except Exception:
238 | |                     # If decoding fails, use the original password
239 | |                     pass
    | |________________________^ SIM105
240 |
241 |               # Ensure the credentials are written without extra whitespace
    |
    = help: Replace with `contextlib.suppress(Exception)`

src/nyord_vpn/network/vpn.py:237:17: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
235 |                   try:
236 |                       password = urllib.parse.unquote(password)
237 | /                 except Exception:
238 | |                     # If decoding fails, use the original password
239 | |                     pass
    | |________________________^ S110
240 |
241 |               # Ensure the credentials are written without extra whitespace
    |

src/nyord_vpn/network/vpn.py:246:24: PTH120 `os.path.dirname()` should be replaced by `Path.parent`
    |
245 |             # Write credentials to auth file
246 |             auth_dir = os.path.dirname(OPENVPN_AUTH)
    |                        ^^^^^^^^^^^^^^^ PTH120
247 |             os.makedirs(auth_dir, exist_ok=True)
    |

src/nyord_vpn/network/vpn.py:247:13: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
245 |             # Write credentials to auth file
246 |             auth_dir = os.path.dirname(OPENVPN_AUTH)
247 |             os.makedirs(auth_dir, exist_ok=True)
    |             ^^^^^^^^^^^ PTH103
248 |
249 |             with open(OPENVPN_AUTH, "w") as f:
    |

src/nyord_vpn/network/vpn.py:249:18: PTH123 `open()` should be replaced by `Path.open()`
    |
247 |             os.makedirs(auth_dir, exist_ok=True)
248 |
249 |             with open(OPENVPN_AUTH, "w") as f:
    |                  ^^^^ PTH123
250 |                 f.write(f"{username}\n{password}\n")
    |

src/nyord_vpn/network/vpn.py:253:13: PTH101 `os.chmod()` should be replaced by `Path.chmod()`
    |
252 |             # Set permissions to 0600 (rw-------)
253 |             os.chmod(OPENVPN_AUTH, 0o600)
    |             ^^^^^^^^ PTH101
254 |
255 |             # Verify the file was created and has correct format
    |

src/nyord_vpn/network/vpn.py:256:18: PTH123 `open()` should be replaced by `Path.open()`
    |
255 |             # Verify the file was created and has correct format
256 |             with open(OPENVPN_AUTH) as f:
    |                  ^^^^ PTH123
257 |                 lines = f.readlines()
258 |                 if len(lines) != 2:
    |

src/nyord_vpn/network/vpn.py:259:27: TRY003 Avoid specifying long messages outside the exception class
    |
257 |                 lines = f.readlines()
258 |                 if len(lines) != 2:
259 |                     raise VPNError("Auth file has incorrect format")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
260 |
261 |                 self.logger.debug("Auth file exists and has correct format")
    |

src/nyord_vpn/network/vpn.py:263:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
261 |                 self.logger.debug("Auth file exists and has correct format")
262 |         except OSError as e:
263 |             raise VPNError(f"Failed to read auth file: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
264 |
265 |         # Create OpenVPN configuration for this connection
    |

src/nyord_vpn/network/vpn.py:263:19: TRY003 Avoid specifying long messages outside the exception class
    |
261 |                 self.logger.debug("Auth file exists and has correct format")
262 |         except OSError as e:
263 |             raise VPNError(f"Failed to read auth file: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
264 |
265 |         # Create OpenVPN configuration for this connection
    |

src/nyord_vpn/network/vpn.py:283:28: S603 `subprocess` call: check for execution of untrusted input
    |
282 |             # Start OpenVPN process with sudo
283 |             self.process = subprocess.Popen(
    |                            ^^^^^^^^^^^^^^^^ S603
284 |                 sudo_cmd,
285 |                 stdout=subprocess.PIPE,
    |

src/nyord_vpn/network/vpn.py:301:17: TRY301 Abstract `raise` to an inner function
    |
299 |                   self.exit_code = self.process.returncode
300 |                   stdout, stderr = self.process.communicate()
301 | /                 raise VPNProcessError(
302 | |                     f"OpenVPN process failed to start: exit code {self.exit_code}\n"
303 | |                     f"Output: {stdout}\n"
304 | |                     f"Error: {stderr}"
305 | |                 )
    | |_________________^ TRY301
306 |
307 |           except VPNConfigError as e:
    |

src/nyord_vpn/network/vpn.py:301:23: TRY003 Avoid specifying long messages outside the exception class
    |
299 |                   self.exit_code = self.process.returncode
300 |                   stdout, stderr = self.process.communicate()
301 |                   raise VPNProcessError(
    |  _______________________^
302 | |                     f"OpenVPN process failed to start: exit code {self.exit_code}\n"
303 | |                     f"Output: {stdout}\n"
304 | |                     f"Error: {stderr}"
305 | |                 )
    | |_________________^ TRY003
306 |
307 |           except VPNConfigError as e:
    |

src/nyord_vpn/network/vpn.py:308:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
307 |         except VPNConfigError as e:
308 |             raise VPNError(f"Failed to create OpenVPN configuration: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
309 |         except Exception as e:
310 |             raise VPNError(f"Failed to start OpenVPN: {e}")
    |

src/nyord_vpn/network/vpn.py:308:19: TRY003 Avoid specifying long messages outside the exception class
    |
307 |         except VPNConfigError as e:
308 |             raise VPNError(f"Failed to create OpenVPN configuration: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
309 |         except Exception as e:
310 |             raise VPNError(f"Failed to start OpenVPN: {e}")
    |

src/nyord_vpn/network/vpn.py:310:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
308 |             raise VPNError(f"Failed to create OpenVPN configuration: {e}")
309 |         except Exception as e:
310 |             raise VPNError(f"Failed to start OpenVPN: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
311 |
312 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/network/vpn.py:310:19: TRY003 Avoid specifying long messages outside the exception class
    |
308 |             raise VPNError(f"Failed to create OpenVPN configuration: {e}")
309 |         except Exception as e:
310 |             raise VPNError(f"Failed to start OpenVPN: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
311 |
312 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/network/vpn.py:312:9: C901 `get_current_ip` is too complex (24 > 10)
    |
310 |             raise VPNError(f"Failed to start OpenVPN: {e}")
311 |
312 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ C901
313 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:312:9: PLR0912 Too many branches (20 > 12)
    |
310 |             raise VPNError(f"Failed to start OpenVPN: {e}")
311 |
312 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ PLR0912
313 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:312:9: PLR0915 Too many statements (51 > 50)
    |
310 |             raise VPNError(f"Failed to start OpenVPN: {e}")
311 |
312 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ PLR0915
313 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:348:13: PERF203 `try`-`except` within a loop incurs performance overhead
    |
346 |                           self.logger.debug(f"Got valid IP {ip} from api.ipify.org")
347 |                       return ip
348 | /             except Exception as e:
349 | |                 if self.verbose:
350 | |                     self.logger.debug(
351 | |                         f"Primary IP check failed (attempt {attempt + 1}): {e}"
352 | |                     )
353 | |                 if attempt < 1:  # Only sleep between attempts
354 | |                     time.sleep(0.5)
    | |___________________________________^ PERF203
355 |
356 |           # Try backup service (up to 2 attempts)
    |

src/nyord_vpn/network/vpn.py:371:13: PERF203 `try`-`except` within a loop incurs performance overhead
    |
369 |                           self.logger.debug(f"Got valid IP {ip} from ip-api.com")
370 |                       return ip
371 | /             except Exception as e:
372 | |                 if self.verbose:
373 | |                     self.logger.debug(
374 | |                         f"Backup IP check failed (attempt {attempt + 1}): {e}"
375 | |                     )
376 | |                 if attempt < 1:  # Only sleep between attempts
377 | |                     time.sleep(0.5)
    | |___________________________________^ PERF203
378 |
379 |           # Try one last service as final fallback
    |

src/nyord_vpn/network/vpn.py:418:9: C901 `connect` is too complex (13 > 10)
    |
416 |             )
417 |
418 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |         ^^^^^^^ C901
419 |         """Start an OpenVPN connection.
    |

src/nyord_vpn/network/vpn.py:418:9: PLR0912 Too many branches (13 > 12)
    |
416 |             )
417 |
418 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |         ^^^^^^^ PLR0912
419 |         """Start an OpenVPN connection.
    |

src/nyord_vpn/network/vpn.py:418:23: ARG002 Unused method argument: `servers`
    |
416 |             )
417 |
418 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |                       ^^^^^^^ ARG002
419 |         """Start an OpenVPN connection.
    |

src/nyord_vpn/network/vpn.py:441:17: TRY301 Abstract `raise` to an inner function
    |
439 |             # Verify auth file exists and has correct format
440 |             if not OPENVPN_AUTH.exists():
441 |                 raise VPNError("Auth file not found - please run setup first")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
442 |
443 |             # Ensure auth file has correct permissions
    |

src/nyord_vpn/network/vpn.py:441:23: TRY003 Avoid specifying long messages outside the exception class
    |
439 |             # Verify auth file exists and has correct format
440 |             if not OPENVPN_AUTH.exists():
441 |                 raise VPNError("Auth file not found - please run setup first")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
442 |
443 |             # Ensure auth file has correct permissions
    |

src/nyord_vpn/network/vpn.py:450:27: TRY003 Avoid specifying long messages outside the exception class
    |
448 |                   lines = OPENVPN_AUTH.read_text().strip().split("\n")
449 |                   if len(lines) != 2:
450 |                       raise VPNError(
    |  ___________________________^
451 | |                         "Auth file is corrupted - please run setup again"
452 | |                     )
    | |_____________________^ TRY003
453 |                   if not lines[0].strip() or not lines[1].strip():
454 |                       raise VPNError(
    |

src/nyord_vpn/network/vpn.py:454:27: TRY003 Avoid specifying long messages outside the exception class
    |
452 |                       )
453 |                   if not lines[0].strip() or not lines[1].strip():
454 |                       raise VPNError(
    |  ___________________________^
455 | |                         "Auth file contains empty username or password - please run setup again"
456 | |                     )
    | |_____________________^ TRY003
457 |                   self.logger.debug("Auth file exists and has correct format")
458 |               except OSError as e:
    |

src/nyord_vpn/network/vpn.py:459:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
457 |                 self.logger.debug("Auth file exists and has correct format")
458 |             except OSError as e:
459 |                 raise VPNError(f"Failed to read auth file: {e}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
460 |
461 |             # Verify config_path is set and valid before using it
    |

src/nyord_vpn/network/vpn.py:459:23: TRY003 Avoid specifying long messages outside the exception class
    |
457 |                 self.logger.debug("Auth file exists and has correct format")
458 |             except OSError as e:
459 |                 raise VPNError(f"Failed to read auth file: {e}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
460 |
461 |             # Verify config_path is set and valid before using it
    |

src/nyord_vpn/network/vpn.py:463:17: TRY301 Abstract `raise` to an inner function
    |
461 |             # Verify config_path is set and valid before using it
462 |             if not self.config_path or not isinstance(self.config_path, Path):
463 |                 raise VPNConfigError("Configuration path is not set - please run setup_connection first")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
464 |
465 |             if not self.config_path.exists():
    |

src/nyord_vpn/network/vpn.py:463:23: TRY003 Avoid specifying long messages outside the exception class
    |
461 |             # Verify config_path is set and valid before using it
462 |             if not self.config_path or not isinstance(self.config_path, Path):
463 |                 raise VPNConfigError("Configuration path is not set - please run setup_connection first")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
464 |
465 |             if not self.config_path.exists():
    |

src/nyord_vpn/network/vpn.py:466:17: TRY301 Abstract `raise` to an inner function
    |
465 |             if not self.config_path.exists():
466 |                 raise VPNConfigError(f"Configuration file not found at {self.config_path}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
467 |
468 |             # Create OpenVPN configuration for this connection
    |

src/nyord_vpn/network/vpn.py:466:23: TRY003 Avoid specifying long messages outside the exception class
    |
465 |             if not self.config_path.exists():
466 |                 raise VPNConfigError(f"Configuration file not found at {self.config_path}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
467 |
468 |             # Create OpenVPN configuration for this connection
    |

src/nyord_vpn/network/vpn.py:487:32: S603 `subprocess` call: check for execution of untrusted input
    |
486 |                 # Start OpenVPN process with sudo
487 |                 self.process = subprocess.Popen(
    |                                ^^^^^^^^^^^^^^^^ S603
488 |                     sudo_cmd,
489 |                     stdout=subprocess.PIPE,
    |

src/nyord_vpn/network/vpn.py:505:27: TRY003 Avoid specifying long messages outside the exception class
    |
503 |                       self.exit_code = self.process.returncode
504 |                       stdout, stderr = self.process.communicate()
505 |                       raise VPNProcessError(
    |  ___________________________^
506 | |                         f"OpenVPN process failed to start: exit code {self.exit_code}\n"
507 | |                         f"Output: {stdout}\n"
508 | |                         f"Error: {stderr}"
509 | |                     )
    | |_____________________^ TRY003
510 |               except VPNConfigError as e:
511 |                   raise VPNError(f"Failed to create OpenVPN configuration: {e}")
    |

src/nyord_vpn/network/vpn.py:511:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
509 |                     )
510 |             except VPNConfigError as e:
511 |                 raise VPNError(f"Failed to create OpenVPN configuration: {e}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
512 |         except Exception as e:
513 |             if isinstance(e, VPNError):
    |

src/nyord_vpn/network/vpn.py:511:23: TRY003 Avoid specifying long messages outside the exception class
    |
509 |                     )
510 |             except VPNConfigError as e:
511 |                 raise VPNError(f"Failed to create OpenVPN configuration: {e}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
512 |         except Exception as e:
513 |             if isinstance(e, VPNError):
    |

src/nyord_vpn/network/vpn.py:515:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
513 |             if isinstance(e, VPNError):
514 |                 raise
515 |             raise VPNError(f"Connection failed: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
516 |
517 |     def disconnect(self) -> None:
    |

src/nyord_vpn/network/vpn.py:515:19: TRY003 Avoid specifying long messages outside the exception class
    |
513 |             if isinstance(e, VPNError):
514 |                 raise
515 |             raise VPNError(f"Connection failed: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
516 |
517 |     def disconnect(self) -> None:
    |

src/nyord_vpn/network/vpn.py:517:9: C901 `disconnect` is too complex (30 > 10)
    |
515 |             raise VPNError(f"Connection failed: {e}")
516 |
517 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ C901
518 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:517:9: PLR0912 Too many branches (30 > 12)
    |
515 |             raise VPNError(f"Connection failed: {e}")
516 |
517 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ PLR0912
518 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:517:9: PLR0915 Too many statements (70 > 50)
    |
515 |             raise VPNError(f"Connection failed: {e}")
516 |
517 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ PLR0915
518 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:560:29: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
558 |                                   os.kill(proc.info["pid"], signal.SIGTERM)
559 |                                   time.sleep(0.1)  # Brief pause
560 | /                             except Exception:
561 | |                                 pass
    | |____________________________________^ S110
562 |
563 |                               # Force kill if still running
    |

src/nyord_vpn/network/vpn.py:577:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
575 |                                       )
576 |
577 | /                 except (psutil.NoSuchProcess, psutil.AccessDenied):
578 | |                     continue
    | |____________________________^ PERF203
579 |
580 |               # Verify no OpenVPN processes are left
    |

src/nyord_vpn/network/vpn.py:588:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
586 |                           if any("nordvpn.com" in arg for arg in cmdline):
587 |                               remaining.append(proc.info["pid"])
588 | /                 except (psutil.NoSuchProcess, psutil.AccessDenied):
589 | |                     continue
    | |____________________________^ PERF203
590 |
591 |               if remaining:
    |

src/nyord_vpn/network/vpn.py:592:17: TRY301 Abstract `raise` to an inner function
    |
591 |               if remaining:
592 | /                 raise VPNError(
593 | |                     f"Failed to kill all OpenVPN processes. Remaining: {remaining}"
594 | |                 )
    | |_________________^ TRY301
595 |
596 |               # Clean up OpenVPN log file
    |

src/nyord_vpn/network/vpn.py:592:23: TRY003 Avoid specifying long messages outside the exception class
    |
591 |               if remaining:
592 |                   raise VPNError(
    |  _______________________^
593 | |                     f"Failed to kill all OpenVPN processes. Remaining: {remaining}"
594 | |                 )
    | |_________________^ TRY003
595 |
596 |               # Clean up OpenVPN log file
    |

src/nyord_vpn/network/vpn.py:641:19: TRY003 Avoid specifying long messages outside the exception class
    |
639 |                   )
640 |
641 |               raise VPNError(
    |  ___________________^
642 | |                 f"Failed to disconnect from VPN: {'; '.join(error_details)}"
643 | |             ) from e
    | |_____________^ TRY003
644 |
645 |       def is_connected(self) -> bool:
    |

src/nyord_vpn/network/vpn.py:649:9: C901 `verify_connection` is too complex (23 > 10)
    |
647 |         return self.process is not None and self.process.poll() is None
648 |
649 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ C901
650 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:649:9: PLR0911 Too many return statements (11 > 6)
    |
647 |         return self.process is not None and self.process.poll() is None
648 |
649 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ PLR0911
650 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:649:9: PLR0912 Too many branches (22 > 12)
    |
647 |         return self.process is not None and self.process.poll() is None
648 |
649 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ PLR0912
650 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:672:30: S603 `subprocess` call: check for execution of untrusted input
    |
670 |             if sys.platform == "darwin":  # macOS
671 |                 try:
672 |                     output = subprocess.check_output(["ifconfig"], text=True)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ S603
673 |                     if not any(
674 |                         line.startswith("utun") and "UP" in line
    |

src/nyord_vpn/network/vpn.py:672:54: S607 Starting a process with a partial executable path
    |
670 |             if sys.platform == "darwin":  # macOS
671 |                 try:
672 |                     output = subprocess.check_output(["ifconfig"], text=True)
    |                                                      ^^^^^^^^^^^^ S607
673 |                     if not any(
674 |                         line.startswith("utun") and "UP" in line
    |

src/nyord_vpn/network/vpn.py:686:30: S603 `subprocess` call: check for execution of untrusted input
    |
684 |             elif sys.platform == "linux":
685 |                 try:
686 |                     output = subprocess.check_output(
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ S603
687 |                         ["ip", "link", "show", "tun0"], text=True
688 |                     )
    |

src/nyord_vpn/network/vpn.py:687:25: S607 Starting a process with a partial executable path
    |
685 |                 try:
686 |                     output = subprocess.check_output(
687 |                         ["ip", "link", "show", "tun0"], text=True
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
688 |                     )
689 |                     if "UP" not in output:
    |

src/nyord_vpn/network/vpn.py:728:13: TRY300 Consider moving this statement to an `else` block
    |
726 |                 return False
727 |
728 |             return True
    |             ^^^^^^^^^^^ TRY300
729 |
730 |         except Exception as e:
    |

src/nyord_vpn/network/vpn.py:735:9: C901 `status` is too complex (11 > 10)
    |
733 |             return False
734 |
735 |     def status(self) -> dict[str, Any]:
    |         ^^^^^^ C901
736 |         """Get current VPN connection status.
    |

src/nyord_vpn/network/vpn.py:803:13: TRY300 Consider moving this statement to an `else` block
    |
801 |         try:
802 |             os.kill(process_id, 0)
803 |             return True
    |             ^^^^^^^^^^^ TRY300
804 |         except OSError:
805 |             return False
    |

src/nyord_vpn/network/vpn.py:811:9: C901 `check_connection_state` is too complex (11 > 10)
    |
809 |             return False
810 |
811 |     def check_connection_state(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^^^^^^ C901
812 |         """Check current VPN connection state.
    |

src/nyord_vpn/network/vpn.py:847:13: TRY300 Consider moving this statement to an `else` block
    |
845 |                         self.logger.debug(f"Failed to read OpenVPN log: {e}")
846 |
847 |             return False
    |             ^^^^^^^^^^^^ TRY300
848 |
849 |         except Exception as e:
    |

src/nyord_vpn/network/vpn.py:851:75: TRY401 Redundant exception object included in `logging.exception` call
    |
849 |         except Exception as e:
850 |             if self.verbose:
851 |                 self.logger.exception(f"Error checking connection state: {e}")
    |                                                                           ^ TRY401
852 |             return False
    |

src/nyord_vpn/network/vpn.py:864:9: C901 `go` is too complex (14 > 10)
    |
862 |             self.logger.debug("IP cache invalidated")
863 |
864 |     def go(self, country_code: str) -> None:
    |         ^^ C901
865 |         """Connect to VPN in specified country.
    |

src/nyord_vpn/network/vpn.py:864:9: PLR0912 Too many branches (13 > 12)
    |
862 |             self.logger.debug("IP cache invalidated")
863 |
864 |     def go(self, country_code: str) -> None:
    |         ^^ PLR0912
865 |         """Connect to VPN in specified country.
    |

src/nyord_vpn/network/vpn.py:892:17: TRY301 Abstract `raise` to an inner function
    |
890 |             servers = self.server_manager.select_fastest_server(country_code)
891 |             if not servers:
892 |                 raise VPNError(f"No servers available in {country_code}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
893 |
894 |             if self.verbose:
    |

src/nyord_vpn/network/vpn.py:892:23: TRY003 Avoid specifying long messages outside the exception class
    |
890 |             servers = self.server_manager.select_fastest_server(country_code)
891 |             if not servers:
892 |                 raise VPNError(f"No servers available in {country_code}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
893 |
894 |             if self.verbose:
    |

src/nyord_vpn/network/vpn.py:925:21: TRY300 Consider moving this statement to an `else` block
    |
923 |                     if self.verbose:
924 |                         self.logger.info(f"Successfully connected to {hostname}")
925 |                     return
    |                     ^^^^^^ TRY300
926 |
927 |                 except Exception as e:
    |

src/nyord_vpn/network/vpn.py:937:13: TRY301 Abstract `raise` to an inner function
    |
936 |               # If we get here, all servers failed
937 | /             raise VPNError(
938 | |                 f"Failed to connect to any server in {country_code}:\n"
939 | |                 + "\n".join(f"- {e}" for e in errors)
940 | |             )
    | |_____________^ TRY301
941 |
942 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:943:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
942 |         except Exception as e:
943 |             raise VPNError(f"Failed to connect: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/network/vpn.py:943:19: TRY003 Avoid specifying long messages outside the exception class
    |
942 |         except Exception as e:
943 |             raise VPNError(f"Failed to connect: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/network/vpn_commands.py:168:19: TRY003 Avoid specifying long messages outside the exception class
    |
166 |         # Check if config file exists
167 |         if not self.config_path.exists():
168 |             raise VPNConfigError(f"{CONFIG_FILE_NOT_FOUND}: {self.config_path}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
169 |
170 |         # Check if auth file exists
    |

src/nyord_vpn/network/vpn_commands.py:172:19: TRY003 Avoid specifying long messages outside the exception class
    |
170 |         # Check if auth file exists
171 |         if not self.auth_path.exists():
172 |             raise VPNConfigError(f"{AUTH_FILE_NOT_FOUND}: {self.auth_path}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
173 |
174 |         # Validate file permissions (should be readable)
    |

src/nyord_vpn/network/vpn_commands.py:179:19: TRY003 Avoid specifying long messages outside the exception class
    |
177 |             self.auth_path.read_bytes()
178 |         except (PermissionError, OSError) as e:
179 |             raise VPNConfigError(f"{CANNOT_READ_FILES}: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
180 |
181 |         # Create log directory if needed
    |

src/nyord_vpn/network/vpn_commands.py:197:23: TRY003 Avoid specifying long messages outside the exception class
    |
195 |         if isinstance(self.verbosity, int):
196 |             if not 1 <= self.verbosity <= 6:
197 |                 raise VPNConfigError(f"{INVALID_VERBOSITY}: {self.verbosity}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
198 |             # Convert to enum for consistent handling
199 |             with contextlib.suppress(ValueError):
    |

src/nyord_vpn/network/vpn_commands.py:213:19: TRY003 Avoid specifying long messages outside the exception class
    |
211 |         # Connect retry should be positive
212 |         if self.connect_retry < 1:
213 |             raise VPNConfigError(f"{INVALID_CONNECT_RETRY}: {self.connect_retry}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
214 |
215 |         # Connect timeout should be positive
    |

src/nyord_vpn/network/vpn_commands.py:217:19: TRY003 Avoid specifying long messages outside the exception class
    |
215 |         # Connect timeout should be positive
216 |         if self.connect_timeout < 1:
217 |             raise VPNConfigError(f"{INVALID_CONNECT_TIMEOUT}: {self.connect_timeout}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
218 |
219 |         # Ping interval should be positive
    |

src/nyord_vpn/network/vpn_commands.py:221:19: TRY003 Avoid specifying long messages outside the exception class
    |
219 |         # Ping interval should be positive
220 |         if self.ping_interval < 1:
221 |             raise VPNConfigError(f"{INVALID_PING_INTERVAL}: {self.ping_interval}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
222 |
223 |         # Ping restart should be greater than ping interval
    |

src/nyord_vpn/network/vpn_commands.py:225:19: TRY003 Avoid specifying long messages outside the exception class
    |
223 |           # Ping restart should be greater than ping interval
224 |           if self.ping_restart <= self.ping_interval:
225 |               raise VPNConfigError(
    |  ___________________^
226 | |                 f"{INVALID_PING_RESTART}: {self.ping_restart} (ping_interval: {self.ping_interval})"
227 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/network/vpn_commands.py:249:15: TRY003 Avoid specifying long messages outside the exception class
    |
247 |     # Check if openvpn is installed
248 |     if not shutil.which("openvpn"):
249 |         raise VPNConfigError(f"{OPENVPN_NOT_FOUND}. Please install OpenVPN first.")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
250 |
251 |     # Base command with common options
    |

src/nyord_vpn/storage/state.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/utils/connection.py:69:5: FBT001 Boolean-typed positional argument in function definition
   |
67 |     initial_ip: str | None,
68 |     connected_ip: str | None,
69 |     openvpn_running: bool,
   |     ^^^^^^^^^^^^^^^ FBT001
70 |     nord_status: bool | None = None,
71 | ) -> bool:
   |

src/nyord_vpn/utils/templates.py:64:9: TRY300 Consider moving this statement to an `else` block
   |
62 |     try:
63 |         actual_hash = calculate_sha256(path.read_bytes())
64 |         return actual_hash == expected_hash
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
65 |     except Exception as e:
66 |         log_debug("Failed to verify file integrity: {}", e)
   |

src/nyord_vpn/utils/templates.py:75:17: DTZ006 `datetime.datetime.fromtimestamp()` called without a `tz` argument
   |
73 |         if not CONFIG_ZIP.exists():
74 |             return None
75 |         mtime = datetime.fromtimestamp(CONFIG_ZIP.stat().st_mtime)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ006
76 |         return datetime.now() - mtime
77 |     except Exception as e:
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/nyord_vpn/utils/templates.py:76:16: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
74 |             return None
75 |         mtime = datetime.fromtimestamp(CONFIG_ZIP.stat().st_mtime)
76 |         return datetime.now() - mtime
   |                ^^^^^^^^^^^^^^ DTZ005
77 |     except Exception as e:
78 |         log_debug("Failed to get ZIP file age: {}", e)
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/nyord_vpn/utils/templates.py:104:17: S603 `subprocess` call: check for execution of untrusted input
    |
102 |         except PermissionError:
103 |             try:
104 |                 subprocess.run(
    |                 ^^^^^^^^^^^^^^ S603
105 |                     ["sudo", "chown", f"{user_id}:{group_id}", str(path)],
106 |                     check=True,
    |

src/nyord_vpn/utils/templates.py:105:21: S607 Starting a process with a partial executable path
    |
103 |             try:
104 |                 subprocess.run(
105 |                     ["sudo", "chown", f"{user_id}:{group_id}", str(path)],
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
106 |                     check=True,
107 |                     capture_output=True,
    |

src/nyord_vpn/utils/templates.py:110:23: TRY003 Avoid specifying long messages outside the exception class
    |
108 |                   )
109 |               except subprocess.CalledProcessError as e:
110 |                   raise VPNConfigError(
    |  _______________________^
111 | |                     f"Failed to set ownership with sudo: {e.stderr.decode()}"
112 | |                 ) from e
    | |_________________^ TRY003
113 |           log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
114 |       except Exception as e:
    |

src/nyord_vpn/utils/templates.py:115:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
113 |         log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
114 |     except Exception as e:
115 |         raise VPNConfigError(f"Failed to secure directory {path}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/utils/templates.py:115:15: TRY003 Avoid specifying long messages outside the exception class
    |
113 |         log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
114 |     except Exception as e:
115 |         raise VPNConfigError(f"Failed to secure directory {path}: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:129:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
127 |                       config.unlink()
128 |                       log_debug("Removed old config: {}", config)
129 | /                 except Exception as e:
130 | |                     log_debug("Failed to remove old config {}: {}", config, e)
    | |______________________________________________________________________________^ PERF203
131 |       except Exception as e:
132 |           log_debug("Failed to cleanup old configs: {}", e)
    |

src/nyord_vpn/utils/templates.py:145:26: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
143 |         try:
144 |             if attempt > 0:
145 |                 jitter = random.uniform(0, 0.1) * delay
    |                          ^^^^^^^^^^^^^^^^^^^^^^ S311
146 |                 sleep_time = delay + jitter
147 |                 log_debug(
    |

src/nyord_vpn/utils/templates.py:156:13: TRY300 Consider moving this statement to an `else` block
    |
154 |             content = response.content
155 |             content_hash = calculate_sha256(content)
156 |             return content, content_hash
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
157 |
158 |         except requests.RequestException as e:
    |

src/nyord_vpn/utils/templates.py:158:9: PERF203 `try`-`except` within a loop incurs performance overhead
    |
156 |               return content, content_hash
157 |
158 | /         except requests.RequestException as e:
159 | |             last_error = e
160 | |             if isinstance(e, requests.HTTPError) and (
161 | |                 400 <= e.response.status_code < 500 and e.response.status_code != 429
162 | |             ):
163 | |                 raise VPNConfigError(
164 | |                     f"Failed to download (HTTP {e.response.status_code}): {e}"
165 | |                 ) from e
166 | |             delay = min(delay * 2, MAX_RETRY_DELAY)
167 | |             log_debug(
168 | |                 "Download failed (attempt {}/{}): {}", attempt + 1, MAX_RETRIES, str(e)
169 | |             )
    | |_____________^ PERF203
170 |
171 |       if isinstance(last_error, requests.HTTPError):
    |

src/nyord_vpn/utils/templates.py:163:23: TRY003 Avoid specifying long messages outside the exception class
    |
161 |                   400 <= e.response.status_code < 500 and e.response.status_code != 429
162 |               ):
163 |                   raise VPNConfigError(
    |  _______________________^
164 | |                     f"Failed to download (HTTP {e.response.status_code}): {e}"
165 | |                 ) from e
    | |_________________^ TRY003
166 |               delay = min(delay * 2, MAX_RETRY_DELAY)
167 |               log_debug(
    |

src/nyord_vpn/utils/templates.py:172:15: TRY003 Avoid specifying long messages outside the exception class
    |
171 |       if isinstance(last_error, requests.HTTPError):
172 |           raise VPNConfigError(
    |  _______________^
173 | |             f"Failed to download after {MAX_RETRIES} retries "
174 | |             f"(HTTP {last_error.response.status_code}): {last_error}"
175 | |         ) from last_error
    | |_________^ TRY003
176 |       raise VPNConfigError(
177 |           f"Failed to download after {MAX_RETRIES} retries: {last_error}"
    |

src/nyord_vpn/utils/templates.py:176:11: TRY003 Avoid specifying long messages outside the exception class
    |
174 |               f"(HTTP {last_error.response.status_code}): {last_error}"
175 |           ) from last_error
176 |       raise VPNConfigError(
    |  ___________^
177 | |         f"Failed to download after {MAX_RETRIES} retries: {last_error}"
178 | |     ) from last_error
    | |_____^ TRY003
    |

src/nyord_vpn/utils/templates.py:181:5: C901 `extract_config_from_zip` is too complex (11 > 10)
    |
181 | def extract_config_from_zip(server: str) -> Path:
    |     ^^^^^^^^^^^^^^^^^^^^^^^ C901
182 |     """Extract a single OpenVPN config file from ZIP.
    |

src/nyord_vpn/utils/templates.py:200:9: PTH103 `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`
    |
199 |     try:
200 |         os.makedirs(CONFIG_DIR, exist_ok=True)
    |         ^^^^^^^^^^^ PTH103
201 |
202 |         # Make sure the directory has the right permissions
    |

src/nyord_vpn/utils/templates.py:220:21: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
218 | …     if tcp_configs:
219 | …         log_debug("Sample configs: {}", tcp_configs[:5])
220 | …     raise VPNConfigError(f"Config file {zip_config_path} not found in ZIP. ZIP contains {len(tcp_configs)} TCP configs.")
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
221 | …
222 | … # Extract the file
    |

src/nyord_vpn/utils/templates.py:220:27: TRY003 Avoid specifying long messages outside the exception class
    |
218 | … if tcp_configs:
219 | …     log_debug("Sample configs: {}", tcp_configs[:5])
220 | … raise VPNConfigError(f"Config file {zip_config_path} not found in ZIP. ZIP contains {len(tcp_configs)} TCP configs.")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
221 | …
222 | …xtract the file
    |

src/nyord_vpn/utils/templates.py:261:19: TRY003 Avoid specifying long messages outside the exception class
    |
259 |             with contextlib.suppress(Exception):
260 |                 CONFIG_ZIP.unlink()
261 |             raise VPNConfigError(f"Corrupted ZIP file: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
262 |
263 |     except Exception as e:
    |

src/nyord_vpn/utils/templates.py:265:15: TRY003 Avoid specifying long messages outside the exception class
    |
263 |     except Exception as e:
264 |         # Catch-all for any other errors
265 |         raise VPNConfigError(f"Failed to extract config file: {e}") from e
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:268:5: C901 `download_config_zip` is too complex (12 > 10)
    |
268 | def download_config_zip() -> None:
    |     ^^^^^^^^^^^^^^^^^^^ C901
269 |     """Download and cache the OpenVPN configuration ZIP file."""
270 |     try:
    |

src/nyord_vpn/utils/templates.py:281:21: TRY301 Abstract `raise` to an inner function
    |
279 |                 temp_zip.chmod(0o600)
280 |                 if not verify_file_integrity(temp_zip, content_hash):
281 |                     raise VPNConfigError("Downloaded file corrupted during write")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
282 |             except Exception as e:
283 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:281:27: TRY003 Avoid specifying long messages outside the exception class
    |
279 |                 temp_zip.chmod(0o600)
280 |                 if not verify_file_integrity(temp_zip, content_hash):
281 |                     raise VPNConfigError("Downloaded file corrupted during write")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
282 |             except Exception as e:
283 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:283:23: TRY003 Avoid specifying long messages outside the exception class
    |
281 |                     raise VPNConfigError("Downloaded file corrupted during write")
282 |             except Exception as e:
283 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
284 |
285 |             try:
    |

src/nyord_vpn/utils/templates.py:293:31: TRY003 Avoid specifying long messages outside the exception class
    |
291 |                       ]
292 |                       if not tcp_configs:
293 |                           raise VPNConfigError(
    |  _______________________________^
294 | |                             "Downloaded ZIP contains no TCP configurations"
295 | |                         )
    | |_________________________^ TRY003
296 |                       log_debug("ZIP contains {} TCP configs", len(tcp_configs))
297 |               except zipfile.BadZipFile as e:
    |

src/nyord_vpn/utils/templates.py:298:23: TRY003 Avoid specifying long messages outside the exception class
    |
296 |                     log_debug("ZIP contains {} TCP configs", len(tcp_configs))
297 |             except zipfile.BadZipFile as e:
298 |                 raise VPNConfigError("Downloaded file is not a valid ZIP") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
299 |
300 |             try:
    |

src/nyord_vpn/utils/templates.py:303:21: TRY301 Abstract `raise` to an inner function
    |
301 |                 temp_zip.replace(CONFIG_ZIP)
302 |                 if not verify_file_integrity(CONFIG_ZIP, content_hash):
303 |                     raise VPNConfigError("ZIP file corrupted during move")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
304 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
305 |             except Exception as e:
    |

src/nyord_vpn/utils/templates.py:303:27: TRY003 Avoid specifying long messages outside the exception class
    |
301 |                 temp_zip.replace(CONFIG_ZIP)
302 |                 if not verify_file_integrity(CONFIG_ZIP, content_hash):
303 |                     raise VPNConfigError("ZIP file corrupted during move")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
304 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
305 |             except Exception as e:
    |

src/nyord_vpn/utils/templates.py:306:23: TRY003 Avoid specifying long messages outside the exception class
    |
304 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
305 |             except Exception as e:
306 |                 raise VPNConfigError(f"Failed to save ZIP file: {e}") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
307 |
308 |         except Exception:
    |

src/nyord_vpn/utils/templates.py:312:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
310 |                   if temp_zip.exists():
311 |                       temp_zip.unlink()
312 | /             except Exception:
313 | |                 pass
    | |____________________^ S110
314 |               raise
    |

src/nyord_vpn/utils/templates.py:319:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
317 |         raise
318 |     except Exception as e:
319 |         raise VPNConfigError(f"Failed to download/cache configurations: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/utils/templates.py:319:15: TRY003 Avoid specifying long messages outside the exception class
    |
317 |         raise
318 |     except Exception as e:
319 |         raise VPNConfigError(f"Failed to download/cache configurations: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:322:5: C901 `get_config_path` is too complex (17 > 10)
    |
322 | def get_config_path(server: str) -> Path:
    |     ^^^^^^^^^^^^^^^ C901
323 |     """Get path to OpenVPN config file for server.
    |

src/nyord_vpn/utils/templates.py:322:5: PLR0912 Too many branches (19 > 12)
    |
322 | def get_config_path(server: str) -> Path:
    |     ^^^^^^^^^^^^^^^ PLR0912
323 |     """Get path to OpenVPN config file for server.
    |

src/nyord_vpn/utils/templates.py:322:5: PLR0915 Too many statements (63 > 50)
    |
322 | def get_config_path(server: str) -> Path:
    |     ^^^^^^^^^^^^^^^ PLR0915
323 |     """Get path to OpenVPN config file for server.
    |

src/nyord_vpn/utils/templates.py:367:17: TRY300 Consider moving this statement to an `else` block
    |
365 |                     config_path.chmod(0o600)
366 |                     log_debug("Fixed config file permissions for {}", config_path)
367 |                 return config_path
    |                 ^^^^^^^^^^^^^^^^^^ TRY300
368 |             except Exception as e:
369 |                 raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |

src/nyord_vpn/utils/templates.py:369:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
367 |                 return config_path
368 |             except Exception as e:
369 |                 raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
370 |
371 |     # If we're here, we need to download or extract from the ZIP
    |

src/nyord_vpn/utils/templates.py:369:23: TRY003 Avoid specifying long messages outside the exception class
    |
367 |                 return config_path
368 |             except Exception as e:
369 |                 raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
370 |
371 |     # If we're here, we need to download or extract from the ZIP
    |

src/nyord_vpn/utils/templates.py:401:27: TRY003 Avoid specifying long messages outside the exception class
    |
400 |                 if not country_servers:
401 |                     raise VPNConfigError(f"No servers found for country code '{server}' in the ZIP file")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
402 |
403 |                 # Sort by server number and pick the first one (usually lower load)
    |

src/nyord_vpn/utils/templates.py:414:19: TRY003 Avoid specifying long messages outside the exception class
    |
412 |             with contextlib.suppress(Exception):
413 |                 CONFIG_ZIP.unlink()
414 |             raise VPNConfigError(f"Corrupted ZIP file: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
415 |
416 |     # Now extract the config (either the original server or one we found for the country code)
    |

src/nyord_vpn/utils/templates.py:428:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
426 |             log_debug("Fixed config file permissions for {}", config_path)
427 |     except Exception as e:
428 |         raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
429 |
430 |     return config_path
    |

src/nyord_vpn/utils/templates.py:428:15: TRY003 Avoid specifying long messages outside the exception class
    |
426 |             log_debug("Fixed config file permissions for {}", config_path)
427 |     except Exception as e:
428 |         raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
429 |
430 |     return config_path
    |

src/nyord_vpn/utils/utils.py:138:34: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
136 |             # If in virtualenv, use nyord-vpn from virtualenv bin
137 |             if os.environ.get("VIRTUAL_ENV"):
138 |                 nyord_vpn_path = os.path.join(
    |                                  ^^^^^^^^^^^^ PTH118
139 |                     os.environ["VIRTUAL_ENV"], "bin", "nyord-vpn"
140 |                 )
    |

src/nyord_vpn/utils/utils.py:141:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
139 |                     os.environ["VIRTUAL_ENV"], "bin", "nyord-vpn"
140 |                 )
141 |                 if os.path.exists(nyord_vpn_path):
    |                    ^^^^^^^^^^^^^^ PTH110
142 |                     args = ["sudo", "-E", nyord_vpn_path, *cmd[1:]]
143 |                 else:
    |

src/nyord_vpn/utils/utils.py:160:13: S603 `subprocess` call: check for execution of untrusted input
    |
158 |                 logger.debug(f"Running command: {' '.join(args)}")
159 |
160 |             subprocess.run(args, env=env, check=True)
    |             ^^^^^^^^^^^^^^ S603
161 |             sys.exit(0)
162 |         except subprocess.CalledProcessError as e:
    |

src/nyord_vpn/utils/utils.py:183:9: TRY300 Consider moving this statement to an `else` block
    |
181 |     try:
182 |         os.kill(process_id, 0)
183 |         return True
    |         ^^^^^^^^^^^ TRY300
184 |     except OSError:
185 |         return False
    |

src/nyord_vpn/utils/utils.py:201:10: PTH123 `open()` should be replaced by `Path.open()`
    |
199 | # Load country ID mappings with fallback data
200 | try:
201 |     with open(COUNTRY_IDS_FILE) as f:
    |          ^^^^ PTH123
202 |         NORDVPN_COUNTRY_IDS: dict[str, str] = json.load(f)
203 | except (FileNotFoundError, json.JSONDecodeError):
    |

tests/conftest.py:12:26: ANN001 Missing type annotation for function argument `monkeypatch`
   |
11 | @pytest.fixture
12 | def mock_env_credentials(monkeypatch) -> None:
   |                          ^^^^^^^^^^^ ANN001
13 |     """Mock environment variables for testing."""
14 |     monkeypatch.setenv("NORD_USER", "test_user")
   |

tests/conftest.py:19:5: ANN201 Missing return type annotation for public function `mock_openvpn`
   |
18 | @pytest.fixture
19 | def mock_openvpn():
   |     ^^^^^^^^^^^^ ANN201
20 |     """Mock OpenVPN command."""
21 |     with patch("subprocess.run") as mock_run:
   |
   = help: Add return type annotation

tests/conftest.py:27:5: ANN201 Missing return type annotation for public function `mock_requests`
   |
26 | @pytest.fixture
27 | def mock_requests():
   |     ^^^^^^^^^^^^^ ANN201
28 |     """Mock requests for API calls."""
29 |     with patch("requests.get") as mock_get:
   |
   = help: Add return type annotation

tests/conftest.py:39:5: ANN201 Missing return type annotation for public function `mock_process`
   |
38 | @pytest.fixture
39 | def mock_process():
   |     ^^^^^^^^^^^^ ANN201
40 |     """Mock subprocess for OpenVPN."""
41 |     with patch("subprocess.Popen") as mock_popen:
   |
   = help: Add return type annotation

tests/conftest.py:48:5: ANN201 Missing return type annotation for public function `mock_client`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |     ^^^^^^^^^^^ ANN201
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |
   = help: Add return type annotation

tests/conftest.py:48:17: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                 ^^^^^^^^^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:39: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                       ^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:53: ANN001 Missing type annotation for function argument `mock_requests`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                                     ^^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:68: ANN001 Missing type annotation for function argument `mock_process`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                                                    ^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:71:5: ANN201 Missing return type annotation for public function `temp_config_file`
   |
70 | @pytest.fixture
71 | def temp_config_file(tmp_path):
   |     ^^^^^^^^^^^^^^^^ ANN201
72 |     """Create a temporary config file."""
73 |     config = {
   |
   = help: Add return type annotation

tests/conftest.py:71:22: ANN001 Missing type annotation for function argument `tmp_path`
   |
70 | @pytest.fixture
71 | def temp_config_file(tmp_path):
   |                      ^^^^^^^^ ANN001
72 |     """Create a temporary config file."""
73 |     config = {
   |

tests/conftest.py:86:5: ANN201 Missing return type annotation for public function `mock_ip_info`
   |
85 | @pytest.fixture
86 | def mock_ip_info():
   |     ^^^^^^^^^^^^ ANN201
87 |     """Mock IP info response."""
88 |     with patch("requests.get") as mock_get:
   |
   = help: Add return type annotation

tests/integration/test_config_loading.py:14:29: ANN001 Missing type annotation for function argument `temp_dir`
   |
13 | @pytest.mark.integration
14 | async def test_file_loading(temp_dir) -> None:
   |                             ^^^^^^^^ ANN001
15 |     """Test configuration loading from file."""
16 |     # Create config file with all options
   |

tests/integration/test_config_loading.py:51:47: ANN001 Missing type annotation for function argument `monkeypatch`
   |
50 | @pytest.mark.integration
51 | async def test_environment_loading_unprefixed(monkeypatch) -> None:
   |                                               ^^^^^^^^^^^ ANN001
52 |     """Test configuration loading from unprefixed environment variables."""
53 |     # Set environment variables
   |

tests/integration/test_config_loading.py:68:45: ANN001 Missing type annotation for function argument `monkeypatch`
   |
67 | @pytest.mark.integration
68 | async def test_environment_loading_prefixed(monkeypatch) -> None:
   |                                             ^^^^^^^^^^^ ANN001
69 |     """Test configuration loading from prefixed environment variables."""
70 |     # Set environment variables
   |

tests/integration/test_config_loading.py:85:47: ANN001 Missing type annotation for function argument `monkeypatch`
   |
84 | @pytest.mark.integration
85 | async def test_environment_loading_precedence(monkeypatch) -> None:
   |                                               ^^^^^^^^^^^ ANN001
86 |     """Test precedence between prefixed and unprefixed environment variables."""
87 |     # Set both prefixed and unprefixed variables
   |

tests/integration/test_config_loading.py:103:41: S106 Possible hardcoded password assigned to argument: "password"
    |
101 |     """Test configuration default values."""
102 |     # Test with minimal configuration
103 |     config = VPNConfig(username="test", password="test")
    |                                         ^^^^^^^^^^^^^^^ S106
104 |     assert config.username == "test"
105 |     assert config.password.get_secret_value() == "test"
    |

tests/integration/test_config_loading.py:113:38: S106 Possible hardcoded password assigned to argument: "password"
    |
112 |     # Test with VPNClient
113 |     client = Client(username="test", password="test")
    |                                      ^^^^^^^^^^^^^^^ S106
114 |     assert client.config.username == "test"
115 |     assert client.config.password.get_secret_value() == "test"
    |

tests/integration/test_config_loading.py:124:39: ANN001 Missing type annotation for function argument `temp_dir`
    |
123 | @pytest.mark.integration
124 | async def test_config_file_precedence(temp_dir, monkeypatch) -> None:
    |                                       ^^^^^^^^ ANN001
125 |     """Test configuration loading precedence between file and environment."""
126 |     # Create config file
    |

tests/integration/test_config_loading.py:124:49: ANN001 Missing type annotation for function argument `monkeypatch`
    |
123 | @pytest.mark.integration
124 | async def test_config_file_precedence(temp_dir, monkeypatch) -> None:
    |                                                 ^^^^^^^^^^^ ANN001
125 |     """Test configuration loading precedence between file and environment."""
126 |     # Create config file
    |

tests/integration/test_config_loading.py:170:34: ANN001 Missing type annotation for function argument `temp_dir`
    |
169 | @pytest.mark.integration
170 | async def test_config_validation(temp_dir) -> None:
    |                                  ^^^^^^^^ ANN001
171 |     """Test configuration validation."""
172 |     # Test invalid retry attempts
    |

tests/integration/test_config_loading.py:243:24: ANN001 Missing type annotation for function argument `monkeypatch`
    |
243 | def test_load_from_env(monkeypatch) -> None:
    |                        ^^^^^^^^^^^ ANN001
244 |     """Test loading configuration from environment variables."""
245 |     # Set environment variables
    |

tests/integration/test_config_loading.py:300:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
298 |     empty_path = tmp_path / "empty.json"
299 |     empty_path.write_text("{}")
300 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
301 |         VPNConfig.from_file(empty_path)
    |

tests/integration/test_config_loading.py:304:30: ANN001 Missing type annotation for function argument `monkeypatch`
    |
304 | def test_invalid_environment(monkeypatch) -> None:
    |                              ^^^^^^^^^^^ ANN001
305 |     """Test handling of invalid environment variables."""
306 |     # Test missing required variables
    |

tests/integration/test_config_loading.py:307:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
305 |     """Test handling of invalid environment variables."""
306 |     # Test missing required variables
307 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
308 |         VPNConfig.from_env()
    |

tests/integration/test_config_loading.py:314:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
312 |     monkeypatch.setenv("NORDVPN_PASSWORD", TEST_PASSWORD.get_secret_value())
313 |     monkeypatch.setenv("NORDVPN_API_TIMEOUT", "invalid")
314 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
315 |         VPNConfig.from_env()
    |

tests/integration/test_connection.py:13:5: ANN001 Missing type annotation for function argument `mock_client`
   |
11 | @pytest.mark.asyncio
12 | async def test_connection_success(
13 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
14 |     mock_aiohttp_session,
15 |     mock_subprocess,
   |

tests/integration/test_connection.py:14:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
12 | async def test_connection_success(
13 |     mock_client,
14 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
15 |     mock_subprocess,
16 |     mock_pycountry,
   |

tests/integration/test_connection.py:15:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
13 |     mock_client,
14 |     mock_aiohttp_session,
15 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
16 |     mock_pycountry,
17 |     mock_env_credentials,
   |

tests/integration/test_connection.py:16:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
14 |     mock_aiohttp_session,
15 |     mock_subprocess,
16 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
17 |     mock_env_credentials,
18 | ) -> None:
   |

tests/integration/test_connection.py:17:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
15 |     mock_subprocess,
16 |     mock_pycountry,
17 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
18 | ) -> None:
19 |     """Test successful VPN connection."""
   |

tests/integration/test_connection.py:43:5: ANN001 Missing type annotation for function argument `mock_client`
   |
41 | @pytest.mark.asyncio
42 | async def test_connection_failure(
43 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
44 |     mock_aiohttp_session,
45 |     mock_subprocess,
   |

tests/integration/test_connection.py:44:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
42 | async def test_connection_failure(
43 |     mock_client,
44 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
45 |     mock_subprocess,
46 |     mock_pycountry,
   |

tests/integration/test_connection.py:45:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
43 |     mock_client,
44 |     mock_aiohttp_session,
45 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
46 |     mock_pycountry,
47 |     mock_env_credentials,
   |

tests/integration/test_connection.py:46:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
44 |     mock_aiohttp_session,
45 |     mock_subprocess,
46 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
47 |     mock_env_credentials,
48 | ) -> None:
   |

tests/integration/test_connection.py:47:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
45 |     mock_subprocess,
46 |     mock_pycountry,
47 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
48 | ) -> None:
49 |     """Test VPN connection failure handling."""
   |

tests/integration/test_connection.py:74:5: ANN001 Missing type annotation for function argument `mock_client`
   |
72 | @pytest.mark.asyncio
73 | async def test_country_selection(
74 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
75 |     mock_aiohttp_session,
76 |     mock_subprocess,
   |

tests/integration/test_connection.py:75:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
73 | async def test_country_selection(
74 |     mock_client,
75 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
76 |     mock_subprocess,
77 |     mock_pycountry,
   |

tests/integration/test_connection.py:76:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
74 |     mock_client,
75 |     mock_aiohttp_session,
76 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
77 |     mock_pycountry,
78 |     mock_env_credentials,
   |

tests/integration/test_connection.py:77:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
75 |     mock_aiohttp_session,
76 |     mock_subprocess,
77 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
78 |     mock_env_credentials,
79 | ) -> None:
   |

tests/integration/test_connection.py:78:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
76 |     mock_subprocess,
77 |     mock_pycountry,
78 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
79 | ) -> None:
80 |     """Test VPN country selection."""
   |

tests/integration/test_errors.py:20:5: ANN001 Missing type annotation for function argument `mock_client`
   |
18 | @pytest.mark.asyncio
19 | async def test_network_errors(
20 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
21 |     mock_aiohttp_session,
22 |     mock_subprocess,
   |

tests/integration/test_errors.py:21:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
19 | async def test_network_errors(
20 |     mock_client,
21 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
22 |     mock_subprocess,
23 |     mock_pycountry,
   |

tests/integration/test_errors.py:22:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
20 |     mock_client,
21 |     mock_aiohttp_session,
22 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
23 |     mock_pycountry,
24 |     mock_env_credentials,
   |

tests/integration/test_errors.py:23:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
21 |     mock_aiohttp_session,
22 |     mock_subprocess,
23 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
24 |     mock_env_credentials,
25 | ) -> None:
   |

tests/integration/test_errors.py:24:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
22 |     mock_subprocess,
23 |     mock_pycountry,
24 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
25 | ) -> None:
26 |     """Test handling of network-related errors."""
   |

tests/integration/test_errors.py:55:5: ANN001 Missing type annotation for function argument `mock_client`
   |
53 | @pytest.mark.asyncio
54 | async def test_subprocess_errors(
55 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
56 |     mock_aiohttp_session,
57 |     mock_subprocess,
   |

tests/integration/test_errors.py:56:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
54 | async def test_subprocess_errors(
55 |     mock_client,
56 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
57 |     mock_subprocess,
58 |     mock_pycountry,
   |

tests/integration/test_errors.py:57:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
55 |     mock_client,
56 |     mock_aiohttp_session,
57 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
58 |     mock_pycountry,
59 |     mock_env_credentials,
   |

tests/integration/test_errors.py:58:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
56 |     mock_aiohttp_session,
57 |     mock_subprocess,
58 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
59 |     mock_env_credentials,
60 | ) -> None:
   |

tests/integration/test_errors.py:59:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
57 |     mock_subprocess,
58 |     mock_pycountry,
59 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
60 | ) -> None:
61 |     """Test handling of subprocess-related errors."""
   |

tests/integration/test_errors.py:78:5: ANN001 Missing type annotation for function argument `mock_client`
   |
76 | @pytest.mark.asyncio
77 | async def test_configuration_errors(
78 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
79 |     mock_aiohttp_session,
80 |     mock_subprocess,
   |

tests/integration/test_errors.py:79:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
77 | async def test_configuration_errors(
78 |     mock_client,
79 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
80 |     mock_subprocess,
81 |     mock_pycountry,
   |

tests/integration/test_errors.py:80:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
78 |     mock_client,
79 |     mock_aiohttp_session,
80 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
81 |     mock_pycountry,
82 |     temp_dir,
   |

tests/integration/test_errors.py:81:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
79 |     mock_aiohttp_session,
80 |     mock_subprocess,
81 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
82 |     temp_dir,
83 | ) -> None:
   |

tests/integration/test_errors.py:82:5: ANN001 Missing type annotation for function argument `temp_dir`
   |
80 |     mock_subprocess,
81 |     mock_pycountry,
82 |     temp_dir,
   |     ^^^^^^^^ ANN001
83 | ) -> None:
84 |     """Test handling of configuration-related errors."""
   |

tests/integration/test_errors.py:115:5: ANN001 Missing type annotation for function argument `mock_client`
    |
113 | @pytest.mark.asyncio
114 | async def test_api_errors(
115 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
116 |     mock_aiohttp_session,
117 |     mock_subprocess,
    |

tests/integration/test_errors.py:116:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
114 | async def test_api_errors(
115 |     mock_client,
116 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
117 |     mock_subprocess,
118 |     mock_pycountry,
    |

tests/integration/test_errors.py:117:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
115 |     mock_client,
116 |     mock_aiohttp_session,
117 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
118 |     mock_pycountry,
119 |     mock_env_credentials,
    |

tests/integration/test_errors.py:118:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
116 |     mock_aiohttp_session,
117 |     mock_subprocess,
118 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
119 |     mock_env_credentials,
120 | ) -> None:
    |

tests/integration/test_errors.py:119:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
117 |     mock_subprocess,
118 |     mock_pycountry,
119 |     mock_env_credentials,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
120 | ) -> None:
121 |     """Test handling of API-related errors."""
    |

tests/integration/test_errors.py:142:5: ANN001 Missing type annotation for function argument `mock_client`
    |
140 | @pytest.mark.asyncio
141 | async def test_error_recovery(
142 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
143 |     mock_aiohttp_session,
144 |     mock_subprocess,
    |

tests/integration/test_errors.py:143:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
141 | async def test_error_recovery(
142 |     mock_client,
143 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
144 |     mock_subprocess,
145 |     mock_pycountry,
    |

tests/integration/test_errors.py:144:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
142 |     mock_client,
143 |     mock_aiohttp_session,
144 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
145 |     mock_pycountry,
146 | ) -> None:
    |

tests/integration/test_errors.py:145:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
143 |     mock_aiohttp_session,
144 |     mock_subprocess,
145 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
146 | ) -> None:
147 |     """Test error recovery behavior."""
    |

tests/integration/test_errors.py:198:11: F811 Redefinition of unused `test_network_errors` from line 19
    |
197 | @pytest.mark.asyncio
198 | async def test_network_errors() -> None:
    |           ^^^^^^^^^^^^^^^^^^^ F811
199 |     """Test handling of network errors."""
200 |     client = VPNClient(
    |
    = help: Remove definition: `test_network_errors`

tests/integration/test_errors.py:302:5: ANN001 Missing type annotation for function argument `mock_client`
    |
300 | @pytest.mark.asyncio
301 | async def test_cleanup_after_error(
302 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
303 |     mock_aiohttp_session,
304 |     mock_subprocess,
    |

tests/integration/test_errors.py:303:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
301 | async def test_cleanup_after_error(
302 |     mock_client,
303 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
304 |     mock_subprocess,
305 |     mock_pycountry,
    |

tests/integration/test_errors.py:304:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
302 |     mock_client,
303 |     mock_aiohttp_session,
304 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
305 |     mock_pycountry,
306 |     mock_env_credentials,
    |

tests/integration/test_errors.py:305:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
303 |     mock_aiohttp_session,
304 |     mock_subprocess,
305 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
306 |     mock_env_credentials,
307 | ) -> None:
    |

tests/integration/test_errors.py:306:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
304 |     mock_subprocess,
305 |     mock_pycountry,
306 |     mock_env_credentials,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
307 | ) -> None:
308 |     """Test cleanup after errors."""
    |

tests/integration/test_validation_integration.py:13:5: ANN201 Missing return type annotation for public function `clear_env`
   |
12 | @pytest.fixture(autouse=True)
13 | def clear_env():
   |     ^^^^^^^^^ ANN201
14 |     """Clear environment variables before each test."""
15 |     os.environ.pop("NORD_USER", None)
   |
   = help: Add return type annotation

tests/integration/test_validation_integration.py:37:35: S105 Possible hardcoded password assigned to: "NORD_PASSWORD"
   |
35 |     """Test invalid country with Njord API."""
36 |     os.environ["NORD_USER"] = "test_user"
37 |     os.environ["NORD_PASSWORD"] = "test_pass"
   |                                   ^^^^^^^^^^^ S105
38 |     with pytest.raises(VPNError):
39 |         client = NjordVPNClient()
   |

tests/integration/test_validation_integration.py:38:5: PT012 `pytest.raises()` block should contain a single simple statement
   |
36 |       os.environ["NORD_USER"] = "test_user"
37 |       os.environ["NORD_PASSWORD"] = "test_pass"
38 | /     with pytest.raises(VPNError):
39 | |         client = NjordVPNClient()
40 | |         client.connect("Invalid Country")
   | |_________________________________________^ PT012
   |

tests/integration/test_validation_integration.py:46:35: S105 Possible hardcoded password assigned to: "NORD_PASSWORD"
   |
44 |     """Test invalid country with Legacy API."""
45 |     os.environ["NORD_USER"] = "test_user"
46 |     os.environ["NORD_PASSWORD"] = "test_pass"
   |                                   ^^^^^^^^^^^ S105
47 |     with pytest.raises(VPNError):
48 |         client = LegacyVPNClient()
   |

tests/integration/test_validation_integration.py:47:5: PT012 `pytest.raises()` block should contain a single simple statement
   |
45 |       os.environ["NORD_USER"] = "test_user"
46 |       os.environ["NORD_PASSWORD"] = "test_pass"
47 | /     with pytest.raises(VPNError):
48 | |         client = LegacyVPNClient()
49 | |         client.connect("Invalid Country")
   | |_________________________________________^ PT012
   |

tests/test_api.py:51:18: ANN001 Missing type annotation for function argument `sample_group_type`
   |
50 | @pytest.fixture
51 | def sample_group(sample_group_type) -> dict:
   |                  ^^^^^^^^^^^^^^^^^ ANN001
52 |     """Create a sample group for testing."""
53 |     return {
   |

tests/test_api.py:77:19: ANN001 Missing type annotation for function argument `sample_group_type`
   |
76 | @pytest.fixture
77 | def sample_server(sample_group_type) -> dict:
   |                   ^^^^^^^^^^^^^^^^^ ANN001
78 |     """Create a sample server for testing."""
79 |     return {
   |

tests/test_api.py:138:24: ANN001 Missing type annotation for function argument `sample_country`
    |
138 | def test_get_countries(sample_country) -> None:
    |                        ^^^^^^^^^^^^^^ ANN001
139 |     """Test fetching countries from the API."""
140 |     with patch("requests.get") as mock_get:
    |

tests/test_api.py:156:21: ANN001 Missing type annotation for function argument `sample_group`
    |
156 | def test_get_groups(sample_group) -> None:
    |                     ^^^^^^^^^^^^ ANN001
157 |     """Test fetching groups from the API."""
158 |     with patch("requests.get") as mock_get:
    |

tests/test_api.py:171:27: ANN001 Missing type annotation for function argument `sample_technology`
    |
171 | def test_get_technologies(sample_technology) -> None:
    |                           ^^^^^^^^^^^^^^^^^ ANN001
172 |     """Test fetching technologies from the API."""
173 |     with patch("requests.get") as mock_get:
    |

tests/test_api.py:187:22: ANN001 Missing type annotation for function argument `sample_server`
    |
187 | def test_get_servers(sample_server) -> None:
    |                      ^^^^^^^^^^^^^ ANN001
188 |     """Test fetching servers from the API."""
189 |     with patch("requests.get") as mock_get:
    |

tests/test_client.py:8:25: ANN001 Missing type annotation for function argument `mock_client`
   |
 8 | def test_client_connect(mock_client) -> None:
   |                         ^^^^^^^^^^^ ANN001
 9 |     """Test VPN client connect."""
10 |     # Test successful connection
   |

tests/test_client.py:22:28: ANN001 Missing type annotation for function argument `mock_client`
   |
22 | def test_client_disconnect(mock_client) -> None:
   |                            ^^^^^^^^^^^ ANN001
23 |     """Test VPN client disconnect."""
24 |     # Connect first
   |

tests/test_client.py:36:32: ANN001 Missing type annotation for function argument `mock_client`
   |
36 | def test_client_list_countries(mock_client) -> None:
   |                                ^^^^^^^^^^^ ANN001
37 |     """Test VPN client country listing."""
38 |     countries = mock_client.list_countries()
   |

tests/test_client.py:45:32: ANN001 Missing type annotation for function argument `mock_client`
   |
45 | def test_client_error_handling(mock_client, mocker) -> None:
   |                                ^^^^^^^^^^^ ANN001
46 |     """Test VPN client error handling."""
47 |     # Mock API to raise error
   |

tests/test_client.py:45:45: ANN001 Missing type annotation for function argument `mocker`
   |
45 | def test_client_error_handling(mock_client, mocker) -> None:
   |                                             ^^^^^^ ANN001
46 |     """Test VPN client error handling."""
47 |     # Mock API to raise error
   |

tests/test_client.py:49:9: SLF001 Private member accessed: `_connect`
   |
47 |     # Mock API to raise error
48 |     mocker.patch.object(
49 |         mock_client._connect,
   |         ^^^^^^^^^^^^^^^^^^^^ SLF001
50 |         "__call__",
51 |         side_effect=VPNError("Test error"),
   |

tests/test_client.py:60:39: ANN001 Missing type annotation for function argument `mock_client`
   |
59 | @pytest.mark.asyncio
60 | async def test_client_context_manager(mock_client) -> None:
   |                                       ^^^^^^^^^^^ ANN001
61 |     """Test VPN client context manager."""
62 |     async with mock_client as client:
   |

tests/test_legacy_api.py:13:15: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
13 | def test_init(mock_env_credentials, mock_openvpn) -> None:
   |               ^^^^^^^^^^^^^^^^^^^^ ANN001
14 |     """Test LegacyVPNClient initialization."""
15 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:13:37: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
13 | def test_init(mock_env_credentials, mock_openvpn) -> None:
   |                                     ^^^^^^^^^^^^ ANN001
14 |     """Test LegacyVPNClient initialization."""
15 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:22:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
21 | def test_connect_success(
22 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
23 |     mock_openvpn,
24 |     mock_requests,
   |

tests/test_legacy_api.py:23:5: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
21 | def test_connect_success(
22 |     mock_env_credentials,
23 |     mock_openvpn,
   |     ^^^^^^^^^^^^ ANN001
24 |     mock_requests,
25 |     mock_process,
   |

tests/test_legacy_api.py:24:5: ANN001 Missing type annotation for function argument `mock_requests`
   |
22 |     mock_env_credentials,
23 |     mock_openvpn,
24 |     mock_requests,
   |     ^^^^^^^^^^^^^ ANN001
25 |     mock_process,
26 |     mock_ip_info,
   |

tests/test_legacy_api.py:25:5: ANN001 Missing type annotation for function argument `mock_process`
   |
23 |     mock_openvpn,
24 |     mock_requests,
25 |     mock_process,
   |     ^^^^^^^^^^^^ ANN001
26 |     mock_ip_info,
27 | ) -> None:
   |

tests/test_legacy_api.py:26:5: ANN001 Missing type annotation for function argument `mock_ip_info`
   |
24 |     mock_requests,
25 |     mock_process,
26 |     mock_ip_info,
   |     ^^^^^^^^^^^^ ANN001
27 | ) -> None:
28 |     """Test successful connection."""
   |

tests/test_legacy_api.py:34:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
33 | def test_connect_failure(
34 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
35 |     mock_openvpn,
36 |     mock_requests,
   |

tests/test_legacy_api.py:35:5: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
33 | def test_connect_failure(
34 |     mock_env_credentials,
35 |     mock_openvpn,
   |     ^^^^^^^^^^^^ ANN001
36 |     mock_requests,
37 |     mock_process,
   |

tests/test_legacy_api.py:36:5: ANN001 Missing type annotation for function argument `mock_requests`
   |
34 |     mock_env_credentials,
35 |     mock_openvpn,
36 |     mock_requests,
   |     ^^^^^^^^^^^^^ ANN001
37 |     mock_process,
38 | ) -> None:
   |

tests/test_legacy_api.py:37:5: ANN001 Missing type annotation for function argument `mock_process`
   |
35 |     mock_openvpn,
36 |     mock_requests,
37 |     mock_process,
   |     ^^^^^^^^^^^^ ANN001
38 | ) -> None:
39 |     """Test connection failure."""
   |

tests/test_legacy_api.py:46:29: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
46 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                             ^^^^^^^^^^^^^^^^^^^^ ANN001
47 |     """Test successful disconnection."""
48 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:46:51: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
46 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                                                   ^^^^^^^^^^^^ ANN001
47 |     """Test successful disconnection."""
48 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:46:65: ANN001 Missing type annotation for function argument `mock_process`
   |
46 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                                                                 ^^^^^^^^^^^^ ANN001
47 |     """Test successful disconnection."""
48 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:52:27: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
52 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                           ^^^^^^^^^^^^^^^^^^^^ ANN001
53 |     """Test status when connected."""
54 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:52:49: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
52 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                                                 ^^^^^^^^^^^^ ANN001
53 |     """Test status when connected."""
54 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:52:63: ANN001 Missing type annotation for function argument `mock_ip_info`
   |
52 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                                                               ^^^^^^^^^^^^ ANN001
53 |     """Test status when connected."""
54 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:62:25: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
62 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                         ^^^^^^^^^^^^^^^^^^^^ ANN001
63 |     """Test listing available countries."""
64 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:62:47: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
62 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                               ^^^^^^^^^^^^ ANN001
63 |     """Test listing available countries."""
64 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:62:61: ANN001 Missing type annotation for function argument `mock_requests`
   |
62 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                             ^^^^^^^^^^^^^ ANN001
63 |     """Test listing available countries."""
64 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:77:28: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
77 | def test_openvpn_not_found(mock_env_credentials) -> None:
   |                            ^^^^^^^^^^^^^^^^^^^^ ANN001
78 |     """Test OpenVPN not found error."""
79 |     with pytest.raises(VPNError, match="OpenVPN not found"):
   |

tests/test_legacy_api.py:83:27: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
83 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                           ^^^^^^^^^^^^^^^^^^^^ ANN001
84 |     """Test server not found error."""
85 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:83:49: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
83 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                 ^^^^^^^^^^^^ ANN001
84 |     """Test server not found error."""
85 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:83:63: ANN001 Missing type annotation for function argument `mock_requests`
   |
83 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                               ^^^^^^^^^^^^^ ANN001
84 |     """Test server not found error."""
85 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:92:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
91 | def test_config_download_error(
92 |     mock_env_credentials, mock_openvpn, mock_requests
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
93 | ) -> None:
94 |     """Test config download error."""
   |

tests/test_legacy_api.py:92:27: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
91 | def test_config_download_error(
92 |     mock_env_credentials, mock_openvpn, mock_requests
   |                           ^^^^^^^^^^^^ ANN001
93 | ) -> None:
94 |     """Test config download error."""
   |

tests/test_legacy_api.py:92:41: ANN001 Missing type annotation for function argument `mock_requests`
   |
91 | def test_config_download_error(
92 |     mock_env_credentials, mock_openvpn, mock_requests
   |                                         ^^^^^^^^^^^^^ ANN001
93 | ) -> None:
94 |     """Test config download error."""
   |

tests/test_legacy_api.py:102:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
101 | def test_process_error(
102 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
103 | ) -> None:
104 |     """Test process error handling."""
    |

tests/test_legacy_api.py:102:27: ANN001 Missing type annotation for function argument `mock_openvpn`
    |
101 | def test_process_error(
102 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                           ^^^^^^^^^^^^ ANN001
103 | ) -> None:
104 |     """Test process error handling."""
    |

tests/test_legacy_api.py:102:41: ANN001 Missing type annotation for function argument `mock_requests`
    |
101 | def test_process_error(
102 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                                         ^^^^^^^^^^^^^ ANN001
103 | ) -> None:
104 |     """Test process error handling."""
    |

tests/test_legacy_api.py:102:56: ANN001 Missing type annotation for function argument `mock_process`
    |
101 | def test_process_error(
102 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                                                        ^^^^^^^^^^^^ ANN001
103 | ) -> None:
104 |     """Test process error handling."""
    |

tests/test_server_manager.py:18:5: ANN201 Missing return type annotation for public function `mock_api_client`
   |
17 | @pytest.fixture
18 | def mock_api_client():
   |     ^^^^^^^^^^^^^^^ ANN201
19 |     """Create a mock API client."""
20 |     client = MagicMock(spec=NordVPNAPI)
   |
   = help: Add return type annotation

tests/test_server_manager.py:27:5: ANN201 Missing return type annotation for public function `server_manager`
   |
26 | @pytest.fixture
27 | def server_manager(mock_api_client):
   |     ^^^^^^^^^^^^^^ ANN201
28 |     """Create a server manager instance."""
29 |     return ServerManager(mock_api_client)
   |
   = help: Add return type annotation

tests/test_server_manager.py:27:20: ANN001 Missing type annotation for function argument `mock_api_client`
   |
26 | @pytest.fixture
27 | def server_manager(mock_api_client):
   |                    ^^^^^^^^^^^^^^^ ANN001
28 |     """Create a server manager instance."""
29 |     return ServerManager(mock_api_client)
   |

tests/test_server_manager.py:32:33: ANN001 Missing type annotation for function argument `server_manager`
   |
32 | def test_openvpn_tcp_validation(server_manager) -> None:
   |                                 ^^^^^^^^^^^^^^ ANN001
33 |     """Test OpenVPN TCP technology validation."""
34 |     # Test regular OpenVPN TCP
   |

tests/test_server_manager.py:44:12: SLF001 Private member accessed: `_is_valid_server`
   |
42 |         ],
43 |     }
44 |     assert server_manager._is_valid_server(server) is True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
45 |
46 |     # Test OpenVPN TCP Dedicated
   |

tests/test_server_manager.py:56:12: SLF001 Private member accessed: `_is_valid_server`
   |
54 |         ],
55 |     }
56 |     assert server_manager._is_valid_server(server) is True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
57 |
58 |     # Test server without OpenVPN TCP
   |

tests/test_server_manager.py:69:12: SLF001 Private member accessed: `_is_valid_server`
   |
67 |         ],
68 |     }
69 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
70 |
71 |     # Test server with invalid technology format
   |

tests/test_server_manager.py:83:12: SLF001 Private member accessed: `_is_valid_server`
   |
81 |         ],
82 |     }
83 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
84 |
85 |     # Test server with empty technologies
   |

tests/test_server_manager.py:93:12: SLF001 Private member accessed: `_is_valid_server`
   |
91 |         "technologies": [],
92 |     }
93 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
94 |
95 |     # Test server with invalid hostname
   |

tests/test_server_manager.py:105:12: SLF001 Private member accessed: `_is_valid_server`
    |
103 |         ],
104 |     }
105 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
106 |
107 |     # Test server with invalid status
    |

tests/test_server_manager.py:117:12: SLF001 Private member accessed: `_is_valid_server`
    |
115 |         ],
116 |     }
117 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
118 |
119 |     # Test server with invalid load
    |

tests/test_server_manager.py:129:12: SLF001 Private member accessed: `_is_valid_server`
    |
127 |         ],
128 |     }
129 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
130 |
131 |     # Test server with invalid country code
    |

tests/test_server_manager.py:141:12: SLF001 Private member accessed: `_is_valid_server`
    |
139 |         ],
140 |     }
141 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
    |

tests/test_server_manager.py:144:27: ANN001 Missing type annotation for function argument `server_manager`
    |
144 | def test_server_filtering(server_manager, mock_api_client) -> None:
    |                           ^^^^^^^^^^^^^^ ANN001
145 |     """Test server filtering in get_servers_cache."""
146 |     # Mock API response with various server types
    |

tests/test_server_manager.py:144:43: ANN001 Missing type annotation for function argument `mock_api_client`
    |
144 | def test_server_filtering(server_manager, mock_api_client) -> None:
    |                                           ^^^^^^^^^^^^^^^ ANN001
145 |     """Test server filtering in get_servers_cache."""
146 |     # Mock API response with various server types
    |

tests/test_v1_countries.py:34:20: ANN001 Missing type annotation for function argument `sample_city`
   |
33 | @pytest.fixture
34 | def sample_country(sample_city) -> dict:
   |                    ^^^^^^^^^^^ ANN001
35 |     """Create a sample country for testing."""
36 |     return {
   |

tests/test_v1_countries.py:46:22: ANN001 Missing type annotation for function argument `sample_country`
   |
45 | @pytest.fixture
46 | def sample_countries(sample_country) -> list[dict]:
   |                      ^^^^^^^^^^^^^^ ANN001
47 |     """Create a list of sample countries for testing."""
48 |     return [
   |

tests/test_v1_countries.py:70:26: ANN001 Missing type annotation for function argument `sample_countries`
   |
70 | def test_fetch_countries(sample_countries) -> None:
   |                          ^^^^^^^^^^^^^^^^ ANN001
71 |     """Test fetching countries from the API."""
72 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_countries.py:88:30: ANN001 Missing type annotation for function argument `sample_countries`
   |
88 | def test_get_country_by_code(sample_countries) -> None:
   |                              ^^^^^^^^^^^^^^^^ ANN001
89 |     """Test finding a country by its code."""
90 |     countries = [Country.model_validate(c) for c in sample_countries]
   |

tests/test_v1_countries.py:103:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
102 |     # Test non-existent country
103 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
104 |         get_country_by_code(countries, "XX")
    |

tests/test_v1_countries.py:107:39: ANN001 Missing type annotation for function argument `sample_countries`
    |
107 | def test_get_countries_by_min_servers(sample_countries) -> None:
    |                                       ^^^^^^^^^^^^^^^^ ANN001
108 |     """Test filtering countries by minimum server count."""
109 |     countries = [Country.model_validate(c) for c in sample_countries]
    |

tests/test_v1_countries.py:125:27: ANN001 Missing type annotation for function argument `sample_countries`
    |
125 | def test_get_city_by_name(sample_countries) -> None:
    |                           ^^^^^^^^^^^^^^^^ ANN001
126 |     """Test finding a city by name within a country."""
127 |     us = Country.model_validate(sample_countries[0])
    |

tests/test_v1_countries.py:144:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
143 |     # Test non-existent city
144 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
145 |         get_city_by_name(us, "Chicago")
    |

tests/test_v1_groups.py:30:18: ANN001 Missing type annotation for function argument `sample_group_type`
   |
29 | @pytest.fixture
30 | def sample_group(sample_group_type) -> dict:
   |                  ^^^^^^^^^^^^^^^^^ ANN001
31 |     """Create a sample group for testing."""
32 |     return {
   |

tests/test_v1_groups.py:43:19: ANN001 Missing type annotation for function argument `sample_group_type`
   |
42 | @pytest.fixture
43 | def sample_groups(sample_group_type) -> list[dict]:
   |                   ^^^^^^^^^^^^^^^^^ ANN001
44 |     """Create a list of sample groups for testing."""
45 |     return [
   |

tests/test_v1_groups.py:79:23: ANN001 Missing type annotation for function argument `sample_groups`
   |
79 | def test_fetch_groups(sample_groups) -> None:
   |                       ^^^^^^^^^^^^^ ANN001
80 |     """Test fetching server groups from the API."""
81 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_groups.py:97:29: ANN001 Missing type annotation for function argument `sample_groups`
   |
97 | def test_get_groups_by_type(sample_groups) -> None:
   |                             ^^^^^^^^^^^^^ ANN001
98 |     """Test filtering groups by type identifier."""
99 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_groups.py:128:34: ANN001 Missing type annotation for function argument `sample_groups`
    |
128 | def test_get_group_by_identifier(sample_groups) -> None:
    |                                  ^^^^^^^^^^^^^ ANN001
129 |     """Test finding a group by its identifier."""
130 |     with patch("requests.get") as mock_get:
    |

tests/test_v1_groups.py:149:28: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
148 |         # Test non-existent group
149 |         with pytest.raises(ValueError):
    |                            ^^^^^^^^^^ PT011
150 |             get_group_by_identifier(groups, "unknown")
    |

tests/test_v1_recommendations.py:32:20: ANN001 Missing type annotation for function argument `sample_city`
   |
31 | @pytest.fixture
32 | def sample_country(sample_city) -> dict:
   |                    ^^^^^^^^^^^ ANN001
33 |     """Create a sample country for testing."""
34 |     return {
   |

tests/test_v1_recommendations.py:43:21: ANN001 Missing type annotation for function argument `sample_country`
   |
42 | @pytest.fixture
43 | def sample_location(sample_country) -> dict:
   |                     ^^^^^^^^^^^^^^ ANN001
44 |     """Create a sample location for testing."""
45 |     return {
   |

tests/test_v1_recommendations.py:107:5: ANN001 Missing type annotation for function argument `sample_location`
    |
105 | @pytest.fixture
106 | def sample_server(
107 |     sample_location, sample_group, sample_service, sample_technology
    |     ^^^^^^^^^^^^^^^ ANN001
108 | ) -> dict:
109 |     """Create a sample server for testing."""
    |

tests/test_v1_recommendations.py:107:22: ANN001 Missing type annotation for function argument `sample_group`
    |
105 | @pytest.fixture
106 | def sample_server(
107 |     sample_location, sample_group, sample_service, sample_technology
    |                      ^^^^^^^^^^^^ ANN001
108 | ) -> dict:
109 |     """Create a sample server for testing."""
    |

tests/test_v1_recommendations.py:107:36: ANN001 Missing type annotation for function argument `sample_service`
    |
105 | @pytest.fixture
106 | def sample_server(
107 |     sample_location, sample_group, sample_service, sample_technology
    |                                    ^^^^^^^^^^^^^^ ANN001
108 | ) -> dict:
109 |     """Create a sample server for testing."""
    |

tests/test_v1_recommendations.py:107:52: ANN001 Missing type annotation for function argument `sample_technology`
    |
105 | @pytest.fixture
106 | def sample_server(
107 |     sample_location, sample_group, sample_service, sample_technology
    |                                                    ^^^^^^^^^^^^^^^^^ ANN001
108 | ) -> dict:
109 |     """Create a sample server for testing."""
    |

tests/test_v1_recommendations.py:129:32: ANN001 Missing type annotation for function argument `sample_server`
    |
129 | def test_fetch_recommendations(sample_server) -> None:
    |                                ^^^^^^^^^^^^^ ANN001
130 |     """Test fetching server recommendations from the API."""
131 |     with patch("requests.get") as mock_get:
    |

tests/test_v1_recommendations.py:152:41: ANN001 Missing type annotation for function argument `sample_server`
    |
152 | def test_get_recommendations_by_country(sample_server) -> None:
    |                                         ^^^^^^^^^^^^^ ANN001
153 |     """Test filtering recommendations by country code."""
154 |     with patch("requests.get") as mock_get:
    |

tests/test_v1_recommendations.py:176:39: ANN001 Missing type annotation for function argument `sample_server`
    |
176 | def test_get_recommendations_by_group(sample_server) -> None:
    |                                       ^^^^^^^^^^^^^ ANN001
177 |     """Test filtering recommendations by group identifier."""
178 |     with patch("requests.get") as mock_get:
    |

tests/test_v1_technologies.py:31:25: ANN001 Missing type annotation for function argument `sample_technology`
   |
30 | @pytest.fixture
31 | def sample_technologies(sample_technology) -> list[dict]:
   |                         ^^^^^^^^^^^^^^^^^ ANN001
32 |     """Create a list of sample technologies for testing."""
33 |     return [
   |

tests/test_v1_technologies.py:54:29: ANN001 Missing type annotation for function argument `sample_technologies`
   |
54 | def test_fetch_technologies(sample_technologies) -> None:
   |                             ^^^^^^^^^^^^^^^^^^^ ANN001
55 |     """Test fetching server technologies from the API."""
56 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_technologies.py:73:39: ANN001 Missing type annotation for function argument `sample_technologies`
   |
73 | def test_get_technology_by_identifier(sample_technologies) -> None:
   |                                       ^^^^^^^^^^^^^^^^^^^ ANN001
74 |     """Test finding a technology by its identifier."""
75 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_technologies.py:94:28: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
   |
93 |         # Test non-existent technology
94 |         with pytest.raises(ValueError):
   |                            ^^^^^^^^^^ PT011
95 |             get_technology_by_identifier(technologies, "unknown")
   |

tests/test_v2_servers.py:44:22: ANN001 Missing type annotation for function argument `sample_ip`
   |
43 | @pytest.fixture
44 | def sample_server_ip(sample_ip) -> dict:
   |                      ^^^^^^^^^ ANN001
45 |     """Create a sample server IP for testing."""
46 |     return {
   |

tests/test_v2_servers.py:64:26: ANN001 Missing type annotation for function argument `sample_specification_value`
   |
63 | @pytest.fixture
64 | def sample_specification(sample_specification_value) -> dict:
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN001
65 |     """Create a sample specification for testing."""
66 |     return {
   |

tests/test_v2_servers.py:87:18: ANN001 Missing type annotation for function argument `sample_group_type`
   |
86 | @pytest.fixture
87 | def sample_group(sample_group_type) -> dict:
   |                  ^^^^^^^^^^^^^^^^^ ANN001
88 |     """Create a sample group for testing."""
89 |     return {
   |

tests/test_v2_servers.py:126:20: ANN001 Missing type annotation for function argument `sample_city`
    |
125 | @pytest.fixture
126 | def sample_country(sample_city) -> dict:
    |                    ^^^^^^^^^^^ ANN001
127 |     """Create a sample country for testing."""
128 |     return {
    |

tests/test_v2_servers.py:138:21: ANN001 Missing type annotation for function argument `sample_country`
    |
137 | @pytest.fixture
138 | def sample_location(sample_country) -> dict:
    |                     ^^^^^^^^^^^^^^ ANN001
139 |     """Create a sample location for testing."""
140 |     return {
    |

tests/test_v2_servers.py:151:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
150 | @pytest.fixture
151 | def sample_server(
    |     ^^^^^^^^^^^^^ PLR0913
152 |     sample_server_ip,
153 |     sample_specification,
    |

tests/test_v2_servers.py:152:5: ANN001 Missing type annotation for function argument `sample_server_ip`
    |
150 | @pytest.fixture
151 | def sample_server(
152 |     sample_server_ip,
    |     ^^^^^^^^^^^^^^^^ ANN001
153 |     sample_specification,
154 |     sample_tech,
    |

tests/test_v2_servers.py:153:5: ANN001 Missing type annotation for function argument `sample_specification`
    |
151 | def sample_server(
152 |     sample_server_ip,
153 |     sample_specification,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
154 |     sample_tech,
155 |     sample_group,
    |

tests/test_v2_servers.py:154:5: ANN001 Missing type annotation for function argument `sample_tech`
    |
152 |     sample_server_ip,
153 |     sample_specification,
154 |     sample_tech,
    |     ^^^^^^^^^^^ ANN001
155 |     sample_group,
156 |     sample_service,
    |

tests/test_v2_servers.py:155:5: ANN001 Missing type annotation for function argument `sample_group`
    |
153 |     sample_specification,
154 |     sample_tech,
155 |     sample_group,
    |     ^^^^^^^^^^^^ ANN001
156 |     sample_service,
157 |     sample_location,
    |

tests/test_v2_servers.py:156:5: ANN001 Missing type annotation for function argument `sample_service`
    |
154 |     sample_tech,
155 |     sample_group,
156 |     sample_service,
    |     ^^^^^^^^^^^^^^ ANN001
157 |     sample_location,
158 | ) -> dict:
    |

tests/test_v2_servers.py:157:5: ANN001 Missing type annotation for function argument `sample_location`
    |
155 |     sample_group,
156 |     sample_service,
157 |     sample_location,
    |     ^^^^^^^^^^^^^^^ ANN001
158 | ) -> dict:
159 |     """Create a sample server for testing."""
    |

tests/test_v2_servers.py:199:5: ANN001 Missing type annotation for function argument `sample_server`
    |
197 | @pytest.fixture
198 | def sample_api_response(
199 |     sample_server,
    |     ^^^^^^^^^^^^^ ANN001
200 |     sample_group,
201 |     sample_service,
    |

tests/test_v2_servers.py:200:5: ANN001 Missing type annotation for function argument `sample_group`
    |
198 | def sample_api_response(
199 |     sample_server,
200 |     sample_group,
    |     ^^^^^^^^^^^^ ANN001
201 |     sample_service,
202 |     sample_location,
    |

tests/test_v2_servers.py:201:5: ANN001 Missing type annotation for function argument `sample_service`
    |
199 |     sample_server,
200 |     sample_group,
201 |     sample_service,
    |     ^^^^^^^^^^^^^^ ANN001
202 |     sample_location,
203 |     sample_tech,
    |

tests/test_v2_servers.py:202:5: ANN001 Missing type annotation for function argument `sample_location`
    |
200 |     sample_group,
201 |     sample_service,
202 |     sample_location,
    |     ^^^^^^^^^^^^^^^ ANN001
203 |     sample_tech,
204 | ) -> dict:
    |

tests/test_v2_servers.py:203:5: ANN001 Missing type annotation for function argument `sample_tech`
    |
201 |     sample_service,
202 |     sample_location,
203 |     sample_tech,
    |     ^^^^^^^^^^^ ANN001
204 | ) -> dict:
205 |     """Create a sample API response for testing."""
    |

tests/test_v2_servers.py:215:20: ANN001 Missing type annotation for function argument `sample_api_response`
    |
215 | def test_fetch_all(sample_api_response) -> None:
    |                    ^^^^^^^^^^^^^^^^^^^ ANN001
216 |     """Test fetching all server data from the API."""
217 |     with patch("requests.get") as mock_get:
    |

tests/test_v2_servers.py:258:33: ANN001 Missing type annotation for function argument `sample_api_response`
    |
258 | def test_get_servers_by_country(sample_api_response) -> None:
    |                                 ^^^^^^^^^^^^^^^^^^^ ANN001
259 |     """Test filtering servers by country code."""
260 |     with patch("requests.get") as mock_get:
    |

tests/test_v2_servers.py:282:31: ANN001 Missing type annotation for function argument `sample_api_response`
    |
282 | def test_get_servers_by_group(sample_api_response) -> None:
    |                               ^^^^^^^^^^^^^^^^^^^ ANN001
283 |     """Test filtering servers by group identifier."""
284 |     with patch("requests.get") as mock_get:
    |

Found 484 errors (11 fixed, 473 remaining).

2025-03-04 07:18:35 - 11 files reformatted, 35 files left unchanged

2025-03-04 07:18:35 - >>>Running type checks...
2025-03-04 07:18:37 - >>> Running tests...
2025-03-04 07:19:01 - ============================= test session starts ==============================
platform darwin -- Python 3.12.8, pytest-8.3.5, pluggy-1.5.0 -- /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.3, timeout-2.3.1, mock-3.14.0, xdist-3.6.1
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=function
timeout: 30.0s
timeout method: signal
timeout func_only: False
created: 8/8 workers
8 workers [22 items]

scheduling tests via LoadScheduling

tests/test_api.py::test_get_technologies 
tests/test_api.py::test_get_countries 
tests/test_package.py::test_version 
tests/test_server_manager.py::test_server_filtering 
tests/test_v1_groups.py::test_get_groups_by_type 
tests/test_v1_countries.py::test_get_country_by_code 
tests/test_v1_countries.py::test_get_city_by_name 
[gw2] [  4%] PASSED tests/test_package.py::test_version 
[gw4] [  9%] PASSED tests/test_v1_countries.py::test_get_country_by_code 
[gw5] [ 13%] PASSED tests/test_v1_countries.py::test_get_city_by_name 
tests/test_server_manager.py::test_openvpn_tcp_validation 
tests/test_v1_countries.py::test_get_countries_by_min_servers 
[gw6] [ 18%] PASSED tests/test_v1_groups.py::test_get_groups_by_type 
tests/test_v1_groups.py::test_fetch_groups 
[gw4] [ 22%] PASSED tests/test_v1_countries.py::test_get_countries_by_min_servers 
tests/test_v1_groups.py::test_get_group_by_identifier 
tests/test_v1_technologies.py::test_fetch_technologies 
[gw1] [ 27%] PASSED tests/test_api.py::test_get_technologies 
[gw6] [ 31%] PASSED tests/test_v1_groups.py::test_get_group_by_identifier 
[gw5] [ 36%] PASSED tests/test_v1_groups.py::test_fetch_groups 
tests/test_v1_recommendations.py::test_fetch_recommendations 
[gw0] [ 40%] PASSED tests/test_api.py::test_get_countries 
[gw4] [ 45%] PASSED tests/test_v1_technologies.py::test_fetch_technologies 
tests/test_v1_technologies.py::test_get_technology_by_identifier 
tests/test_api.py::test_get_servers 
tests/test_api.py::test_get_groups 
tests/test_v2_servers.py::test_fetch_all 
tests/test_v2_servers.py::test_get_servers_by_country 
[gw5] [ 50%] PASSED tests/test_v1_technologies.py::test_get_technology_by_identifier 
[gw2] [ 54%] FAILED tests/test_server_manager.py::test_openvpn_tcp_validation 
[gw7] [ 59%] PASSED tests/test_v1_recommendations.py::test_fetch_recommendations 
tests/test_v1_recommendations.py::test_get_recommendations_by_country 
tests/test_v1_recommendations.py::test_get_recommendations_by_group 
[gw0] [ 63%] PASSED tests/test_api.py::test_get_groups 
[gw7] [ 68%] PASSED tests/test_v1_recommendations.py::test_get_recommendations_by_country 
[gw2] [ 72%] PASSED tests/test_v1_recommendations.py::test_get_recommendations_by_group 
[gw1] [ 77%] FAILED tests/test_api.py::test_get_servers 
tests/test_v2_servers.py::test_get_servers_by_group 
[gw6] [ 81%] FAILED tests/test_v2_servers.py::test_fetch_all 
[gw4] [ 86%] FAILED tests/test_v2_servers.py::test_get_servers_by_country 
[gw1] [ 90%] FAILED tests/test_v2_servers.py::test_get_servers_by_group 
[gw3] [ 95%] FAILED tests/test_server_manager.py::test_server_filtering 
tests/test_v1_countries.py::test_fetch_countries 
[gw3] [100%] PASSED tests/test_v1_countries.py::test_fetch_countries 

==================================== ERRORS ====================================
__________ ERROR collecting tests/integration/test_config_loading.py ___________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/integration/test_config_loading.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_config_loading.py:7: in <module>
    from tests.conftest import TEST_PASSWORD, TEST_USERNAME
E   ImportError: cannot import name 'TEST_PASSWORD' from 'tests.conftest' (/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/conftest.py)
____________ ERROR collecting tests/integration/test_connection.py _____________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/integration/test_connection.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_connection.py:7: in <module>
    from nyord_vpn.core.exceptions import VPNConnectionError, VPNError
E   ModuleNotFoundError: No module named 'nyord_vpn.core.exceptions'
______________ ERROR collecting tests/integration/test_errors.py _______________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/integration/test_errors.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_errors.py:10: in <module>
    from tests.conftest import TEST_PASSWORD, TEST_USERNAME
E   ImportError: cannot import name 'TEST_PASSWORD' from 'tests.conftest' (/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/conftest.py)
______ ERROR collecting tests/integration/test_validation_integration.py _______
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/integration/test_validation_integration.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_validation_integration.py:7: in <module>
    from nyord_vpn.api.legacy import LegacyVPNClient
E   ModuleNotFoundError: No module named 'nyord_vpn.api.legacy'
____________________ ERROR collecting tests/test_client.py _____________________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/test_client.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_client.py:5: in <module>
    from nyord_vpn.core.exceptions import VPNError
E   ModuleNotFoundError: No module named 'nyord_vpn.core.exceptions'
__________________ ERROR collecting tests/test_legacy_api.py ___________________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/test_legacy_api.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_legacy_api.py:9: in <module>
    from nyord_vpn.api.legacy import LegacyVPNClient
E   ModuleNotFoundError: No module named 'nyord_vpn.api.legacy'
=================================== FAILURES ===================================
_________________________ test_openvpn_tcp_validation __________________________
[gw2] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

server_manager = <nyord_vpn.network.server.ServerManager object at 0x10bf39730>

    def test_openvpn_tcp_validation(server_manager) -> None:
        """Test OpenVPN TCP technology validation."""
        # Test regular OpenVPN TCP
        server = {
            "hostname": "test.nordvpn.com",
            "status": "online",
            "load": 50,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 5, "name": "OpenVPN TCP", "status": "online"},
            ],
        }
        assert server_manager._is_valid_server(server) is True
    
        # Test OpenVPN TCP Dedicated
        server = {
            "hostname": "test.nordvpn.com",
            "status": "online",
            "load": 50,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 45, "name": "OpenVPN TCP Dedicated", "status": "online"},
            ],
        }
        assert server_manager._is_valid_server(server) is True
    
        # Test server without OpenVPN TCP
        server = {
            "hostname": "test.nordvpn.com",
            "status": "online",
            "load": 50,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 3, "name": "OpenVPN UDP", "status": "online"},
                {"id": 35, "name": "Wireguard", "status": "online"},
            ],
        }
        assert server_manager._is_valid_server(server) is False
    
        # Test server with invalid technology format
        server = {
            "hostname": "test.nordvpn.com",
            "status": "online",
            "load": 50,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 5},  # Missing name
                {"name": "OpenVPN TCP"},  # Missing id
                None,  # Invalid technology
            ],
        }
>       assert server_manager._is_valid_server(server) is False
E       AssertionError: assert True is False
E        +  where True = _is_valid_server({'country': {'code': 'US', 'name': 'United States'}, 'hostname': 'test.nordvpn.com', 'load': 50, 'status': 'online', ...})
E        +    where _is_valid_server = <nyord_vpn.network.server.ServerManager object at 0x10bf39730>._is_valid_server

tests/test_server_manager.py:83: AssertionError
_______________________________ test_get_servers _______________________________
[gw1] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

sample_server = {'created_at': '2024-01-01T00:00:00Z', 'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'pivot': {'group_id': 1, 'server_id': 1}, ...}], 'hostname': 'us1234.nordvpn.com', 'id': 1, ...}

    def test_get_servers(sample_server) -> None:
        """Test fetching servers from the API."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = {
                "servers": [sample_server],
                "groups": [sample_server["groups"][0]],
                "services": [],
                "locations": [sample_server["locations"][0]],
                "technologies": [sample_server["technologies"][0]],
            }
            mock_get.return_value = mock_response
    
            client = NordVPNAPI()
            servers = client.get_servers()
    
            assert len(servers[0]) == 1  # First element is list of servers
            server = servers[0][0]
            assert server.name == "us1234.nordvpn.com"
            assert server.station == "us1234"
            assert server.load == 45
            assert server.status == "online"
>           assert len(server.locations) == 1
E           AssertionError: assert 0 == 1
E            +  where 0 = len([])
E            +    where [] = Server(id=1, created_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), name='us1234.nordvpn.com', station='us1234', ipv6_station='', hostname='us1234.nordvpn.com', status='online', load=45, ips=[], specifications=[], technologies=[Technology(id=1, name='OpenVPN UDP', identifier='openvpn_udp', created_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), status=None, metadata=None)], groups=[], services=[], locations=[]).locations

tests/test_api.py:209: AssertionError
________________________________ test_fetch_all ________________________________
[gw6] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v2_servers.NordVPNServersV2 object at 0x10fe52db0>

    def fetch_all(
        self,
    ) -> tuple[
        list[Server], list[Group], list[Service], list[Location], list[Technology]
    ]:
        """Fetch and parse all server data from the v2 API.
    
        This method retrieves the full dataset from the v2 servers API and
        processes it into a structured format. It establishes relationships
        between servers and their related entities.
    
        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            # Parse each component using its type adapter
            parsed_data: dict[str, list[Any]] = {}
            for key, adapter in self._type_adapters.items():
                try:
>                   parsed_data[key] = adapter.validate_python(data[key])

src/nyord_vpn/api/v2_servers.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = TypeAdapter(list[Server])
object = [{'created_at': '2024-01-01T00:00:00Z', 'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'pivot': {'group_id': 1, 'server_id': 1}, ...}], 'hostname': 'us1234.nordvpn.com', 'id': 1, ...}]

    def validate_python(
        self,
        object: Any,
        /,
        *,
        strict: bool | None = None,
        from_attributes: bool | None = None,
        context: dict[str, Any] | None = None,
        experimental_allow_partial: bool | Literal['off', 'on', 'trailing-strings'] = False,
    ) -> T:
        """Validate a Python object against the model.
    
        Args:
            object: The Python object to validate against the model.
            strict: Whether to strictly check types.
            from_attributes: Whether to extract data from object attributes.
            context: Additional context to pass to the validator.
            experimental_allow_partial: **Experimental** whether to enable
                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.
                * False / 'off': Default behavior, no partial validation.
                * True / 'on': Enable partial validation.
                * 'trailing-strings': Enable partial validation and allow trailing strings in the input.
    
        !!! note
            When using `TypeAdapter` with a Pydantic `dataclass`, the use of the `from_attributes`
            argument is not supported.
    
        Returns:
            The validated object.
        """
>       return self.validator.validate_python(
            object,
            strict=strict,
            from_attributes=from_attributes,
            context=context,
            allow_partial=experimental_allow_partial,
        )
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for list[Server]
E       0.locations.0.latitude
E         Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.10/v/missing
E       0.locations.0.longitude
E         Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.10/v/missing

.venv/lib/python3.12/site-packages/pydantic/type_adapter.py:412: ValidationError

The above exception was the direct cause of the following exception:

sample_api_response = {'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}], 'locati... 1, ...}], 'services': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'name': 'P2P', ...}], ...}

    def test_fetch_all(sample_api_response) -> None:
        """Test fetching all server data from the API."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_api_response
            mock_get.return_value = mock_response
    
            client = NordVPNServersV2()
>           servers, groups, services, locations, technologies = client.fetch_all()

tests/test_v2_servers.py:226: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v2_servers.NordVPNServersV2 object at 0x10fe52db0>

    def fetch_all(
        self,
    ) -> tuple[
        list[Server], list[Group], list[Service], list[Location], list[Technology]
    ]:
        """Fetch and parse all server data from the v2 API.
    
        This method retrieves the full dataset from the v2 servers API and
        processes it into a structured format. It establishes relationships
        between servers and their related entities.
    
        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            # Parse each component using its type adapter
            parsed_data: dict[str, list[Any]] = {}
            for key, adapter in self._type_adapters.items():
                try:
                    parsed_data[key] = adapter.validate_python(data[key])
                except (KeyError, ValueError, TypeError) as err:
                    logger.error(f"Failed to parse {key} data: {err}")
>                   raise VPNAPIError(
                        f"Failed to parse {key} data from v2 API",
                        details=str(err),
                        cause=err,
                    ) from err
E                   nyord_vpn.exceptions.VPNAPIError: Failed to parse servers data from v2 API
E                   Details: 2 validation errors for list[Server]
E                   0.locations.0.latitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   0.locations.0.longitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   Cause: 2 validation errors for list[Server]
E                   0.locations.0.latitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   0.locations.0.longitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing

src/nyord_vpn/api/v2_servers.py:274: VPNAPIError
----------------------------- Captured stdout call -----------------------------
[03/04/25 08:19:00] ERROR    2025-03-04 08:19:00.805 | ERROR   v2_servers.py:273
                             |                                                  
                             nyord_vpn.api.v2_servers:fetch_al                  
                             l:273 - Failed to parse servers                    
                             data: 2 validation errors for                      
                             list[Server]                                       
                             0.locations.0.latitude                             
                               Field required [type=missing,                    
                             input_value={'id': 1,                              
                             'created_at': '...': 1,                            
                             'location_id': 1}},                                
                             input_type=dict]                                   
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/                  
                             v/missing                                          
                             0.locations.0.longitude                            
                               Field required [type=missing,                    
                             input_value={'id': 1,                              
                             'created_at': '...': 1,                            
                             'location_id': 1}},                                
                             input_type=dict]                                   
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/                  
                             v/missing                                          
_________________________ test_get_servers_by_country __________________________
[gw4] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v2_servers.NordVPNServersV2 object at 0x1081f85f0>

    def fetch_all(
        self,
    ) -> tuple[
        list[Server], list[Group], list[Service], list[Location], list[Technology]
    ]:
        """Fetch and parse all server data from the v2 API.
    
        This method retrieves the full dataset from the v2 servers API and
        processes it into a structured format. It establishes relationships
        between servers and their related entities.
    
        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            # Parse each component using its type adapter
            parsed_data: dict[str, list[Any]] = {}
            for key, adapter in self._type_adapters.items():
                try:
>                   parsed_data[key] = adapter.validate_python(data[key])

src/nyord_vpn/api/v2_servers.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = TypeAdapter(list[Server])
object = [{'created_at': '2024-01-01T00:00:00Z', 'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'pivot': {'group_id': 1, 'server_id': 1}, ...}], 'hostname': 'us1234.nordvpn.com', 'id': 1, ...}]

    def validate_python(
        self,
        object: Any,
        /,
        *,
        strict: bool | None = None,
        from_attributes: bool | None = None,
        context: dict[str, Any] | None = None,
        experimental_allow_partial: bool | Literal['off', 'on', 'trailing-strings'] = False,
    ) -> T:
        """Validate a Python object against the model.
    
        Args:
            object: The Python object to validate against the model.
            strict: Whether to strictly check types.
            from_attributes: Whether to extract data from object attributes.
            context: Additional context to pass to the validator.
            experimental_allow_partial: **Experimental** whether to enable
                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.
                * False / 'off': Default behavior, no partial validation.
                * True / 'on': Enable partial validation.
                * 'trailing-strings': Enable partial validation and allow trailing strings in the input.
    
        !!! note
            When using `TypeAdapter` with a Pydantic `dataclass`, the use of the `from_attributes`
            argument is not supported.
    
        Returns:
            The validated object.
        """
>       return self.validator.validate_python(
            object,
            strict=strict,
            from_attributes=from_attributes,
            context=context,
            allow_partial=experimental_allow_partial,
        )
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for list[Server]
E       0.locations.0.latitude
E         Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.10/v/missing
E       0.locations.0.longitude
E         Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.10/v/missing

.venv/lib/python3.12/site-packages/pydantic/type_adapter.py:412: ValidationError

The above exception was the direct cause of the following exception:

sample_api_response = {'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}], 'locati... 1, ...}], 'services': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'name': 'P2P', ...}], ...}

    def test_get_servers_by_country(sample_api_response) -> None:
        """Test filtering servers by country code."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_api_response
            mock_get.return_value = mock_response
    
            client = NordVPNServersV2()
>           servers, *_ = client.fetch_all()

tests/test_v2_servers.py:269: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v2_servers.NordVPNServersV2 object at 0x1081f85f0>

    def fetch_all(
        self,
    ) -> tuple[
        list[Server], list[Group], list[Service], list[Location], list[Technology]
    ]:
        """Fetch and parse all server data from the v2 API.
    
        This method retrieves the full dataset from the v2 servers API and
        processes it into a structured format. It establishes relationships
        between servers and their related entities.
    
        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            # Parse each component using its type adapter
            parsed_data: dict[str, list[Any]] = {}
            for key, adapter in self._type_adapters.items():
                try:
                    parsed_data[key] = adapter.validate_python(data[key])
                except (KeyError, ValueError, TypeError) as err:
                    logger.error(f"Failed to parse {key} data: {err}")
>                   raise VPNAPIError(
                        f"Failed to parse {key} data from v2 API",
                        details=str(err),
                        cause=err,
                    ) from err
E                   nyord_vpn.exceptions.VPNAPIError: Failed to parse servers data from v2 API
E                   Details: 2 validation errors for list[Server]
E                   0.locations.0.latitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   0.locations.0.longitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   Cause: 2 validation errors for list[Server]
E                   0.locations.0.latitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   0.locations.0.longitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing

src/nyord_vpn/api/v2_servers.py:274: VPNAPIError
----------------------------- Captured stdout call -----------------------------
[03/04/25 08:19:00] ERROR    2025-03-04 08:19:00.806 | ERROR   v2_servers.py:273
                             |                                                  
                             nyord_vpn.api.v2_servers:fetch_al                  
                             l:273 - Failed to parse servers                    
                             data: 2 validation errors for                      
                             list[Server]                                       
                             0.locations.0.latitude                             
                               Field required [type=missing,                    
                             input_value={'id': 1,                              
                             'created_at': '...': 1,                            
                             'location_id': 1}},                                
                             input_type=dict]                                   
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/                  
                             v/missing                                          
                             0.locations.0.longitude                            
                               Field required [type=missing,                    
                             input_value={'id': 1,                              
                             'created_at': '...': 1,                            
                             'location_id': 1}},                                
                             input_type=dict]                                   
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/                  
                             v/missing                                          
__________________________ test_get_servers_by_group ___________________________
[gw1] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v2_servers.NordVPNServersV2 object at 0x10b755b80>

    def fetch_all(
        self,
    ) -> tuple[
        list[Server], list[Group], list[Service], list[Location], list[Technology]
    ]:
        """Fetch and parse all server data from the v2 API.
    
        This method retrieves the full dataset from the v2 servers API and
        processes it into a structured format. It establishes relationships
        between servers and their related entities.
    
        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            # Parse each component using its type adapter
            parsed_data: dict[str, list[Any]] = {}
            for key, adapter in self._type_adapters.items():
                try:
>                   parsed_data[key] = adapter.validate_python(data[key])

src/nyord_vpn/api/v2_servers.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = TypeAdapter(list[Server])
object = [{'created_at': '2024-01-01T00:00:00Z', 'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'pivot': {'group_id': 1, 'server_id': 1}, ...}], 'hostname': 'us1234.nordvpn.com', 'id': 1, ...}]

    def validate_python(
        self,
        object: Any,
        /,
        *,
        strict: bool | None = None,
        from_attributes: bool | None = None,
        context: dict[str, Any] | None = None,
        experimental_allow_partial: bool | Literal['off', 'on', 'trailing-strings'] = False,
    ) -> T:
        """Validate a Python object against the model.
    
        Args:
            object: The Python object to validate against the model.
            strict: Whether to strictly check types.
            from_attributes: Whether to extract data from object attributes.
            context: Additional context to pass to the validator.
            experimental_allow_partial: **Experimental** whether to enable
                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.
                * False / 'off': Default behavior, no partial validation.
                * True / 'on': Enable partial validation.
                * 'trailing-strings': Enable partial validation and allow trailing strings in the input.
    
        !!! note
            When using `TypeAdapter` with a Pydantic `dataclass`, the use of the `from_attributes`
            argument is not supported.
    
        Returns:
            The validated object.
        """
>       return self.validator.validate_python(
            object,
            strict=strict,
            from_attributes=from_attributes,
            context=context,
            allow_partial=experimental_allow_partial,
        )
E       pydantic_core._pydantic_core.ValidationError: 2 validation errors for list[Server]
E       0.locations.0.latitude
E         Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.10/v/missing
E       0.locations.0.longitude
E         Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.10/v/missing

.venv/lib/python3.12/site-packages/pydantic/type_adapter.py:412: ValidationError

The above exception was the direct cause of the following exception:

sample_api_response = {'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}], 'locati... 1, ...}], 'services': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'name': 'P2P', ...}], ...}

    def test_get_servers_by_group(sample_api_response) -> None:
        """Test filtering servers by group identifier."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_api_response
            mock_get.return_value = mock_response
    
            client = NordVPNServersV2()
>           servers, *_ = client.fetch_all()

tests/test_v2_servers.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v2_servers.NordVPNServersV2 object at 0x10b755b80>

    def fetch_all(
        self,
    ) -> tuple[
        list[Server], list[Group], list[Service], list[Location], list[Technology]
    ]:
        """Fetch and parse all server data from the v2 API.
    
        This method retrieves the full dataset from the v2 servers API and
        processes it into a structured format. It establishes relationships
        between servers and their related entities.
    
        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            # Parse each component using its type adapter
            parsed_data: dict[str, list[Any]] = {}
            for key, adapter in self._type_adapters.items():
                try:
                    parsed_data[key] = adapter.validate_python(data[key])
                except (KeyError, ValueError, TypeError) as err:
                    logger.error(f"Failed to parse {key} data: {err}")
>                   raise VPNAPIError(
                        f"Failed to parse {key} data from v2 API",
                        details=str(err),
                        cause=err,
                    ) from err
E                   nyord_vpn.exceptions.VPNAPIError: Failed to parse servers data from v2 API
E                   Details: 2 validation errors for list[Server]
E                   0.locations.0.latitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   0.locations.0.longitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   Cause: 2 validation errors for list[Server]
E                   0.locations.0.latitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   0.locations.0.longitude
E                     Field required [type=missing, input_value={'id': 1, 'created_at': '...': 1, 'location_id': 1}}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing

src/nyord_vpn/api/v2_servers.py:274: VPNAPIError
----------------------------- Captured stdout call -----------------------------
[03/04/25 08:19:00] ERROR    2025-03-04 08:19:00.831 | ERROR   v2_servers.py:273
                             |                                                  
                             nyord_vpn.api.v2_servers:fetch_al                  
                             l:273 - Failed to parse servers                    
                             data: 2 validation errors for                      
                             list[Server]                                       
                             0.locations.0.latitude                             
                               Field required [type=missing,                    
                             input_value={'id': 1,                              
                             'created_at': '...': 1,                            
                             'location_id': 1}},                                
                             input_type=dict]                                   
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/                  
                             v/missing                                          
                             0.locations.0.longitude                            
                               Field required [type=missing,                    
                             input_value={'id': 1,                              
                             'created_at': '...': 1,                            
                             'location_id': 1}},                                
                             input_type=dict]                                   
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/                  
                             v/missing                                          
____________________________ test_server_filtering _____________________________
[gw3] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

server_manager = <nyord_vpn.network.server.ServerManager object at 0x10ed22d20>
mock_api_client = <MagicMock spec='NordVPNAPI' id='4543620080'>

    def test_server_filtering(server_manager, mock_api_client) -> None:
        """Test server filtering in get_servers_cache."""
        # Mock API response with various server types
        test_servers = [
            {
                "hostname": "tcp1.nordvpn.com",
                "status": "online",
                "load": 50,
                "country": {"code": "US", "name": "United States"},
                "technologies": [
                    {"id": 5, "name": "OpenVPN TCP", "status": "online"},
                ],
            },
            {
                "hostname": "tcp2.nordvpn.com",
                "status": "online",
                "load": 60,
                "country": {"code": "US", "name": "United States"},
                "technologies": [
                    {"id": 45, "name": "OpenVPN TCP Dedicated", "status": "online"},
                ],
            },
            {
                "hostname": "udp1.nordvpn.com",
                "status": "online",
                "load": 40,
                "country": {"code": "US", "name": "United States"},
                "technologies": [
                    {"id": 3, "name": "OpenVPN UDP", "status": "online"},
                ],
            },
            {
                "hostname": "offline1.nordvpn.com",
                "status": "offline",
                "load": 30,
                "country": {"code": "US", "name": "United States"},
                "technologies": [
                    {"id": 5, "name": "OpenVPN TCP", "status": "online"},
                ],
            },
        ]
    
        # Mock the get_servers method instead of get.json
        mock_api_client.get_servers.return_value = (
            test_servers,  # servers
            [],  # groups
            [],  # services
            [],  # locations
            [],  # technologies
        )
    
        # Get filtered servers
        cache = server_manager.get_servers_cache()
        servers = cache.get("servers", [])
    
        # Should only include online servers with OpenVPN TCP
>       assert len(servers) == 2
E       AssertionError: assert 100 == 2
E        +  where 100 = len([{'hostname': 'pl128.nordvpn.com', 'load': 22, 'location_ids': ['367'], 'status': 'online', ...}, {'hostname': 'be148.nordvpn.com', 'load': 8, 'location_ids': ['3990'], 'status': 'online', ...}, {'hostname': 'hu48.nordvpn.com', 'load': 6, 'location_ids': ['247'], 'status': 'online', ...}, {'hostname': 'us5063.nordvpn.com', 'load': 28, 'location_ids': ['51'], 'status': 'online', ...}, {'hostname': 'at86.nordvpn.com', 'load': 7, 'location_ids': ['205'], 'status': 'online', ...}, {'hostname': 'ch217.nordvpn.com', 'load': 9, 'location_ids': ['107'], 'status': 'online', ...}, ...])

tests/test_server_manager.py:200: AssertionError
----------------------------- Captured stdout call -----------------------------
[03/04/25 08:19:00] WARNING  2025-03-04 08:19:00.782 | WARNING  |  server.py:529
                             nyord_vpn.network.server:get_servers_              
                             cache:529 - Failed to get server                   
                             information from API: 'dict' object                
                             has no attribute 'hostname'                        
[03/04/25 08:19:01] WARNING  2025-03-04 08:19:01.137 | WARNING  |  server.py:214
                             nyord_vpn.network.server:cache_server              
                             s:214 - Failed to cache server                     
                             information: [Errno 13] Permission                 
                             denied:                                            
                             '/Users/adam/Library/Caches/nyord-vpn              
                             /servers.tmp'                                      
============================= slowest 10 durations =============================
0.37s call     tests/test_server_manager.py::test_server_filtering
0.03s call     tests/test_v2_servers.py::test_fetch_all
0.03s call     tests/test_v2_servers.py::test_get_servers_by_country
0.03s call     tests/test_v2_servers.py::test_get_servers_by_group
0.01s call     tests/test_api.py::test_get_countries
0.01s call     tests/test_api.py::test_get_servers
0.01s call     tests/test_api.py::test_get_technologies
0.01s call     tests/test_api.py::test_get_groups

(2 durations < 0.005s hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
FAILED tests/test_server_manager.py::test_openvpn_tcp_validation - AssertionE...
FAILED tests/test_api.py::test_get_servers - AssertionError: assert 0 == 1
FAILED tests/test_v2_servers.py::test_fetch_all - nyord_vpn.exceptions.VPNAPI...
FAILED tests/test_v2_servers.py::test_get_servers_by_country - nyord_vpn.exce...
FAILED tests/test_v2_servers.py::test_get_servers_by_group - nyord_vpn.except...
FAILED tests/test_server_manager.py::test_server_filtering - AssertionError: ...
ERROR tests/integration/test_config_loading.py
ERROR tests/integration/test_connection.py
ERROR tests/integration/test_errors.py
ERROR tests/integration/test_validation_integration.py
ERROR tests/test_client.py
ERROR tests/test_legacy_api.py
=================== 6 failed, 16 passed, 6 errors in 10.84s ====================

2025-03-04 07:19:01 - All checks completed
2025-03-04 07:19:01 - 
=== TODO.md ===
2025-03-04 07:19:01 - # TODO

A modern Python client for NordVPN with automatic API fallback support, providing both a CLI interface and a Python library.

```bash
# Install system requirements first
brew install openvpn  # macOS
sudo apt install openvpn  # Ubuntu/Debian
sudo dnf install openvpn  # Fedora/RHEL

# Then install and use the package
pip install nyord-vpn
export NORD_USER="username" NORD_PASSWORD="password"
nyord-vpn go de  # Connect to a German VPN
nyord-vpn info  # Check status
nyord-vpn bye  # Disconnect
```

## 1. DEVELOPMENT

After each set of changes, update @PROGRESS.md with what you've done (`- [x]`). Upgrade priorities for NEXT TODO (`- [!]`), re-think the normal TODO (`- [ ]`)

Periodically do:

```
uv venv; source .venv/bin/activate; uv pip install -e .[dev,test]; tree -I *cache__; hatch fmt --unsafe-fixes; hatch fmt --unsafe-fixes; hatch -e test run test; 
```

and react to the results. Use `uv pip...` instead of `pip...` if needed. 

## 2. Working modality

You'll lead two experts: "Ideot" for creative, unorthodox ideas and "Critin" to critique flawed thinking and moderate for balanced discussions. The three of you shall illuminate knowledge with concise, beautiful responses, process methodically for clear answers, collaborate step-by-step, sharing thoughts and adapting. If errors are found, step back and focus on accuracy and progress.

Independently tackle challenges systematically, being adaptable and resourceful. Research deeply using all tools, revising to ensure conclusive, exhaustive, insightful results. When you're finished, print "Wait, but" to go back, think & reflect, revise & improvement what you've done (but don't invent functionality freely). Repeat this. Focus on minimal viable next versions of the code. Ship often and early. 

## 3. General coding principles

Verify info. No assumptions. No apologies. No major invented changes. No unneeded confirmations or checks. Keep existing code and structures unless they need to change. No unnecessary updates or current implementation discussion. Avoid magic numbers, handle edge cases, use assertions to validate assumptions and catch potential errors early.

Every code can fail. Write code that fails gracefully and is UX friendly: uses retries (within reason), does not make stupid assumptions, tests successes, uses fallbacks and backoffs, and then, if the code needs to message the user, be clear and suggest to the user the next steps. Don't prompt the user to do something that the computer can obviously do. The code should ask the user only if there is a real decision to be made. And you should ask me only if a real decision is needed.  

## 4. Keep track of paths

In every source file you create or edit, always maintain the up-to-date `this_file` record that shows the path of the current file relative to the root of the project. Place the `this_file` record near the top of the file, as a comment after the shebangs, or in the YAML Markdown frontmatter. Use these records for orientation. 

## 5. Follow this style for Python

Follow PEP 8. Write clear names. Keep it simple (PEP 20). Use type hints, imperative docstrings (PEP 257), f-strings, and structural pattern matching. Extract repeated logic. Handle errors. Keep functions small. Prefer flat structures. Use pathlib, pydantic as needed. Write maintainable code. 

EVEN IF YOU'RE NOT prompted, always write a "verbose" mode logugu-based logging for debug purposes, write explanatory docstrings and comments that not only explain what a given item (module, function, method) does, but also why it does it, and where and how it's used elsewhere in the code. 

ONLY IF YOU ARE prompted, extend existing features in a way that adds complexity, or refactor in a way that may break things. Remember: minimal viable next version is always our goal. IF NOT PROMPTED, do NOT make such changes. 

For CLI Python scripts, use fire & rich, and start the script with 

```
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["PKG1", "PKG2"]
# ///
# this_file: PATH_TO_CURRENT_FILE
```

# Nyord VPN Codebase Refactoring TODO

## 6. Remaining Tasks (Prioritized)

### 6.1. High Priority Items

#### 6.1.1. Minimize Output Messages Without Verbose Flag

- [!] Configure logging to only show debug/info logs when --verbose is used
  - [!] Update logger configuration in client.py to respect verbose flag
  - [!] Set default log level to WARNING when verbose=False
  - [!] Ensure critical errors are still shown regardless of verbose setting

- [!] Implement minimalistic output in commands
  - [!] Create helper method in Client class to format minimal output
  - [!] Update info() method to show only "IPADDRESS: -" or "IPADDRESS: VPNSERVERNAME"
  - [!] Update go() method to show only minimal output after successful connection
  - [!] Update bye() method to show only minimal output after disconnection

- [!] Testing and verification
  - [!] Test output with and without --verbose flag
  - [!] Verify each command produces correct minimalistic format when verbose=False
  - [!] Ensure error messages are still displayed appropriately

#### 6.1.2. Fix Test Failures

- [!] Fix test_openvpn_tcp_validation failure in ServerManager class
  - Update `_is_valid_server()` method to correctly check for OpenVPN TCP support
  - Add debug logging to diagnose technology validation issues
- [!] Fix test_fetch_all, test_get_servers_by_country, and test_get_servers_by_group failures
  - Update sample fixtures to include proper server relationships
  - Ensure server-to-group relationships are properly established
  - Ensure server-to-location relationships are properly established
- [!] Fix test_get_servers test failure related to locations relationship
- [!] Fix test_server_filtering failure related to mock implementation

#### 6.1.3. Fix Import Errors in Integration Tests

- [!] Update import statements in integration tests
  - Change `from nyord_vpn.core.exceptions import ...` to `from nyord_vpn.exceptions import ...`
  - Replace references to `VPNClient` with `Client`
- [!] Fix mock setup in test_server_manager.py to correctly simulate API response structure

#### 6.1.4. Core Module - `client.py`

- [!] Break down complex methods into smaller helper functions
  - [!] Refactor the `go()` method into smaller functions for each step:
    - Extract server selection logic into a separate method
    - Create a dedicated method for connection validation
    - Implement retry logic with proper error handling
  - [!] Extract connection validation logic into separate functions
  - [!] Create helper functions for environment variable handling
- [!] Fix boolean arguments and other linting issues
  - [!] Make all boolean parameters keyword-only arguments
  - [!] Fix type annotations for better static analysis
  - [!] Add proper validation for function parameters

### 6.2. Medium Priority Items

#### 6.2.1. Network Module - `vpn.py`

- [!] Make boolean arguments keyword-only
- [!] Add comprehensive type hints for all functions and methods
- [ ] Implement retry logic for connection attempts with tenacity
- [ ] Break down complex methods:
  - [ ] Split `setup_connection()` into smaller focused functions
  - [ ] Refactor `connect()` method to improve readability
  - [ ] Extract IP validation logic into a utility function
- [ ] Replace random.uniform with secrets.SystemRandom().uniform for better security
- [ ] Improve error handling with specific exception types and recovery mechanisms

#### 6.2.2. Utils Module - `templates.py`

- [!] Fix security vulnerabilities in subprocess calls (S603, S607)
- [!] Replace datetime.now() and datetime.fromtimestamp() with timezone-aware versions (DTZ005, DTZ006)
- [!] Fix exception handling issues:
  - [!] Replace long error messages with proper exception classes (TRY003)
  - [!] Use `raise ... from err` consistently (B904)
  - [!] Move try/except out of loops for better performance (PERF203)
  - [!] Use `else` blocks appropriately after try/except (TRY300)

### 6.3. Lower Priority Items

#### 6.3.1. Utils Module - `utils.py`

- [!] Replace os.path functions with pathlib equivalents (PTH110, PTH118, PTH123)
- [!] Fix security vulnerability in subprocess call (S603)
- [!] Fix error handling to use `else` blocks appropriately (TRY300)
- [ ] Implement atomic file operations for state management

#### 6.3.2. Main Module - `__main__.py`

- [!] Update CLI class to use the updated Client API
  - [!] Replace any usage of deprecated classes/methods with their updated counterparts
  - [!] Update command-line arguments to match new API structure
  - [!] Ensure all commands use the new Client implementation
- [!] Improve error handling and user feedback
  - [!] Add specific error handling for common user errors
  - [!] Provide clear, actionable error messages with recovery steps
  - [!] Add verbose output mode for troubleshooting

## 7. Implementation Steps

### 7.1. Fixing Test Failures

#### 7.1.1. Fix the OpenVPN TCP validation issue in server_manager.py

```python
def _is_valid_server(self, server: dict) -> bool:
    """Check if a server is valid for OpenVPN TCP connection."""
    # Add debug logging for technologies to diagnose the issue
    if self.verbose:
        technologies = server.get("technologies", [])
        self.logger.debug(f"Server technologies: {technologies}")
        
    # Check server status
    if server.get("status") != "online":
        if self.verbose:
            self.logger.debug(f"Server {server.get('hostname')} is not online")
        return False
        
    # Check hostname
    hostname = server.get("hostname", "")
    if not hostname.endswith(".nordvpn.com"):
        if self.verbose:
            self.logger.debug(f"Invalid hostname: {hostname}")
        return False
    
    # Check load
    load = server.get("load", -1)
    if not (0 <= load <= 100):
        if self.verbose:
            self.logger.debug(f"Server {hostname} has invalid load: {load}")
        return False
    
    # Fix the OpenVPN TCP check:
    has_openvpn_tcp = False
    for tech in server.get("technologies", []):
        if isinstance(tech, dict) and "name" in tech:
            tech_name = tech.get("name", "")
            if "OpenVPN TCP" in tech_name:
                has_openvpn_tcp = True
                break
    
    if not has_openvpn_tcp:
        if self.verbose:
            self.logger.debug(f"Server {hostname} does not support OpenVPN TCP")
        return False
    
    return True
```

#### 7.1.2. Fix model relationship issues in test fixtures

Update sample_server fixture:

```python
@pytest.fixture
def sample_server(sample_group, sample_location, sample_technology):
    """Create a sample server with proper relationships."""
    return {
        "id": 1,
        "created_at": "2024-01-01T00:00:00Z",
        "updated_at": "2024-01-01T00:00:00Z",
        "name": "us1234.nordvpn.com",
        "station": "us1234",
        "hostname": "us1234.nordvpn.com",
        "ipv6_station": "",
        "status": "online",
        "load": 45,
        "groups": [{"id": 1, "pivot": {"server_id": 1, "group_id": 1}}],
        "locations": [{"id": 1, "pivot": {"server_id": 1, "location_id": 1}}],
        "technologies": [sample_technology],
    }
```

### 7.2. Refactoring the Client.go() Method

Break down the go() method into smaller functions:

```python
def _validate_country_code(self, country_code: str) -> None:
    """Validate that the country code is valid."""
    if not country_code or not isinstance(country_code, str) or len(country_code) != 2:
        raise VPNError(f"Country code must be a two-letter code, got: {country_code!r}")
    
    # Optionally validate against known country codes
    countries = self.list_countries()
    country_codes = [c["code"].lower() for c in countries]
    
    if country_code.lower() not in country_codes:
        raise VPNError(f"Country code '{country_code}' not found in available countries: {', '.join(country_codes)}")

def _select_server(self, country_code: str) -> dict:
    """Select the best server for the specified country."""
    servers = self.server_manager.select_fastest_server(country_code)
    if not servers:
        raise VPNError(f"No servers available in {country_code}")

    # Take the first (fastest) server
    server = servers[0]
    hostname = server.get("hostname")
    if not hostname:
        raise VPNError("Selected server has no hostname")

    if self.verbose:
        self.logger.info(f"Selected server: {hostname}")
        
    return server

def _establish_connection(self, server: dict) -> None:
    """Establish the VPN connection to the specified server."""
    hostname = server.get("hostname")
    
    # Set up VPN configuration
    if not self.username or not self.password:
        raise VPNError("Missing VPN credentials")
        
    self.vpn_manager.setup_connection(hostname, self.username, self.password)

    # Connect to VPN
    if self.verbose:
        self.logger.info("Establishing VPN connection...")
        
    # Connect and wait for result
    self.vpn_manager.connect([server])  # Pass server to try

def go(self, country_code: str) -> None:
    """Connect to VPN in specified country."""
    try:
        # First check if we're already connected
        status = self.status()
        if status.get("connected", False):
            # VPN manager will handle disconnection automatically
            if self.verbose:
                self.logger.info("Already connected, will disconnect before connecting to new server")

        # Validate the country code
        self._validate_country_code(country_code)
        
        # Select the best server
        server = self._select_server(country_code)
        
        # Establish the connection
        self._establish_connection(server)

        # Get status for display
        status = self.status()
        console.print("[green]Successfully connected to VPN[/green]")
        console.print(f"Private IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
        console.print(f"Country: [cyan]{status.get('country', 'Unknown')}[/cyan]")
        console.print(f"Server: [cyan]{status.get('server', 'Unknown')}[/cyan]")

    except Exception as e:
        raise VPNError(f"Failed to connect: {e}")
```

### 7.3. Implementing Minimalistic Output

#### 7.3.1. Configure logging based on verbose flag

```python
def configure_logging(verbose: bool = False) -> None:
    """Configure logging based on verbose mode."""
    # Set default level to WARNING when not in verbose mode
    log_level = "DEBUG" if verbose else "WARNING"
    
    # Configure loguru logger
    logger.remove()  # Remove default handler
    logger.add(
        sys.stderr,
        level=log_level,
        format="<green>{time:YYYY-MM-DD HH:mm:ss.SSS}</green> | <level>{level: <8}</level> | <cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - <level>{message}</level>",
    )
```

#### 7.3.2. Helper method for minimal output format

```python
def _format_minimal_output(self, status: dict) -> str:
    """Format minimal output string based on connection status."""
    ip_address = status.get("ip", "Unknown")
    server = status.get("server", "-")
    
    if status.get("connected", False):
        return f"{ip_address}: {server}"
    else:
        return f"{ip_address}: -"
```

#### 7.3.3. Updated command methods with minimal output

```python
def go(self, country_code: str) -> None:
    """Connect to VPN in specified country."""
    try:
        # Implementation details as before...
        
        # Get updated status
        status = self.status()
        
        # Output based on verbose mode
        if self.verbose:
            console.print("[green]Successfully connected to VPN[/green]")
            console.print(f"Private IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
            console.print(f"Country: [cyan]{status.get('country', 'Unknown')}[/cyan]")
            console.print(f"Server: [cyan]{status.get('server', 'Unknown')}[/cyan]")
        else:
            console.print(self._format_minimal_output(status))
    except Exception as e:
        raise VPNError(f"Failed to connect: {e}")

def bye(self) -> None:
    """Disconnect from the VPN."""
    # Implementation details as before...
    
    # Get status and output based on verbose mode
    status = self.status()
    if self.verbose:
        console.print("[green]Disconnected from VPN[/green]")
        console.print(f"Public IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
    else:
        console.print(self._format_minimal_output(status))

def info(self) -> None:
    """Display current VPN status."""
    try:
        status = self.status()
        if self.verbose:
            if status.get("connected", False):
                console.print("[green]VPN Status: Connected[/green]")
                console.print(f"Private IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
                console.print(f"Country: [cyan]{status.get('country', 'Unknown')}[/cyan]")
                console.print(f"Server: [cyan]{status.get('server', 'Unknown')}[/cyan]")
            else:
                console.print("[yellow]VPN Status: Not Connected[/yellow]")
                console.print(f"Public IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
        else:
            console.print(self._format_minimal_output(status))
    except Exception as e:
        raise VPNError(f"Failed to get status: {e}")
```

2025-03-04 07:19:01 -  M .cursor/rules/filetree.mdc
 M .pre-commit-config.yaml
 M CLEANUP.txt
 M cleanup.py
 M src/nyord_vpn/__main__.py
 M src/nyord_vpn/api/api.py
 M src/nyord_vpn/core/client.py
 M src/nyord_vpn/network/server.py
 M src/nyord_vpn/network/vpn.py
 M src/nyord_vpn/utils/templates.py
 M tests/integration/test_errors.py
 M tests/test_v1_countries.py
 M tests/test_v1_groups.py
 M tests/test_v1_recommendations.py
 M tests/test_v1_technologies.py
 M tests/test_v2_servers.py

2025-03-04 07:19:01 - Changes detected in repository
2025-03-04 07:19:02 - [main 48240e0] Update repository files
 16 files changed, 3222 insertions(+), 3247 deletions(-)

2025-03-04 07:19:02 - Changes committed successfully
2025-03-04 07:19:08 - 
📦 Repomix v0.2.29

No custom config found at repomix.config.json or global config at /Users/adam/.config/repomix/repomix.config.json.
You can add a config file for additional settings. Please check https://github.com/yamadashy/repomix for more information.
⠙ Searching for files...
[2K[1A[2K[G⠹ Searching for files...
[2K[1A[2K[G⠸ Collecting files...
[2K[1A[2K[G⠼ Collecting files...
[2K[1A[2K[G⠴ Collecting files...
[2K[1A[2K[G⠦ Collecting files...
[2K[1A[2K[G⠧ Collecting files...
[2K[1A[2K[G⠇ Collecting files...
[2K[1A[2K[G⠏ Collecting files...
[2K[1A[2K[G⠋ Collect file... (15/62) src/nyord_vpn/core/client.py
[2K[1A[2K[G⠙ Collect file... (51/62) tests/test_v2_servers.py
[2K[1A[2K[G⠹ Collect file... (55/62) LICENSE
[2K[1A[2K[G⠸ Collect file... (55/62) LICENSE
[2K[1A[2K[G⠼ Collect file... (55/62) LICENSE
[2K[1A[2K[G⠴ Collect file... (60/62) README.md
[2K[1A[2K[G⠦ Running security check...
[2K[1A[2K[G⠧ Running security check...
[2K[1A[2K[G⠇ Running security check...
[2K[1A[2K[G⠏ Running security check... (30/61) src/nyord_vpn/utils/utils.py
[2K[1A[2K[G⠋ Running security check... (54/61) LICENSE
[2K[1A[2K[G⠙ Processing files...
[2K[1A[2K[G⠹ Processing files...
[2K[1A[2K[G⠸ Processing files...
[2K[1A[2K[G⠼ Processing files...
[2K[1A[2K[G⠴ Processing file... (4/61) .github/workflows/release.yml
[2K[1A[2K[G⠦ Processing file... (4/61) .github/workflows/release.yml
[2K[1A[2K[G⠧ Processing file... (5/61) src/nyord_vpn/api/__init__.py
[2K[1A[2K[G⠇ Processing file... (5/61) src/nyord_vpn/api/__init__.py
[2K[1A[2K[G⠏ Processing file... (14/61) src/nyord_vpn/core/base.py
[2K[1A[2K[G⠋ Processing file... (14/61) src/nyord_vpn/core/base.py
[2K[1A[2K[G⠙ Processing file... (18/61) src/nyord_vpn/network/country.py
[2K[1A[2K[G⠹ Processing file... (18/61) src/nyord_vpn/network/country.py
[2K[1A[2K[G⠸ Processing file... (20/61) src/nyord_vpn/network/vpn_commands.py
[2K[1A[2K[G⠼ Processing file... (25/61) src/nyord_vpn/storage/models.py
[2K[1A[2K[G⠴ Processing file... (41/61) tests/test_api.py
[2K[1A[2K[G⠦ Processing file... (60/61) TODO.md
[2K[1A[2K[G⠧ Writing output file...
[2K[1A[2K[G⠇ Calculating metrics...
[2K[1A[2K[G⠏ Calculating metrics...
[2K[1A[2K[G⠋ Calculating metrics...
[2K[1A[2K[G⠙ Calculating metrics...
[2K[1A[2K[G⠹ Calculating metrics...
[2K[1A[2K[G⠸ Calculating metrics...
[2K[1A[2K[G⠼ Calculating metrics...
[2K[1A[2K[G⠴ Calculating metrics...
[2K[1A[2K[G⠦ Calculating metrics...
[2K[1A[2K[G⠧ Calculating metrics...
[2K[1A[2K[G⠇ Calculating metrics...
[2K[1A[2K[G⠏ Calculating metrics...
[2K[1A[2K[G⠋ Calculating metrics...
[2K[1A[2K[G⠙ Calculating metrics...
[2K[1A[2K[G⠹ Calculating metrics...
[2K[1A[2K[G⠸ Calculating metrics...
[2K[1A[2K[G⠼ Calculating metrics...
[2K[1A[2K[G⠴ Calculating metrics...
[2K[1A[2K[G⠦ Calculating metrics... (18/61) src/nyord_vpn/network/country.py
[2K[1A[2K[G⠧ Calculating metrics... (42/61) tests/test_client.py
[2K[1A[2K[G⠇ Calculating metrics... (54/61) LICENSE
[2K[1A[2K[G⠏ Calculating metrics... (54/61) LICENSE
[2K[1A[2K[G⠋ Calculating metrics... (54/61) LICENSE
[2K[1A[2K[G⠙ Calculating metrics... (60/61) TODO.md
[2K[1A[2K[G✔ Packing completed successfully!

📈 Top 5 Files by Character Count and Token Count:
──────────────────────────────────────────────────
1.  nyord_vpn.txt (153,141 chars, 36,891 tokens)
2.  TODO.md (17,407 chars, 4,015 tokens)
3.  src/nyord_vpn/network/server.py (13,825 chars, 2,873 tokens)
4.  PROGRESS.md (10,983 chars, 2,471 tokens)
5.  src/nyord_vpn/network/vpn.py (10,585 chars, 2,089 tokens)

🔎 Security Check:
──────────────────
✔ No suspicious files detected.

📊 Pack Summary:
────────────────
  Total Files: 61 files
  Total Chars: 316,978 chars
 Total Tokens: 76,322 tokens
       Output: REPO_CONTENT.txt
     Security: ✔ No suspicious files detected

🎉 All Done!
Your repository has been successfully packed.

💡 Repomix is now available in your browser! Try it at https://repomix.com

2025-03-04 07:19:08 - Repository content mixed into REPO_CONTENT.txt
