2025-02-24 21:52:25 - 
=== Current Status ===
2025-02-24 21:52:25 - Error: LOG.md is missing
2025-02-24 21:52:25 - Error: .cursor/rules/0project.mdc is missing
2025-02-24 21:52:25 - [ 896]  .
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [8.5K]  filetree.mdc
│       └── [4.0K]  nyord-vpn.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 532]  .pre-commit-config.yaml
├── [ 128]  .specstory
│   └── [2.0K]  history
│       ├── [2.0K]  .what-is-this.md
│       ├── [452K]  2025-02-22_19-00-comparison-of-njord-and-nyord-vpn-implementations.md
│       ├── [ 913]  2025-02-22_19-00-fixing-logging-format-error-in-python.md
│       ├── [167K]  2025-02-22_20-24-managing-todos-and-development-tasks.md
│       ├── [8.3K]  2025-02-22_21-08-final-decision-and-todo-update.md
│       ├── [203K]  2025-02-22_21-21-git-management-and-todo-updates.md
│       ├── [ 39K]  2025-02-22_21-59-git-management-and-todo-updates.md
│       ├── [363K]  2025-02-22_22-27-git-management-and-todo-updates.md
│       ├── [ 52K]  2025-02-22_23-26-nordvpn-client-implementation-discussion.md
│       ├── [137K]  2025-02-22_23-35-task-management-and-project-update.md
│       ├── [ 58K]  2025-02-22_23-55-updating-todo-md-and-project-management.md
│       ├── [ 61K]  2025-02-23_00-02-task-management-and-collaboration-strategy.md
│       ├── [165K]  2025-02-23_00-09-updating-todo-md-and-task-prioritization.md
│       ├── [217K]  2025-02-23_01-01-codebase-analysis-and-optimization-discussion.md
│       ├── [101K]  2025-02-23_01-43-importerror-in-nyord-vpn-module.md
│       ├── [ 53K]  2025-02-23_01-55-understanding-vpn-cli-commands-and-issues.md
│       ├── [216K]  2025-02-23_02-15-python-virtual-environment-setup-and-testing.md
│       ├── [ 26K]  2025-02-23_02-34-vpn-connection-troubleshooting-with-python.md
│       ├── [189K]  2025-02-23_04-09-executing-python-vpn-connection-command.md
│       ├── [156K]  2025-02-23_04-56-vpn-connection-troubleshooting.md
│       ├── [ 44K]  2025-02-23_05-42-vpn-connection-status-troubleshooting.md
│       ├── [2.9K]  2025-02-23_05-54-comparing-vpn-management-tools-openpyn-vs-nyord.md
│       ├── [ 16K]  2025-02-23_06-04-untitled.md
│       ├── [ 16K]  2025-02-23_06-09-improving-nyord-vpn-server-selection-and-setup.md
│       ├── [ 76K]  2025-02-23_06-46-implementing-todo-items-in-project.md
│       ├── [156K]  2025-02-23_06-52-code-optimization-and-refactoring-discussion.md
│       ├── [227K]  2025-02-23_07-19-vpn-connection-troubleshooting-log.md
│       ├── [673K]  2025-02-23_07-30-vpn-connection-issues-and-server-selection-errors.md
│       ├── [432K]  2025-02-23_07-55-vpn-client-initialization-and-connection-logs.md
│       ├── [359K]  2025-02-23_08-03-nordvpn-client-initialization-logs.md
│       ├── [410K]  2025-02-23_08-18-vpn-client-frustrations-and-logs.md
│       ├── [6.0K]  2025-02-23_23-48-hierarchical-representation-of-codebase-structure.md
│       ├── [7.9K]  2025-02-23_23-48-nordvpn-client-codebase-organization.md
│       ├── [ 93K]  2025-02-24_00-09-code-analysis-and-docstring-enhancement.md
│       ├── [2.8K]  2025-02-24_01-16-vpn-configuration-file-retrieval-and-security.md
│       ├── [ 70K]  2025-02-24_01-29-improving-nyord-vpn-configuration-method.md
│       ├── [ 42K]  2025-02-24_01-47-openvpn-configuration-and-debugging.md
│       ├── [ 95K]  2025-02-24_02-10-vpn-connection-error-troubleshooting.md
│       ├── [ 58K]  2025-02-24_02-47-vpn-connection-troubleshooting-openvpn-auth-failure.md
│       ├── [ 12K]  2025-02-24_03-15-questioning-openvpn-command-location-in-code.md
│       ├── [ 20K]  2025-02-24_03-31-untitled.md
│       ├── [184K]  2025-02-24_03-36-zip-extraction-to-cache-directory.md
│       ├── [224K]  2025-02-24_04-13-vpn-connection-management-and-ip-tracking-issues.md
│       ├── [1.8M]  2025-02-24_04-43-vpn-connection-debugging-and-ip-verification.md
│       ├── [168K]  2025-02-24_05-02-optimizing-vpn-config-extraction-process.md
│       ├── [579K]  2025-02-24_05-33-vpn-connection-troubleshooting-and-debugging.md
│       ├── [287K]  2025-02-24_06-17-vpn-connection-management-with-nyord-vpn.md
│       ├── [210K]  2025-02-24_06-58-vpn-connection-troubleshooting.md
│       ├── [105K]  2025-02-24_07-15-vpn-connection-troubleshooting-and-improvements.md
│       ├── [6.2K]  2025-02-24_07-20-fixing-import-error-in-vpn-module.md
│       ├── [1006K]  2025-02-24_07-36-fixing-importerror-in-nyord-vpn-code.md
│       ├── [618K]  2025-02-24_07-57-vpn-server-connection-debugging.md
│       ├── [403K]  2025-02-24_08-01-vpn-server-selection-errors-and-debugging.md
│       ├── [245K]  2025-02-24_08-10-vpn-server-availability-issues.md
│       ├── [244K]  2025-02-24_17-19-vpn-country-resolution-issue.md
│       ├── [164K]  2025-02-24_17-43-vpn-connection-issue-no-servers-in-germany.md
│       ├── [ 20K]  2025-02-24_18-03-refining-api-documentation-and-structure.md
│       ├── [ 25K]  2025-02-24_18-41-script-modification-for-repomix-command.md
│       ├── [148K]  2025-02-24_19-08-tracking-todo-and-progress-updates.md
│       ├── [ 39K]  2025-02-24_19-49-review-and-update-project-documentation.md
│       ├── [ 59K]  2025-02-24_20-10-task-management-for-nyord-vpn-project.md
│       └── [ 47K]  2025-02-24_20-54-placeholder-message.md
├── [ 160]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [4.2K]  PROGRESS.md
├── [5.5K]  README.md
├── [7.5K]  TODO.md
├── [ 13K]  cleanup.py
├── [  96]  dist
│   └── [   1]  .gitkeep
├── [131K]  nyord_vpn.txt
├── [ 426]  package.toml
├── [6.9K]  pyproject.toml
├── [ 160]  src
│   ├── [   0]  __init__.py
│   └── [ 448]  nyord_vpn
│       ├── [2.4K]  __init__.py
│       ├── [2.5K]  __main__.py
│       ├── [ 512]  api
│       │   ├── [ 327]  __init__.py
│       │   ├── [ 16K]  api.py
│       │   ├── [ 27K]  v1_countries.json
│       │   ├── [5.4K]  v1_countries.py
│       │   ├── [5.2K]  v1_groups.json
│       │   ├── [4.6K]  v1_groups.py
│       │   ├── [ 67K]  v1_recommendations.json
│       │   ├── [7.0K]  v1_recommendations.py
│       │   ├── [4.2K]  v1_technologies.json
│       │   ├── [3.9K]  v1_technologies.py
│       │   ├── [ 97K]  v2_servers.json
│       │   └── [ 11K]  v2_servers.py
│       ├── [ 256]  core
│       │   ├── [ 178]  __init__.py
│       │   ├── [ 12K]  api.py
│       │   ├── [8.2K]  base.py
│       │   └── [ 14K]  client.py
│       ├── [ 192]  data
│       │   ├── [  96]  .specstory
│       │   │   └── [  96]  history
│       │   │       └── [2.0K]  .what-is-this.md
│       │   ├── [ 93K]  countries.json
│       │   └── [ 963]  country_ids.json
│       ├── [6.8K]  exceptions.py
│       ├── [ 288]  network
│       │   ├── [ 204]  __init__.py
│       │   ├── [1.0K]  country.py
│       │   ├── [ 37K]  server.py
│       │   ├── [ 47K]  vpn.py
│       │   └── [ 13K]  vpn_commands.py
│       ├── [ 192]  scripts
│       │   ├── [  37]  __init__.py
│       │   └── [3.0K]  update_countries.py
│       ├── [ 224]  storage
│       │   ├── [ 212]  __init__.py
│       │   ├── [8.0K]  models.py
│       │   └── [4.0K]  state.py
│       └── [ 288]  utils
│           ├── [ 194]  __init__.py
│           ├── [3.8K]  connection.py
│           ├── [  64]  data
│           ├── [ 12K]  templates.py
│           └── [9.4K]  utils.py
├── [ 544]  tests
│   ├── [  40]  __init__.py
│   ├── [2.6K]  conftest.py
│   ├── [ 288]  integration
│   │   ├── [  39]  __init__.py
│   │   ├── [ 12K]  test_config_loading.py
│   │   ├── [2.9K]  test_connection.py
│   │   ├── [9.3K]  test_errors.py
│   │   └── [1.4K]  test_validation_integration.py
│   ├── [5.9K]  test_api.py
│   ├── [2.0K]  test_client.py
│   ├── [3.5K]  test_legacy_api.py
│   ├── [ 159]  test_package.py
│   ├── [6.4K]  test_server_manager.py
│   ├── [4.2K]  test_v1_countries.py
│   ├── [4.4K]  test_v1_groups.py
│   ├── [5.7K]  test_v1_recommendations.py
│   ├── [3.2K]  test_v1_technologies.py
│   └── [7.9K]  test_v2_servers.py
└── [264K]  uv.lock

22 directories, 133 files

2025-02-24 21:52:25 - 
Project structure:
2025-02-24 21:52:25 - [ 896]  .
├── [  96]  .cursor
│   └── [ 128]  rules
│       ├── [8.5K]  filetree.mdc
│       └── [4.0K]  nyord-vpn.mdc
├── [  96]  .github
│   └── [ 128]  workflows
│       ├── [2.7K]  push.yml
│       └── [1.4K]  release.yml
├── [3.5K]  .gitignore
├── [ 532]  .pre-commit-config.yaml
├── [ 128]  .specstory
│   └── [2.0K]  history
│       ├── [2.0K]  .what-is-this.md
│       ├── [452K]  2025-02-22_19-00-comparison-of-njord-and-nyord-vpn-implementations.md
│       ├── [ 913]  2025-02-22_19-00-fixing-logging-format-error-in-python.md
│       ├── [167K]  2025-02-22_20-24-managing-todos-and-development-tasks.md
│       ├── [8.3K]  2025-02-22_21-08-final-decision-and-todo-update.md
│       ├── [203K]  2025-02-22_21-21-git-management-and-todo-updates.md
│       ├── [ 39K]  2025-02-22_21-59-git-management-and-todo-updates.md
│       ├── [363K]  2025-02-22_22-27-git-management-and-todo-updates.md
│       ├── [ 52K]  2025-02-22_23-26-nordvpn-client-implementation-discussion.md
│       ├── [137K]  2025-02-22_23-35-task-management-and-project-update.md
│       ├── [ 58K]  2025-02-22_23-55-updating-todo-md-and-project-management.md
│       ├── [ 61K]  2025-02-23_00-02-task-management-and-collaboration-strategy.md
│       ├── [165K]  2025-02-23_00-09-updating-todo-md-and-task-prioritization.md
│       ├── [217K]  2025-02-23_01-01-codebase-analysis-and-optimization-discussion.md
│       ├── [101K]  2025-02-23_01-43-importerror-in-nyord-vpn-module.md
│       ├── [ 53K]  2025-02-23_01-55-understanding-vpn-cli-commands-and-issues.md
│       ├── [216K]  2025-02-23_02-15-python-virtual-environment-setup-and-testing.md
│       ├── [ 26K]  2025-02-23_02-34-vpn-connection-troubleshooting-with-python.md
│       ├── [189K]  2025-02-23_04-09-executing-python-vpn-connection-command.md
│       ├── [156K]  2025-02-23_04-56-vpn-connection-troubleshooting.md
│       ├── [ 44K]  2025-02-23_05-42-vpn-connection-status-troubleshooting.md
│       ├── [2.9K]  2025-02-23_05-54-comparing-vpn-management-tools-openpyn-vs-nyord.md
│       ├── [ 16K]  2025-02-23_06-04-untitled.md
│       ├── [ 16K]  2025-02-23_06-09-improving-nyord-vpn-server-selection-and-setup.md
│       ├── [ 76K]  2025-02-23_06-46-implementing-todo-items-in-project.md
│       ├── [156K]  2025-02-23_06-52-code-optimization-and-refactoring-discussion.md
│       ├── [227K]  2025-02-23_07-19-vpn-connection-troubleshooting-log.md
│       ├── [673K]  2025-02-23_07-30-vpn-connection-issues-and-server-selection-errors.md
│       ├── [432K]  2025-02-23_07-55-vpn-client-initialization-and-connection-logs.md
│       ├── [359K]  2025-02-23_08-03-nordvpn-client-initialization-logs.md
│       ├── [410K]  2025-02-23_08-18-vpn-client-frustrations-and-logs.md
│       ├── [6.0K]  2025-02-23_23-48-hierarchical-representation-of-codebase-structure.md
│       ├── [7.9K]  2025-02-23_23-48-nordvpn-client-codebase-organization.md
│       ├── [ 93K]  2025-02-24_00-09-code-analysis-and-docstring-enhancement.md
│       ├── [2.8K]  2025-02-24_01-16-vpn-configuration-file-retrieval-and-security.md
│       ├── [ 70K]  2025-02-24_01-29-improving-nyord-vpn-configuration-method.md
│       ├── [ 42K]  2025-02-24_01-47-openvpn-configuration-and-debugging.md
│       ├── [ 95K]  2025-02-24_02-10-vpn-connection-error-troubleshooting.md
│       ├── [ 58K]  2025-02-24_02-47-vpn-connection-troubleshooting-openvpn-auth-failure.md
│       ├── [ 12K]  2025-02-24_03-15-questioning-openvpn-command-location-in-code.md
│       ├── [ 20K]  2025-02-24_03-31-untitled.md
│       ├── [184K]  2025-02-24_03-36-zip-extraction-to-cache-directory.md
│       ├── [224K]  2025-02-24_04-13-vpn-connection-management-and-ip-tracking-issues.md
│       ├── [1.8M]  2025-02-24_04-43-vpn-connection-debugging-and-ip-verification.md
│       ├── [168K]  2025-02-24_05-02-optimizing-vpn-config-extraction-process.md
│       ├── [579K]  2025-02-24_05-33-vpn-connection-troubleshooting-and-debugging.md
│       ├── [287K]  2025-02-24_06-17-vpn-connection-management-with-nyord-vpn.md
│       ├── [210K]  2025-02-24_06-58-vpn-connection-troubleshooting.md
│       ├── [105K]  2025-02-24_07-15-vpn-connection-troubleshooting-and-improvements.md
│       ├── [6.2K]  2025-02-24_07-20-fixing-import-error-in-vpn-module.md
│       ├── [1006K]  2025-02-24_07-36-fixing-importerror-in-nyord-vpn-code.md
│       ├── [618K]  2025-02-24_07-57-vpn-server-connection-debugging.md
│       ├── [403K]  2025-02-24_08-01-vpn-server-selection-errors-and-debugging.md
│       ├── [245K]  2025-02-24_08-10-vpn-server-availability-issues.md
│       ├── [244K]  2025-02-24_17-19-vpn-country-resolution-issue.md
│       ├── [164K]  2025-02-24_17-43-vpn-connection-issue-no-servers-in-germany.md
│       ├── [ 20K]  2025-02-24_18-03-refining-api-documentation-and-structure.md
│       ├── [ 25K]  2025-02-24_18-41-script-modification-for-repomix-command.md
│       ├── [148K]  2025-02-24_19-08-tracking-todo-and-progress-updates.md
│       ├── [ 39K]  2025-02-24_19-49-review-and-update-project-documentation.md
│       ├── [ 59K]  2025-02-24_20-10-task-management-for-nyord-vpn-project.md
│       └── [ 47K]  2025-02-24_20-54-placeholder-message.md
├── [ 160]  CLEANUP.txt
├── [1.0K]  LICENSE
├── [4.2K]  PROGRESS.md
├── [5.5K]  README.md
├── [7.5K]  TODO.md
├── [ 13K]  cleanup.py
├── [  96]  dist
│   └── [   1]  .gitkeep
├── [131K]  nyord_vpn.txt
├── [ 426]  package.toml
├── [6.9K]  pyproject.toml
├── [ 160]  src
│   ├── [   0]  __init__.py
│   └── [ 448]  nyord_vpn
│       ├── [2.4K]  __init__.py
│       ├── [2.5K]  __main__.py
│       ├── [ 512]  api
│       │   ├── [ 327]  __init__.py
│       │   ├── [ 16K]  api.py
│       │   ├── [ 27K]  v1_countries.json
│       │   ├── [5.4K]  v1_countries.py
│       │   ├── [5.2K]  v1_groups.json
│       │   ├── [4.6K]  v1_groups.py
│       │   ├── [ 67K]  v1_recommendations.json
│       │   ├── [7.0K]  v1_recommendations.py
│       │   ├── [4.2K]  v1_technologies.json
│       │   ├── [3.9K]  v1_technologies.py
│       │   ├── [ 97K]  v2_servers.json
│       │   └── [ 11K]  v2_servers.py
│       ├── [ 256]  core
│       │   ├── [ 178]  __init__.py
│       │   ├── [ 12K]  api.py
│       │   ├── [8.2K]  base.py
│       │   └── [ 14K]  client.py
│       ├── [ 192]  data
│       │   ├── [  96]  .specstory
│       │   │   └── [  96]  history
│       │   │       └── [2.0K]  .what-is-this.md
│       │   ├── [ 93K]  countries.json
│       │   └── [ 963]  country_ids.json
│       ├── [6.8K]  exceptions.py
│       ├── [ 288]  network
│       │   ├── [ 204]  __init__.py
│       │   ├── [1.0K]  country.py
│       │   ├── [ 37K]  server.py
│       │   ├── [ 47K]  vpn.py
│       │   └── [ 13K]  vpn_commands.py
│       ├── [ 192]  scripts
│       │   ├── [  37]  __init__.py
│       │   └── [3.0K]  update_countries.py
│       ├── [ 224]  storage
│       │   ├── [ 212]  __init__.py
│       │   ├── [8.0K]  models.py
│       │   └── [4.0K]  state.py
│       └── [ 288]  utils
│           ├── [ 194]  __init__.py
│           ├── [3.8K]  connection.py
│           ├── [  64]  data
│           ├── [ 12K]  templates.py
│           └── [9.4K]  utils.py
├── [ 544]  tests
│   ├── [  40]  __init__.py
│   ├── [2.6K]  conftest.py
│   ├── [ 288]  integration
│   │   ├── [  39]  __init__.py
│   │   ├── [ 12K]  test_config_loading.py
│   │   ├── [2.9K]  test_connection.py
│   │   ├── [9.3K]  test_errors.py
│   │   └── [1.4K]  test_validation_integration.py
│   ├── [5.9K]  test_api.py
│   ├── [2.0K]  test_client.py
│   ├── [3.5K]  test_legacy_api.py
│   ├── [ 159]  test_package.py
│   ├── [6.4K]  test_server_manager.py
│   ├── [4.2K]  test_v1_countries.py
│   ├── [4.4K]  test_v1_groups.py
│   ├── [5.7K]  test_v1_recommendations.py
│   ├── [3.2K]  test_v1_technologies.py
│   └── [7.9K]  test_v2_servers.py
└── [264K]  uv.lock

22 directories, 133 files

2025-02-24 21:52:25 - On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .cursor/rules/filetree.mdc
	modified:   .cursor/rules/nyord-vpn.mdc
	modified:   CLEANUP.txt
	modified:   TODO.md
	modified:   cleanup.py
	modified:   src/nyord_vpn/__init__.py
	modified:   src/nyord_vpn/api/api.py
	modified:   src/nyord_vpn/api/v1_countries.py
	modified:   src/nyord_vpn/api/v1_groups.py
	modified:   src/nyord_vpn/api/v1_recommendations.py
	modified:   src/nyord_vpn/api/v1_technologies.py
	modified:   src/nyord_vpn/api/v2_servers.py
	modified:   src/nyord_vpn/core/api.py
	modified:   src/nyord_vpn/core/base.py
	modified:   src/nyord_vpn/core/client.py
	modified:   src/nyord_vpn/exceptions.py
	modified:   src/nyord_vpn/network/server.py
	modified:   src/nyord_vpn/network/vpn.py
	modified:   src/nyord_vpn/network/vpn_commands.py
	modified:   src/nyord_vpn/storage/__init__.py
	modified:   src/nyord_vpn/storage/models.py
	modified:   tests/conftest.py
	modified:   tests/test_server_manager.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.specstory/history/2025-02-24_19-08-tracking-todo-and-progress-updates.md
	.specstory/history/2025-02-24_19-49-review-and-update-project-documentation.md
	.specstory/history/2025-02-24_20-10-task-management-for-nyord-vpn-project.md
	.specstory/history/2025-02-24_20-54-placeholder-message.md
	PROGRESS.md
	src/nyord_vpn/api/__init__.py
	tests/test_api.py
	tests/test_v1_countries.py
	tests/test_v1_groups.py
	tests/test_v1_recommendations.py
	tests/test_v1_technologies.py
	tests/test_v2_servers.py

no changes added to commit (use "git add" and/or "git commit -a")

2025-02-24 21:52:25 - On branch main
Your branch is up to date with 'origin/main'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git restore <file>..." to discard changes in working directory)
	modified:   .cursor/rules/filetree.mdc
	modified:   .cursor/rules/nyord-vpn.mdc
	modified:   CLEANUP.txt
	modified:   TODO.md
	modified:   cleanup.py
	modified:   src/nyord_vpn/__init__.py
	modified:   src/nyord_vpn/api/api.py
	modified:   src/nyord_vpn/api/v1_countries.py
	modified:   src/nyord_vpn/api/v1_groups.py
	modified:   src/nyord_vpn/api/v1_recommendations.py
	modified:   src/nyord_vpn/api/v1_technologies.py
	modified:   src/nyord_vpn/api/v2_servers.py
	modified:   src/nyord_vpn/core/api.py
	modified:   src/nyord_vpn/core/base.py
	modified:   src/nyord_vpn/core/client.py
	modified:   src/nyord_vpn/exceptions.py
	modified:   src/nyord_vpn/network/server.py
	modified:   src/nyord_vpn/network/vpn.py
	modified:   src/nyord_vpn/network/vpn_commands.py
	modified:   src/nyord_vpn/storage/__init__.py
	modified:   src/nyord_vpn/storage/models.py
	modified:   tests/conftest.py
	modified:   tests/test_server_manager.py

Untracked files:
  (use "git add <file>..." to include in what will be committed)
	.specstory/history/2025-02-24_19-08-tracking-todo-and-progress-updates.md
	.specstory/history/2025-02-24_19-49-review-and-update-project-documentation.md
	.specstory/history/2025-02-24_20-10-task-management-for-nyord-vpn-project.md
	.specstory/history/2025-02-24_20-54-placeholder-message.md
	PROGRESS.md
	src/nyord_vpn/api/__init__.py
	tests/test_api.py
	tests/test_v1_countries.py
	tests/test_v1_groups.py
	tests/test_v1_recommendations.py
	tests/test_v1_technologies.py
	tests/test_v2_servers.py

no changes added to commit (use "git add" and/or "git commit -a")

2025-02-24 21:52:25 - 
=== Environment Status ===
2025-02-24 21:52:25 - Setting up virtual environment
2025-02-24 21:52:26 - Virtual environment created and activated
2025-02-24 21:52:26 - Installing package with all extras
2025-02-24 21:52:26 - Setting up virtual environment
2025-02-24 21:52:26 - Virtual environment created and activated
2025-02-24 21:52:27 - Package installed successfully
2025-02-24 21:52:27 - >>>
>>> Running code fixes...
>>> TODO: Check the errors!
>>>
2025-02-24 21:52:28 - src/__init__.py:1:1: D104 Missing docstring in public package
src/nyord_vpn/__main__.py:23:24: FBT001 Boolean-typed positional argument in function definition
   |
21 |     """NordVPN CLI interface."""
22 |
23 |     def __init__(self, verbose: bool = False) -> None:
   |                        ^^^^^^^ FBT001
24 |         """Initialize CLI."""
25 |         try:
   |

src/nyord_vpn/__main__.py:23:24: FBT002 Boolean default positional argument in function definition
   |
21 |     """NordVPN CLI interface."""
22 |
23 |     def __init__(self, verbose: bool = False) -> None:
   |                        ^^^^^^^ FBT002
24 |         """Initialize CLI."""
25 |         try:
   |

src/nyord_vpn/__main__.py:79:5: D401 First line of docstring should be in imperative mood: "Main entry point."
   |
78 | def main() -> None:
79 |     """Main entry point."""
   |     ^^^^^^^^^^^^^^^^^^^^^^^ D401
80 |     try:
81 |         fire.Fire(CLI)
   |

src/nyord_vpn/api/api.py:126:27: TRY003 Avoid specifying long messages outside the exception class
    |
124 |                 if self._recommended_servers is None:
125 |                     # Only raise if we don't have cached data
126 |                     raise VPNAPIError(f"Failed to fetch recommended servers: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
127 |
128 |         return self._recommended_servers
    |

src/nyord_vpn/api/api.py:159:27: TRY003 Avoid specifying long messages outside the exception class
    |
157 |                 if self._technologies is None:
158 |                     # Only raise if we don't have cached data
159 |                     raise VPNAPIError(f"Failed to fetch technologies: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
160 |
161 |         return self._technologies
    |

src/nyord_vpn/api/api.py:190:27: TRY003 Avoid specifying long messages outside the exception class
    |
188 |                 if self._groups is None:
189 |                     # Only raise if we don't have cached data
190 |                     raise VPNAPIError(f"Failed to fetch groups: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
191 |
192 |         return self._groups
    |

src/nyord_vpn/api/api.py:221:27: TRY003 Avoid specifying long messages outside the exception class
    |
219 |                 if self._countries is None:
220 |                     # Only raise if we don't have cached data
221 |                     raise VPNAPIError(f"Failed to fetch countries: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
222 |
223 |         return self._countries
    |

src/nyord_vpn/api/api.py:249:27: TRY003 Avoid specifying long messages outside the exception class
    |
247 |                 if self._servers is None:
248 |                     # Only raise if we don't have cached data
249 |                     raise VPNAPIError(f"Failed to fetch servers: {e}") from e
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
250 |
251 |         return self._servers
    |

src/nyord_vpn/api/api.py:253:9: C901 `find_best_server` is too complex (12 > 10)
    |
251 |         return self._servers
252 |
253 |     def find_best_server(
    |         ^^^^^^^^^^^^^^^^ C901
254 |         self,
255 |         country_code: str | None = None,
    |

src/nyord_vpn/api/api.py:350:23: TRY003 Avoid specifying long messages outside the exception class
    |
349 |               if not filtered_servers:
350 |                   raise ValueError(
    |  _______________________^
351 | |                     f"No servers found matching criteria: "
352 | |                     f"country_code={country_code}, group_identifier={group_identifier}, "
353 | |                     f"technology_identifier={technology_identifier}"
354 | |                 )
    | |_________________^ TRY003
355 |
356 |               return min(filtered_servers, key=lambda s: s.load)
    |

src/nyord_vpn/api/api.py:359:19: TRY003 Avoid specifying long messages outside the exception class
    |
358 |           except (requests.exceptions.RequestException, VPNAPIError) as e:
359 |               raise VPNAPIError(
    |  ___________________^
360 | |                 f"Failed to find best server using both v1 and v2 APIs: {e}"
361 | |             ) from e
    | |_____________^ TRY003
362 |
363 |       def get_server_stats(self) -> dict[str, Any]:
    |

src/nyord_vpn/api/api.py:443:23: TRY003 Avoid specifying long messages outside the exception class
    |
441 |                   }
442 |               except (VPNAPIError, requests.exceptions.RequestException) as e2:
443 |                   raise VPNAPIError(
    |  _______________________^
444 | |                     f"Failed to generate server statistics using both v1 and v2 APIs: {e2}"
445 | |                 ) from e2
    | |_________________^ TRY003
    |

src/nyord_vpn/api/v1_countries.py:101:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
 99 |           except requests.exceptions.RequestException as e:
100 |               logger.error(f"Failed to fetch NordVPN countries: {e}")
101 | /             raise VPNAPIError(
102 | |                 "Failed to fetch countries from v1 API",
103 | |                 details=str(e),
104 | |                 cause=e,
105 | |             )
    | |_____________^ B904
106 |           except (ValueError, TypeError) as e:
107 |               logger.error(f"Failed to parse NordVPN countries: {e}")
    |

src/nyord_vpn/api/v1_countries.py:101:19: TRY003 Avoid specifying long messages outside the exception class
    |
 99 |           except requests.exceptions.RequestException as e:
100 |               logger.error(f"Failed to fetch NordVPN countries: {e}")
101 |               raise VPNAPIError(
    |  ___________________^
102 | |                 "Failed to fetch countries from v1 API",
103 | |                 details=str(e),
104 | |                 cause=e,
105 | |             )
    | |_____________^ TRY003
106 |           except (ValueError, TypeError) as e:
107 |               logger.error(f"Failed to parse NordVPN countries: {e}")
    |

src/nyord_vpn/api/v1_countries.py:108:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
106 |           except (ValueError, TypeError) as e:
107 |               logger.error(f"Failed to parse NordVPN countries: {e}")
108 | /             raise VPNAPIError(
109 | |                 "Failed to parse countries from v1 API",
110 | |                 details=str(e),
111 | |                 cause=e,
112 | |             )
    | |_____________^ B904
    |

src/nyord_vpn/api/v1_countries.py:108:19: TRY003 Avoid specifying long messages outside the exception class
    |
106 |           except (ValueError, TypeError) as e:
107 |               logger.error(f"Failed to parse NordVPN countries: {e}")
108 |               raise VPNAPIError(
    |  ___________________^
109 | |                 "Failed to parse countries from v1 API",
110 | |                 details=str(e),
111 | |                 cause=e,
112 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/api/v1_countries.py:141:11: TRY003 Avoid specifying long messages outside the exception class
    |
139 |         if country.code.upper() == country_code.upper():
140 |             return country
141 |     raise ValueError(f"No country found with code: {country_code}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_countries.py:195:11: TRY003 Avoid specifying long messages outside the exception class
    |
193 |         if city.name.lower() == city_name.lower():
194 |             return city
195 |     raise ValueError(f"No city found with name '{city_name}' in {country.name}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_groups.py:102:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
100 |           except requests.exceptions.RequestException as e:
101 |               logger.error(f"Failed to fetch NordVPN server groups: {e}")
102 | /             raise VPNAPIError(
103 | |                 "Failed to fetch server groups from v1 API",
104 | |                 details=str(e),
105 | |                 cause=e,
106 | |             )
    | |_____________^ B904
107 |           except (ValueError, TypeError) as e:
108 |               logger.error(f"Failed to parse NordVPN server groups: {e}")
    |

src/nyord_vpn/api/v1_groups.py:102:19: TRY003 Avoid specifying long messages outside the exception class
    |
100 |           except requests.exceptions.RequestException as e:
101 |               logger.error(f"Failed to fetch NordVPN server groups: {e}")
102 |               raise VPNAPIError(
    |  ___________________^
103 | |                 "Failed to fetch server groups from v1 API",
104 | |                 details=str(e),
105 | |                 cause=e,
106 | |             )
    | |_____________^ TRY003
107 |           except (ValueError, TypeError) as e:
108 |               logger.error(f"Failed to parse NordVPN server groups: {e}")
    |

src/nyord_vpn/api/v1_groups.py:109:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
107 |           except (ValueError, TypeError) as e:
108 |               logger.error(f"Failed to parse NordVPN server groups: {e}")
109 | /             raise VPNAPIError(
110 | |                 "Failed to parse server groups from v1 API",
111 | |                 details=str(e),
112 | |                 cause=e,
113 | |             )
    | |_____________^ B904
    |

src/nyord_vpn/api/v1_groups.py:109:19: TRY003 Avoid specifying long messages outside the exception class
    |
107 |           except (ValueError, TypeError) as e:
108 |               logger.error(f"Failed to parse NordVPN server groups: {e}")
109 |               raise VPNAPIError(
    |  ___________________^
110 | |                 "Failed to parse server groups from v1 API",
111 | |                 details=str(e),
112 | |                 cause=e,
113 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/api/v1_groups.py:165:11: TRY003 Avoid specifying long messages outside the exception class
    |
163 |         if group.identifier == identifier:
164 |             return group
165 |     raise ValueError(f"No group found with identifier: {identifier}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v1_recommendations.py:226:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
224 |           except requests.exceptions.RequestException as e:
225 |               logger.error(f"Failed to fetch NordVPN server recommendations: {e}")
226 | /             raise VPNAPIError(
227 | |                 "Failed to fetch recommended servers from v1 API",
228 | |                 details=str(e),
229 | |                 cause=e,
230 | |             )
    | |_____________^ B904
231 |           except (ValueError, TypeError) as e:
232 |               logger.error(f"Failed to parse NordVPN server recommendations: {e}")
    |

src/nyord_vpn/api/v1_recommendations.py:226:19: TRY003 Avoid specifying long messages outside the exception class
    |
224 |           except requests.exceptions.RequestException as e:
225 |               logger.error(f"Failed to fetch NordVPN server recommendations: {e}")
226 |               raise VPNAPIError(
    |  ___________________^
227 | |                 "Failed to fetch recommended servers from v1 API",
228 | |                 details=str(e),
229 | |                 cause=e,
230 | |             )
    | |_____________^ TRY003
231 |           except (ValueError, TypeError) as e:
232 |               logger.error(f"Failed to parse NordVPN server recommendations: {e}")
    |

src/nyord_vpn/api/v1_recommendations.py:233:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
231 |           except (ValueError, TypeError) as e:
232 |               logger.error(f"Failed to parse NordVPN server recommendations: {e}")
233 | /             raise VPNAPIError(
234 | |                 "Failed to parse recommended servers from v1 API",
235 | |                 details=str(e),
236 | |                 cause=e,
237 | |             )
    | |_____________^ B904
    |

src/nyord_vpn/api/v1_recommendations.py:233:19: TRY003 Avoid specifying long messages outside the exception class
    |
231 |           except (ValueError, TypeError) as e:
232 |               logger.error(f"Failed to parse NordVPN server recommendations: {e}")
233 |               raise VPNAPIError(
    |  ___________________^
234 | |                 "Failed to parse recommended servers from v1 API",
235 | |                 details=str(e),
236 | |                 cause=e,
237 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/api/v1_technologies.py:92:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
90 |           except requests.exceptions.RequestException as e:
91 |               logger.error(f"Failed to fetch NordVPN technologies: {e}")
92 | /             raise VPNAPIError(
93 | |                 "Failed to fetch technologies from v1 API",
94 | |                 details=str(e),
95 | |                 cause=e,
96 | |             )
   | |_____________^ B904
97 |           except (ValueError, TypeError) as e:
98 |               logger.error(f"Failed to parse NordVPN technologies: {e}")
   |

src/nyord_vpn/api/v1_technologies.py:92:19: TRY003 Avoid specifying long messages outside the exception class
   |
90 |           except requests.exceptions.RequestException as e:
91 |               logger.error(f"Failed to fetch NordVPN technologies: {e}")
92 |               raise VPNAPIError(
   |  ___________________^
93 | |                 "Failed to fetch technologies from v1 API",
94 | |                 details=str(e),
95 | |                 cause=e,
96 | |             )
   | |_____________^ TRY003
97 |           except (ValueError, TypeError) as e:
98 |               logger.error(f"Failed to parse NordVPN technologies: {e}")
   |

src/nyord_vpn/api/v1_technologies.py:99:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
 97 |           except (ValueError, TypeError) as e:
 98 |               logger.error(f"Failed to parse NordVPN technologies: {e}")
 99 | /             raise VPNAPIError(
100 | |                 "Failed to parse technologies from v1 API",
101 | |                 details=str(e),
102 | |                 cause=e,
103 | |             )
    | |_____________^ B904
    |

src/nyord_vpn/api/v1_technologies.py:99:19: TRY003 Avoid specifying long messages outside the exception class
    |
 97 |           except (ValueError, TypeError) as e:
 98 |               logger.error(f"Failed to parse NordVPN technologies: {e}")
 99 |               raise VPNAPIError(
    |  ___________________^
100 | |                 "Failed to parse technologies from v1 API",
101 | |                 details=str(e),
102 | |                 cause=e,
103 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/api/v1_technologies.py:134:11: TRY003 Avoid specifying long messages outside the exception class
    |
132 |         if tech.identifier == identifier:
133 |             return tech
134 |     raise ValueError(f"No technology found with identifier: {identifier}")
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/api/v2_servers.py:260:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
258 |                   try:
259 |                       parsed_data[key] = adapter.validate_python(data[key])
260 | /                 except (KeyError, ValueError, TypeError) as err:
261 | |                     logger.error(f"Failed to parse {key} data: {err}")
262 | |                     raise VPNAPIError(
263 | |                         f"Failed to parse {key} data from v2 API",
264 | |                         details=str(err),
265 | |                         cause=err,
266 | |                     ) from err
    | |______________________________^ PERF203
267 |
268 |               # Create lookup maps for efficient linking
    |

src/nyord_vpn/api/v2_servers.py:262:27: TRY003 Avoid specifying long messages outside the exception class
    |
260 |                   except (KeyError, ValueError, TypeError) as err:
261 |                       logger.error(f"Failed to parse {key} data: {err}")
262 |                       raise VPNAPIError(
    |  ___________________________^
263 | |                         f"Failed to parse {key} data from v2 API",
264 | |                         details=str(err),
265 | |                         cause=err,
266 | |                     ) from err
    | |_____________________^ TRY003
267 |
268 |               # Create lookup maps for efficient linking
    |

src/nyord_vpn/api/v2_servers.py:289:19: TRY003 Avoid specifying long messages outside the exception class
    |
287 |           except requests.exceptions.RequestException as error:
288 |               logger.error(f"Failed to fetch NordVPN server data: {error}")
289 |               raise VPNAPIError(
    |  ___________________^
290 | |                 "Failed to fetch server data from v2 API",
291 | |                 details=str(error),
292 | |                 cause=error,
293 | |             ) from error
    | |_____________^ TRY003
294 |
295 |       def _link_server_relations(
    |

src/nyord_vpn/core/api.py:104:33: ARG002 Unused method argument: `use_cache`
    |
102 |         self.logger = logger
103 |
104 |     def list_countries(self, *, use_cache: bool = True) -> list[Country]:
    |                                 ^^^^^^^^^ ARG002
105 |         """Fetch list of available server countries.
    |

src/nyord_vpn/core/api.py:150:13: TRY300 Consider moving this statement to an `else` block
    |
148 |             }
149 |             cache_countries(cache_data)
150 |             return countries
    |             ^^^^^^^^^^^^^^^^ TRY300
151 |
152 |         except RequestException as e:
    |

src/nyord_vpn/core/api.py:247:17: PERF401 Use `list.extend` to create a transformed list
    |
245 |             )
246 |             for city in sorted(country["cities"], key=lambda x: x["name"]):
247 |                 locations.append(f"  {city['name']} - {city['serverCount']} servers")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ PERF401
248 |         return locations
    |
    = help: Replace for loop with list.extend

src/nyord_vpn/core/api.py:250:51: ARG002 Unused method argument: `use_cache`
    |
248 |         return locations
249 |
250 |     def get_best_city(self, country_code: str, *, use_cache: bool = True) -> City | None:
    |                                                   ^^^^^^^^^ ARG002
251 |         """Get the best city in a country for VPN connection.
    |

src/nyord_vpn/core/api.py:305:48: ARG002 Unused method argument: `use_cache`
    |
303 |         return self.list_countries(use_cache=True)
304 |
305 |     def get_cities(self, country_code: str, *, use_cache: bool = True) -> list[City]:
    |                                                ^^^^^^^^^ ARG002
306 |         """Get cities in a specific country.
    |

src/nyord_vpn/core/api.py:365:13: TRY300 Consider moving this statement to an `else` block
    |
363 |             )
364 |             response.raise_for_status()
365 |             return True
    |             ^^^^^^^^^^^ TRY300
366 |         except Exception as e:
367 |             if self.verbose:
    |

src/nyord_vpn/core/api.py:368:72: TRY401 Redundant exception object included in `logging.exception` call
    |
366 |         except Exception as e:
367 |             if self.verbose:
368 |                 self.logger.exception(f"API connectivity test failed: {e}")
    |                                                                        ^ TRY401
369 |             return False
    |

src/nyord_vpn/core/base.py:245:30: ANN003 Missing type annotation for `**kwargs`
    |
243 |         return sorted_cities[0] if sorted_cities else None
244 |
245 |     def list_countries(self, **kwargs) -> list[Country]:
    |                              ^^^^^^^^ ANN003
246 |         """List all countries with server information.
    |

src/nyord_vpn/core/base.py:245:32: ARG002 Unused method argument: `kwargs`
    |
243 |         return sorted_cities[0] if sorted_cities else None
244 |
245 |     def list_countries(self, **kwargs) -> list[Country]:
    |                                ^^^^^^ ARG002
246 |         """List all countries with server information.
    |

src/nyord_vpn/core/client.py:217:19: TRY003 Avoid specifying long messages outside the exception class
    |
216 |           if not self.username or not self.password:
217 |               raise VPNError(
    |  ___________________^
218 | |                 "No VPN credentials available. Please set NORD_USER (or NORDVPN_LOGIN) and NORD_PASSWORD (or NORDVPN_PASSWORD) enviro…
219 | |             )
    | |_____________^ TRY003
220 |
221 |           # Initialize components in the correct order
    |

src/nyord_vpn/core/client.py:273:13: SIM102 Use a single `if` statement instead of nested `if` statements
    |
271 |               # First check if we're already connected
272 |               status = self.status()
273 | /             if status.get("connected", False):
274 | |                 # VPN manager will handle disconnection automatically
275 | |                 if self.verbose:
    | |________________________________^ SIM102
276 |                       self.logger.info(
277 |                           "Already connected, will disconnect before connecting to new server"
    |
    = help: Combine `if` statements using `and`

src/nyord_vpn/core/client.py:283:17: TRY301 Abstract `raise` to an inner function
    |
281 |             servers = self.server_manager.select_fastest_server(country_code)
282 |             if not servers:
283 |                 raise VPNError(f"No servers available in {country_code}")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
284 |
285 |             # Take the first (fastest) server
    |

src/nyord_vpn/core/client.py:283:23: TRY003 Avoid specifying long messages outside the exception class
    |
281 |             servers = self.server_manager.select_fastest_server(country_code)
282 |             if not servers:
283 |                 raise VPNError(f"No servers available in {country_code}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
284 |
285 |             # Take the first (fastest) server
    |

src/nyord_vpn/core/client.py:289:17: TRY301 Abstract `raise` to an inner function
    |
287 |             hostname = server.get("hostname")
288 |             if not hostname:
289 |                 raise VPNError("Selected server has no hostname")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
290 |
291 |             if self.verbose:
    |

src/nyord_vpn/core/client.py:289:23: TRY003 Avoid specifying long messages outside the exception class
    |
287 |             hostname = server.get("hostname")
288 |             if not hostname:
289 |                 raise VPNError("Selected server has no hostname")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
290 |
291 |             if self.verbose:
    |

src/nyord_vpn/core/client.py:297:17: TRY301 Abstract `raise` to an inner function
    |
295 |             # Set up VPN configuration
296 |             if not self.username or not self.password:
297 |                 raise VPNError("Missing VPN credentials")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
298 |             self.vpn_manager.setup_connection(hostname, self.username, self.password)
    |

src/nyord_vpn/core/client.py:297:23: TRY003 Avoid specifying long messages outside the exception class
    |
295 |             # Set up VPN configuration
296 |             if not self.username or not self.password:
297 |                 raise VPNError("Missing VPN credentials")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
298 |             self.vpn_manager.setup_connection(hostname, self.username, self.password)
    |

src/nyord_vpn/core/client.py:316:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
315 |         except Exception as e:
316 |             raise VPNError(f"Failed to connect: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
317 |
318 |     def bye(self) -> None:
    |

src/nyord_vpn/core/client.py:316:19: TRY003 Avoid specifying long messages outside the exception class
    |
315 |         except Exception as e:
316 |             raise VPNError(f"Failed to connect: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
317 |
318 |     def bye(self) -> None:
    |

src/nyord_vpn/core/client.py:318:9: C901 `bye` is too complex (11 > 10)
    |
316 |             raise VPNError(f"Failed to connect: {e}")
317 |
318 |     def bye(self) -> None:
    |         ^^^ C901
319 |         """Disconnect from the VPN."""
320 |         if self.verbose:
    |

src/nyord_vpn/core/client.py:384:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
382 |                 console.print(f"Public IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
383 |         except Exception as e:
384 |             raise VPNError(f"Failed to get status: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
385 |
386 |     def init(self) -> None:
    |

src/nyord_vpn/core/client.py:384:19: TRY003 Avoid specifying long messages outside the exception class
    |
382 |                 console.print(f"Public IP: [cyan]{status.get('ip', 'Unknown')}[/cyan]")
383 |         except Exception as e:
384 |             raise VPNError(f"Failed to get status: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
385 |
386 |     def init(self) -> None:
    |

src/nyord_vpn/core/client.py:414:23: TRY003 Avoid specifying long messages outside the exception class
    |
412 |                 self.api_client.list_countries()
413 |             except Exception as e:
414 |                 raise VPNConnectionError("Failed to connect to NordVPN API") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
415 |
416 |             # Get initial IP for comparison
    |

src/nyord_vpn/core/client.py:420:23: TRY003 Avoid specifying long messages outside the exception class
    |
418 |                 self.get_current_ip()
419 |             except Exception as e:
420 |                 raise VPNConnectionError("Failed to get initial IP") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
421 |
422 |         except Exception as e:
    |

src/nyord_vpn/core/client.py:425:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
423 |             if isinstance(e, VPNConnectionError):
424 |                 raise
425 |             raise VPNConnectionError(f"Failed to initialize client environment: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
426 |
427 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/core/client.py:425:19: TRY003 Avoid specifying long messages outside the exception class
    |
423 |             if isinstance(e, VPNConnectionError):
424 |                 raise
425 |             raise VPNConnectionError(f"Failed to initialize client environment: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
426 |
427 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/exceptions.py:38:9: D107 Missing docstring in `__init__`
   |
36 |     """
37 |
38 |     def __init__(
   |         ^^^^^^^^ D107
39 |         self,
40 |         message: str = "An error occurred in the NordVPN client",
   |

src/nyord_vpn/exceptions.py:66:9: D107 Missing docstring in `__init__`
   |
64 |     """
65 |
66 |     def __init__(
   |         ^^^^^^^^ D107
67 |         self,
68 |         message: str = "A VPN-related error occurred",
   |

src/nyord_vpn/exceptions.py:82:9: D107 Missing docstring in `__init__`
   |
80 |     """
81 |
82 |     def __init__(
   |         ^^^^^^^^ D107
83 |         self,
84 |         message: str = "Invalid or missing VPN credentials",
   |

src/nyord_vpn/exceptions.py:98:9: D107 Missing docstring in `__init__`
    |
 96 |     """
 97 |
 98 |     def __init__(
    |         ^^^^^^^^ D107
 99 |         self,
100 |         message: str = "VPN server not found",
    |

src/nyord_vpn/exceptions.py:114:9: D107 Missing docstring in `__init__`
    |
112 |     """
113 |
114 |     def __init__(
    |         ^^^^^^^^ D107
115 |         self,
116 |         message: str = "Invalid or missing OpenVPN configuration",
    |

src/nyord_vpn/exceptions.py:130:9: D107 Missing docstring in `__init__`
    |
128 |     """
129 |
130 |     def __init__(
    |         ^^^^^^^^ D107
131 |         self,
132 |         message: str = "VPN server error or unavailable",
    |

src/nyord_vpn/exceptions.py:146:9: D107 Missing docstring in `__init__`
    |
144 |     """
145 |
146 |     def __init__(
    |         ^^^^^^^^ D107
147 |         self,
148 |         message: str = "VPN authentication failed",
    |

src/nyord_vpn/exceptions.py:162:9: D107 Missing docstring in `__init__`
    |
160 |     """
161 |
162 |     def __init__(
    |         ^^^^^^^^ D107
163 |         self,
164 |         message: str = "VPN operation timed out",
    |

src/nyord_vpn/exceptions.py:178:9: D107 Missing docstring in `__init__`
    |
176 |     """
177 |
178 |     def __init__(
    |         ^^^^^^^^ D107
179 |         self,
180 |         message: str = "OpenVPN process error",
    |

src/nyord_vpn/exceptions.py:194:9: D107 Missing docstring in `__init__`
    |
192 |     """
193 |
194 |     def __init__(
    |         ^^^^^^^^ D107
195 |         self,
196 |         message: str = "Failed to establish VPN connection",
    |

src/nyord_vpn/exceptions.py:210:9: D107 Missing docstring in `__init__`
    |
208 |     """
209 |
210 |     def __init__(
    |         ^^^^^^^^ D107
211 |         self,
212 |         message: str = "Failed to disconnect from VPN",
    |

src/nyord_vpn/exceptions.py:227:9: D107 Missing docstring in `__init__`
    |
225 |     """
226 |
227 |     def __init__(
    |         ^^^^^^^^ D107
228 |         self,
229 |         message: str = "Failed to communicate with NordVPN API",
    |

src/nyord_vpn/network/country.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/network/server.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/network/server.py:106:58: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
106 | def _safe_dict_get(d: dict[str, Any], key: str, default: Any = None) -> Any:
    |                                                          ^^^ ANN401
107 |     """Safely get a value from a dictionary."""
108 |     return d.get(key, default) if isinstance(d, dict) else default
    |

src/nyord_vpn/network/server.py:106:73: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_dict_get`
    |
106 | def _safe_dict_get(d: dict[str, Any], key: str, default: Any = None) -> Any:
    |                                                                         ^^^ ANN401
107 |     """Safely get a value from a dictionary."""
108 |     return d.get(key, default) if isinstance(d, dict) else default
    |

src/nyord_vpn/network/server.py:111:60: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
111 | def _safe_get(d: dict[str, Any] | None, key: str, default: Any = None) -> Any:
    |                                                            ^^^ ANN401
112 |     """Safely get a value from a dictionary that might be None."""
113 |     if d is None:
    |

src/nyord_vpn/network/server.py:111:75: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_get`
    |
111 | def _safe_get(d: dict[str, Any] | None, key: str, default: Any = None) -> Any:
    |                                                                           ^^^ ANN401
112 |     """Safely get a value from a dictionary that might be None."""
113 |     if d is None:
    |

src/nyord_vpn/network/server.py:118:53: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `default`
    |
118 | def _safe_str_get(s: str | None, key: str, default: Any = None) -> Any:
    |                                                     ^^^ ANN401
119 |     """Safely get a value from a string that might be None."""
120 |     if s is None:
    |

src/nyord_vpn/network/server.py:118:68: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_str_get`
    |
118 | def _safe_str_get(s: str | None, key: str, default: Any = None) -> Any:
    |                                                                    ^^^ ANN401
119 |     """Safely get a value from a string that might be None."""
120 |     if s is None:
    |

src/nyord_vpn/network/server.py:128:55: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_safe_dict_access`
    |
128 | def _safe_dict_access(d: dict[str, Any], key: str) -> Any:
    |                                                       ^^^ ANN401
129 |     """Safely access a dictionary key that must exist."""
130 |     if not isinstance(d, dict) or key not in d:
    |

src/nyord_vpn/network/server.py:131:15: TRY003 Avoid specifying long messages outside the exception class
    |
129 |     """Safely access a dictionary key that must exist."""
130 |     if not isinstance(d, dict) or key not in d:
131 |         raise KeyError(f"Required key {key} not found in dictionary")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
132 |     return d[key]
    |

src/nyord_vpn/network/server.py:135:24: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `d`
    |
135 | def _safe_dict_cast(d: Any) -> dict[str, Any]:
    |                        ^^^ ANN401
136 |     """Cast a value to a dictionary if possible."""
137 |     if not isinstance(d, dict):
    |

src/nyord_vpn/network/server.py:203:33: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `timestamp`
    |
203 | def _parse_timestamp(timestamp: Any) -> float:
    |                                 ^^^ ANN401
204 |     """Parse a timestamp value into a float.
    |

src/nyord_vpn/network/server.py:254:9: TRY300 Consider moving this statement to an `else` block
    |
252 |         }
253 |
254 |         return cache_data
    |         ^^^^^^^^^^^^^^^^^ TRY300
255 |
256 |     except (OSError, json.JSONDecodeError) as e:
    |

src/nyord_vpn/network/server.py:329:19: TRY003 Avoid specifying long messages outside the exception class
    |
327 |         normalized = country_code.upper()
328 |         if not isinstance(normalized, str) or len(normalized) != 2:
329 |             raise ServerError(f"Invalid country code format: {country_code}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
330 |
331 |         # Get servers from the new API
    |

src/nyord_vpn/network/server.py:347:13: TRY301 Abstract `raise` to an inner function
    |
345 |               })
346 |
347 | /             raise ServerError(
348 | |                 f"Country code not found: {normalized}. "
349 | |                 f"Available countries: {', '.join(available_countries)}"
350 | |             )
    | |_____________^ TRY301
351 |
352 |           except Exception:
    |

src/nyord_vpn/network/server.py:347:19: TRY003 Avoid specifying long messages outside the exception class
    |
345 |               })
346 |
347 |               raise ServerError(
    |  ___________________^
348 | |                 f"Country code not found: {normalized}. "
349 | |                 f"Available countries: {', '.join(available_countries)}"
350 | |             )
    | |_____________^ TRY003
351 |
352 |           except Exception:
    |

src/nyord_vpn/network/server.py:356:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
354 |             cache = self.get_servers_cache()
355 |             if not cache:
356 |                 raise ServerError("No server information available")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
357 |
358 |             for location in cache["locations"].values():
    |

src/nyord_vpn/network/server.py:356:23: TRY003 Avoid specifying long messages outside the exception class
    |
354 |             cache = self.get_servers_cache()
355 |             if not cache:
356 |                 raise ServerError("No server information available")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
357 |
358 |             for location in cache["locations"].values():
    |

src/nyord_vpn/network/server.py:371:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
369 |               )
370 |
371 | /             raise ServerError(
372 | |                 f"Country code not found: {normalized}. "
373 | |                 f"Available countries: {', '.join(available_countries)}"
374 | |             )
    | |_____________^ B904
375 |
376 |       def fetch_server_info(self, country: str | None = None) -> tuple[str, str] | None:
    |

src/nyord_vpn/network/server.py:371:19: TRY003 Avoid specifying long messages outside the exception class
    |
369 |               )
370 |
371 |               raise ServerError(
    |  ___________________^
372 | |                 f"Country code not found: {normalized}. "
373 | |                 f"Available countries: {', '.join(available_countries)}"
374 | |             )
    | |_____________^ TRY003
375 |
376 |       def fetch_server_info(self, country: str | None = None) -> tuple[str, str] | None:
    |

src/nyord_vpn/network/server.py:412:17: TRY301 Abstract `raise` to an inner function
    |
410 |             hostname = getattr(best_server, "hostname", None)
411 |             if not hostname:
412 |                 raise ServerError("Best server has no hostname")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
413 |
414 |             # Extract station (if available)
    |

src/nyord_vpn/network/server.py:412:23: TRY003 Avoid specifying long messages outside the exception class
    |
410 |             hostname = getattr(best_server, "hostname", None)
411 |             if not hostname:
412 |                 raise ServerError("Best server has no hostname")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
413 |
414 |             # Extract station (if available)
    |

src/nyord_vpn/network/server.py:417:13: TRY300 Consider moving this statement to an `else` block
    |
415 |             station = getattr(best_server, "station", "")
416 |
417 |             return hostname, station
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
418 |
419 |         except Exception as e:
    |

src/nyord_vpn/network/server.py:422:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
420 |             if isinstance(e, ServerError):
421 |                 raise
422 |             raise ServerError(f"Failed to fetch server information: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
423 |
424 |     def get_servers_cache(self) -> ServerCache | None:
    |

src/nyord_vpn/network/server.py:422:19: TRY003 Avoid specifying long messages outside the exception class
    |
420 |             if isinstance(e, ServerError):
421 |                 raise
422 |             raise ServerError(f"Failed to fetch server information: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
423 |
424 |     def get_servers_cache(self) -> ServerCache | None:
    |

src/nyord_vpn/network/server.py:424:9: C901 `get_servers_cache` is too complex (22 > 10)
    |
422 |             raise ServerError(f"Failed to fetch server information: {e}")
423 |
424 |     def get_servers_cache(self) -> ServerCache | None:
    |         ^^^^^^^^^^^^^^^^^ C901
425 |         """Get server information from cache or API.
    |

src/nyord_vpn/network/server.py:424:9: PLR0912 Too many branches (21 > 12)
    |
422 |             raise ServerError(f"Failed to fetch server information: {e}")
423 |
424 |     def get_servers_cache(self) -> ServerCache | None:
    |         ^^^^^^^^^^^^^^^^^ PLR0912
425 |         """Get server information from cache or API.
    |

src/nyord_vpn/network/server.py:424:9: PLR0915 Too many statements (65 > 50)
    |
422 |             raise ServerError(f"Failed to fetch server information: {e}")
423 |
424 |     def get_servers_cache(self) -> ServerCache | None:
    |         ^^^^^^^^^^^^^^^^^ PLR0915
425 |         """Get server information from cache or API.
    |

src/nyord_vpn/network/server.py:501:17: TRY300 Consider moving this statement to an `else` block
    |
499 |                 cache_servers(cast(dict[str, Any], new_cache))
500 |
501 |                 return new_cache
    |                 ^^^^^^^^^^^^^^^^ TRY300
502 |
503 |             except Exception as e:
    |

src/nyord_vpn/network/server.py:595:9: C901 `_ping_server` is too complex (22 > 10)
    |
593 |             return None
594 |
595 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ C901
596 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:595:9: PLR0912 Too many branches (22 > 12)
    |
593 |             return None
594 |
595 |     def _ping_server(self, hostname: str) -> float:
    |         ^^^^^^^^^^^^ PLR0912
596 |         """Ping a server and return response time in ms.
    |

src/nyord_vpn/network/server.py:627:22: S603 `subprocess` call: check for execution of untrusted input
    |
626 |             # Execute the command securely
627 |             result = subprocess.run(
    |                      ^^^^^^^^^^^^^^ S603
628 |                 cmd,
629 |                 capture_output=True,
    |

src/nyord_vpn/network/server.py:652:29: TRY300 Consider moving this statement to an `else` block
    |
650 |                                     f"Parsed min time from stats: {min_time}ms",
651 |                                 )
652 |                             return min_time
    |                             ^^^^^^^^^^^^^^^ TRY300
653 |                         except (IndexError, ValueError) as e:
654 |                             if self.verbose:
    |

src/nyord_vpn/network/server.py:716:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `server`
    |
714 |         return bool(re.match(r"^[a-zA-Z0-9][a-zA-Z0-9\.-]{1,253}[a-zA-Z0-9]$", hostname))
715 |
716 |     def _is_valid_server(self, server: Any) -> bool:
    |                                        ^^^ ANN401
717 |         """Check if a server is valid and usable.
    |

src/nyord_vpn/network/server.py:841:9: C901 `select_fastest_server` is too complex (17 > 10)
    |
839 |         return result
840 |
841 |     def select_fastest_server(
    |         ^^^^^^^^^^^^^^^^^^^^^ C901
842 |         self, country_code: str | None = None
843 |     ) -> list[dict[str, Any]]:
    |

src/nyord_vpn/network/server.py:841:9: PLR0912 Too many branches (16 > 12)
    |
839 |         return result
840 |
841 |     def select_fastest_server(
    |         ^^^^^^^^^^^^^^^^^^^^^ PLR0912
842 |         self, country_code: str | None = None
843 |     ) -> list[dict[str, Any]]:
    |

src/nyord_vpn/network/server.py:881:17: TRY300 Consider moving this statement to an `else` block
    |
879 |                     server_dict["ping_time"] = ping_time
880 |
881 |                 return [server_dict]
    |                 ^^^^^^^^^^^^^^^^^^^^ TRY300
882 |
883 |             except Exception as e:
    |

src/nyord_vpn/network/server.py:890:17: TRY301 Abstract `raise` to an inner function
    |
888 |             cache = self.get_servers_cache()
889 |             if not cache:
890 |                 raise ServerError("No servers available")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
891 |
892 |             servers = cache["servers"]
    |

src/nyord_vpn/network/server.py:890:23: TRY003 Avoid specifying long messages outside the exception class
    |
888 |             cache = self.get_servers_cache()
889 |             if not cache:
890 |                 raise ServerError("No servers available")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
891 |
892 |             servers = cache["servers"]
    |

src/nyord_vpn/network/server.py:896:17: TRY301 Abstract `raise` to an inner function
    |
895 |             if not servers:
896 |                 raise ServerError("No servers available")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
897 |
898 |             # Create location lookup by ID
    |

src/nyord_vpn/network/server.py:896:23: TRY003 Avoid specifying long messages outside the exception class
    |
895 |             if not servers:
896 |                 raise ServerError("No servers available")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
897 |
898 |             # Create location lookup by ID
    |

src/nyord_vpn/network/server.py:928:21: TRY301 Abstract `raise` to an inner function
    |
926 |                           }
927 |                       )
928 | /                     raise ServerError(
929 | |                         f"No servers available in {country_code}. "
930 | |                         f"Available countries: {', '.join(available_countries)}"
931 | |                     )
    | |_____________________^ TRY301
932 |
933 |               # Remove failed servers
    |

src/nyord_vpn/network/server.py:928:27: TRY003 Avoid specifying long messages outside the exception class
    |
926 |                           }
927 |                       )
928 |                       raise ServerError(
    |  ___________________________^
929 | |                         f"No servers available in {country_code}. "
930 | |                         f"Available countries: {', '.join(available_countries)}"
931 | |                     )
    | |_____________________^ TRY003
932 |
933 |               # Remove failed servers
    |

src/nyord_vpn/network/server.py:961:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
959 |             if isinstance(e, ServerError):
960 |                 raise
961 |             raise ServerError(f"Failed to select server: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
962 |
963 |     def get_country_info(self, country_code: str) -> dict[str, Any]:
    |

src/nyord_vpn/network/server.py:961:19: TRY003 Avoid specifying long messages outside the exception class
    |
959 |             if isinstance(e, ServerError):
960 |                 raise
961 |             raise ServerError(f"Failed to select server: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
962 |
963 |     def get_country_info(self, country_code: str) -> dict[str, Any]:
    |

src/nyord_vpn/network/server.py:979:19: TRY003 Avoid specifying long messages outside the exception class
    |
977 |         normalized_code = self._validate_country_code(country_code)
978 |         if not normalized_code:
979 |             raise ServerError(f"Invalid country code: {country_code}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
980 |
981 |         # Try to use the new API first
    |

src/nyord_vpn/network/server.py:995:13: TRY301 Abstract `raise` to an inner function
    |
993 |                     }
994 |
995 |             raise ServerError(f"Country not found: {normalized_code}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
996 |
997 |         except Exception as e:
    |

src/nyord_vpn/network/server.py:995:19: TRY003 Avoid specifying long messages outside the exception class
    |
993 |                     }
994 |
995 |             raise ServerError(f"Country not found: {normalized_code}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
996 |
997 |         except Exception as e:
    |

src/nyord_vpn/network/server.py:1006:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1004 |             cache = self.get_servers_cache()
1005 |             if not cache:
1006 |                 raise ServerError("No server information available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1007 |
1008 |             # Find the country in locations
     |

src/nyord_vpn/network/server.py:1006:23: TRY003 Avoid specifying long messages outside the exception class
     |
1004 |             cache = self.get_servers_cache()
1005 |             if not cache:
1006 |                 raise ServerError("No server information available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1007 |
1008 |             # Find the country in locations
     |

src/nyord_vpn/network/server.py:1013:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1011 |                     return loc["country"]
1012 |
1013 |             raise ServerError(f"Country not found: {normalized_code}")
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1014 |
1015 |     def get_random_country(self) -> str:
     |

src/nyord_vpn/network/server.py:1013:19: TRY003 Avoid specifying long messages outside the exception class
     |
1011 |                     return loc["country"]
1012 |
1013 |             raise ServerError(f"Country not found: {normalized_code}")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1014 |
1015 |     def get_random_country(self) -> str:
     |

src/nyord_vpn/network/server.py:1038:17: TRY301 Abstract `raise` to an inner function
     |
1037 |             if not country_codes:
1038 |                 raise ServerError("No countries available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
1039 |
1040 |             # Select a random country using cryptographically secure random
     |

src/nyord_vpn/network/server.py:1038:23: TRY003 Avoid specifying long messages outside the exception class
     |
1037 |             if not country_codes:
1038 |                 raise ServerError("No countries available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1039 |
1040 |             # Select a random country using cryptographically secure random
     |

src/nyord_vpn/network/server.py:1049:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1047 |             cache = self.get_servers_cache()
1048 |             if not cache:
1049 |                 raise ServerError("No server information available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1050 |
1051 |             # Extract country codes
     |

src/nyord_vpn/network/server.py:1049:23: TRY003 Avoid specifying long messages outside the exception class
     |
1047 |             cache = self.get_servers_cache()
1048 |             if not cache:
1049 |                 raise ServerError("No server information available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1050 |
1051 |             # Extract country codes
     |

src/nyord_vpn/network/server.py:1059:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1058 |             if not country_codes:
1059 |                 raise ServerError("No countries available")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
1060 |
1061 |             # Select a random country using cryptographically secure random
     |

src/nyord_vpn/network/server.py:1059:23: TRY003 Avoid specifying long messages outside the exception class
     |
1058 |             if not country_codes:
1059 |                 raise ServerError("No countries available")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1060 |
1061 |             # Select a random country using cryptographically secure random
     |

src/nyord_vpn/network/vpn.py:75:1: F811 Redefinition of unused `OPENVPN_AUTH` from line 64
   |
74 | # Constants
75 | OPENVPN_AUTH = Path.home() / ".cache" / "nyord-vpn" / "openvpn.auth"
   | ^^^^^^^^^^^^ F811
76 | OPENVPN_LOG = Path.home() / ".cache" / "nyord-vpn" / "openvpn.log"
   |
   = help: Remove definition: `OPENVPN_AUTH`

src/nyord_vpn/network/vpn.py:76:1: F811 Redefinition of unused `OPENVPN_LOG` from line 65
   |
74 | # Constants
75 | OPENVPN_AUTH = Path.home() / ".cache" / "nyord-vpn" / "openvpn.auth"
76 | OPENVPN_LOG = Path.home() / ".cache" / "nyord-vpn" / "openvpn.log"
   | ^^^^^^^^^^^ F811
   |
   = help: Remove definition: `OPENVPN_LOG`

src/nyord_vpn/network/vpn.py:97:21: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `api_client`
   |
95 |     def __init__(
96 |         self,
97 |         api_client: Any,
   |                     ^^^ ANN401
98 |         server_manager: ServerManager,
99 |         vpn_manager: Any,
   |

src/nyord_vpn/network/vpn.py:99:22: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `vpn_manager`
    |
 97 |         api_client: Any,
 98 |         server_manager: ServerManager,
 99 |         vpn_manager: Any,
    |                      ^^^ ANN401
100 |         *,
101 |         verbose: bool = False,
    |

src/nyord_vpn/network/vpn.py:169:30: S603 `subprocess` call: check for execution of untrusted input
    |
167 |                 if Path(path).exists():
168 |                     # Verify we can run it
169 |                     result = subprocess.run(
    |                              ^^^^^^^^^^^^^^ S603
170 |                         [path, "--version"], capture_output=True, text=True, check=False
171 |                     )
    |

src/nyord_vpn/network/vpn.py:179:26: S603 `subprocess` call: check for execution of untrusted input
    |
177 |             # If not found in common paths, try which
178 |             try:
179 |                 result = subprocess.run(
    |                          ^^^^^^^^^^^^^^ S603
180 |                     ["which", "openvpn"], capture_output=True, text=True, check=True
181 |                 )
    |

src/nyord_vpn/network/vpn.py:180:21: S607 Starting a process with a partial executable path
    |
178 |             try:
179 |                 result = subprocess.run(
180 |                     ["which", "openvpn"], capture_output=True, text=True, check=True
    |                     ^^^^^^^^^^^^^^^^^^^^ S607
181 |                 )
182 |                 path = result.stdout.strip()
    |

src/nyord_vpn/network/vpn.py:190:13: TRY301 Abstract `raise` to an inner function
    |
188 |                   pass
189 |
190 | /             raise VPNError(
191 | |                 "OpenVPN not found. Please install OpenVPN:\n"
192 | |                 "  macOS: brew install openvpn\n"
193 | |                 "  Linux: sudo apt install openvpn  # or your distro's package manager"
194 | |             )
    | |_____________^ TRY301
195 |
196 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:190:19: TRY003 Avoid specifying long messages outside the exception class
    |
188 |                   pass
189 |
190 |               raise VPNError(
    |  ___________________^
191 | |                 "OpenVPN not found. Please install OpenVPN:\n"
192 | |                 "  macOS: brew install openvpn\n"
193 | |                 "  Linux: sudo apt install openvpn  # or your distro's package manager"
194 | |             )
    | |_____________^ TRY003
195 |
196 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:199:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
197 |             if isinstance(e, VPNError):
198 |                 raise
199 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
200 |
201 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |

src/nyord_vpn/network/vpn.py:199:19: TRY003 Avoid specifying long messages outside the exception class
    |
197 |             if isinstance(e, VPNError):
198 |                 raise
199 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
200 |
201 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |

src/nyord_vpn/network/vpn.py:201:9: C901 `setup_connection` is too complex (18 > 10)
    |
199 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
200 |
201 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |         ^^^^^^^^^^^^^^^^ C901
202 |         """Set up VPN connection configuration.
    |

src/nyord_vpn/network/vpn.py:201:9: PLR0912 Too many branches (17 > 12)
    |
199 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
200 |
201 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |         ^^^^^^^^^^^^^^^^ PLR0912
202 |         """Set up VPN connection configuration.
    |

src/nyord_vpn/network/vpn.py:201:32: ARG002 Unused method argument: `hostname`
    |
199 |             raise VPNError(f"Failed to verify OpenVPN installation: {e}")
200 |
201 |     def setup_connection(self, hostname: str, username: str, password: str) -> None:
    |                                ^^^^^^^^ ARG002
202 |         """Set up VPN connection configuration.
    |

src/nyord_vpn/network/vpn.py:224:17: TRY301 Abstract `raise` to an inner function
    |
222 |             # Validate credentials
223 |             if not username or not isinstance(username, str):
224 |                 raise VPNAuthenticationError("Username must be a non-empty string")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
225 |             username = username.strip()
226 |             if not username:
    |

src/nyord_vpn/network/vpn.py:224:23: TRY003 Avoid specifying long messages outside the exception class
    |
222 |             # Validate credentials
223 |             if not username or not isinstance(username, str):
224 |                 raise VPNAuthenticationError("Username must be a non-empty string")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
225 |             username = username.strip()
226 |             if not username:
    |

src/nyord_vpn/network/vpn.py:227:17: TRY301 Abstract `raise` to an inner function
    |
225 |             username = username.strip()
226 |             if not username:
227 |                 raise VPNAuthenticationError("Username cannot be empty")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
228 |
229 |             if not password or not isinstance(password, str):
    |

src/nyord_vpn/network/vpn.py:227:23: TRY003 Avoid specifying long messages outside the exception class
    |
225 |             username = username.strip()
226 |             if not username:
227 |                 raise VPNAuthenticationError("Username cannot be empty")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
228 |
229 |             if not password or not isinstance(password, str):
    |

src/nyord_vpn/network/vpn.py:230:17: TRY301 Abstract `raise` to an inner function
    |
229 |             if not password or not isinstance(password, str):
230 |                 raise VPNAuthenticationError("Password must be a non-empty string")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
231 |             password = password.strip()
232 |             if not password:
    |

src/nyord_vpn/network/vpn.py:230:23: TRY003 Avoid specifying long messages outside the exception class
    |
229 |             if not password or not isinstance(password, str):
230 |                 raise VPNAuthenticationError("Password must be a non-empty string")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
231 |             password = password.strip()
232 |             if not password:
    |

src/nyord_vpn/network/vpn.py:233:17: TRY301 Abstract `raise` to an inner function
    |
231 |             password = password.strip()
232 |             if not password:
233 |                 raise VPNAuthenticationError("Password cannot be empty")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
234 |             if len(password) < 8:
235 |                 raise VPNAuthenticationError("Password must be at least 8 characters")
    |

src/nyord_vpn/network/vpn.py:233:23: TRY003 Avoid specifying long messages outside the exception class
    |
231 |             password = password.strip()
232 |             if not password:
233 |                 raise VPNAuthenticationError("Password cannot be empty")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
234 |             if len(password) < 8:
235 |                 raise VPNAuthenticationError("Password must be at least 8 characters")
    |

src/nyord_vpn/network/vpn.py:235:17: TRY301 Abstract `raise` to an inner function
    |
233 |                 raise VPNAuthenticationError("Password cannot be empty")
234 |             if len(password) < 8:
235 |                 raise VPNAuthenticationError("Password must be at least 8 characters")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
236 |
237 |             # Ensure cache directory exists with secure permissions
    |

src/nyord_vpn/network/vpn.py:235:23: TRY003 Avoid specifying long messages outside the exception class
    |
233 |                 raise VPNAuthenticationError("Password cannot be empty")
234 |             if len(password) < 8:
235 |                 raise VPNAuthenticationError("Password must be at least 8 characters")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
236 |
237 |             # Ensure cache directory exists with secure permissions
    |

src/nyord_vpn/network/vpn.py:259:17: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
257 |                       if temp_auth.exists():
258 |                           temp_auth.unlink()
259 | /                 except Exception:
260 | |                     pass
    | |________________________^ S110
261 |                   raise VPNAuthenticationError(
262 |                       f"Failed to create auth file: {e}. "
    |

src/nyord_vpn/network/vpn.py:261:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
259 |                   except Exception:
260 |                       pass
261 | /                 raise VPNAuthenticationError(
262 | |                     f"Failed to create auth file: {e}. "
263 | |                     "Please check file permissions and disk space."
264 | |                 )
    | |_________________^ B904
265 |
266 |               # Verify auth file permissions and contents
    |

src/nyord_vpn/network/vpn.py:261:23: TRY003 Avoid specifying long messages outside the exception class
    |
259 |                   except Exception:
260 |                       pass
261 |                   raise VPNAuthenticationError(
    |  _______________________^
262 | |                     f"Failed to create auth file: {e}. "
263 | |                     "Please check file permissions and disk space."
264 | |                 )
    | |_________________^ TRY003
265 |
266 |               # Verify auth file permissions and contents
    |

src/nyord_vpn/network/vpn.py:277:21: TRY301 Abstract `raise` to an inner function
    |
275 |                   lines = OPENVPN_AUTH.read_text().strip().split("\n")
276 |                   if len(lines) != 2:
277 | /                     raise VPNAuthenticationError(
278 | |                         "Auth file is corrupted - please run setup again"
279 | |                     )
    | |_____________________^ TRY301
280 |                   if lines[0].strip() != username or lines[1].strip() != password:
281 |                       raise VPNAuthenticationError(
    |

src/nyord_vpn/network/vpn.py:277:27: TRY003 Avoid specifying long messages outside the exception class
    |
275 |                   lines = OPENVPN_AUTH.read_text().strip().split("\n")
276 |                   if len(lines) != 2:
277 |                       raise VPNAuthenticationError(
    |  ___________________________^
278 | |                         "Auth file is corrupted - please run setup again"
279 | |                     )
    | |_____________________^ TRY003
280 |                   if lines[0].strip() != username or lines[1].strip() != password:
281 |                       raise VPNAuthenticationError(
    |

src/nyord_vpn/network/vpn.py:281:21: TRY301 Abstract `raise` to an inner function
    |
279 |                       )
280 |                   if lines[0].strip() != username or lines[1].strip() != password:
281 | /                     raise VPNAuthenticationError(
282 | |                         "Auth file contents don't match - please run setup again"
283 | |                     )
    | |_____________________^ TRY301
284 |
285 |               except Exception as e:
    |

src/nyord_vpn/network/vpn.py:281:27: TRY003 Avoid specifying long messages outside the exception class
    |
279 |                       )
280 |                   if lines[0].strip() != username or lines[1].strip() != password:
281 |                       raise VPNAuthenticationError(
    |  ___________________________^
282 | |                         "Auth file contents don't match - please run setup again"
283 | |                     )
    | |_____________________^ TRY003
284 |
285 |               except Exception as e:
    |

src/nyord_vpn/network/vpn.py:288:17: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
286 |                   if isinstance(e, VPNAuthenticationError):
287 |                       raise
288 | /                 raise VPNAuthenticationError(
289 | |                     f"Failed to verify auth file: {e}. "
290 | |                     "Please check file permissions and try again."
291 | |                 )
    | |_________________^ B904
292 |
293 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:288:23: TRY003 Avoid specifying long messages outside the exception class
    |
286 |                   if isinstance(e, VPNAuthenticationError):
287 |                       raise
288 |                   raise VPNAuthenticationError(
    |  _______________________^
289 | |                     f"Failed to verify auth file: {e}. "
290 | |                     "Please check file permissions and try again."
291 | |                 )
    | |_________________^ TRY003
292 |
293 |           except Exception as e:
    |

src/nyord_vpn/network/vpn.py:296:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
294 |             if isinstance(e, VPNAuthenticationError):
295 |                 raise
296 |             raise VPNAuthenticationError(str(e))
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
297 |
298 |     def get_current_ip(self) -> str | None:
    |

src/nyord_vpn/network/vpn.py:298:9: C901 `get_current_ip` is too complex (24 > 10)
    |
296 |             raise VPNAuthenticationError(str(e))
297 |
298 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ C901
299 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:298:9: PLR0912 Too many branches (20 > 12)
    |
296 |             raise VPNAuthenticationError(str(e))
297 |
298 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ PLR0912
299 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:298:9: PLR0915 Too many statements (51 > 50)
    |
296 |             raise VPNAuthenticationError(str(e))
297 |
298 |     def get_current_ip(self) -> str | None:
    |         ^^^^^^^^^^^^^^ PLR0915
299 |         """Get current IP address with basic verification.
    |

src/nyord_vpn/network/vpn.py:334:13: PERF203 `try`-`except` within a loop incurs performance overhead
    |
332 |                           self.logger.debug(f"Got valid IP {ip} from api.ipify.org")
333 |                       return ip
334 | /             except Exception as e:
335 | |                 if self.verbose:
336 | |                     self.logger.debug(
337 | |                         f"Primary IP check failed (attempt {attempt + 1}): {e}"
338 | |                     )
339 | |                 if attempt < 1:  # Only sleep between attempts
340 | |                     time.sleep(0.5)
    | |___________________________________^ PERF203
341 |
342 |           # Try backup service (up to 2 attempts)
    |

src/nyord_vpn/network/vpn.py:357:13: PERF203 `try`-`except` within a loop incurs performance overhead
    |
355 |                           self.logger.debug(f"Got valid IP {ip} from ip-api.com")
356 |                       return ip
357 | /             except Exception as e:
358 | |                 if self.verbose:
359 | |                     self.logger.debug(
360 | |                         f"Backup IP check failed (attempt {attempt + 1}): {e}"
361 | |                     )
362 | |                 if attempt < 1:  # Only sleep between attempts
363 | |                     time.sleep(0.5)
    | |___________________________________^ PERF203
364 |
365 |           # Try one last service as final fallback
    |

src/nyord_vpn/network/vpn.py:404:9: C901 `connect` is too complex (81 > 10)
    |
402 |             )
403 |
404 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |         ^^^^^^^ C901
405 |         """Connect to a VPN server, trying servers from the list on failure.
    |

src/nyord_vpn/network/vpn.py:404:9: PLR0912 Too many branches (81 > 12)
    |
402 |             )
403 |
404 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |         ^^^^^^^ PLR0912
405 |         """Connect to a VPN server, trying servers from the list on failure.
    |

src/nyord_vpn/network/vpn.py:404:9: PLR0915 Too many statements (203 > 50)
    |
402 |             )
403 |
404 |     def connect(self, servers: list[dict[str, Any]]) -> None:
    |         ^^^^^^^ PLR0915
405 |         """Connect to a VPN server, trying servers from the list on failure.
    |

src/nyord_vpn/network/vpn.py:420:21: TRY301 Abstract `raise` to an inner function
    |
418 |                 hostname = server.get("hostname")
419 |                 if not hostname:
420 |                     raise VPNError("Invalid server info - missing hostname")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
421 |
422 |                 # Force cleanup of any existing connections
    |

src/nyord_vpn/network/vpn.py:420:27: TRY003 Avoid specifying long messages outside the exception class
    |
418 |                 hostname = server.get("hostname")
419 |                 if not hostname:
420 |                     raise VPNError("Invalid server info - missing hostname")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
421 |
422 |                 # Force cleanup of any existing connections
    |

src/nyord_vpn/network/vpn.py:440:37: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
438 |                                           os.kill(proc.info["pid"], signal.SIGKILL)
439 |                                           time.sleep(0.1)  # Brief pause after kill
440 | /                                     except Exception:
441 | |                                         pass
    | |____________________________________________^ S110
442 |                           except (psutil.NoSuchProcess, psutil.AccessDenied):
443 |                               continue
    |

src/nyord_vpn/network/vpn.py:442:25: PERF203 `try`-`except` within a loop incurs performance overhead
    |
440 |                                       except Exception:
441 |                                           pass
442 | /                         except (psutil.NoSuchProcess, psutil.AccessDenied):
443 | |                             continue
    | |____________________________________^ PERF203
444 |
445 |                   # Store server info
    |

src/nyord_vpn/network/vpn.py:475:21: TRY301 Abstract `raise` to an inner function
    |
473 |                 config_path = get_config_path(hostname)
474 |                 if not config_path:
475 |                     raise VPNConfigError(f"Failed to get OpenVPN config for {hostname}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
476 |
477 |                 # Log config file contents for debugging
    |

src/nyord_vpn/network/vpn.py:475:27: TRY003 Avoid specifying long messages outside the exception class
    |
473 |                 config_path = get_config_path(hostname)
474 |                 if not config_path:
475 |                     raise VPNConfigError(f"Failed to get OpenVPN config for {hostname}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
476 |
477 |                 # Log config file contents for debugging
    |

src/nyord_vpn/network/vpn.py:490:21: TRY301 Abstract `raise` to an inner function
    |
488 |                 # Verify auth file exists and has correct format
489 |                 if not OPENVPN_AUTH.exists():
490 |                     raise VPNError("Auth file not found - please run setup first")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
491 |                 try:
492 |                     auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
    |

src/nyord_vpn/network/vpn.py:490:27: TRY003 Avoid specifying long messages outside the exception class
    |
488 |                 # Verify auth file exists and has correct format
489 |                 if not OPENVPN_AUTH.exists():
490 |                     raise VPNError("Auth file not found - please run setup first")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
491 |                 try:
492 |                     auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
    |

src/nyord_vpn/network/vpn.py:494:25: TRY301 Abstract `raise` to an inner function
    |
492 |                       auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
493 |                       if len(auth_content) != 2:
494 | /                         raise VPNError(
495 | |                             "Auth file is corrupted - please run setup again"
496 | |                         )
    | |_________________________^ TRY301
497 |                       if not auth_content[0] or not auth_content[1]:
498 |                           raise VPNError(
    |

src/nyord_vpn/network/vpn.py:494:31: TRY003 Avoid specifying long messages outside the exception class
    |
492 |                       auth_content = OPENVPN_AUTH.read_text().strip().split("\n")
493 |                       if len(auth_content) != 2:
494 |                           raise VPNError(
    |  _______________________________^
495 | |                             "Auth file is corrupted - please run setup again"
496 | |                         )
    | |_________________________^ TRY003
497 |                       if not auth_content[0] or not auth_content[1]:
498 |                           raise VPNError(
    |

src/nyord_vpn/network/vpn.py:498:25: TRY301 Abstract `raise` to an inner function
    |
496 |                           )
497 |                       if not auth_content[0] or not auth_content[1]:
498 | /                         raise VPNError(
499 | |                             "Auth file contains empty username or password - please run setup again"
500 | |                         )
    | |_________________________^ TRY301
501 |                       if self.verbose:
502 |                           self.logger.debug("Auth file exists and has correct format")
    |

src/nyord_vpn/network/vpn.py:498:31: TRY003 Avoid specifying long messages outside the exception class
    |
496 |                           )
497 |                       if not auth_content[0] or not auth_content[1]:
498 |                           raise VPNError(
    |  _______________________________^
499 | |                             "Auth file contains empty username or password - please run setup again"
500 | |                         )
    | |_________________________^ TRY003
501 |                       if self.verbose:
502 |                           self.logger.debug("Auth file exists and has correct format")
    |

src/nyord_vpn/network/vpn.py:506:21: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
504 |                     if isinstance(e, VPNError):
505 |                         raise
506 |                     raise VPNError(f"Failed to read auth file: {e}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
507 |
508 |                 # Start OpenVPN process
    |

src/nyord_vpn/network/vpn.py:506:27: TRY003 Avoid specifying long messages outside the exception class
    |
504 |                     if isinstance(e, VPNError):
505 |                         raise
506 |                     raise VPNError(f"Failed to read auth file: {e}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
507 |
508 |                 # Start OpenVPN process
    |

src/nyord_vpn/network/vpn.py:526:36: S603 `subprocess` call: check for execution of untrusted input
    |
525 |                     # Start OpenVPN process
526 |                     self.process = subprocess.Popen(
    |                                    ^^^^^^^^^^^^^^^^ S603
527 |                         cmd,
528 |                         stdout=subprocess.PIPE,
    |

src/nyord_vpn/network/vpn.py:540:31: TRY003 Avoid specifying long messages outside the exception class
    |
538 |                       if self.process.poll() is not None:
539 |                           stdout, stderr = self.process.communicate()
540 |                           raise VPNError(
    |  _______________________________^
541 | |                             f"OpenVPN process failed to start:\n"
542 | |                             f"Exit code: {self.process.returncode}\n"
543 | |                             f"Output: {stdout}\n"
544 | |                             f"Error: {stderr}"
545 | |                         )
    | |_________________________^ TRY003
546 |
547 |                   except subprocess.SubprocessError as e:
    |

src/nyord_vpn/network/vpn.py:548:21: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
547 |                 except subprocess.SubprocessError as e:
548 |                     raise VPNError(f"Failed to start OpenVPN process: {e}")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
549 |
550 |                 # Monitor OpenVPN output
    |

src/nyord_vpn/network/vpn.py:548:27: TRY003 Avoid specifying long messages outside the exception class
    |
547 |                 except subprocess.SubprocessError as e:
548 |                     raise VPNError(f"Failed to start OpenVPN process: {e}")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
549 |
550 |                 # Monitor OpenVPN output
    |

src/nyord_vpn/network/vpn.py:698:25: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
696 |                               if self.process.poll() is None:
697 |                                   self.process.kill()
698 | /                         except Exception:
699 | |                             pass
    | |________________________________^ S110
700 |
701 |                       if error_msg:
    |

src/nyord_vpn/network/vpn.py:740:17: TRY300 Consider moving this statement to an `else` block
    |
738 |                 if self.verbose:
739 |                     self.logger.info(f"Connected to {hostname}")
740 |                 return  # Success!
    |                 ^^^^^^ TRY300
741 |
742 |             except Exception as e:
    |

src/nyord_vpn/network/vpn.py:750:21: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
748 |                           if self.process.poll() is None:
749 |                               self.process.kill()
750 | /                     except Exception:
751 | |                         pass
    | |____________________________^ S110
752 |
753 |                   # Reset state
    |

src/nyord_vpn/network/vpn.py:770:9: C901 `disconnect` is too complex (30 > 10)
    |
768 |         )
769 |
770 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ C901
771 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:770:9: PLR0912 Too many branches (30 > 12)
    |
768 |         )
769 |
770 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ PLR0912
771 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:770:9: PLR0915 Too many statements (70 > 50)
    |
768 |         )
769 |
770 |     def disconnect(self) -> None:
    |         ^^^^^^^^^^ PLR0915
771 |         """Disconnect from VPN and clean up.
    |

src/nyord_vpn/network/vpn.py:813:29: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
811 |                                   os.kill(proc.info["pid"], signal.SIGTERM)
812 |                                   time.sleep(0.1)  # Brief pause
813 | /                             except Exception:
814 | |                                 pass
    | |____________________________________^ S110
815 |
816 |                               # Force kill if still running
    |

src/nyord_vpn/network/vpn.py:830:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
828 |                                       )
829 |
830 | /                 except (psutil.NoSuchProcess, psutil.AccessDenied):
831 | |                     continue
    | |____________________________^ PERF203
832 |
833 |               # Verify no OpenVPN processes are left
    |

src/nyord_vpn/network/vpn.py:841:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
839 |                           if any("nordvpn.com" in arg for arg in cmdline):
840 |                               remaining.append(proc.info["pid"])
841 | /                 except (psutil.NoSuchProcess, psutil.AccessDenied):
842 | |                     continue
    | |____________________________^ PERF203
843 |
844 |               if remaining:
    |

src/nyord_vpn/network/vpn.py:845:17: TRY301 Abstract `raise` to an inner function
    |
844 |               if remaining:
845 | /                 raise VPNError(
846 | |                     f"Failed to kill all OpenVPN processes. Remaining: {remaining}"
847 | |                 )
    | |_________________^ TRY301
848 |
849 |               # Clean up OpenVPN log file
    |

src/nyord_vpn/network/vpn.py:845:23: TRY003 Avoid specifying long messages outside the exception class
    |
844 |               if remaining:
845 |                   raise VPNError(
    |  _______________________^
846 | |                     f"Failed to kill all OpenVPN processes. Remaining: {remaining}"
847 | |                 )
    | |_________________^ TRY003
848 |
849 |               # Clean up OpenVPN log file
    |

src/nyord_vpn/network/vpn.py:894:19: TRY003 Avoid specifying long messages outside the exception class
    |
892 |                   )
893 |
894 |               raise VPNError(
    |  ___________________^
895 | |                 f"Failed to disconnect from VPN: {'; '.join(error_details)}"
896 | |             ) from e
    | |_____________^ TRY003
897 |
898 |       def is_connected(self) -> bool:
    |

src/nyord_vpn/network/vpn.py:902:9: C901 `verify_connection` is too complex (23 > 10)
    |
900 |         return self.process is not None and self.process.poll() is None
901 |
902 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ C901
903 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:902:9: PLR0911 Too many return statements (11 > 6)
    |
900 |         return self.process is not None and self.process.poll() is None
901 |
902 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ PLR0911
903 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:902:9: PLR0912 Too many branches (22 > 12)
    |
900 |         return self.process is not None and self.process.poll() is None
901 |
902 |     def verify_connection(self) -> bool:
    |         ^^^^^^^^^^^^^^^^^ PLR0912
903 |         """Verify that the VPN connection is working properly.
    |

src/nyord_vpn/network/vpn.py:925:30: S603 `subprocess` call: check for execution of untrusted input
    |
923 |             if sys.platform == "darwin":  # macOS
924 |                 try:
925 |                     output = subprocess.check_output(["ifconfig"], text=True)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ S603
926 |                     if not any(
927 |                         line.startswith("utun") and "UP" in line
    |

src/nyord_vpn/network/vpn.py:925:54: S607 Starting a process with a partial executable path
    |
923 |             if sys.platform == "darwin":  # macOS
924 |                 try:
925 |                     output = subprocess.check_output(["ifconfig"], text=True)
    |                                                      ^^^^^^^^^^^^ S607
926 |                     if not any(
927 |                         line.startswith("utun") and "UP" in line
    |

src/nyord_vpn/network/vpn.py:939:30: S603 `subprocess` call: check for execution of untrusted input
    |
937 |             elif sys.platform == "linux":
938 |                 try:
939 |                     output = subprocess.check_output(
    |                              ^^^^^^^^^^^^^^^^^^^^^^^ S603
940 |                         ["ip", "link", "show", "tun0"], text=True
941 |                     )
    |

src/nyord_vpn/network/vpn.py:940:25: S607 Starting a process with a partial executable path
    |
938 |                 try:
939 |                     output = subprocess.check_output(
940 |                         ["ip", "link", "show", "tun0"], text=True
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
941 |                     )
942 |                     if "UP" not in output:
    |

src/nyord_vpn/network/vpn.py:981:13: TRY300 Consider moving this statement to an `else` block
    |
979 |                 return False
980 |
981 |             return True
    |             ^^^^^^^^^^^ TRY300
982 |
983 |         except Exception as e:
    |

src/nyord_vpn/network/vpn.py:988:9: C901 `status` is too complex (11 > 10)
    |
986 |             return False
987 |
988 |     def status(self) -> dict[str, Any]:
    |         ^^^^^^ C901
989 |         """Get current VPN connection status.
    |

src/nyord_vpn/network/vpn.py:1056:13: TRY300 Consider moving this statement to an `else` block
     |
1054 |         try:
1055 |             os.kill(process_id, 0)
1056 |             return True
     |             ^^^^^^^^^^^ TRY300
1057 |         except OSError:
1058 |             return False
     |

src/nyord_vpn/network/vpn.py:1064:9: C901 `check_connection_state` is too complex (11 > 10)
     |
1062 |             return False
1063 |
1064 |     def check_connection_state(self) -> bool:
     |         ^^^^^^^^^^^^^^^^^^^^^^ C901
1065 |         """Check current VPN connection state.
     |

src/nyord_vpn/network/vpn.py:1100:13: TRY300 Consider moving this statement to an `else` block
     |
1098 |                         self.logger.debug(f"Failed to read OpenVPN log: {e}")
1099 |
1100 |             return False
     |             ^^^^^^^^^^^^ TRY300
1101 |
1102 |         except Exception as e:
     |

src/nyord_vpn/network/vpn.py:1104:75: TRY401 Redundant exception object included in `logging.exception` call
     |
1102 |         except Exception as e:
1103 |             if self.verbose:
1104 |                 self.logger.exception(f"Error checking connection state: {e}")
     |                                                                           ^ TRY401
1105 |             return False
     |

src/nyord_vpn/network/vpn.py:1117:9: C901 `go` is too complex (14 > 10)
     |
1115 |             self.logger.debug("IP cache invalidated")
1116 |
1117 |     def go(self, country_code: str) -> None:
     |         ^^ C901
1118 |         """Connect to VPN in specified country.
     |

src/nyord_vpn/network/vpn.py:1117:9: PLR0912 Too many branches (13 > 12)
     |
1115 |             self.logger.debug("IP cache invalidated")
1116 |
1117 |     def go(self, country_code: str) -> None:
     |         ^^ PLR0912
1118 |         """Connect to VPN in specified country.
     |

src/nyord_vpn/network/vpn.py:1145:17: TRY301 Abstract `raise` to an inner function
     |
1143 |             servers = self.server_manager.select_fastest_server(country_code)
1144 |             if not servers:
1145 |                 raise VPNError(f"No servers available in {country_code}")
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
1146 |
1147 |             if self.verbose:
     |

src/nyord_vpn/network/vpn.py:1145:23: TRY003 Avoid specifying long messages outside the exception class
     |
1143 |             servers = self.server_manager.select_fastest_server(country_code)
1144 |             if not servers:
1145 |                 raise VPNError(f"No servers available in {country_code}")
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
1146 |
1147 |             if self.verbose:
     |

src/nyord_vpn/network/vpn.py:1178:21: TRY300 Consider moving this statement to an `else` block
     |
1176 |                     if self.verbose:
1177 |                         self.logger.info(f"Successfully connected to {hostname}")
1178 |                     return
     |                     ^^^^^^ TRY300
1179 |
1180 |                 except Exception as e:
     |

src/nyord_vpn/network/vpn.py:1190:13: TRY301 Abstract `raise` to an inner function
     |
1189 |               # If we get here, all servers failed
1190 | /             raise VPNError(
1191 | |                 f"Failed to connect to any server in {country_code}:\n"
1192 | |                 + "\n".join(f"- {e}" for e in errors)
1193 | |             )
     | |_____________^ TRY301
1194 |
1195 |           except Exception as e:
     |

src/nyord_vpn/network/vpn.py:1196:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
     |
1195 |         except Exception as e:
1196 |             raise VPNError(f"Failed to connect: {e}")
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
     |

src/nyord_vpn/network/vpn.py:1196:19: TRY003 Avoid specifying long messages outside the exception class
     |
1195 |         except Exception as e:
1196 |             raise VPNError(f"Failed to connect: {e}")
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
     |

src/nyord_vpn/network/vpn_commands.py:163:19: TRY003 Avoid specifying long messages outside the exception class
    |
161 |         # Check if config file exists
162 |         if not self.config_path.exists():
163 |             raise VPNConfigError(f"{CONFIG_FILE_NOT_FOUND}: {self.config_path}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
164 |
165 |         # Check if auth file exists
    |

src/nyord_vpn/network/vpn_commands.py:167:19: TRY003 Avoid specifying long messages outside the exception class
    |
165 |         # Check if auth file exists
166 |         if not self.auth_path.exists():
167 |             raise VPNConfigError(f"{AUTH_FILE_NOT_FOUND}: {self.auth_path}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
168 |
169 |         # Validate file permissions (should be readable)
    |

src/nyord_vpn/network/vpn_commands.py:174:19: TRY003 Avoid specifying long messages outside the exception class
    |
172 |             self.auth_path.read_bytes()
173 |         except (PermissionError, OSError) as e:
174 |             raise VPNConfigError(f"{CANNOT_READ_FILES}: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
175 |
176 |         # Create log directory if needed
    |

src/nyord_vpn/network/vpn_commands.py:192:23: TRY003 Avoid specifying long messages outside the exception class
    |
190 |         if isinstance(self.verbosity, int):
191 |             if not 1 <= self.verbosity <= 6:
192 |                 raise VPNConfigError(f"{INVALID_VERBOSITY}: {self.verbosity}")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
193 |             # Convert to enum for consistent handling
194 |             with contextlib.suppress(ValueError):
    |

src/nyord_vpn/network/vpn_commands.py:208:19: TRY003 Avoid specifying long messages outside the exception class
    |
206 |         # Connect retry should be positive
207 |         if self.connect_retry < 1:
208 |             raise VPNConfigError(f"{INVALID_CONNECT_RETRY}: {self.connect_retry}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
209 |
210 |         # Connect timeout should be positive
    |

src/nyord_vpn/network/vpn_commands.py:212:19: TRY003 Avoid specifying long messages outside the exception class
    |
210 |         # Connect timeout should be positive
211 |         if self.connect_timeout < 1:
212 |             raise VPNConfigError(f"{INVALID_CONNECT_TIMEOUT}: {self.connect_timeout}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
213 |
214 |         # Ping interval should be positive
    |

src/nyord_vpn/network/vpn_commands.py:216:19: TRY003 Avoid specifying long messages outside the exception class
    |
214 |         # Ping interval should be positive
215 |         if self.ping_interval < 1:
216 |             raise VPNConfigError(f"{INVALID_PING_INTERVAL}: {self.ping_interval}")
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
217 |
218 |         # Ping restart should be greater than ping interval
    |

src/nyord_vpn/network/vpn_commands.py:220:19: TRY003 Avoid specifying long messages outside the exception class
    |
218 |           # Ping restart should be greater than ping interval
219 |           if self.ping_restart <= self.ping_interval:
220 |               raise VPNConfigError(
    |  ___________________^
221 | |                 f"{INVALID_PING_RESTART}: {self.ping_restart} (ping_interval: {self.ping_interval})"
222 | |             )
    | |_____________^ TRY003
    |

src/nyord_vpn/network/vpn_commands.py:244:15: TRY003 Avoid specifying long messages outside the exception class
    |
242 |     # Check if openvpn is installed
243 |     if not shutil.which("openvpn"):
244 |         raise VPNConfigError(f"{OPENVPN_NOT_FOUND}. Please install OpenVPN first.")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
245 |
246 |     # Base command with common options
    |

src/nyord_vpn/storage/state.py:1:1: D100 Missing docstring in public module
src/nyord_vpn/utils/connection.py:69:5: FBT001 Boolean-typed positional argument in function definition
   |
67 |     initial_ip: str | None,
68 |     connected_ip: str | None,
69 |     openvpn_running: bool,
   |     ^^^^^^^^^^^^^^^ FBT001
70 |     nord_status: bool | None = None,
71 | ) -> bool:
   |

src/nyord_vpn/utils/templates.py:62:9: TRY300 Consider moving this statement to an `else` block
   |
60 |     try:
61 |         actual_hash = calculate_sha256(path.read_bytes())
62 |         return actual_hash == expected_hash
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
63 |     except Exception as e:
64 |         log_debug("Failed to verify file integrity: {}", e)
   |

src/nyord_vpn/utils/templates.py:73:17: DTZ006 `datetime.datetime.fromtimestamp()` called without a `tz` argument
   |
71 |         if not CONFIG_ZIP.exists():
72 |             return None
73 |         mtime = datetime.fromtimestamp(CONFIG_ZIP.stat().st_mtime)
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ DTZ006
74 |         return datetime.now() - mtime
75 |     except Exception as e:
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/nyord_vpn/utils/templates.py:74:16: DTZ005 `datetime.datetime.now()` called without a `tz` argument
   |
72 |             return None
73 |         mtime = datetime.fromtimestamp(CONFIG_ZIP.stat().st_mtime)
74 |         return datetime.now() - mtime
   |                ^^^^^^^^^^^^^^ DTZ005
75 |     except Exception as e:
76 |         log_debug("Failed to get ZIP file age: {}", e)
   |
   = help: Pass a `datetime.timezone` object to the `tz` parameter

src/nyord_vpn/utils/templates.py:102:17: S603 `subprocess` call: check for execution of untrusted input
    |
100 |         except PermissionError:
101 |             try:
102 |                 subprocess.run(
    |                 ^^^^^^^^^^^^^^ S603
103 |                     ["sudo", "chown", f"{user_id}:{group_id}", str(path)],
104 |                     check=True,
    |

src/nyord_vpn/utils/templates.py:103:21: S607 Starting a process with a partial executable path
    |
101 |             try:
102 |                 subprocess.run(
103 |                     ["sudo", "chown", f"{user_id}:{group_id}", str(path)],
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ S607
104 |                     check=True,
105 |                     capture_output=True,
    |

src/nyord_vpn/utils/templates.py:108:23: TRY003 Avoid specifying long messages outside the exception class
    |
106 |                   )
107 |               except subprocess.CalledProcessError as e:
108 |                   raise VPNConfigError(
    |  _______________________^
109 | |                     f"Failed to set ownership with sudo: {e.stderr.decode()}"
110 | |                 ) from e
    | |_________________^ TRY003
111 |           log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
112 |       except Exception as e:
    |

src/nyord_vpn/utils/templates.py:113:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
111 |         log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
112 |     except Exception as e:
113 |         raise VPNConfigError(f"Failed to secure directory {path}: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/utils/templates.py:113:15: TRY003 Avoid specifying long messages outside the exception class
    |
111 |         log_debug("Set ownership of {} to {}:{}", path, user_id, group_id)
112 |     except Exception as e:
113 |         raise VPNConfigError(f"Failed to secure directory {path}: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:127:17: PERF203 `try`-`except` within a loop incurs performance overhead
    |
125 |                       config.unlink()
126 |                       log_debug("Removed old config: {}", config)
127 | /                 except Exception as e:
128 | |                     log_debug("Failed to remove old config {}: {}", config, e)
    | |______________________________________________________________________________^ PERF203
129 |       except Exception as e:
130 |           log_debug("Failed to cleanup old configs: {}", e)
    |

src/nyord_vpn/utils/templates.py:143:26: S311 Standard pseudo-random generators are not suitable for cryptographic purposes
    |
141 |         try:
142 |             if attempt > 0:
143 |                 jitter = random.uniform(0, 0.1) * delay
    |                          ^^^^^^^^^^^^^^^^^^^^^^ S311
144 |                 sleep_time = delay + jitter
145 |                 log_debug(
    |

src/nyord_vpn/utils/templates.py:154:13: TRY300 Consider moving this statement to an `else` block
    |
152 |             content = response.content
153 |             content_hash = calculate_sha256(content)
154 |             return content, content_hash
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY300
155 |
156 |         except requests.RequestException as e:
    |

src/nyord_vpn/utils/templates.py:156:9: PERF203 `try`-`except` within a loop incurs performance overhead
    |
154 |               return content, content_hash
155 |
156 | /         except requests.RequestException as e:
157 | |             last_error = e
158 | |             if isinstance(e, requests.HTTPError) and (
159 | |                 400 <= e.response.status_code < 500 and e.response.status_code != 429
160 | |             ):
161 | |                 raise VPNConfigError(
162 | |                     f"Failed to download (HTTP {e.response.status_code}): {e}"
163 | |                 ) from e
164 | |             delay = min(delay * 2, MAX_RETRY_DELAY)
165 | |             log_debug(
166 | |                 "Download failed (attempt {}/{}): {}", attempt + 1, MAX_RETRIES, str(e)
167 | |             )
    | |_____________^ PERF203
168 |
169 |       if isinstance(last_error, requests.HTTPError):
    |

src/nyord_vpn/utils/templates.py:161:23: TRY003 Avoid specifying long messages outside the exception class
    |
159 |                   400 <= e.response.status_code < 500 and e.response.status_code != 429
160 |               ):
161 |                   raise VPNConfigError(
    |  _______________________^
162 | |                     f"Failed to download (HTTP {e.response.status_code}): {e}"
163 | |                 ) from e
    | |_________________^ TRY003
164 |               delay = min(delay * 2, MAX_RETRY_DELAY)
165 |               log_debug(
    |

src/nyord_vpn/utils/templates.py:170:15: TRY003 Avoid specifying long messages outside the exception class
    |
169 |       if isinstance(last_error, requests.HTTPError):
170 |           raise VPNConfigError(
    |  _______________^
171 | |             f"Failed to download after {MAX_RETRIES} retries "
172 | |             f"(HTTP {last_error.response.status_code}): {last_error}"
173 | |         ) from last_error
    | |_________^ TRY003
174 |       raise VPNConfigError(
175 |           f"Failed to download after {MAX_RETRIES} retries: {last_error}"
    |

src/nyord_vpn/utils/templates.py:174:11: TRY003 Avoid specifying long messages outside the exception class
    |
172 |               f"(HTTP {last_error.response.status_code}): {last_error}"
173 |           ) from last_error
174 |       raise VPNConfigError(
    |  ___________^
175 | |         f"Failed to download after {MAX_RETRIES} retries: {last_error}"
176 | |     ) from last_error
    | |_____^ TRY003
    |

src/nyord_vpn/utils/templates.py:197:31: TRY003 Avoid specifying long messages outside the exception class
    |
195 |                     extracted_path = CONFIG_DIR / zip_path
196 |                     if not verify_file_integrity(extracted_path, file_hash):
197 |                         raise VPNConfigError("Extracted file is corrupted")
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
198 |                 except KeyError:
199 |                     tcp_configs = [
    |

src/nyord_vpn/utils/templates.py:207:21: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
205 |                       if tcp_configs:
206 |                           log_debug("Sample configs: {}", tcp_configs[:5])
207 | /                     raise VPNConfigError(
208 | |                         f"Config file {zip_path} not found in ZIP. "
209 | |                         f"ZIP contains {len(tcp_configs)} TCP configs."
210 | |                     )
    | |_____________________^ B904
211 |           except zipfile.BadZipFile as e:
212 |               with contextlib.suppress(Exception):
    |

src/nyord_vpn/utils/templates.py:207:27: TRY003 Avoid specifying long messages outside the exception class
    |
205 |                       if tcp_configs:
206 |                           log_debug("Sample configs: {}", tcp_configs[:5])
207 |                       raise VPNConfigError(
    |  ___________________________^
208 | |                         f"Config file {zip_path} not found in ZIP. "
209 | |                         f"ZIP contains {len(tcp_configs)} TCP configs."
210 | |                     )
    | |_____________________^ TRY003
211 |           except zipfile.BadZipFile as e:
212 |               with contextlib.suppress(Exception):
    |

src/nyord_vpn/utils/templates.py:214:19: TRY003 Avoid specifying long messages outside the exception class
    |
212 |             with contextlib.suppress(Exception):
213 |                 CONFIG_ZIP.unlink()
214 |             raise VPNConfigError(f"Corrupted ZIP file: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
215 |
216 |         extracted_path = CONFIG_DIR / zip_path
    |

src/nyord_vpn/utils/templates.py:220:17: TRY301 Abstract `raise` to an inner function
    |
218 |             extracted_path.rename(config_path)
219 |             if not verify_file_integrity(config_path, file_hash):
220 |                 raise VPNConfigError("Config file corrupted during move")
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
221 |         except Exception as e:
222 |             raise VPNConfigError(f"Failed to move config file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:220:23: TRY003 Avoid specifying long messages outside the exception class
    |
218 |             extracted_path.rename(config_path)
219 |             if not verify_file_integrity(config_path, file_hash):
220 |                 raise VPNConfigError("Config file corrupted during move")
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
221 |         except Exception as e:
222 |             raise VPNConfigError(f"Failed to move config file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:222:19: TRY003 Avoid specifying long messages outside the exception class
    |
220 |                 raise VPNConfigError("Config file corrupted during move")
221 |         except Exception as e:
222 |             raise VPNConfigError(f"Failed to move config file: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
223 |
224 |         with contextlib.suppress(FileNotFoundError, OSError):
    |

src/nyord_vpn/utils/templates.py:231:19: TRY003 Avoid specifying long messages outside the exception class
    |
229 |             log_debug("Set permissions on {}", config_path)
230 |         except Exception as e:
231 |             raise VPNConfigError(f"Failed to set config file permissions: {e}") from e
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
232 |
233 |         return config_path
    |

src/nyord_vpn/utils/templates.py:233:9: TRY300 Consider moving this statement to an `else` block
    |
231 |             raise VPNConfigError(f"Failed to set config file permissions: {e}") from e
232 |
233 |         return config_path
    |         ^^^^^^^^^^^^^^^^^^ TRY300
234 |
235 |     except VPNConfigError:
    |

src/nyord_vpn/utils/templates.py:238:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
236 |         raise
237 |     except Exception as e:
238 |         raise VPNConfigError(f"Failed to extract configuration: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/utils/templates.py:238:15: TRY003 Avoid specifying long messages outside the exception class
    |
236 |         raise
237 |     except Exception as e:
238 |         raise VPNConfigError(f"Failed to extract configuration: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:241:5: C901 `download_config_zip` is too complex (12 > 10)
    |
241 | def download_config_zip() -> None:
    |     ^^^^^^^^^^^^^^^^^^^ C901
242 |     """Download and cache the OpenVPN configuration ZIP file."""
243 |     try:
    |

src/nyord_vpn/utils/templates.py:254:21: TRY301 Abstract `raise` to an inner function
    |
252 |                 temp_zip.chmod(0o600)
253 |                 if not verify_file_integrity(temp_zip, content_hash):
254 |                     raise VPNConfigError("Downloaded file corrupted during write")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
255 |             except Exception as e:
256 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:254:27: TRY003 Avoid specifying long messages outside the exception class
    |
252 |                 temp_zip.chmod(0o600)
253 |                 if not verify_file_integrity(temp_zip, content_hash):
254 |                     raise VPNConfigError("Downloaded file corrupted during write")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
255 |             except Exception as e:
256 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |

src/nyord_vpn/utils/templates.py:256:23: TRY003 Avoid specifying long messages outside the exception class
    |
254 |                     raise VPNConfigError("Downloaded file corrupted during write")
255 |             except Exception as e:
256 |                 raise VPNConfigError(f"Failed to write temporary ZIP file: {e}") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
257 |
258 |             try:
    |

src/nyord_vpn/utils/templates.py:266:31: TRY003 Avoid specifying long messages outside the exception class
    |
264 |                       ]
265 |                       if not tcp_configs:
266 |                           raise VPNConfigError(
    |  _______________________________^
267 | |                             "Downloaded ZIP contains no TCP configurations"
268 | |                         )
    | |_________________________^ TRY003
269 |                       log_debug("ZIP contains {} TCP configs", len(tcp_configs))
270 |               except zipfile.BadZipFile as e:
    |

src/nyord_vpn/utils/templates.py:271:23: TRY003 Avoid specifying long messages outside the exception class
    |
269 |                     log_debug("ZIP contains {} TCP configs", len(tcp_configs))
270 |             except zipfile.BadZipFile as e:
271 |                 raise VPNConfigError("Downloaded file is not a valid ZIP") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
272 |
273 |             try:
    |

src/nyord_vpn/utils/templates.py:276:21: TRY301 Abstract `raise` to an inner function
    |
274 |                 temp_zip.replace(CONFIG_ZIP)
275 |                 if not verify_file_integrity(CONFIG_ZIP, content_hash):
276 |                     raise VPNConfigError("ZIP file corrupted during move")
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY301
277 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
278 |             except Exception as e:
    |

src/nyord_vpn/utils/templates.py:276:27: TRY003 Avoid specifying long messages outside the exception class
    |
274 |                 temp_zip.replace(CONFIG_ZIP)
275 |                 if not verify_file_integrity(CONFIG_ZIP, content_hash):
276 |                     raise VPNConfigError("ZIP file corrupted during move")
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
277 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
278 |             except Exception as e:
    |

src/nyord_vpn/utils/templates.py:279:23: TRY003 Avoid specifying long messages outside the exception class
    |
277 |                 log_debug("OpenVPN configurations cached at {}", CONFIG_ZIP)
278 |             except Exception as e:
279 |                 raise VPNConfigError(f"Failed to save ZIP file: {e}") from e
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
280 |
281 |         except Exception:
    |

src/nyord_vpn/utils/templates.py:285:13: S110 `try`-`except`-`pass` detected, consider logging the exception
    |
283 |                   if temp_zip.exists():
284 |                       temp_zip.unlink()
285 | /             except Exception:
286 | |                 pass
    | |____________________^ S110
287 |               raise
    |

src/nyord_vpn/utils/templates.py:292:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
290 |         raise
291 |     except Exception as e:
292 |         raise VPNConfigError(f"Failed to download/cache configurations: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
    |

src/nyord_vpn/utils/templates.py:292:15: TRY003 Avoid specifying long messages outside the exception class
    |
290 |         raise
291 |     except Exception as e:
292 |         raise VPNConfigError(f"Failed to download/cache configurations: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
    |

src/nyord_vpn/utils/templates.py:327:9: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
325 |             log_debug("Fixed config file permissions for {}", config_path)
326 |     except Exception as e:
327 |         raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
328 |
329 |     return config_path
    |

src/nyord_vpn/utils/templates.py:327:15: TRY003 Avoid specifying long messages outside the exception class
    |
325 |             log_debug("Fixed config file permissions for {}", config_path)
326 |     except Exception as e:
327 |         raise VPNConfigError(f"Failed to verify config file permissions: {e}")
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ TRY003
328 |
329 |     return config_path
    |

src/nyord_vpn/utils/utils.py:138:34: PTH118 `os.path.join()` should be replaced by `Path` with `/` operator
    |
136 |             # If in virtualenv, use nyord-vpn from virtualenv bin
137 |             if os.environ.get("VIRTUAL_ENV"):
138 |                 nyord_vpn_path = os.path.join(
    |                                  ^^^^^^^^^^^^ PTH118
139 |                     os.environ["VIRTUAL_ENV"], "bin", "nyord-vpn"
140 |                 )
    |

src/nyord_vpn/utils/utils.py:141:20: PTH110 `os.path.exists()` should be replaced by `Path.exists()`
    |
139 |                     os.environ["VIRTUAL_ENV"], "bin", "nyord-vpn"
140 |                 )
141 |                 if os.path.exists(nyord_vpn_path):
    |                    ^^^^^^^^^^^^^^ PTH110
142 |                     args = ["sudo", "-E", nyord_vpn_path, *cmd[1:]]
143 |                 else:
    |

src/nyord_vpn/utils/utils.py:160:13: S603 `subprocess` call: check for execution of untrusted input
    |
158 |                 logger.debug(f"Running command: {' '.join(args)}")
159 |
160 |             subprocess.run(args, env=env, check=True)
    |             ^^^^^^^^^^^^^^ S603
161 |             sys.exit(0)
162 |         except subprocess.CalledProcessError as e:
    |

src/nyord_vpn/utils/utils.py:183:9: TRY300 Consider moving this statement to an `else` block
    |
181 |     try:
182 |         os.kill(process_id, 0)
183 |         return True
    |         ^^^^^^^^^^^ TRY300
184 |     except OSError:
185 |         return False
    |

src/nyord_vpn/utils/utils.py:201:10: PTH123 `open()` should be replaced by `Path.open()`
    |
199 | # Load country ID mappings with fallback data
200 | try:
201 |     with open(COUNTRY_IDS_FILE) as f:
    |          ^^^^ PTH123
202 |         NORDVPN_COUNTRY_IDS: dict[str, str] = json.load(f)
203 | except (FileNotFoundError, json.JSONDecodeError):
    |

tests/conftest.py:12:26: ANN001 Missing type annotation for function argument `monkeypatch`
   |
11 | @pytest.fixture
12 | def mock_env_credentials(monkeypatch) -> None:
   |                          ^^^^^^^^^^^ ANN001
13 |     """Mock environment variables for testing."""
14 |     monkeypatch.setenv("NORD_USER", "test_user")
   |

tests/conftest.py:19:5: ANN201 Missing return type annotation for public function `mock_openvpn`
   |
18 | @pytest.fixture
19 | def mock_openvpn():
   |     ^^^^^^^^^^^^ ANN201
20 |     """Mock OpenVPN command."""
21 |     with patch("subprocess.run") as mock_run:
   |
   = help: Add return type annotation

tests/conftest.py:27:5: ANN201 Missing return type annotation for public function `mock_requests`
   |
26 | @pytest.fixture
27 | def mock_requests():
   |     ^^^^^^^^^^^^^ ANN201
28 |     """Mock requests for API calls."""
29 |     with patch("requests.get") as mock_get:
   |
   = help: Add return type annotation

tests/conftest.py:39:5: ANN201 Missing return type annotation for public function `mock_process`
   |
38 | @pytest.fixture
39 | def mock_process():
   |     ^^^^^^^^^^^^ ANN201
40 |     """Mock subprocess for OpenVPN."""
41 |     with patch("subprocess.Popen") as mock_popen:
   |
   = help: Add return type annotation

tests/conftest.py:48:5: ANN201 Missing return type annotation for public function `mock_client`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |     ^^^^^^^^^^^ ANN201
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |
   = help: Add return type annotation

tests/conftest.py:48:17: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                 ^^^^^^^^^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:39: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                       ^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:53: ANN001 Missing type annotation for function argument `mock_requests`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                                     ^^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:48:68: ANN001 Missing type annotation for function argument `mock_process`
   |
47 | @pytest.fixture
48 | def mock_client(mock_env_credentials, mock_openvpn, mock_requests, mock_process):
   |                                                                    ^^^^^^^^^^^^ ANN001
49 |     """Create a mock VPN client."""
50 |     with patch("nyord_vpn.api.legacy.LegacyVPNClient") as mock_legacy:
   |

tests/conftest.py:71:5: ANN201 Missing return type annotation for public function `temp_config_file`
   |
70 | @pytest.fixture
71 | def temp_config_file(tmp_path):
   |     ^^^^^^^^^^^^^^^^ ANN201
72 |     """Create a temporary config file."""
73 |     config = {
   |
   = help: Add return type annotation

tests/conftest.py:71:22: ANN001 Missing type annotation for function argument `tmp_path`
   |
70 | @pytest.fixture
71 | def temp_config_file(tmp_path):
   |                      ^^^^^^^^ ANN001
72 |     """Create a temporary config file."""
73 |     config = {
   |

tests/conftest.py:86:5: ANN201 Missing return type annotation for public function `mock_ip_info`
   |
85 | @pytest.fixture
86 | def mock_ip_info():
   |     ^^^^^^^^^^^^ ANN201
87 |     """Mock IP info response."""
88 |     with patch("requests.get") as mock_get:
   |
   = help: Add return type annotation

tests/integration/test_config_loading.py:13:29: ANN001 Missing type annotation for function argument `temp_dir`
   |
12 | @pytest.mark.integration
13 | async def test_file_loading(temp_dir) -> None:
   |                             ^^^^^^^^ ANN001
14 |     """Test configuration loading from file."""
15 |     # Create config file with all options
   |

tests/integration/test_config_loading.py:50:47: ANN001 Missing type annotation for function argument `monkeypatch`
   |
49 | @pytest.mark.integration
50 | async def test_environment_loading_unprefixed(monkeypatch) -> None:
   |                                               ^^^^^^^^^^^ ANN001
51 |     """Test configuration loading from unprefixed environment variables."""
52 |     # Set environment variables
   |

tests/integration/test_config_loading.py:67:45: ANN001 Missing type annotation for function argument `monkeypatch`
   |
66 | @pytest.mark.integration
67 | async def test_environment_loading_prefixed(monkeypatch) -> None:
   |                                             ^^^^^^^^^^^ ANN001
68 |     """Test configuration loading from prefixed environment variables."""
69 |     # Set environment variables
   |

tests/integration/test_config_loading.py:84:47: ANN001 Missing type annotation for function argument `monkeypatch`
   |
83 | @pytest.mark.integration
84 | async def test_environment_loading_precedence(monkeypatch) -> None:
   |                                               ^^^^^^^^^^^ ANN001
85 |     """Test precedence between prefixed and unprefixed environment variables."""
86 |     # Set both prefixed and unprefixed variables
   |

tests/integration/test_config_loading.py:102:41: S106 Possible hardcoded password assigned to argument: "password"
    |
100 |     """Test configuration default values."""
101 |     # Test with minimal configuration
102 |     config = VPNConfig(username="test", password="test")
    |                                         ^^^^^^^^^^^^^^^ S106
103 |     assert config.username == "test"
104 |     assert config.password.get_secret_value() == "test"
    |

tests/integration/test_config_loading.py:112:41: S106 Possible hardcoded password assigned to argument: "password"
    |
111 |     # Test with VPNClient
112 |     client = VPNClient(username="test", password="test")
    |                                         ^^^^^^^^^^^^^^^ S106
113 |     assert client.config.username == "test"
114 |     assert client.config.password.get_secret_value() == "test"
    |

tests/integration/test_config_loading.py:123:39: ANN001 Missing type annotation for function argument `temp_dir`
    |
122 | @pytest.mark.integration
123 | async def test_config_file_precedence(temp_dir, monkeypatch) -> None:
    |                                       ^^^^^^^^ ANN001
124 |     """Test configuration loading precedence between file and environment."""
125 |     # Create config file
    |

tests/integration/test_config_loading.py:123:49: ANN001 Missing type annotation for function argument `monkeypatch`
    |
122 | @pytest.mark.integration
123 | async def test_config_file_precedence(temp_dir, monkeypatch) -> None:
    |                                                 ^^^^^^^^^^^ ANN001
124 |     """Test configuration loading precedence between file and environment."""
125 |     # Create config file
    |

tests/integration/test_config_loading.py:169:34: ANN001 Missing type annotation for function argument `temp_dir`
    |
168 | @pytest.mark.integration
169 | async def test_config_validation(temp_dir) -> None:
    |                                  ^^^^^^^^ ANN001
170 |     """Test configuration validation."""
171 |     # Test invalid retry attempts
    |

tests/integration/test_config_loading.py:242:24: ANN001 Missing type annotation for function argument `monkeypatch`
    |
242 | def test_load_from_env(monkeypatch) -> None:
    |                        ^^^^^^^^^^^ ANN001
243 |     """Test loading configuration from environment variables."""
244 |     # Set environment variables
    |

tests/integration/test_config_loading.py:299:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
297 |     empty_path = tmp_path / "empty.json"
298 |     empty_path.write_text("{}")
299 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
300 |         VPNConfig.from_file(empty_path)
    |

tests/integration/test_config_loading.py:303:30: ANN001 Missing type annotation for function argument `monkeypatch`
    |
303 | def test_invalid_environment(monkeypatch) -> None:
    |                              ^^^^^^^^^^^ ANN001
304 |     """Test handling of invalid environment variables."""
305 |     # Test missing required variables
    |

tests/integration/test_config_loading.py:306:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
304 |     """Test handling of invalid environment variables."""
305 |     # Test missing required variables
306 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
307 |         VPNConfig.from_env()
    |

tests/integration/test_config_loading.py:313:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
311 |     monkeypatch.setenv("NORDVPN_PASSWORD", TEST_PASSWORD.get_secret_value())
312 |     monkeypatch.setenv("NORDVPN_API_TIMEOUT", "invalid")
313 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
314 |         VPNConfig.from_env()
    |

tests/integration/test_connection.py:12:5: ANN001 Missing type annotation for function argument `mock_client`
   |
10 | @pytest.mark.asyncio
11 | async def test_connection_success(
12 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
13 |     mock_aiohttp_session,
14 |     mock_subprocess,
   |

tests/integration/test_connection.py:13:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
11 | async def test_connection_success(
12 |     mock_client,
13 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
14 |     mock_subprocess,
15 |     mock_pycountry,
   |

tests/integration/test_connection.py:14:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
12 |     mock_client,
13 |     mock_aiohttp_session,
14 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
15 |     mock_pycountry,
16 |     mock_env_credentials,
   |

tests/integration/test_connection.py:15:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
13 |     mock_aiohttp_session,
14 |     mock_subprocess,
15 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
16 |     mock_env_credentials,
17 | ) -> None:
   |

tests/integration/test_connection.py:16:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
14 |     mock_subprocess,
15 |     mock_pycountry,
16 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
17 | ) -> None:
18 |     """Test successful VPN connection."""
   |

tests/integration/test_connection.py:42:5: ANN001 Missing type annotation for function argument `mock_client`
   |
40 | @pytest.mark.asyncio
41 | async def test_connection_failure(
42 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
43 |     mock_aiohttp_session,
44 |     mock_subprocess,
   |

tests/integration/test_connection.py:43:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
41 | async def test_connection_failure(
42 |     mock_client,
43 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
44 |     mock_subprocess,
45 |     mock_pycountry,
   |

tests/integration/test_connection.py:44:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
42 |     mock_client,
43 |     mock_aiohttp_session,
44 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
45 |     mock_pycountry,
46 |     mock_env_credentials,
   |

tests/integration/test_connection.py:45:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
43 |     mock_aiohttp_session,
44 |     mock_subprocess,
45 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
46 |     mock_env_credentials,
47 | ) -> None:
   |

tests/integration/test_connection.py:46:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
44 |     mock_subprocess,
45 |     mock_pycountry,
46 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
47 | ) -> None:
48 |     """Test VPN connection failure handling."""
   |

tests/integration/test_connection.py:73:5: ANN001 Missing type annotation for function argument `mock_client`
   |
71 | @pytest.mark.asyncio
72 | async def test_country_selection(
73 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
74 |     mock_aiohttp_session,
75 |     mock_subprocess,
   |

tests/integration/test_connection.py:74:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
72 | async def test_country_selection(
73 |     mock_client,
74 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
75 |     mock_subprocess,
76 |     mock_pycountry,
   |

tests/integration/test_connection.py:75:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
73 |     mock_client,
74 |     mock_aiohttp_session,
75 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
76 |     mock_pycountry,
77 |     mock_env_credentials,
   |

tests/integration/test_connection.py:76:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
74 |     mock_aiohttp_session,
75 |     mock_subprocess,
76 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
77 |     mock_env_credentials,
78 | ) -> None:
   |

tests/integration/test_connection.py:77:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
75 |     mock_subprocess,
76 |     mock_pycountry,
77 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
78 | ) -> None:
79 |     """Test VPN country selection."""
   |

tests/integration/test_errors.py:18:5: ANN001 Missing type annotation for function argument `mock_client`
   |
16 | @pytest.mark.asyncio
17 | async def test_network_errors(
18 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
19 |     mock_aiohttp_session,
20 |     mock_subprocess,
   |

tests/integration/test_errors.py:19:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
17 | async def test_network_errors(
18 |     mock_client,
19 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
20 |     mock_subprocess,
21 |     mock_pycountry,
   |

tests/integration/test_errors.py:20:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
18 |     mock_client,
19 |     mock_aiohttp_session,
20 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
21 |     mock_pycountry,
22 |     mock_env_credentials,
   |

tests/integration/test_errors.py:21:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
19 |     mock_aiohttp_session,
20 |     mock_subprocess,
21 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
22 |     mock_env_credentials,
23 | ) -> None:
   |

tests/integration/test_errors.py:22:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
20 |     mock_subprocess,
21 |     mock_pycountry,
22 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
23 | ) -> None:
24 |     """Test handling of network-related errors."""
   |

tests/integration/test_errors.py:53:5: ANN001 Missing type annotation for function argument `mock_client`
   |
51 | @pytest.mark.asyncio
52 | async def test_subprocess_errors(
53 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
54 |     mock_aiohttp_session,
55 |     mock_subprocess,
   |

tests/integration/test_errors.py:54:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
52 | async def test_subprocess_errors(
53 |     mock_client,
54 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
55 |     mock_subprocess,
56 |     mock_pycountry,
   |

tests/integration/test_errors.py:55:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
53 |     mock_client,
54 |     mock_aiohttp_session,
55 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
56 |     mock_pycountry,
57 |     mock_env_credentials,
   |

tests/integration/test_errors.py:56:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
54 |     mock_aiohttp_session,
55 |     mock_subprocess,
56 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
57 |     mock_env_credentials,
58 | ) -> None:
   |

tests/integration/test_errors.py:57:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
55 |     mock_subprocess,
56 |     mock_pycountry,
57 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
58 | ) -> None:
59 |     """Test handling of subprocess-related errors."""
   |

tests/integration/test_errors.py:76:5: ANN001 Missing type annotation for function argument `mock_client`
   |
74 | @pytest.mark.asyncio
75 | async def test_configuration_errors(
76 |     mock_client,
   |     ^^^^^^^^^^^ ANN001
77 |     mock_aiohttp_session,
78 |     mock_subprocess,
   |

tests/integration/test_errors.py:77:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
   |
75 | async def test_configuration_errors(
76 |     mock_client,
77 |     mock_aiohttp_session,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
78 |     mock_subprocess,
79 |     mock_pycountry,
   |

tests/integration/test_errors.py:78:5: ANN001 Missing type annotation for function argument `mock_subprocess`
   |
76 |     mock_client,
77 |     mock_aiohttp_session,
78 |     mock_subprocess,
   |     ^^^^^^^^^^^^^^^ ANN001
79 |     mock_pycountry,
80 |     temp_dir,
   |

tests/integration/test_errors.py:79:5: ANN001 Missing type annotation for function argument `mock_pycountry`
   |
77 |     mock_aiohttp_session,
78 |     mock_subprocess,
79 |     mock_pycountry,
   |     ^^^^^^^^^^^^^^ ANN001
80 |     temp_dir,
81 | ) -> None:
   |

tests/integration/test_errors.py:80:5: ANN001 Missing type annotation for function argument `temp_dir`
   |
78 |     mock_subprocess,
79 |     mock_pycountry,
80 |     temp_dir,
   |     ^^^^^^^^ ANN001
81 | ) -> None:
82 |     """Test handling of configuration-related errors."""
   |

tests/integration/test_errors.py:113:5: ANN001 Missing type annotation for function argument `mock_client`
    |
111 | @pytest.mark.asyncio
112 | async def test_api_errors(
113 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
114 |     mock_aiohttp_session,
115 |     mock_subprocess,
    |

tests/integration/test_errors.py:114:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
112 | async def test_api_errors(
113 |     mock_client,
114 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
115 |     mock_subprocess,
116 |     mock_pycountry,
    |

tests/integration/test_errors.py:115:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
113 |     mock_client,
114 |     mock_aiohttp_session,
115 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
116 |     mock_pycountry,
117 |     mock_env_credentials,
    |

tests/integration/test_errors.py:116:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
114 |     mock_aiohttp_session,
115 |     mock_subprocess,
116 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
117 |     mock_env_credentials,
118 | ) -> None:
    |

tests/integration/test_errors.py:117:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
115 |     mock_subprocess,
116 |     mock_pycountry,
117 |     mock_env_credentials,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
118 | ) -> None:
119 |     """Test handling of API-related errors."""
    |

tests/integration/test_errors.py:140:5: ANN001 Missing type annotation for function argument `mock_client`
    |
138 | @pytest.mark.asyncio
139 | async def test_error_recovery(
140 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
141 |     mock_aiohttp_session,
142 |     mock_subprocess,
    |

tests/integration/test_errors.py:141:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
139 | async def test_error_recovery(
140 |     mock_client,
141 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
142 |     mock_subprocess,
143 |     mock_pycountry,
    |

tests/integration/test_errors.py:142:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
140 |     mock_client,
141 |     mock_aiohttp_session,
142 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
143 |     mock_pycountry,
144 | ) -> None:
    |

tests/integration/test_errors.py:143:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
141 |     mock_aiohttp_session,
142 |     mock_subprocess,
143 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
144 | ) -> None:
145 |     """Test error recovery behavior."""
    |

tests/integration/test_errors.py:196:11: F811 Redefinition of unused `test_network_errors` from line 17
    |
195 | @pytest.mark.asyncio
196 | async def test_network_errors() -> None:
    |           ^^^^^^^^^^^^^^^^^^^ F811
197 |     """Test handling of network errors."""
198 |     client = VPNClient(
    |
    = help: Remove definition: `test_network_errors`

tests/integration/test_errors.py:300:5: ANN001 Missing type annotation for function argument `mock_client`
    |
298 | @pytest.mark.asyncio
299 | async def test_cleanup_after_error(
300 |     mock_client,
    |     ^^^^^^^^^^^ ANN001
301 |     mock_aiohttp_session,
302 |     mock_subprocess,
    |

tests/integration/test_errors.py:301:5: ANN001 Missing type annotation for function argument `mock_aiohttp_session`
    |
299 | async def test_cleanup_after_error(
300 |     mock_client,
301 |     mock_aiohttp_session,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
302 |     mock_subprocess,
303 |     mock_pycountry,
    |

tests/integration/test_errors.py:302:5: ANN001 Missing type annotation for function argument `mock_subprocess`
    |
300 |     mock_client,
301 |     mock_aiohttp_session,
302 |     mock_subprocess,
    |     ^^^^^^^^^^^^^^^ ANN001
303 |     mock_pycountry,
304 |     mock_env_credentials,
    |

tests/integration/test_errors.py:303:5: ANN001 Missing type annotation for function argument `mock_pycountry`
    |
301 |     mock_aiohttp_session,
302 |     mock_subprocess,
303 |     mock_pycountry,
    |     ^^^^^^^^^^^^^^ ANN001
304 |     mock_env_credentials,
305 | ) -> None:
    |

tests/integration/test_errors.py:304:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
302 |     mock_subprocess,
303 |     mock_pycountry,
304 |     mock_env_credentials,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
305 | ) -> None:
306 |     """Test cleanup after errors."""
    |

tests/integration/test_validation_integration.py:12:5: ANN201 Missing return type annotation for public function `clear_env`
   |
11 | @pytest.fixture(autouse=True)
12 | def clear_env():
   |     ^^^^^^^^^ ANN201
13 |     """Clear environment variables before each test."""
14 |     os.environ.pop("NORD_USER", None)
   |
   = help: Add return type annotation

tests/integration/test_validation_integration.py:36:35: S105 Possible hardcoded password assigned to: "NORD_PASSWORD"
   |
34 |     """Test invalid country with Njord API."""
35 |     os.environ["NORD_USER"] = "test_user"
36 |     os.environ["NORD_PASSWORD"] = "test_pass"
   |                                   ^^^^^^^^^^^ S105
37 |     with pytest.raises(VPNError):
38 |         client = NjordVPNClient()
   |

tests/integration/test_validation_integration.py:37:5: PT012 `pytest.raises()` block should contain a single simple statement
   |
35 |       os.environ["NORD_USER"] = "test_user"
36 |       os.environ["NORD_PASSWORD"] = "test_pass"
37 | /     with pytest.raises(VPNError):
38 | |         client = NjordVPNClient()
39 | |         client.connect("Invalid Country")
   | |_________________________________________^ PT012
   |

tests/integration/test_validation_integration.py:45:35: S105 Possible hardcoded password assigned to: "NORD_PASSWORD"
   |
43 |     """Test invalid country with Legacy API."""
44 |     os.environ["NORD_USER"] = "test_user"
45 |     os.environ["NORD_PASSWORD"] = "test_pass"
   |                                   ^^^^^^^^^^^ S105
46 |     with pytest.raises(VPNError):
47 |         client = LegacyVPNClient()
   |

tests/integration/test_validation_integration.py:46:5: PT012 `pytest.raises()` block should contain a single simple statement
   |
44 |       os.environ["NORD_USER"] = "test_user"
45 |       os.environ["NORD_PASSWORD"] = "test_pass"
46 | /     with pytest.raises(VPNError):
47 | |         client = LegacyVPNClient()
48 | |         client.connect("Invalid Country")
   | |_________________________________________^ PT012
   |

tests/test_api.py:119:24: ANN001 Missing type annotation for function argument `sample_country`
    |
119 | def test_get_countries(sample_country) -> None:
    |                        ^^^^^^^^^^^^^^ ANN001
120 |     """Test fetching countries from the API."""
121 |     with patch("requests.get") as mock_get:
    |

tests/test_api.py:137:21: ANN001 Missing type annotation for function argument `sample_group`
    |
137 | def test_get_groups(sample_group) -> None:
    |                     ^^^^^^^^^^^^ ANN001
138 |     """Test fetching groups from the API."""
139 |     with patch("requests.get") as mock_get:
    |

tests/test_api.py:152:27: ANN001 Missing type annotation for function argument `sample_technology`
    |
152 | def test_get_technologies(sample_technology) -> None:
    |                           ^^^^^^^^^^^^^^^^^ ANN001
153 |     """Test fetching technologies from the API."""
154 |     with patch("requests.get") as mock_get:
    |

tests/test_api.py:168:22: ANN001 Missing type annotation for function argument `sample_server`
    |
168 | def test_get_servers(sample_server) -> None:
    |                      ^^^^^^^^^^^^^ ANN001
169 |     """Test fetching servers from the API."""
170 |     with patch("requests.get") as mock_get:
    |

tests/test_client.py:8:25: ANN001 Missing type annotation for function argument `mock_client`
   |
 8 | def test_client_connect(mock_client) -> None:
   |                         ^^^^^^^^^^^ ANN001
 9 |     """Test VPN client connect."""
10 |     # Test successful connection
   |

tests/test_client.py:22:28: ANN001 Missing type annotation for function argument `mock_client`
   |
22 | def test_client_disconnect(mock_client) -> None:
   |                            ^^^^^^^^^^^ ANN001
23 |     """Test VPN client disconnect."""
24 |     # Connect first
   |

tests/test_client.py:36:32: ANN001 Missing type annotation for function argument `mock_client`
   |
36 | def test_client_list_countries(mock_client) -> None:
   |                                ^^^^^^^^^^^ ANN001
37 |     """Test VPN client country listing."""
38 |     countries = mock_client.list_countries()
   |

tests/test_client.py:45:32: ANN001 Missing type annotation for function argument `mock_client`
   |
45 | def test_client_error_handling(mock_client, mocker) -> None:
   |                                ^^^^^^^^^^^ ANN001
46 |     """Test VPN client error handling."""
47 |     # Mock API to raise error
   |

tests/test_client.py:45:45: ANN001 Missing type annotation for function argument `mocker`
   |
45 | def test_client_error_handling(mock_client, mocker) -> None:
   |                                             ^^^^^^ ANN001
46 |     """Test VPN client error handling."""
47 |     # Mock API to raise error
   |

tests/test_client.py:49:9: SLF001 Private member accessed: `_connect`
   |
47 |     # Mock API to raise error
48 |     mocker.patch.object(
49 |         mock_client._connect,
   |         ^^^^^^^^^^^^^^^^^^^^ SLF001
50 |         "__call__",
51 |         side_effect=VPNError("Test error"),
   |

tests/test_client.py:60:39: ANN001 Missing type annotation for function argument `mock_client`
   |
59 | @pytest.mark.asyncio
60 | async def test_client_context_manager(mock_client) -> None:
   |                                       ^^^^^^^^^^^ ANN001
61 |     """Test VPN client context manager."""
62 |     async with mock_client as client:
   |

tests/test_legacy_api.py:12:15: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
12 | def test_init(mock_env_credentials, mock_openvpn) -> None:
   |               ^^^^^^^^^^^^^^^^^^^^ ANN001
13 |     """Test LegacyVPNClient initialization."""
14 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:12:37: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
12 | def test_init(mock_env_credentials, mock_openvpn) -> None:
   |                                     ^^^^^^^^^^^^ ANN001
13 |     """Test LegacyVPNClient initialization."""
14 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:21:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
20 | def test_connect_success(
21 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
22 |     mock_openvpn,
23 |     mock_requests,
   |

tests/test_legacy_api.py:22:5: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
20 | def test_connect_success(
21 |     mock_env_credentials,
22 |     mock_openvpn,
   |     ^^^^^^^^^^^^ ANN001
23 |     mock_requests,
24 |     mock_process,
   |

tests/test_legacy_api.py:23:5: ANN001 Missing type annotation for function argument `mock_requests`
   |
21 |     mock_env_credentials,
22 |     mock_openvpn,
23 |     mock_requests,
   |     ^^^^^^^^^^^^^ ANN001
24 |     mock_process,
25 |     mock_ip_info,
   |

tests/test_legacy_api.py:24:5: ANN001 Missing type annotation for function argument `mock_process`
   |
22 |     mock_openvpn,
23 |     mock_requests,
24 |     mock_process,
   |     ^^^^^^^^^^^^ ANN001
25 |     mock_ip_info,
26 | ) -> None:
   |

tests/test_legacy_api.py:25:5: ANN001 Missing type annotation for function argument `mock_ip_info`
   |
23 |     mock_requests,
24 |     mock_process,
25 |     mock_ip_info,
   |     ^^^^^^^^^^^^ ANN001
26 | ) -> None:
27 |     """Test successful connection."""
   |

tests/test_legacy_api.py:33:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
32 | def test_connect_failure(
33 |     mock_env_credentials,
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
34 |     mock_openvpn,
35 |     mock_requests,
   |

tests/test_legacy_api.py:34:5: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
32 | def test_connect_failure(
33 |     mock_env_credentials,
34 |     mock_openvpn,
   |     ^^^^^^^^^^^^ ANN001
35 |     mock_requests,
36 |     mock_process,
   |

tests/test_legacy_api.py:35:5: ANN001 Missing type annotation for function argument `mock_requests`
   |
33 |     mock_env_credentials,
34 |     mock_openvpn,
35 |     mock_requests,
   |     ^^^^^^^^^^^^^ ANN001
36 |     mock_process,
37 | ) -> None:
   |

tests/test_legacy_api.py:36:5: ANN001 Missing type annotation for function argument `mock_process`
   |
34 |     mock_openvpn,
35 |     mock_requests,
36 |     mock_process,
   |     ^^^^^^^^^^^^ ANN001
37 | ) -> None:
38 |     """Test connection failure."""
   |

tests/test_legacy_api.py:45:29: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
45 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                             ^^^^^^^^^^^^^^^^^^^^ ANN001
46 |     """Test successful disconnection."""
47 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:45:51: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
45 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                                                   ^^^^^^^^^^^^ ANN001
46 |     """Test successful disconnection."""
47 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:45:65: ANN001 Missing type annotation for function argument `mock_process`
   |
45 | def test_disconnect_success(mock_env_credentials, mock_openvpn, mock_process) -> None:
   |                                                                 ^^^^^^^^^^^^ ANN001
46 |     """Test successful disconnection."""
47 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:51:27: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
51 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                           ^^^^^^^^^^^^^^^^^^^^ ANN001
52 |     """Test status when connected."""
53 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:51:49: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
51 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                                                 ^^^^^^^^^^^^ ANN001
52 |     """Test status when connected."""
53 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:51:63: ANN001 Missing type annotation for function argument `mock_ip_info`
   |
51 | def test_status_connected(mock_env_credentials, mock_openvpn, mock_ip_info) -> None:
   |                                                               ^^^^^^^^^^^^ ANN001
52 |     """Test status when connected."""
53 |     api = LegacyVPNClient()
   |

tests/test_legacy_api.py:61:25: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
61 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                         ^^^^^^^^^^^^^^^^^^^^ ANN001
62 |     """Test listing available countries."""
63 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:61:47: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
61 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                               ^^^^^^^^^^^^ ANN001
62 |     """Test listing available countries."""
63 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:61:61: ANN001 Missing type annotation for function argument `mock_requests`
   |
61 | def test_list_countries(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                             ^^^^^^^^^^^^^ ANN001
62 |     """Test listing available countries."""
63 |     mock_requests.return_value.json.return_value = [
   |

tests/test_legacy_api.py:76:28: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
76 | def test_openvpn_not_found(mock_env_credentials) -> None:
   |                            ^^^^^^^^^^^^^^^^^^^^ ANN001
77 |     """Test OpenVPN not found error."""
78 |     with pytest.raises(VPNError, match="OpenVPN not found"):
   |

tests/test_legacy_api.py:82:27: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
82 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                           ^^^^^^^^^^^^^^^^^^^^ ANN001
83 |     """Test server not found error."""
84 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:82:49: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
82 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                 ^^^^^^^^^^^^ ANN001
83 |     """Test server not found error."""
84 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:82:63: ANN001 Missing type annotation for function argument `mock_requests`
   |
82 | def test_server_not_found(mock_env_credentials, mock_openvpn, mock_requests) -> None:
   |                                                               ^^^^^^^^^^^^^ ANN001
83 |     """Test server not found error."""
84 |     mock_requests.return_value.json.return_value = []
   |

tests/test_legacy_api.py:91:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
   |
90 | def test_config_download_error(
91 |     mock_env_credentials, mock_openvpn, mock_requests
   |     ^^^^^^^^^^^^^^^^^^^^ ANN001
92 | ) -> None:
93 |     """Test config download error."""
   |

tests/test_legacy_api.py:91:27: ANN001 Missing type annotation for function argument `mock_openvpn`
   |
90 | def test_config_download_error(
91 |     mock_env_credentials, mock_openvpn, mock_requests
   |                           ^^^^^^^^^^^^ ANN001
92 | ) -> None:
93 |     """Test config download error."""
   |

tests/test_legacy_api.py:91:41: ANN001 Missing type annotation for function argument `mock_requests`
   |
90 | def test_config_download_error(
91 |     mock_env_credentials, mock_openvpn, mock_requests
   |                                         ^^^^^^^^^^^^^ ANN001
92 | ) -> None:
93 |     """Test config download error."""
   |

tests/test_legacy_api.py:101:5: ANN001 Missing type annotation for function argument `mock_env_credentials`
    |
100 | def test_process_error(
101 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
102 | ) -> None:
103 |     """Test process error handling."""
    |

tests/test_legacy_api.py:101:27: ANN001 Missing type annotation for function argument `mock_openvpn`
    |
100 | def test_process_error(
101 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                           ^^^^^^^^^^^^ ANN001
102 | ) -> None:
103 |     """Test process error handling."""
    |

tests/test_legacy_api.py:101:41: ANN001 Missing type annotation for function argument `mock_requests`
    |
100 | def test_process_error(
101 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                                         ^^^^^^^^^^^^^ ANN001
102 | ) -> None:
103 |     """Test process error handling."""
    |

tests/test_legacy_api.py:101:56: ANN001 Missing type annotation for function argument `mock_process`
    |
100 | def test_process_error(
101 |     mock_env_credentials, mock_openvpn, mock_requests, mock_process
    |                                                        ^^^^^^^^^^^^ ANN001
102 | ) -> None:
103 |     """Test process error handling."""
    |

tests/test_server_manager.py:17:5: ANN201 Missing return type annotation for public function `mock_api_client`
   |
16 | @pytest.fixture
17 | def mock_api_client():
   |     ^^^^^^^^^^^^^^^ ANN201
18 |     """Create a mock API client."""
19 |     client = MagicMock(spec=NordVPNAPIClient)
   |
   = help: Add return type annotation

tests/test_server_manager.py:26:5: ANN201 Missing return type annotation for public function `server_manager`
   |
25 | @pytest.fixture
26 | def server_manager(mock_api_client):
   |     ^^^^^^^^^^^^^^ ANN201
27 |     """Create a server manager instance."""
28 |     return ServerManager(mock_api_client)
   |
   = help: Add return type annotation

tests/test_server_manager.py:26:20: ANN001 Missing type annotation for function argument `mock_api_client`
   |
25 | @pytest.fixture
26 | def server_manager(mock_api_client):
   |                    ^^^^^^^^^^^^^^^ ANN001
27 |     """Create a server manager instance."""
28 |     return ServerManager(mock_api_client)
   |

tests/test_server_manager.py:31:33: ANN001 Missing type annotation for function argument `server_manager`
   |
31 | def test_openvpn_tcp_validation(server_manager) -> None:
   |                                 ^^^^^^^^^^^^^^ ANN001
32 |     """Test OpenVPN TCP technology validation."""
33 |     # Test regular OpenVPN TCP
   |

tests/test_server_manager.py:43:12: SLF001 Private member accessed: `_is_valid_server`
   |
41 |         ],
42 |     }
43 |     assert server_manager._is_valid_server(server) is True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
44 |
45 |     # Test OpenVPN TCP Dedicated
   |

tests/test_server_manager.py:55:12: SLF001 Private member accessed: `_is_valid_server`
   |
53 |         ],
54 |     }
55 |     assert server_manager._is_valid_server(server) is True
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
56 |
57 |     # Test server without OpenVPN TCP
   |

tests/test_server_manager.py:68:12: SLF001 Private member accessed: `_is_valid_server`
   |
66 |         ],
67 |     }
68 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
69 |
70 |     # Test server with invalid technology format
   |

tests/test_server_manager.py:82:12: SLF001 Private member accessed: `_is_valid_server`
   |
80 |         ],
81 |     }
82 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
83 |
84 |     # Test server with empty technologies
   |

tests/test_server_manager.py:92:12: SLF001 Private member accessed: `_is_valid_server`
   |
90 |         "technologies": [],
91 |     }
92 |     assert server_manager._is_valid_server(server) is False
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
93 |
94 |     # Test server with invalid hostname
   |

tests/test_server_manager.py:104:12: SLF001 Private member accessed: `_is_valid_server`
    |
102 |         ],
103 |     }
104 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
105 |
106 |     # Test server with invalid status
    |

tests/test_server_manager.py:116:12: SLF001 Private member accessed: `_is_valid_server`
    |
114 |         ],
115 |     }
116 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
117 |
118 |     # Test server with invalid load
    |

tests/test_server_manager.py:128:12: SLF001 Private member accessed: `_is_valid_server`
    |
126 |         ],
127 |     }
128 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
129 |
130 |     # Test server with invalid country code
    |

tests/test_server_manager.py:140:12: SLF001 Private member accessed: `_is_valid_server`
    |
138 |         ],
139 |     }
140 |     assert server_manager._is_valid_server(server) is False
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ SLF001
    |

tests/test_server_manager.py:143:27: ANN001 Missing type annotation for function argument `server_manager`
    |
143 | def test_server_filtering(server_manager, mock_api_client) -> None:
    |                           ^^^^^^^^^^^^^^ ANN001
144 |     """Test server filtering in get_servers_cache."""
145 |     # Mock API response with various server types
    |

tests/test_server_manager.py:143:43: ANN001 Missing type annotation for function argument `mock_api_client`
    |
143 | def test_server_filtering(server_manager, mock_api_client) -> None:
    |                                           ^^^^^^^^^^^^^^^ ANN001
144 |     """Test server filtering in get_servers_cache."""
145 |     # Mock API response with various server types
    |

tests/test_v1_countries.py:36:20: ANN001 Missing type annotation for function argument `sample_city`
   |
35 | @pytest.fixture
36 | def sample_country(sample_city) -> dict:
   |                    ^^^^^^^^^^^ ANN001
37 |     """Create a sample country for testing."""
38 |     return {
   |

tests/test_v1_countries.py:48:22: ANN001 Missing type annotation for function argument `sample_country`
   |
47 | @pytest.fixture
48 | def sample_countries(sample_country) -> list[dict]:
   |                      ^^^^^^^^^^^^^^ ANN001
49 |     """Create a list of sample countries for testing."""
50 |     return [
   |

tests/test_v1_countries.py:72:26: ANN001 Missing type annotation for function argument `sample_countries`
   |
72 | def test_fetch_countries(sample_countries) -> None:
   |                          ^^^^^^^^^^^^^^^^ ANN001
73 |     """Test fetching countries from the API."""
74 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_countries.py:90:30: ANN001 Missing type annotation for function argument `sample_countries`
   |
90 | def test_get_country_by_code(sample_countries) -> None:
   |                              ^^^^^^^^^^^^^^^^ ANN001
91 |     """Test finding a country by its code."""
92 |     countries = [Country.model_validate(c) for c in sample_countries]
   |

tests/test_v1_countries.py:105:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
104 |     # Test non-existent country
105 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
106 |         get_country_by_code(countries, "XX")
    |

tests/test_v1_countries.py:109:39: ANN001 Missing type annotation for function argument `sample_countries`
    |
109 | def test_get_countries_by_min_servers(sample_countries) -> None:
    |                                       ^^^^^^^^^^^^^^^^ ANN001
110 |     """Test filtering countries by minimum server count."""
111 |     countries = [Country.model_validate(c) for c in sample_countries]
    |

tests/test_v1_countries.py:127:27: ANN001 Missing type annotation for function argument `sample_countries`
    |
127 | def test_get_city_by_name(sample_countries) -> None:
    |                           ^^^^^^^^^^^^^^^^ ANN001
128 |     """Test finding a city by name within a country."""
129 |     us = Country.model_validate(sample_countries[0])
    |

tests/test_v1_countries.py:146:24: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
145 |     # Test non-existent city
146 |     with pytest.raises(ValueError):
    |                        ^^^^^^^^^^ PT011
147 |         get_city_by_name(us, "Chicago")
    |

tests/test_v1_groups.py:32:18: ANN001 Missing type annotation for function argument `sample_group_type`
   |
31 | @pytest.fixture
32 | def sample_group(sample_group_type) -> dict:
   |                  ^^^^^^^^^^^^^^^^^ ANN001
33 |     """Create a sample group for testing."""
34 |     return {
   |

tests/test_v1_groups.py:45:19: ANN001 Missing type annotation for function argument `sample_group`
   |
44 | @pytest.fixture
45 | def sample_groups(sample_group) -> list[dict]:
   |                   ^^^^^^^^^^^^ ANN001
46 |     """Create a list of sample groups for testing."""
47 |     return [
   |

tests/test_v1_groups.py:74:23: ANN001 Missing type annotation for function argument `sample_groups`
   |
74 | def test_fetch_groups(sample_groups) -> None:
   |                       ^^^^^^^^^^^^^ ANN001
75 |     """Test fetching server groups from the API."""
76 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_groups.py:92:29: ANN001 Missing type annotation for function argument `sample_groups`
   |
92 | def test_get_groups_by_type(sample_groups) -> None:
   |                             ^^^^^^^^^^^^^ ANN001
93 |     """Test filtering groups by type identifier."""
94 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_groups.py:118:34: ANN001 Missing type annotation for function argument `sample_groups`
    |
118 | def test_get_group_by_identifier(sample_groups) -> None:
    |                                  ^^^^^^^^^^^^^ ANN001
119 |     """Test finding a group by its identifier."""
120 |     with patch("requests.get") as mock_get:
    |

tests/test_v1_groups.py:139:28: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
    |
138 |         # Test non-existent group
139 |         with pytest.raises(ValueError):
    |                            ^^^^^^^^^^ PT011
140 |             get_group_by_identifier(groups, "unknown")
    |

tests/test_v1_recommendations.py:33:20: ANN001 Missing type annotation for function argument `sample_city`
   |
32 | @pytest.fixture
33 | def sample_country(sample_city) -> dict:
   |                    ^^^^^^^^^^^ ANN001
34 |     """Create a sample country for testing."""
35 |     return {
   |

tests/test_v1_recommendations.py:44:21: ANN001 Missing type annotation for function argument `sample_country`
   |
43 | @pytest.fixture
44 | def sample_location(sample_country) -> dict:
   |                     ^^^^^^^^^^^^^^ ANN001
45 |     """Create a sample location for testing."""
46 |     return {
   |

tests/test_v1_recommendations.py:107:19: ANN001 Missing type annotation for function argument `sample_location`
    |
106 | @pytest.fixture
107 | def sample_server(sample_location, sample_group, sample_service, sample_technology) -> dict:
    |                   ^^^^^^^^^^^^^^^ ANN001
108 |     """Create a sample server for testing."""
109 |     return {
    |

tests/test_v1_recommendations.py:107:36: ANN001 Missing type annotation for function argument `sample_group`
    |
106 | @pytest.fixture
107 | def sample_server(sample_location, sample_group, sample_service, sample_technology) -> dict:
    |                                    ^^^^^^^^^^^^ ANN001
108 |     """Create a sample server for testing."""
109 |     return {
    |

tests/test_v1_recommendations.py:107:50: ANN001 Missing type annotation for function argument `sample_service`
    |
106 | @pytest.fixture
107 | def sample_server(sample_location, sample_group, sample_service, sample_technology) -> dict:
    |                                                  ^^^^^^^^^^^^^^ ANN001
108 |     """Create a sample server for testing."""
109 |     return {
    |

tests/test_v1_recommendations.py:107:66: ANN001 Missing type annotation for function argument `sample_technology`
    |
106 | @pytest.fixture
107 | def sample_server(sample_location, sample_group, sample_service, sample_technology) -> dict:
    |                                                                  ^^^^^^^^^^^^^^^^^ ANN001
108 |     """Create a sample server for testing."""
109 |     return {
    |

tests/test_v1_recommendations.py:128:32: ANN001 Missing type annotation for function argument `sample_server`
    |
128 | def test_fetch_recommendations(sample_server) -> None:
    |                                ^^^^^^^^^^^^^ ANN001
129 |     """Test fetching server recommendations from the API."""
130 |     with patch("requests.get") as mock_get:
    |

tests/test_v1_recommendations.py:151:41: ANN001 Missing type annotation for function argument `sample_server`
    |
151 | def test_get_recommendations_by_country(sample_server) -> None:
    |                                         ^^^^^^^^^^^^^ ANN001
152 |     """Test filtering recommendations by country code."""
153 |     with patch("requests.get") as mock_get:
    |

tests/test_v1_recommendations.py:175:39: ANN001 Missing type annotation for function argument `sample_server`
    |
175 | def test_get_recommendations_by_group(sample_server) -> None:
    |                                       ^^^^^^^^^^^^^ ANN001
176 |     """Test filtering recommendations by group identifier."""
177 |     with patch("requests.get") as mock_get:
    |

tests/test_v1_technologies.py:32:25: ANN001 Missing type annotation for function argument `sample_technology`
   |
31 | @pytest.fixture
32 | def sample_technologies(sample_technology) -> list[dict]:
   |                         ^^^^^^^^^^^^^^^^^ ANN001
33 |     """Create a list of sample technologies for testing."""
34 |     return [
   |

tests/test_v1_technologies.py:55:29: ANN001 Missing type annotation for function argument `sample_technologies`
   |
55 | def test_fetch_technologies(sample_technologies) -> None:
   |                             ^^^^^^^^^^^^^^^^^^^ ANN001
56 |     """Test fetching server technologies from the API."""
57 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_technologies.py:74:39: ANN001 Missing type annotation for function argument `sample_technologies`
   |
74 | def test_get_technology_by_identifier(sample_technologies) -> None:
   |                                       ^^^^^^^^^^^^^^^^^^^ ANN001
75 |     """Test finding a technology by its identifier."""
76 |     with patch("requests.get") as mock_get:
   |

tests/test_v1_technologies.py:95:28: PT011 `pytest.raises(ValueError)` is too broad, set the `match` parameter or use a more specific exception
   |
94 |         # Test non-existent technology
95 |         with pytest.raises(ValueError):
   |                            ^^^^^^^^^^ PT011
96 |             get_technology_by_identifier(technologies, "unknown")
   |

tests/test_v2_servers.py:58:22: ANN001 Missing type annotation for function argument `sample_ip`
   |
57 | @pytest.fixture
58 | def sample_server_ip(sample_ip) -> dict:
   |                      ^^^^^^^^^ ANN001
59 |     """Create a sample server IP for testing."""
60 |     return {
   |

tests/test_v2_servers.py:81:26: ANN001 Missing type annotation for function argument `sample_specification_value`
   |
80 | @pytest.fixture
81 | def sample_specification(sample_specification_value) -> dict:
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^ ANN001
82 |     """Create a sample specification for testing."""
83 |     return {
   |

tests/test_v2_servers.py:104:18: ANN001 Missing type annotation for function argument `sample_group_type`
    |
103 | @pytest.fixture
104 | def sample_group(sample_group_type) -> dict:
    |                  ^^^^^^^^^^^^^^^^^ ANN001
105 |     """Create a sample group for testing."""
106 |     return {
    |

tests/test_v2_servers.py:142:20: ANN001 Missing type annotation for function argument `sample_city`
    |
141 | @pytest.fixture
142 | def sample_country(sample_city) -> dict:
    |                    ^^^^^^^^^^^ ANN001
143 |     """Create a sample country for testing."""
144 |     return {
    |

tests/test_v2_servers.py:153:21: ANN001 Missing type annotation for function argument `sample_country`
    |
152 | @pytest.fixture
153 | def sample_location(sample_country) -> dict:
    |                     ^^^^^^^^^^^^^^ ANN001
154 |     """Create a sample location for testing."""
155 |     return {
    |

tests/test_v2_servers.py:166:5: PLR0913 Too many arguments in function definition (6 > 5)
    |
165 | @pytest.fixture
166 | def sample_server(
    |     ^^^^^^^^^^^^^ PLR0913
167 |     sample_server_ip,
168 |     sample_specification,
    |

tests/test_v2_servers.py:167:5: ANN001 Missing type annotation for function argument `sample_server_ip`
    |
165 | @pytest.fixture
166 | def sample_server(
167 |     sample_server_ip,
    |     ^^^^^^^^^^^^^^^^ ANN001
168 |     sample_specification,
169 |     sample_tech,
    |

tests/test_v2_servers.py:168:5: ANN001 Missing type annotation for function argument `sample_specification`
    |
166 | def sample_server(
167 |     sample_server_ip,
168 |     sample_specification,
    |     ^^^^^^^^^^^^^^^^^^^^ ANN001
169 |     sample_tech,
170 |     sample_group,
    |

tests/test_v2_servers.py:169:5: ANN001 Missing type annotation for function argument `sample_tech`
    |
167 |     sample_server_ip,
168 |     sample_specification,
169 |     sample_tech,
    |     ^^^^^^^^^^^ ANN001
170 |     sample_group,
171 |     sample_service,
    |

tests/test_v2_servers.py:170:5: ANN001 Missing type annotation for function argument `sample_group`
    |
168 |     sample_specification,
169 |     sample_tech,
170 |     sample_group,
    |     ^^^^^^^^^^^^ ANN001
171 |     sample_service,
172 |     sample_location,
    |

tests/test_v2_servers.py:171:5: ANN001 Missing type annotation for function argument `sample_service`
    |
169 |     sample_tech,
170 |     sample_group,
171 |     sample_service,
    |     ^^^^^^^^^^^^^^ ANN001
172 |     sample_location,
173 | ) -> dict:
    |

tests/test_v2_servers.py:172:5: ANN001 Missing type annotation for function argument `sample_location`
    |
170 |     sample_group,
171 |     sample_service,
172 |     sample_location,
    |     ^^^^^^^^^^^^^^^ ANN001
173 | ) -> dict:
174 |     """Create a sample server for testing."""
    |

tests/test_v2_servers.py:196:5: ANN001 Missing type annotation for function argument `sample_server`
    |
194 | @pytest.fixture
195 | def sample_api_response(
196 |     sample_server,
    |     ^^^^^^^^^^^^^ ANN001
197 |     sample_group,
198 |     sample_service,
    |

tests/test_v2_servers.py:197:5: ANN001 Missing type annotation for function argument `sample_group`
    |
195 | def sample_api_response(
196 |     sample_server,
197 |     sample_group,
    |     ^^^^^^^^^^^^ ANN001
198 |     sample_service,
199 |     sample_location,
    |

tests/test_v2_servers.py:198:5: ANN001 Missing type annotation for function argument `sample_service`
    |
196 |     sample_server,
197 |     sample_group,
198 |     sample_service,
    |     ^^^^^^^^^^^^^^ ANN001
199 |     sample_location,
200 |     sample_tech,
    |

tests/test_v2_servers.py:199:5: ANN001 Missing type annotation for function argument `sample_location`
    |
197 |     sample_group,
198 |     sample_service,
199 |     sample_location,
    |     ^^^^^^^^^^^^^^^ ANN001
200 |     sample_tech,
201 | ) -> dict:
    |

tests/test_v2_servers.py:200:5: ANN001 Missing type annotation for function argument `sample_tech`
    |
198 |     sample_service,
199 |     sample_location,
200 |     sample_tech,
    |     ^^^^^^^^^^^ ANN001
201 | ) -> dict:
202 |     """Create a sample API response for testing."""
    |

tests/test_v2_servers.py:212:20: ANN001 Missing type annotation for function argument `sample_api_response`
    |
212 | def test_fetch_all(sample_api_response) -> None:
    |                    ^^^^^^^^^^^^^^^^^^^ ANN001
213 |     """Test fetching all server data from the API."""
214 |     with patch("requests.get") as mock_get:
    |

tests/test_v2_servers.py:255:33: ANN001 Missing type annotation for function argument `sample_api_response`
    |
255 | def test_get_servers_by_country(sample_api_response) -> None:
    |                                 ^^^^^^^^^^^^^^^^^^^ ANN001
256 |     """Test filtering servers by country code."""
257 |     with patch("requests.get") as mock_get:
    |

tests/test_v2_servers.py:279:31: ANN001 Missing type annotation for function argument `sample_api_response`
    |
279 | def test_get_servers_by_group(sample_api_response) -> None:
    |                               ^^^^^^^^^^^^^^^^^^^ ANN001
280 |     """Test filtering servers by group identifier."""
281 |     with patch("requests.get") as mock_get:
    |

Found 601 errors (140 fixed, 461 remaining).

2025-02-24 21:52:28 - 12 files reformatted, 34 files left unchanged

2025-02-24 21:52:28 - >>>
>>> Running type checks...
>>> TODO: Check the errors!
>>>
2025-02-24 21:52:28 - >>>
>>> Checking for _potentially_ unused code...
>>> TODO: Check the errors!
>>>
2025-02-24 21:52:29 - src/nyord_vpn/__main__.py:68: unused method 'update' (60% confidence)
src/nyord_vpn/api/api.py:52: unused variable 'T' (60% confidence)
src/nyord_vpn/api/api.py:134: unused method 'get_technologies' (60% confidence)
src/nyord_vpn/api/api.py:386: unused method 'get_server_stats' (60% confidence)
src/nyord_vpn/api/v1_countries.py:39: unused variable 'latitude' (60% confidence)
src/nyord_vpn/api/v1_countries.py:40: unused variable 'longitude' (60% confidence)
src/nyord_vpn/api/v1_countries.py:41: unused variable 'dns_name' (60% confidence)
src/nyord_vpn/api/v1_countries.py:42: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/api/v1_countries.py:144: unused function 'get_countries_by_min_servers' (60% confidence)
src/nyord_vpn/api/v1_countries.py:169: unused function 'get_city_by_name' (60% confidence)
src/nyord_vpn/api/v1_groups.py:40: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_groups.py:41: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_groups.py:42: unused variable 'title' (60% confidence)
src/nyord_vpn/api/v1_groups.py:50: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_groups.py:51: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_groups.py:52: unused variable 'title' (60% confidence)
src/nyord_vpn/api/v1_groups.py:116: unused function 'get_groups_by_type' (60% confidence)
src/nyord_vpn/api/v1_groups.py:139: unused function 'get_group_by_identifier' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:41: unused variable 'latitude' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:42: unused variable 'longitude' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:43: unused variable 'dns_name' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:44: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:60: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:61: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:62: unused variable 'latitude' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:63: unused variable 'longitude' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:73: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:74: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:87: unused variable 'technology_id' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:88: unused variable 'server_id' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:98: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:99: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:101: unused variable 'pivot' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:108: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:109: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:110: unused variable 'title' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:118: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:119: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:120: unused variable 'title' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:136: unused variable 'title' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:146: unused variable 'version' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:153: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:154: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:155: unused variable 'server_id' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:156: unused variable 'ip_id' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:165: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:166: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:169: unused variable 'ipv6_station' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:174: unused variable 'services' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:177: unused variable 'specifications' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:178: unused variable 'ips' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:240: unused function 'get_recommendations_by_country' (60% confidence)
src/nyord_vpn/api/v1_recommendations.py:270: unused function 'get_recommendations_by_group' (60% confidence)
src/nyord_vpn/api/v1_technologies.py:42: unused variable 'internal_identifier' (60% confidence)
src/nyord_vpn/api/v1_technologies.py:43: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v1_technologies.py:44: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v1_technologies.py:106: unused function 'get_technology_by_identifier' (60% confidence)
src/nyord_vpn/api/v2_servers.py:31: unused variable 'T' (60% confidence)
src/nyord_vpn/api/v2_servers.py:55: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:56: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:66: unused variable 'version' (60% confidence)
src/nyord_vpn/api/v2_servers.py:73: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:74: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:75: unused variable 'server_id' (60% confidence)
src/nyord_vpn/api/v2_servers.py:76: unused variable 'ip_id' (60% confidence)
src/nyord_vpn/api/v2_servers.py:92: unused variable 'title' (60% confidence)
src/nyord_vpn/api/v2_servers.py:101: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:102: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:103: unused variable 'title' (60% confidence)
src/nyord_vpn/api/v2_servers.py:111: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:112: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:113: unused variable 'title' (60% confidence)
src/nyord_vpn/api/v2_servers.py:124: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:125: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:133: unused variable 'latitude' (60% confidence)
src/nyord_vpn/api/v2_servers.py:134: unused variable 'longitude' (60% confidence)
src/nyord_vpn/api/v2_servers.py:135: unused variable 'dns_name' (60% confidence)
src/nyord_vpn/api/v2_servers.py:136: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/api/v2_servers.py:152: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:153: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:154: unused variable 'latitude' (60% confidence)
src/nyord_vpn/api/v2_servers.py:155: unused variable 'longitude' (60% confidence)
src/nyord_vpn/api/v2_servers.py:185: unused variable 'created_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:186: unused variable 'updated_at' (60% confidence)
src/nyord_vpn/api/v2_servers.py:189: unused variable 'ipv6_station' (60% confidence)
src/nyord_vpn/api/v2_servers.py:193: unused variable 'ips' (60% confidence)
src/nyord_vpn/api/v2_servers.py:194: unused variable 'specifications' (60% confidence)
src/nyord_vpn/api/v2_servers.py:197: unused variable 'services' (60% confidence)
src/nyord_vpn/api/v2_servers.py:320: unused attribute 'services' (60% confidence)
src/nyord_vpn/api/v2_servers.py:339: unused function 'get_servers_by_country' (60% confidence)
src/nyord_vpn/api/v2_servers.py:361: unused function 'get_servers_by_group' (60% confidence)
src/nyord_vpn/core/api.py:199: unused method 'get_country_by_name' (60% confidence)
src/nyord_vpn/core/api.py:224: unused method 'get_available_locations' (60% confidence)
src/nyord_vpn/core/api.py:250: unused method 'get_best_city' (60% confidence)
src/nyord_vpn/core/api.py:309: unused method 'get_cities' (60% confidence)
src/nyord_vpn/core/api.py:334: unused method 'test_api_connectivity' (60% confidence)
src/nyord_vpn/core/base.py:93: unused class 'NordVPNClient' (60% confidence)
src/nyord_vpn/core/base.py:100: unused variable 'BASE_API_URL' (60% confidence)
src/nyord_vpn/core/base.py:168: unused method 'get_country_by_name' (60% confidence)
src/nyord_vpn/core/base.py:193: unused method 'get_available_locations' (60% confidence)
src/nyord_vpn/core/base.py:221: unused method 'get_best_city' (60% confidence)
src/nyord_vpn/core/client.py:85: unused variable 'dns_name' (60% confidence)
src/nyord_vpn/core/client.py:86: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/core/client.py:88: unused variable 'latitude' (60% confidence)
src/nyord_vpn/core/client.py:89: unused variable 'longitude' (60% confidence)
src/nyord_vpn/core/client.py:91: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/core/client.py:101: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/core/client.py:388: unused method 'init' (60% confidence)
src/nyord_vpn/core/client.py:433: unused method '_save_state' (60% confidence)
src/nyord_vpn/exceptions.py:91: unused class 'ServerNotFoundError' (60% confidence)
src/nyord_vpn/exceptions.py:123: unused class 'VPNServerError' (60% confidence)
src/nyord_vpn/exceptions.py:155: unused class 'VPNTimeoutError' (60% confidence)
src/nyord_vpn/exceptions.py:171: unused class 'VPNProcessError' (60% confidence)
src/nyord_vpn/exceptions.py:203: unused class 'VPNDisconnectionError' (60% confidence)
src/nyord_vpn/network/server.py:111: unused function '_safe_get' (60% confidence)
src/nyord_vpn/network/server.py:118: unused function '_safe_str_get' (60% confidence)
src/nyord_vpn/network/server.py:128: unused function '_safe_dict_access' (60% confidence)
src/nyord_vpn/network/server.py:135: unused function '_safe_dict_cast' (60% confidence)
src/nyord_vpn/network/server.py:142: unused function '_safe_dict_get_str' (60% confidence)
src/nyord_vpn/network/server.py:148: unused function '_safe_dict_get_int' (60% confidence)
src/nyord_vpn/network/server.py:380: unused method 'fetch_server_info' (60% confidence)
src/nyord_vpn/network/server.py:452: unused variable 'technologies_data' (60% confidence)
src/nyord_vpn/network/server.py:730: unused method '_is_valid_server' (60% confidence)
src/nyord_vpn/network/server.py:978: unused method 'get_country_info' (60% confidence)
src/nyord_vpn/network/server.py:1035: unused method 'get_random_country' (60% confidence)
src/nyord_vpn/network/vpn.py:127: unused attribute '_cached_ip' (60% confidence)
src/nyord_vpn/network/vpn.py:128: unused attribute '_cached_ip_time' (60% confidence)
src/nyord_vpn/network/vpn.py:129: unused attribute '_ip_cache_ttl' (60% confidence)
src/nyord_vpn/network/vpn.py:384: unused method '_save_state' (60% confidence)
src/nyord_vpn/network/vpn.py:1064: unused method 'check_connection_state' (60% confidence)
src/nyord_vpn/network/vpn.py:1112: unused attribute '_cached_ip' (60% confidence)
src/nyord_vpn/network/vpn.py:1113: unused attribute '_cached_ip_time' (60% confidence)
src/nyord_vpn/network/vpn_commands.py:54: unused variable 'SILENT' (60% confidence)
src/nyord_vpn/network/vpn_commands.py:55: unused variable 'ERROR' (60% confidence)
src/nyord_vpn/network/vpn_commands.py:56: unused variable 'WARNING' (60% confidence)
src/nyord_vpn/network/vpn_commands.py:57: unused variable 'NORMAL' (60% confidence)
src/nyord_vpn/network/vpn_commands.py:59: unused variable 'DEBUG' (60% confidence)
src/nyord_vpn/network/vpn_commands.py:436: unused function 'create_default_config' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:22: unused variable 'dns_name' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:23: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:25: unused variable 'latitude' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:26: unused variable 'longitude' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:28: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/scripts/update_countries.py:38: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/storage/models.py:61: unused variable 'dns_name' (60% confidence)
src/nyord_vpn/storage/models.py:62: unused variable 'hub_score' (60% confidence)
src/nyord_vpn/storage/models.py:64: unused variable 'latitude' (60% confidence)
src/nyord_vpn/storage/models.py:65: unused variable 'longitude' (60% confidence)
src/nyord_vpn/storage/models.py:67: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/storage/models.py:95: unused variable 'serverCount' (60% confidence)
src/nyord_vpn/storage/models.py:169: unused class 'AuthenticationError' (60% confidence)
src/nyord_vpn/storage/models.py:228: unused class 'StateError' (60% confidence)
src/nyord_vpn/storage/models.py:255: unused class 'CacheError' (60% confidence)
src/nyord_vpn/utils/connection.py:41: unused function 'is_openvpn_running' (60% confidence)
src/nyord_vpn/utils/connection.py:65: unused function 'compute_connection_status' (60% confidence)
src/nyord_vpn/utils/utils.py:91: unused variable 'OPENVPN_CONFIG' (60% confidence)
src/nyord_vpn/utils/utils.py:171: unused function 'is_process_running' (60% confidence)
src/nyord_vpn/utils/utils.py:202: unused variable 'NORDVPN_COUNTRY_IDS' (60% confidence)
src/nyord_vpn/utils/utils.py:205: unused variable 'NORDVPN_COUNTRY_IDS' (60% confidence)

2025-02-24 21:52:29 - >>>
>>> Running tests...
>>> TODO: Try to fix the problems, always think whether the test actually makes sense, then adjust the implementation or the test!
>>>
2025-02-24 21:52:35 - ============================= test session starts ==============================
platform darwin -- Python 3.12.8, pytest-8.3.4, pluggy-1.5.0 -- /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python
cachedir: .pytest_cache
rootdir: /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn
configfile: pyproject.toml
plugins: cov-6.0.0, asyncio-0.25.3, timeout-2.3.1, mock-3.14.0, xdist-3.6.1
asyncio: mode=Mode.STRICT, asyncio_default_fixture_loop_scope=function
timeout: 30.0s
timeout method: signal
timeout func_only: False
created: 8/8 workers
8 workers [22 items]

scheduling tests via LoadScheduling

tests/test_api.py::test_get_countries 
tests/test_server_manager.py::test_server_filtering 
tests/test_api.py::test_get_technologies 
tests/test_package.py::test_version 
tests/test_v1_recommendations.py::test_fetch_recommendations 
tests/test_v1_groups.py::test_get_groups_by_type 
tests/test_v1_countries.py::test_get_country_by_code 
tests/test_v1_countries.py::test_get_city_by_name 
[gw2] [  4%] PASSED tests/test_package.py::test_version 
[gw5] [  9%] PASSED tests/test_v1_countries.py::test_get_city_by_name 
[gw4] [ 13%] PASSED tests/test_v1_countries.py::test_get_country_by_code 
tests/test_server_manager.py::test_openvpn_tcp_validation 
[gw7] [ 18%] PASSED tests/test_v1_recommendations.py::test_fetch_recommendations 
tests/test_v1_groups.py::test_fetch_groups 
tests/test_v1_countries.py::test_get_countries_by_min_servers 
[gw4] [ 22%] PASSED tests/test_v1_countries.py::test_get_countries_by_min_servers 
tests/test_v1_recommendations.py::test_get_recommendations_by_country 
tests/test_v1_technologies.py::test_get_technology_by_identifier 
[gw1] [ 27%] PASSED tests/test_api.py::test_get_technologies 
[gw7] [ 31%] PASSED tests/test_v1_recommendations.py::test_get_recommendations_by_country 
tests/test_api.py::test_get_servers 
[gw4] [ 36%] PASSED tests/test_v1_technologies.py::test_get_technology_by_identifier 
tests/test_v2_servers.py::test_fetch_all 
tests/test_v2_servers.py::test_get_servers_by_country 
[gw2] [ 40%] FAILED tests/test_server_manager.py::test_openvpn_tcp_validation 
tests/test_v1_recommendations.py::test_get_recommendations_by_group 
[gw2] [ 45%] PASSED tests/test_v1_recommendations.py::test_get_recommendations_by_group 
[gw6] [ 50%] FAILED tests/test_v1_groups.py::test_get_groups_by_type 
tests/test_v1_groups.py::test_get_group_by_identifier 
[gw4] [ 54%] FAILED tests/test_v2_servers.py::test_get_servers_by_country 
[gw7] [ 59%] FAILED tests/test_v2_servers.py::test_fetch_all 
[gw5] [ 63%] FAILED tests/test_v1_groups.py::test_fetch_groups 
tests/test_v1_technologies.py::test_fetch_technologies 
[gw5] [ 68%] PASSED tests/test_v1_technologies.py::test_fetch_technologies 
[gw0] [ 72%] FAILED tests/test_api.py::test_get_countries 
tests/test_api.py::test_get_groups 
[gw6] [ 77%] FAILED tests/test_v1_groups.py::test_get_group_by_identifier 
[gw1] [ 81%] FAILED tests/test_api.py::test_get_servers 
tests/test_v2_servers.py::test_get_servers_by_group 
[gw0] [ 86%] FAILED tests/test_api.py::test_get_groups 
[gw3] [ 90%] FAILED tests/test_server_manager.py::test_server_filtering 
tests/test_v1_countries.py::test_fetch_countries 
[gw3] [ 95%] PASSED tests/test_v1_countries.py::test_fetch_countries 
[gw1] [100%] FAILED tests/test_v2_servers.py::test_get_servers_by_group 

==================================== ERRORS ====================================
__________ ERROR collecting tests/integration/test_config_loading.py ___________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/integration/test_config_loading.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_config_loading.py:7: in <module>
    from nyord_vpn.core.client import VPNClient
E   ImportError: cannot import name 'VPNClient' from 'nyord_vpn.core.client' (/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/src/nyord_vpn/core/client.py). Did you mean: 'Client'?
____________ ERROR collecting tests/integration/test_connection.py _____________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/integration/test_connection.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_connection.py:6: in <module>
    from nyord_vpn.core.exceptions import VPNError, VPNConnectionError
E   ModuleNotFoundError: No module named 'nyord_vpn.core.exceptions'
______________ ERROR collecting tests/integration/test_errors.py _______________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/integration/test_errors.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_errors.py:10: in <module>
    from nyord_vpn.core.client import VPNClient
E   ImportError: cannot import name 'VPNClient' from 'nyord_vpn.core.client' (/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/src/nyord_vpn/core/client.py). Did you mean: 'Client'?
______ ERROR collecting tests/integration/test_validation_integration.py _______
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/integration/test_validation_integration.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/integration/test_validation_integration.py:6: in <module>
    from nyord_vpn.core.exceptions import VPNError
E   ModuleNotFoundError: No module named 'nyord_vpn.core.exceptions'
____________________ ERROR collecting tests/test_client.py _____________________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/test_client.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_client.py:5: in <module>
    from nyord_vpn.core.exceptions import VPNError
E   ModuleNotFoundError: No module named 'nyord_vpn.core.exceptions'
__________________ ERROR collecting tests/test_legacy_api.py ___________________
ImportError while importing test module '/Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/tests/test_legacy_api.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/importlib/__init__.py:90: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
tests/test_legacy_api.py:8: in <module>
    from nyord_vpn.core.exceptions import VPNError
E   ModuleNotFoundError: No module named 'nyord_vpn.core.exceptions'
=================================== FAILURES ===================================
_________________________ test_openvpn_tcp_validation __________________________
[gw2] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

server_manager = <nyord_vpn.network.server.ServerManager object at 0x1065ecdd0>

    def test_openvpn_tcp_validation(server_manager) -> None:
        """Test OpenVPN TCP technology validation."""
        # Test regular OpenVPN TCP
        server = {
            "hostname": "test.nordvpn.com",
            "status": "online",
            "load": 50,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 5, "name": "OpenVPN TCP", "status": "online"},
            ],
        }
        assert server_manager._is_valid_server(server) is True
    
        # Test OpenVPN TCP Dedicated
        server = {
            "hostname": "test.nordvpn.com",
            "status": "online",
            "load": 50,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 45, "name": "OpenVPN TCP Dedicated", "status": "online"},
            ],
        }
        assert server_manager._is_valid_server(server) is True
    
        # Test server without OpenVPN TCP
        server = {
            "hostname": "test.nordvpn.com",
            "status": "online",
            "load": 50,
            "country": {"code": "US", "name": "United States"},
            "technologies": [
                {"id": 3, "name": "OpenVPN UDP", "status": "online"},
                {"id": 35, "name": "Wireguard", "status": "online"},
            ],
        }
>       assert server_manager._is_valid_server(server) is False
E       AssertionError: assert True is False
E        +  where True = _is_valid_server({'country': {'code': 'US', 'name': 'United States'}, 'hostname': 'test.nordvpn.com', 'load': 50, 'status': 'online', ...})
E        +    where _is_valid_server = <nyord_vpn.network.server.ServerManager object at 0x1065ecdd0>._is_valid_server

tests/test_server_manager.py:68: AssertionError
___________________________ test_get_groups_by_type ____________________________
[gw6] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v1_groups.NordVPNGroupsV1 object at 0x10834da00>

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.
    
        Returns:
            List of server groups.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
>           return [Group.model_validate(group) for group in data]
E           pydantic_core._pydantic_core.ValidationError: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x108949440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type

src/nyord_vpn/api/v1_groups.py:98: ValidationError

During handling of the above exception, another exception occurred:

sample_groups = [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}, {'created_at': '202... 'Standard VPN', ...}, {'created_at': '2024-01-01T00:00:00Z', 'id': 3, 'identifier': 'europe', 'title': 'Europe', ...}]

    def test_get_groups_by_type(sample_groups) -> None:
        """Test filtering groups by type identifier."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_groups
            mock_get.return_value = mock_response
    
            client = NordVPNGroupsV1()
>           groups = client.fetch_groups()

tests/test_v1_groups.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v1_groups.NordVPNGroupsV1 object at 0x10834da00>

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.
    
        Returns:
            List of server groups.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            return [Group.model_validate(group) for group in data]
    
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN server groups: {e}")
            raise VPNAPIError(
                "Failed to fetch server groups from v1 API",
                details=str(e),
                cause=e,
            )
        except (ValueError, TypeError) as e:
            logger.error(f"Failed to parse NordVPN server groups: {e}")
>           raise VPNAPIError(
                "Failed to parse server groups from v1 API",
                details=str(e),
                cause=e,
            )
E           nyord_vpn.exceptions.VPNAPIError: Failed to parse server groups from v1 API
E           Details: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x108949440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type
E           Cause: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x108949440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type

src/nyord_vpn/api/v1_groups.py:109: VPNAPIError
----------------------------- Captured stdout call -----------------------------
[02/24/25 21:52:34] ERROR    2025-02-24 21:52:34.971 | ERROR    v1_groups.py:108
                             |                                                  
                             nyord_vpn.api.v1_groups:fetch_grou                 
                             ps:108 - Failed to parse NordVPN                   
                             server groups: 1 validation error                  
                             for Group                                          
                             type                                               
                               Input should be a valid                          
                             dictionary or instance of                          
                             GroupType [type=model_type,                        
                             input_value=<function                              
                             sample_group_type at 0x108949440>,                 
                             input_type=function]                               
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/v                 
                             /model_type                                        
_________________________ test_get_servers_by_country __________________________
[gw4] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

sample_api_response = {'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}], 'locati... 1, ...}], 'services': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'name': 'P2P', ...}], ...}

    def test_get_servers_by_country(sample_api_response) -> None:
        """Test filtering servers by country code."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_api_response
            mock_get.return_value = mock_response
    
            client = NordVPNServersV2()
            servers, *_ = client.fetch_all()
    
            # Test finding US servers
            us_servers = get_servers_by_country(servers, "US")
>           assert len(us_servers) == 1
E           assert 0 == 1
E            +  where 0 = len([])

tests/test_v2_servers.py:247: AssertionError
________________________________ test_fetch_all ________________________________
[gw7] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

sample_api_response = {'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}], 'locati... 1, ...}], 'services': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'name': 'P2P', ...}], ...}

    def test_fetch_all(sample_api_response) -> None:
        """Test fetching all server data from the API."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_api_response
            mock_get.return_value = mock_response
    
            client = NordVPNServersV2()
            servers, groups, services, locations, technologies = client.fetch_all()
    
            # Test server data
            assert len(servers) == 1
            server = servers[0]
            assert server.name == "us1234.nordvpn.com"
            assert server.station == "us1234"
            assert server.load == 45
            assert server.status == "online"
    
            # Test server relationships
            assert len(server.ips) == 1
            assert server.ips[0].ip.ip == "192.168.1.1"
            assert len(server.specifications) == 1
            assert server.specifications[0].title == "Bandwidth"
            assert len(server.technologies) == 1
            assert server.technologies[0].name == "OpenVPN UDP"
>           assert len(server.groups) == 1
E           AssertionError: assert 0 == 1
E            +  where 0 = len([])
E            +    where [] = Server(id=1, created_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), name='us1234.nordvpn.com', station='us1234', ipv6_station='', hostname='us1234.nordvpn.com', status='online', load=45, ips=[ServerIP(id=1, created_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), server_id=1, ip_id=1, type='primary', ip=IP(id=1, ip='192.168.1.1', version=4))], specifications=[Specification(id=1, title='Bandwidth', identifier='bandwidth', values=[SpecificationValue(id=1, value='1 Gbps')])], technologies=[Technology(id=1, name='OpenVPN UDP', identifier='openvpn_udp', created_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), updated_at=datetime.datetime(2024, 1, 1, 0, 0, tzinfo=TzInfo(UTC)), status='active', metadata=[TechnologyMetadata(name='port', value='1194')])], groups=[], services=[], locations=[]).groups

tests/test_v2_servers.py:217: AssertionError
______________________________ test_fetch_groups _______________________________
[gw5] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v1_groups.NordVPNGroupsV1 object at 0x10c7177d0>

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.
    
        Returns:
            List of server groups.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
>           return [Group.model_validate(group) for group in data]
E           pydantic_core._pydantic_core.ValidationError: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x10c67d440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type

src/nyord_vpn/api/v1_groups.py:98: ValidationError

During handling of the above exception, another exception occurred:

sample_groups = [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}, {'created_at': '202... 'Standard VPN', ...}, {'created_at': '2024-01-01T00:00:00Z', 'id': 3, 'identifier': 'europe', 'title': 'Europe', ...}]

    def test_fetch_groups(sample_groups) -> None:
        """Test fetching server groups from the API."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_groups
            mock_get.return_value = mock_response
    
            client = NordVPNGroupsV1()
>           groups = client.fetch_groups()

tests/test_v1_groups.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v1_groups.NordVPNGroupsV1 object at 0x10c7177d0>

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.
    
        Returns:
            List of server groups.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            return [Group.model_validate(group) for group in data]
    
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN server groups: {e}")
            raise VPNAPIError(
                "Failed to fetch server groups from v1 API",
                details=str(e),
                cause=e,
            )
        except (ValueError, TypeError) as e:
            logger.error(f"Failed to parse NordVPN server groups: {e}")
>           raise VPNAPIError(
                "Failed to parse server groups from v1 API",
                details=str(e),
                cause=e,
            )
E           nyord_vpn.exceptions.VPNAPIError: Failed to parse server groups from v1 API
E           Details: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x10c67d440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type
E           Cause: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x10c67d440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type

src/nyord_vpn/api/v1_groups.py:109: VPNAPIError
----------------------------- Captured stdout call -----------------------------
[02/24/25 21:52:34] ERROR    2025-02-24 21:52:34.975 | ERROR    v1_groups.py:108
                             |                                                  
                             nyord_vpn.api.v1_groups:fetch_grou                 
                             ps:108 - Failed to parse NordVPN                   
                             server groups: 1 validation error                  
                             for Group                                          
                             type                                               
                               Input should be a valid                          
                             dictionary or instance of                          
                             GroupType [type=model_type,                        
                             input_value=<function                              
                             sample_group_type at 0x10c67d440>,                 
                             input_type=function]                               
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/v                 
                             /model_type                                        
______________________________ test_get_countries ______________________________
[gw0] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v1_countries.NordVPNCountriesV1 object at 0x10e03f440>

    def fetch_countries(self) -> list[Country]:
        """Fetch available countries and their server information from the v1 API.
    
        Returns:
            List of countries with server information.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(COUNTRIES_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
>           return [Country.model_validate(country) for country in data]
E           pydantic_core._pydantic_core.ValidationError: 2 validation errors for Country
E           server_count
E             Field required [type=missing, input_value={'id': 1, 'name': 'United...om', 'hub_score': 1.0}]}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing
E           cities.0.server_count
E             Field required [type=missing, input_value={'id': 1, 'name': 'New Yo....com', 'hub_score': 1.0}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing

src/nyord_vpn/api/v1_countries.py:97: ValidationError

During handling of the above exception, another exception occurred:

sample_country = {'cities': [{'dns_name': 'us-nyc.nordvpn.com', 'hub_score': 1.0, 'id': 1, 'latitude': 40.7128, ...}], 'code': 'US', 'id': 1, 'name': 'United States'}

    def test_get_countries(sample_country) -> None:
        """Test fetching countries from the API."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = [sample_country]
            mock_get.return_value = mock_response
    
            client = NordVPNAPI()
>           countries = client.get_countries()

tests/test_api.py:127: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/nyord_vpn/api/api.py:220: in get_countries
    self._countries = self.countries.fetch_countries()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v1_countries.NordVPNCountriesV1 object at 0x10e03f440>

    def fetch_countries(self) -> list[Country]:
        """Fetch available countries and their server information from the v1 API.
    
        Returns:
            List of countries with server information.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(COUNTRIES_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            return [Country.model_validate(country) for country in data]
    
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN countries: {e}")
            raise VPNAPIError(
                "Failed to fetch countries from v1 API",
                details=str(e),
                cause=e,
            )
        except (ValueError, TypeError) as e:
            logger.error(f"Failed to parse NordVPN countries: {e}")
>           raise VPNAPIError(
                "Failed to parse countries from v1 API",
                details=str(e),
                cause=e,
            )
E           nyord_vpn.exceptions.VPNAPIError: Failed to parse countries from v1 API
E           Details: 2 validation errors for Country
E           server_count
E             Field required [type=missing, input_value={'id': 1, 'name': 'United...om', 'hub_score': 1.0}]}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing
E           cities.0.server_count
E             Field required [type=missing, input_value={'id': 1, 'name': 'New Yo....com', 'hub_score': 1.0}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing
E           Cause: 2 validation errors for Country
E           server_count
E             Field required [type=missing, input_value={'id': 1, 'name': 'United...om', 'hub_score': 1.0}]}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing
E           cities.0.server_count
E             Field required [type=missing, input_value={'id': 1, 'name': 'New Yo....com', 'hub_score': 1.0}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing

src/nyord_vpn/api/v1_countries.py:108: VPNAPIError
----------------------------- Captured stdout call -----------------------------
[02/24/25 21:52:34] ERROR    2025-02-24 21:52:34.975 | ERROR v1_countries.py:107
                             |                                                  
                             nyord_vpn.api.v1_countries:fetc                    
                             h_countries:107 - Failed to                        
                             parse NordVPN countries: 2                         
                             validation errors for Country                      
                             server_count                                       
                               Field required [type=missing,                    
                             input_value={'id': 1, 'name':                      
                             'United...om', 'hub_score':                        
                             1.0}]}, input_type=dict]                           
                                 For further information                        
                             visit                                              
                             https://errors.pydantic.dev/2.1                    
                             0/v/missing                                        
                             cities.0.server_count                              
                               Field required [type=missing,                    
                             input_value={'id': 1, 'name':                      
                             'New Yo....com', 'hub_score':                      
                             1.0}, input_type=dict]                             
                                 For further information                        
                             visit                                              
                             https://errors.pydantic.dev/2.1                    
                             0/v/missing                                        
_________________________ test_get_group_by_identifier _________________________
[gw6] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v1_groups.NordVPNGroupsV1 object at 0x108932ed0>

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.
    
        Returns:
            List of server groups.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
>           return [Group.model_validate(group) for group in data]
E           pydantic_core._pydantic_core.ValidationError: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x108949440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type

src/nyord_vpn/api/v1_groups.py:98: ValidationError

During handling of the above exception, another exception occurred:

sample_groups = [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}, {'created_at': '202... 'Standard VPN', ...}, {'created_at': '2024-01-01T00:00:00Z', 'id': 3, 'identifier': 'europe', 'title': 'Europe', ...}]

    def test_get_group_by_identifier(sample_groups) -> None:
        """Test finding a group by its identifier."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_groups
            mock_get.return_value = mock_response
    
            client = NordVPNGroupsV1()
>           groups = client.fetch_groups()

tests/test_v1_groups.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v1_groups.NordVPNGroupsV1 object at 0x108932ed0>

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.
    
        Returns:
            List of server groups.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            return [Group.model_validate(group) for group in data]
    
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN server groups: {e}")
            raise VPNAPIError(
                "Failed to fetch server groups from v1 API",
                details=str(e),
                cause=e,
            )
        except (ValueError, TypeError) as e:
            logger.error(f"Failed to parse NordVPN server groups: {e}")
>           raise VPNAPIError(
                "Failed to parse server groups from v1 API",
                details=str(e),
                cause=e,
            )
E           nyord_vpn.exceptions.VPNAPIError: Failed to parse server groups from v1 API
E           Details: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x108949440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type
E           Cause: 1 validation error for Group
E           type
E             Input should be a valid dictionary or instance of GroupType [type=model_type, input_value=<function sample_group_type at 0x108949440>, input_type=function]
E               For further information visit https://errors.pydantic.dev/2.10/v/model_type

src/nyord_vpn/api/v1_groups.py:109: VPNAPIError
----------------------------- Captured stdout call -----------------------------
                    ERROR    2025-02-24 21:52:34.996 | ERROR    v1_groups.py:108
                             |                                                  
                             nyord_vpn.api.v1_groups:fetch_grou                 
                             ps:108 - Failed to parse NordVPN                   
                             server groups: 1 validation error                  
                             for Group                                          
                             type                                               
                               Input should be a valid                          
                             dictionary or instance of                          
                             GroupType [type=model_type,                        
                             input_value=<function                              
                             sample_group_type at 0x108949440>,                 
                             input_type=function]                               
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/v                 
                             /model_type                                        
_______________________________ test_get_servers _______________________________
[gw1] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v2_servers.NordVPNServersV2 object at 0x1129dc500>

    def fetch_all(
        self,
    ) -> tuple[
        list[Server], list[Group], list[Service], list[Location], list[Technology]
    ]:
        """Fetch and parse all server data from the v2 API.
    
        This method retrieves the full dataset from the v2 servers API and
        processes it into a structured format. It establishes relationships
        between servers and their related entities.
    
        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            # Parse each component using its type adapter
            parsed_data: dict[str, list[Any]] = {}
            for key, adapter in self._type_adapters.items():
                try:
>                   parsed_data[key] = adapter.validate_python(data[key])

src/nyord_vpn/api/v2_servers.py:259: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = TypeAdapter(list[Server])
object = [{'created_at': '2024-01-01T00:00:00Z', 'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'title': 'P2P', ...}], 'hostname': 'us1234.nordvpn.com', 'id': 1, ...}]

    def validate_python(
        self,
        object: Any,
        /,
        *,
        strict: bool | None = None,
        from_attributes: bool | None = None,
        context: dict[str, Any] | None = None,
        experimental_allow_partial: bool | Literal['off', 'on', 'trailing-strings'] = False,
    ) -> T:
        """Validate a Python object against the model.
    
        Args:
            object: The Python object to validate against the model.
            strict: Whether to strictly check types.
            from_attributes: Whether to extract data from object attributes.
            context: Additional context to pass to the validator.
            experimental_allow_partial: **Experimental** whether to enable
                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.
                * False / 'off': Default behavior, no partial validation.
                * True / 'on': Enable partial validation.
                * 'trailing-strings': Enable partial validation and allow trailing strings in the input.
    
        !!! note
            When using `TypeAdapter` with a Pydantic `dataclass`, the use of the `from_attributes`
            argument is not supported.
    
        Returns:
            The validated object.
        """
>       return self.validator.validate_python(
            object,
            strict=strict,
            from_attributes=from_attributes,
            context=context,
            allow_partial=experimental_allow_partial,
        )
E       pydantic_core._pydantic_core.ValidationError: 1 validation error for list[Server]
E       0.groups.0.type
E         Field required [type=missing, input_value={'id': 1, 'title': 'P2P',... '2024-01-01T00:00:00Z'}, input_type=dict]
E           For further information visit https://errors.pydantic.dev/2.10/v/missing

.venv/lib/python3.12/site-packages/pydantic/type_adapter.py:412: ValidationError

The above exception was the direct cause of the following exception:

sample_server = {'created_at': '2024-01-01T00:00:00Z', 'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'title': 'P2P', ...}], 'hostname': 'us1234.nordvpn.com', 'id': 1, ...}

    def test_get_servers(sample_server) -> None:
        """Test fetching servers from the API."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = {
                "servers": [sample_server],
                "groups": [sample_server["groups"][0]],
                "services": [],
                "locations": [sample_server["locations"][0]],
                "technologies": [sample_server["technologies"][0]],
            }
            mock_get.return_value = mock_response
    
            client = NordVPNAPI()
>           servers = client.get_servers()

tests/test_api.py:182: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/nyord_vpn/api/api.py:247: in get_servers
    result = self.servers.fetch_all()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v2_servers.NordVPNServersV2 object at 0x1129dc500>

    def fetch_all(
        self,
    ) -> tuple[
        list[Server], list[Group], list[Service], list[Location], list[Technology]
    ]:
        """Fetch and parse all server data from the v2 API.
    
        This method retrieves the full dataset from the v2 servers API and
        processes it into a structured format. It establishes relationships
        between servers and their related entities.
    
        Returns:
            A tuple containing lists of (servers, groups, services, locations, technologies).
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(SERVERS_V2_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            # Parse each component using its type adapter
            parsed_data: dict[str, list[Any]] = {}
            for key, adapter in self._type_adapters.items():
                try:
                    parsed_data[key] = adapter.validate_python(data[key])
                except (KeyError, ValueError, TypeError) as err:
                    logger.error(f"Failed to parse {key} data: {err}")
>                   raise VPNAPIError(
                        f"Failed to parse {key} data from v2 API",
                        details=str(err),
                        cause=err,
                    ) from err
E                   nyord_vpn.exceptions.VPNAPIError: Failed to parse servers data from v2 API
E                   Details: 1 validation error for list[Server]
E                   0.groups.0.type
E                     Field required [type=missing, input_value={'id': 1, 'title': 'P2P',... '2024-01-01T00:00:00Z'}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing
E                   Cause: 1 validation error for list[Server]
E                   0.groups.0.type
E                     Field required [type=missing, input_value={'id': 1, 'title': 'P2P',... '2024-01-01T00:00:00Z'}, input_type=dict]
E                       For further information visit https://errors.pydantic.dev/2.10/v/missing

src/nyord_vpn/api/v2_servers.py:262: VPNAPIError
----------------------------- Captured stdout call -----------------------------
[02/24/25 21:52:34] ERROR    2025-02-24 21:52:34.983 | ERROR   v2_servers.py:261
                             |                                                  
                             nyord_vpn.api.v2_servers:fetch_al                  
                             l:261 - Failed to parse servers                    
                             data: 1 validation error for                       
                             list[Server]                                       
                             0.groups.0.type                                    
                               Field required [type=missing,                    
                             input_value={'id': 1, 'title':                     
                             'P2P',...                                          
                             '2024-01-01T00:00:00Z'},                           
                             input_type=dict]                                   
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/                  
                             v/missing                                          
_______________________________ test_get_groups ________________________________
[gw0] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

self = <nyord_vpn.api.v1_groups.NordVPNGroupsV1 object at 0x10e05d190>

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.
    
        Returns:
            List of server groups.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
>           return [Group.model_validate(group) for group in data]
E           pydantic_core._pydantic_core.ValidationError: 1 validation error for Group
E           type
E             Field required [type=missing, input_value={'id': 1, 'title': 'P2P',... '2024-01-01T00:00:00Z'}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing

src/nyord_vpn/api/v1_groups.py:98: ValidationError

During handling of the above exception, another exception occurred:

sample_group = {'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'title': 'P2P', ...}

    def test_get_groups(sample_group) -> None:
        """Test fetching groups from the API."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = [sample_group]
            mock_get.return_value = mock_response
    
            client = NordVPNAPI()
>           groups = client.get_groups()

tests/test_api.py:145: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/nyord_vpn/api/api.py:189: in get_groups
    self._groups = self.groups.fetch_groups()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <nyord_vpn.api.v1_groups.NordVPNGroupsV1 object at 0x10e05d190>

    def fetch_groups(self) -> list[Group]:
        """Fetch available server groups from the v1 API.
    
        Returns:
            List of server groups.
    
        Raises:
            VPNAPIError: If the API request fails or returns invalid data.
    
        """
        try:
            response = requests.get(GROUPS_V1_ENDPOINT, timeout=self.timeout)
            response.raise_for_status()
            data = response.json()
    
            return [Group.model_validate(group) for group in data]
    
        except requests.exceptions.RequestException as e:
            logger.error(f"Failed to fetch NordVPN server groups: {e}")
            raise VPNAPIError(
                "Failed to fetch server groups from v1 API",
                details=str(e),
                cause=e,
            )
        except (ValueError, TypeError) as e:
            logger.error(f"Failed to parse NordVPN server groups: {e}")
>           raise VPNAPIError(
                "Failed to parse server groups from v1 API",
                details=str(e),
                cause=e,
            )
E           nyord_vpn.exceptions.VPNAPIError: Failed to parse server groups from v1 API
E           Details: 1 validation error for Group
E           type
E             Field required [type=missing, input_value={'id': 1, 'title': 'P2P',... '2024-01-01T00:00:00Z'}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing
E           Cause: 1 validation error for Group
E           type
E             Field required [type=missing, input_value={'id': 1, 'title': 'P2P',... '2024-01-01T00:00:00Z'}, input_type=dict]
E               For further information visit https://errors.pydantic.dev/2.10/v/missing

src/nyord_vpn/api/v1_groups.py:109: VPNAPIError
----------------------------- Captured stdout call -----------------------------
[02/24/25 21:52:35] ERROR    2025-02-24 21:52:35.018 | ERROR    v1_groups.py:108
                             |                                                  
                             nyord_vpn.api.v1_groups:fetch_grou                 
                             ps:108 - Failed to parse NordVPN                   
                             server groups: 1 validation error                  
                             for Group                                          
                             type                                               
                               Field required [type=missing,                    
                             input_value={'id': 1, 'title':                     
                             'P2P',... '2024-01-01T00:00:00Z'},                 
                             input_type=dict]                                   
                                 For further information visit                  
                             https://errors.pydantic.dev/2.10/v                 
                             /missing                                           
____________________________ test_server_filtering _____________________________
[gw3] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

server_manager = <nyord_vpn.network.server.ServerManager object at 0x10e87f9e0>
mock_api_client = <MagicMock spec='NordVPNAPIClient' id='4532724480'>

    def test_server_filtering(server_manager, mock_api_client) -> None:
        """Test server filtering in get_servers_cache."""
        # Mock API response with various server types
>       mock_api_client.get.return_value.json.return_value = [
            {
                "hostname": "tcp1.nordvpn.com",
                "status": "online",
                "load": 50,
                "country": {"code": "US", "name": "United States"},
                "technologies": [
                    {"id": 5, "name": "OpenVPN TCP", "status": "online"},
                ],
            },
            {
                "hostname": "tcp2.nordvpn.com",
                "status": "online",
                "load": 60,
                "country": {"code": "US", "name": "United States"},
                "technologies": [
                    {"id": 45, "name": "OpenVPN TCP Dedicated", "status": "online"},
                ],
            },
            {
                "hostname": "udp1.nordvpn.com",
                "status": "online",
                "load": 40,
                "country": {"code": "US", "name": "United States"},
                "technologies": [
                    {"id": 3, "name": "OpenVPN UDP", "status": "online"},
                ],
            },
            {
                "hostname": "offline1.nordvpn.com",
                "status": "offline",
                "load": 30,
                "country": {"code": "US", "name": "United States"},
                "technologies": [
                    {"id": 5, "name": "OpenVPN TCP", "status": "online"},
                ],
            },
        ]

tests/test_server_manager.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock spec='NordVPNAPIClient' id='4532724480'>, name = 'get'

    def __getattr__(self, name):
        if name in {'_mock_methods', '_mock_unsafe'}:
            raise AttributeError(name)
        elif self._mock_methods is not None:
            if name not in self._mock_methods or name in _all_magics:
>               raise AttributeError("Mock object has no attribute %r" % name)
E               AttributeError: Mock object has no attribute 'get'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:660: AttributeError
__________________________ test_get_servers_by_group ___________________________
[gw1] darwin -- Python 3.12.8 /Users/adam/Developer/vcs/github.twardoch/pub/nyord_vpn/.venv/bin/python

sample_api_response = {'groups': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'legacy_p2p', 'title': 'P2P', ...}], 'locati... 1, ...}], 'services': [{'created_at': '2024-01-01T00:00:00Z', 'id': 1, 'identifier': 'p2p', 'name': 'P2P', ...}], ...}

    def test_get_servers_by_group(sample_api_response) -> None:
        """Test filtering servers by group identifier."""
        with patch("requests.get") as mock_get:
            mock_response = MagicMock()
            mock_response.json.return_value = sample_api_response
            mock_get.return_value = mock_response
    
            client = NordVPNServersV2()
            servers, *_ = client.fetch_all()
    
            # Test finding P2P servers
            p2p_servers = get_servers_by_group(servers, "legacy_p2p")
>           assert len(p2p_servers) == 1
E           assert 0 == 1
E            +  where 0 = len([])

tests/test_v2_servers.py:271: AssertionError
============================= slowest 10 durations =============================
0.02s call     tests/test_api.py::test_get_countries
0.02s call     tests/test_api.py::test_get_servers
0.01s call     tests/test_v1_groups.py::test_get_groups_by_type
0.01s call     tests/test_api.py::test_get_groups
0.01s call     tests/test_v1_groups.py::test_fetch_groups
0.01s call     tests/test_api.py::test_get_technologies
0.01s call     tests/test_v1_groups.py::test_get_group_by_identifier
0.01s call     tests/test_v2_servers.py::test_fetch_all
0.01s call     tests/test_v2_servers.py::test_get_servers_by_country

(1 durations < 0.005s hidden.  Use -vv to show these durations.)
=========================== short test summary info ============================
FAILED tests/test_server_manager.py::test_openvpn_tcp_validation - AssertionE...
FAILED tests/test_v1_groups.py::test_get_groups_by_type - nyord_vpn.exception...
FAILED tests/test_v2_servers.py::test_get_servers_by_country - assert 0 == 1
FAILED tests/test_v2_servers.py::test_fetch_all - AssertionError: assert 0 == 1
FAILED tests/test_v1_groups.py::test_fetch_groups - nyord_vpn.exceptions.VPNA...
FAILED tests/test_api.py::test_get_countries - nyord_vpn.exceptions.VPNAPIErr...
FAILED tests/test_v1_groups.py::test_get_group_by_identifier - nyord_vpn.exce...
FAILED tests/test_api.py::test_get_servers - nyord_vpn.exceptions.VPNAPIError...
FAILED tests/test_api.py::test_get_groups - nyord_vpn.exceptions.VPNAPIError:...
FAILED tests/test_server_manager.py::test_server_filtering - AttributeError: ...
FAILED tests/test_v2_servers.py::test_get_servers_by_group - assert 0 == 1
ERROR tests/integration/test_config_loading.py
ERROR tests/integration/test_connection.py
ERROR tests/integration/test_errors.py
ERROR tests/integration/test_validation_integration.py
ERROR tests/test_client.py
ERROR tests/test_legacy_api.py
=================== 11 failed, 11 passed, 6 errors in 2.57s ====================

2025-02-24 21:52:35 - >>>
>>> Running repomix analysis...
>>> TODO: Check the output!
>>>
2025-02-24 21:52:36 - 
📦 Repomix v0.2.29

No custom config found at repomix.config.json or global config at /Users/adam/.config/repomix/repomix.config.json.
You can add a config file for additional settings. Please check https://github.com/yamadashy/repomix for more information.
⠙ Collecting files...
[2K[1A[2K[G⠹ Collecting files...
[2K[1A[2K[G⠸ Running security check...
[2K[1A[2K[G⠼ Running security check... (20/59) src/nyord_vpn/network/vpn_commands.py
[2K[1A[2K[G⠴ Processing files...
[2K[1A[2K[G⠦ Processing file... (12/59) src/nyord_vpn/core/__init__.py
[2K[1A[2K[G⠧ Processing file... (48/59) tests/test_v1_recommendations.py
[2K[1A[2K[G⠇ Calculating metrics...
[2K[1A[2K[G⠏ Calculating metrics...
[2K[1A[2K[G⠋ Calculating metrics...
[2K[1A[2K[G⠙ Calculating metrics...
[2K[1A[2K[G✔ Packing completed successfully!

📈 Top 5 Files by Character Count and Token Count:
──────────────────────────────────────────────────
1.  src/nyord_vpn/network/vpn.py (12,932 chars, 2,421 tokens)
2.  src/nyord_vpn/network/server.py (11,355 chars, 2,359 tokens)
3.  .cursor/rules/filetree.mdc (7,862 chars, 3,548 tokens)
4.  TODO.md (7,629 chars, 1,809 tokens)
5.  pyproject.toml (7,099 chars, 2,437 tokens)

🔎 Security Check:
──────────────────
✔ No suspicious files detected.

📊 Pack Summary:
────────────────
  Total Files: 59 files
  Total Chars: 140,478 chars
 Total Tokens: 34,285 tokens
       Output: nyord_vpn.txt
     Security: ✔ No suspicious files detected

🎉 All Done!
Your repository has been successfully packed.

💡 Repomix is now available in your browser! Try it at https://repomix.com

2025-02-24 21:52:36 - All checks completed
2025-02-24 21:52:36 - 
=== TODO.md ===
2025-02-24 21:52:36 - # TODO

A modern Python client for NordVPN with automatic API fallback support, providing both a CLI interface and a Python library.

```bash
# Install system requirements first
brew install openvpn  # macOS
sudo apt install openvpn  # Ubuntu/Debian
sudo dnf install openvpn  # Fedora/RHEL

# Then install and use the package
pip install nyord-vpn
export NORD_USER="username" NORD_PASSWORD="password"
nyord-vpn go de  # Connect to a German VPN
nyord-vpn info  # Check status
nyord-vpn bye  # Disconnect
```

## DEVELOPMENT

After each set of changes, update @TODO.md with what you've done (`- [x] `). Upgrade priorities for NEXT TODO (`- [!]`), re-think the normal TODO (`- [ ] `)

Periodically do:

```
uv venv; source .venv/bin/activate; uv pip install -e .[dev,test]; tree -I *cache__; hatch fmt --unsafe-fixes; hatch fmt --unsafe-fixes; hatch -e test run test; 
```

and react to the results. Use `uv pip...` instead of `pip...` if needed. 

## Working modality

You'll lead two experts: "Ideot" for creative, unorthodox ideas and "Critin" to critique flawed thinking and moderate for balanced discussions. The three of you shall illuminate knowledge with concise, beautiful responses, process methodically for clear answers, collaborate step-by-step, sharing thoughts and adapting. If errors are found, step back and focus on accuracy and progress.

Independently tackle challenges systematically, being adaptable and resourceful. Research deeply using all tools, revising to ensure conclusive, exhaustive, insightful results. When you're finished, print "Wait, but" to go back, think & reflect, revise & improvement what you've done (but don't invent functionality freely). Repeat this. Focus on minimal viable next versions of the code. Ship often and early. 

## General coding principles

Verify info. No assumptions. No apologies. No major invented changes. No unneeded confirmations or checks. Keep existing code and structures unless they need to change. No unnecessary updates or current implementation discussion. Avoid magic numbers, handle edge cases, use assertions to validate assumptions and catch potential errors early.

Every code can fail. Write code that fails gracefully and is UX friendly: uses retries (within reason), does not make stupid assumptions, tests successes, uses fallbacks and backoffs, and then, if the code needs to message the user, be clear and suggest to the user the next steps. Don't prompt the user to do something that the computer can obviously do. The code should ask the user only if there is a real decision to be made. And you should ask me only if a real decision is needed.  

## Keep track of paths

In every source file you create or edit, always maintain the up-to-date `this_file` record that shows the path of the current file relative to the root of the project. Place the `this_file` record near the top of the file, as a comment after the shebangs, or in the YAML Markdown frontmatter. Use these records for orientation. 

## Follow this style for Python

Follow PEP 8. Write clear names. Keep it simple (PEP 20). Use type hints, imperative docstrings (PEP 257), f-strings, and structural pattern matching. Extract repeated logic. Handle errors. Keep functions small. Prefer flat structures. Use pathlib, pydantic as needed. Write maintainable code. 

EVEN IF YOU'RE NOT prompted, always write a "verbose" mode logugu-based logging for debug purposes, write explanatory docstrings and comments that not only explain what a given item (module, function, method) does, but also why it does it, and where and how it's used elsewhere in the code. 

ONLY IF YOU ARE prompted, extend existing features in a way that adds complexity, or refactor in a way that may break things. Remember: minimal viable next version is always our goal. IF NOT PROMPTED, do NOT make such changes. 

For CLI Python scripts, use fire & rich, and start the script with 

```
#!/usr/bin/env -S uv run -s
# /// script
# dependencies = ["PKG1", "PKG2"]
# ///
# this_file: PATH_TO_CURRENT_FILE
```

# Nyord VPN Codebase Refactoring Specification

## Completed Tasks
- [x] Add module docstrings to all files
- [x] Rename `ConnectionError` to `VPNConnectionError`
- [x] Make boolean parameters keyword-only
- [x] Move main blocks to test files

## Remaining Tasks

### API Module (`src/nyord_vpn/api/`)

#### `src/nyord_vpn/api/api.py`

**Action**: Modify to make this the central API interface.

- [ ] Remove shebang and any commented-out code at the top
- [ ] Implement `NordVPNAPI` class with proper docstrings and type hints
- [ ] Add `find_best_server` method with v2 API support and v1 fallback
- [ ] Update v1 methods with deprecation notices and keyword-only arguments

#### `src/nyord_vpn/api/v1_*.py` files

**Action**: Keep but mark as deprecated and clean up.

- [ ] Add deprecation notices to docstrings
- [ ] Fix boolean positional arguments
- [ ] Fix ambiguous variable names
- [ ] Add proper docstrings to classes and methods
- [ ] Update error handling to use specific exceptions from exceptions.py

#### `src/nyord_vpn/api/v2_servers.py`

**Action**: Refine and improve.

- [ ] Fix linting issues, particularly ambiguous variable names (E741)
- [ ] Add proper docstrings to methods
- [ ] Add comprehensive type hints where missing

### Core Module (`src/nyord_vpn/core/`)

#### `src/nyord_vpn/core/api.py` and `src/nyord_vpn/core/base.py`

**Action**: Deprecate and eventually remove.

- [ ] Add deprecation warnings
- [ ] Fix boolean positional arguments and other linting issues

#### `src/nyord_vpn/core/client.py`

**Action**: Refactor significantly to use the new API.

- [ ] Update to use the new `NordVPNAPI` class
- [ ] Improve error handling and user feedback
- [ ] Break down complex methods into smaller helper functions
- [ ] Fix boolean arguments and other linting issues

### Network Module (`src/nyord_vpn/network/`)

#### `src/nyord_vpn/network/server.py`

**Action**: Refactor to use new API.

- [ ] Add type hints for functions and variables
- [ ] Replace random.randrange and random.choice with secrets module
- [ ] Address security issues in subprocess calls by validating input
- [ ] Reduce complexity by extracting helper functions

#### `src/nyord_vpn/network/vpn.py`

**Action**: Refactor for better maintainability.

- [ ] Make boolean arguments keyword-only
- [ ] Add type hints
- [ ] Add retry logic for connection attempts
- [ ] Break down complex methods
- [ ] Replace random.uniform with secrets.SystemRandom().uniform
- [ ] Improve error handling

#### `src/nyord_vpn/network/vpn_commands.py`

**Action**: Refactor for better usability.

- [ ] Create `OpenVPNConfig` dataclass
- [ ] Implement `get_openvpn_command` function with proper validation

### Utils Module (`src/nyord_vpn/utils/`)

#### `src/nyord_vpn/utils/templates.py`

**Action**: Simplify with tenacity.

- [ ] Implement retry logic with tenacity
- [ ] Break down complex functions into smaller ones
- [ ] Improve docstrings and type hints

### Main Module Files

#### `src/nyord_vpn/__main__.py`

**Action**: Update to use new API.

- [ ] Update CLI class to use the updated Client
- [ ] Improve error handling and user feedback

### Tests

**Action**: Update to reflect code changes.

- [ ] Update imports to use `VPNConnectionError` instead of `ConnectionError`
- [ ] Update test fixtures to match model requirements
- [ ] Fix validation errors in tests
- [ ] Update integration tests to use correct import paths

### Documentation

**Action**: Update documentation.

- [ ] Update README.md with installation and usage instructions
- [ ] Add API documentation
- [ ] Add usage examples


2025-02-24 21:52:36 -  M .cursor/rules/filetree.mdc
 M .cursor/rules/nyord-vpn.mdc
 M CLEANUP.txt
 M TODO.md
 M cleanup.py
 M nyord_vpn.txt
 M src/nyord_vpn/__init__.py
 M src/nyord_vpn/api/api.py
 M src/nyord_vpn/api/v1_countries.py
 M src/nyord_vpn/api/v1_groups.py
 M src/nyord_vpn/api/v1_recommendations.py
 M src/nyord_vpn/api/v1_technologies.py
 M src/nyord_vpn/api/v2_servers.py
 M src/nyord_vpn/core/api.py
 M src/nyord_vpn/core/base.py
 M src/nyord_vpn/core/client.py
 M src/nyord_vpn/exceptions.py
 M src/nyord_vpn/network/server.py
 M src/nyord_vpn/network/vpn.py
 M src/nyord_vpn/network/vpn_commands.py
 M src/nyord_vpn/storage/__init__.py
 M src/nyord_vpn/storage/models.py
 M tests/conftest.py
 M tests/test_server_manager.py
?? .specstory/history/2025-02-24_19-08-tracking-todo-and-progress-updates.md
?? .specstory/history/2025-02-24_19-49-review-and-update-project-documentation.md
?? .specstory/history/2025-02-24_20-10-task-management-for-nyord-vpn-project.md
?? .specstory/history/2025-02-24_20-54-placeholder-message.md
?? PROGRESS.md
?? src/nyord_vpn/api/__init__.py
?? tests/test_api.py
?? tests/test_v1_countries.py
?? tests/test_v1_groups.py
?? tests/test_v1_recommendations.py
?? tests/test_v1_technologies.py
?? tests/test_v2_servers.py

2025-02-24 21:52:36 - Changes detected in repository
2025-02-24 21:52:37 - [main 50c0ba6] Update repository files
 36 files changed, 16281 insertions(+), 4630 deletions(-)
 create mode 100644 .specstory/history/2025-02-24_19-08-tracking-todo-and-progress-updates.md
 create mode 100644 .specstory/history/2025-02-24_19-49-review-and-update-project-documentation.md
 create mode 100644 .specstory/history/2025-02-24_20-10-task-management-for-nyord-vpn-project.md
 create mode 100644 .specstory/history/2025-02-24_20-54-placeholder-message.md
 create mode 100644 PROGRESS.md
 create mode 100644 src/nyord_vpn/api/__init__.py
 create mode 100644 tests/test_api.py
 create mode 100644 tests/test_v1_countries.py
 create mode 100644 tests/test_v1_groups.py
 create mode 100644 tests/test_v1_recommendations.py
 create mode 100644 tests/test_v1_technologies.py
 create mode 100644 tests/test_v2_servers.py

2025-02-24 21:52:37 - Changes committed successfully
